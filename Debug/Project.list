
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005958  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08005b40  08005b40  00015b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800654c  0800654c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800654c  0800654c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800654c  0800654c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001dc  08006730  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006730  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8b0  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e46  00000000  00000000  0002cab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  0002f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a726  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0a9  00000000  00000000  0004a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097650  00000000  00000000  000587cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efe1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040fc  00000000  00000000  000efe70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08005b28 	.word	0x08005b28

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08005b28 	.word	0x08005b28

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	e002      	b.n	8000b70 <Delay+0x10>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f9      	bne.n	8000b6a <Delay+0xa>
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f829 	bl	8000be0 <LCD_BackLed_Control>
	LCD_Rst();
 8000b8e:	f000 f80f 	bl	8000bb0 <LCD_Rst>
	LCD_REG_Config();
 8000b92:	f000 f85f 	bl	8000c54 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ba0:	22f0      	movs	r2, #240	; 0xf0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 f9e6 	bl	8000f76 <LCD_Clear>
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <LCD_Rst+0x28>)
 8000bba:	f001 f9a5 	bl	8001f08 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <LCD_Rst+0x2c>)
 8000bc0:	f7ff ffce 	bl	8000b60 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <LCD_Rst+0x28>)
 8000bca:	f001 f99d 	bl	8001f08 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <LCD_Rst+0x2c>)
 8000bd0:	f7ff ffc6 	bl	8000b60 <Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40011800 	.word	0x40011800
 8000bdc:	0002bffc 	.word	0x0002bffc

08000be0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000bf8:	f001 f986 	bl	8001f08 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000bfc:	e005      	b.n	8000c0a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000c06:	f001 f97f 	bl	8001f08 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40011400 	.word	0x40011400

08000c18 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c22:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	8013      	strh	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <LCD_Write_Data+0x1c>)
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	8013      	strh	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	60020000 	.word	0x60020000

08000c54 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c58:	20cf      	movs	r0, #207	; 0xcf
 8000c5a:	f7ff ffdd 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ffe8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000c64:	2081      	movs	r0, #129	; 0x81
 8000c66:	f7ff ffe5 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000c6a:	2030      	movs	r0, #48	; 0x30
 8000c6c:	f7ff ffe2 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000c70:	20ed      	movs	r0, #237	; 0xed
 8000c72:	f7ff ffd1 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f7ff ffdc 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f7ff ffd9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000c82:	2012      	movs	r0, #18
 8000c84:	f7ff ffd6 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000c88:	2081      	movs	r0, #129	; 0x81
 8000c8a:	f7ff ffd3 	bl	8000c34 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000c8e:	20e8      	movs	r0, #232	; 0xe8
 8000c90:	f7ff ffc2 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000c94:	2085      	movs	r0, #133	; 0x85
 8000c96:	f7ff ffcd 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c9a:	2010      	movs	r0, #16
 8000c9c:	f7ff ffca 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f7ff ffc7 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000ca6:	20cb      	movs	r0, #203	; 0xcb
 8000ca8:	f7ff ffb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000cac:	2039      	movs	r0, #57	; 0x39
 8000cae:	f7ff ffc1 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000cb2:	202c      	movs	r0, #44	; 0x2c
 8000cb4:	f7ff ffbe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ffbb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000cbe:	2034      	movs	r0, #52	; 0x34
 8000cc0:	f7ff ffb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff ffb5 	bl	8000c34 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000cca:	20f7      	movs	r0, #247	; 0xf7
 8000ccc:	f7ff ffa4 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000cd0:	2020      	movs	r0, #32
 8000cd2:	f7ff ffaf 	bl	8000c34 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000cd6:	20ea      	movs	r0, #234	; 0xea
 8000cd8:	f7ff ff9e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ffa9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffa6 	bl	8000c34 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000ce8:	20b1      	movs	r0, #177	; 0xb1
 8000cea:	f7ff ff95 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ffa0 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000cf4:	201b      	movs	r0, #27
 8000cf6:	f7ff ff9d 	bl	8000c34 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000cfa:	20b6      	movs	r0, #182	; 0xb6
 8000cfc:	f7ff ff8c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d00:	200a      	movs	r0, #10
 8000d02:	f7ff ff97 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d06:	20a2      	movs	r0, #162	; 0xa2
 8000d08:	f7ff ff94 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d0c:	20c0      	movs	r0, #192	; 0xc0
 8000d0e:	f7ff ff83 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d12:	2035      	movs	r0, #53	; 0x35
 8000d14:	f7ff ff8e 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d18:	20c1      	movs	r0, #193	; 0xc1
 8000d1a:	f7ff ff7d 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d1e:	2011      	movs	r0, #17
 8000d20:	f7ff ff88 	bl	8000c34 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d24:	20c5      	movs	r0, #197	; 0xc5
 8000d26:	f7ff ff77 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d2a:	2045      	movs	r0, #69	; 0x45
 8000d2c:	f7ff ff82 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d30:	2045      	movs	r0, #69	; 0x45
 8000d32:	f7ff ff7f 	bl	8000c34 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d36:	20c7      	movs	r0, #199	; 0xc7
 8000d38:	f7ff ff6e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000d3c:	20a2      	movs	r0, #162	; 0xa2
 8000d3e:	f7ff ff79 	bl	8000c34 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d42:	20f2      	movs	r0, #242	; 0xf2
 8000d44:	f7ff ff68 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ff73 	bl	8000c34 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d4e:	2026      	movs	r0, #38	; 0x26
 8000d50:	f7ff ff62 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff ff6d 	bl	8000c34 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d5a:	20e0      	movs	r0, #224	; 0xe0
 8000d5c:	f7ff ff5c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000d60:	200f      	movs	r0, #15
 8000d62:	f7ff ff67 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000d66:	2026      	movs	r0, #38	; 0x26
 8000d68:	f7ff ff64 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000d6c:	2024      	movs	r0, #36	; 0x24
 8000d6e:	f7ff ff61 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000d72:	200b      	movs	r0, #11
 8000d74:	f7ff ff5e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000d78:	200e      	movs	r0, #14
 8000d7a:	f7ff ff5b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d7e:	2009      	movs	r0, #9
 8000d80:	f7ff ff58 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000d84:	2054      	movs	r0, #84	; 0x54
 8000d86:	f7ff ff55 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000d8a:	20a8      	movs	r0, #168	; 0xa8
 8000d8c:	f7ff ff52 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000d90:	2046      	movs	r0, #70	; 0x46
 8000d92:	f7ff ff4f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000d96:	200c      	movs	r0, #12
 8000d98:	f7ff ff4c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f7ff ff49 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000da2:	2009      	movs	r0, #9
 8000da4:	f7ff ff46 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000da8:	200f      	movs	r0, #15
 8000daa:	f7ff ff43 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dae:	2007      	movs	r0, #7
 8000db0:	f7ff ff40 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff3d 	bl	8000c34 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000dba:	20e1      	movs	r0, #225	; 0xe1
 8000dbc:	f7ff ff2c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff37 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f7ff ff34 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000dcc:	201b      	movs	r0, #27
 8000dce:	f7ff ff31 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff ff2e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f7ff ff2b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dde:	2007      	movs	r0, #7
 8000de0:	f7ff ff28 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000de4:	202a      	movs	r0, #42	; 0x2a
 8000de6:	f7ff ff25 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000dea:	2047      	movs	r0, #71	; 0x47
 8000dec:	f7ff ff22 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000df0:	2039      	movs	r0, #57	; 0x39
 8000df2:	f7ff ff1f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ff1c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f7ff ff19 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e02:	2006      	movs	r0, #6
 8000e04:	f7ff ff16 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f7ff ff13 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e0e:	2038      	movs	r0, #56	; 0x38
 8000e10:	f7ff ff10 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e14:	200f      	movs	r0, #15
 8000e16:	f7ff ff0d 	bl	8000c34 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e1a:	2036      	movs	r0, #54	; 0x36
 8000e1c:	f7ff fefc 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000e20:	20c8      	movs	r0, #200	; 0xc8
 8000e22:	f7ff ff07 	bl	8000c34 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e26:	202a      	movs	r0, #42	; 0x2a
 8000e28:	f7ff fef6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff01 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fefe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fefb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000e3e:	20ef      	movs	r0, #239	; 0xef
 8000e40:	f7ff fef8 	bl	8000c34 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e44:	202b      	movs	r0, #43	; 0x2b
 8000e46:	f7ff fee7 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fef2 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff feef 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff feec 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e5c:	203f      	movs	r0, #63	; 0x3f
 8000e5e:	f7ff fee9 	bl	8000c34 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000e62:	203a      	movs	r0, #58	; 0x3a
 8000e64:	f7ff fed8 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000e68:	2055      	movs	r0, #85	; 0x55
 8000e6a:	f7ff fee3 	bl	8000c34 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000e6e:	2011      	movs	r0, #17
 8000e70:	f7ff fed2 	bl	8000c18 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <LCD_REG_Config+0x230>)
 8000e76:	f7ff fe73 	bl	8000b60 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000e7a:	2029      	movs	r0, #41	; 0x29
 8000e7c:	f7ff fecc 	bl	8000c18 <LCD_Write_Cmd>
	
	
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0002bffc 	.word	0x0002bffc

08000e88 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000ea6:	202a      	movs	r0, #42	; 0x2a
 8000ea8:	f7ff feb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff febe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff feb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff feaf 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fea4 	bl	8000c34 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000eec:	202b      	movs	r0, #43	; 0x2b
 8000eee:	f7ff fe93 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe9b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe95 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	883b      	ldrh	r3, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b01      	subs	r3, #1
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe8c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f1c:	88ba      	ldrh	r2, [r7, #4]
 8000f1e:	883b      	ldrh	r3, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe81 	bl	8000c34 <LCD_Write_Data>
	
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}

08000f3a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f4a:	202c      	movs	r0, #44	; 0x2c
 8000f4c:	f7ff fe64 	bl	8000c18 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e006      	b.n	8000f64 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe6b 	bl	8000c34 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d3f4      	bcc.n	8000f56 <LCD_FillColor+0x1c>
		
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000f76:	b590      	push	{r4, r7, lr}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4608      	mov	r0, r1
 8000f80:	4611      	mov	r1, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	80bb      	strh	r3, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ff74 	bl	8000e88 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	883a      	ldrh	r2, [r7, #0]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	8b3b      	ldrh	r3, [r7, #24]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f7ff ffc3 	bl	8000f3a <LCD_FillColor>
	
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000fd4:	88b9      	ldrh	r1, [r7, #4]
 8000fd6:	88f8      	ldrh	r0, [r7, #6]
 8000fd8:	2310      	movs	r3, #16
 8000fda:	2208      	movs	r2, #8
 8000fdc:	f7ff ff54 	bl	8000e88 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fe0:	202c      	movs	r0, #44	; 0x2c
 8000fe2:	f7ff fe19 	bl	8000c18 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
 8000fea:	e023      	b.n	8001034 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <LCD_DrawChar+0x88>)
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	440a      	add	r2, r1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
 8001000:	e012      	b.n	8001028 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800100c:	201f      	movs	r0, #31
 800100e:	f7ff fe11 	bl	8000c34 <LCD_Write_Data>
 8001012:	e003      	b.n	800101c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001018:	f7ff fe0c 	bl	8000c34 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	3301      	adds	r3, #1
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9e9      	bls.n	8001002 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d9d8      	bls.n	8000fec <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08005b54 	.word	0x08005b54

08001048 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	603a      	str	r2, [r7, #0]
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	460b      	mov	r3, r1
 8001056:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001058:	e01c      	b.n	8001094 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2be8      	cmp	r3, #232	; 0xe8
 800105e:	d904      	bls.n	800106a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001060:	2300      	movs	r3, #0
 8001062:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	3310      	adds	r3, #16
 8001068:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001070:	d903      	bls.n	800107a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001072:	2300      	movs	r3, #0
 8001074:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001076:	2300      	movs	r3, #0
 8001078:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	88b9      	ldrh	r1, [r7, #4]
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9a 	bl	8000fbc <LCD_DrawChar>
		
		pStr ++;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	3308      	adds	r3, #8
 8001092:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1de      	bne.n	800105a <LCD_DrawString+0x12>
		
	}
	
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// printf() function
int __io_putchar(int ch)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 80010b6:	f107 010f 	add.w	r1, r7, #15
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010be:	2201      	movs	r2, #1
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <__io_putchar+0x28>)
 80010c2:	f001 fd4c 	bl	8002b5e <HAL_UART_Transmit>
  return ch;
 80010c6:	687b      	ldr	r3, [r7, #4]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000024c 	.word	0x2000024c

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fc11 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f81b 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f000 f8b7 	bl	8001254 <MX_GPIO_Init>
  MX_FSMC_Init();
 80010e6:	f000 f95f 	bl	80013a8 <MX_FSMC_Init>
  MX_I2C2_Init();
 80010ea:	f000 f85b 	bl	80011a4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80010ee:	f000 f887 	bl	8001200 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80010f2:	f7ff fd46 	bl	8000b82 <LCD_INIT>

  char name[] = "DAS, Ujaan";
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <main+0x40>)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fc:	c303      	stmia	r3!, {r0, r1}
 80010fe:	801a      	strh	r2, [r3, #0]
 8001100:	3302      	adds	r3, #2
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	701a      	strb	r2, [r3, #0]
  LCD_DrawString(0, 0, name);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	461a      	mov	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ff9b 	bl	8001048 <LCD_DrawString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001112:	e7fe      	b.n	8001112 <main+0x3e>
 8001114:	08005b48 	.word	0x08005b48

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	; 0x40
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2228      	movs	r2, #40	; 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 ffe8 	bl	80030fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001156:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f001 f84f 	bl	8002204 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800116c:	f000 f980 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fabc 	bl	8002708 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001196:	f000 f96b 	bl	8001470 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3740      	adds	r7, #64	; 0x40
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_I2C2_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_I2C2_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_I2C2_Init+0x50>)
 80011e2:	f000 fecb 	bl	8001f7c <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f940 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f8 	.word	0x200001f8
 80011f8:	40005800 	.word	0x40005800
 80011fc:	000186a0 	.word	0x000186a0

08001200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_USART1_UART_Init+0x50>)
 8001208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001238:	f001 fc41 	bl	8002abe <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001242:	f000 f915 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000024c 	.word	0x2000024c
 8001250:	40013800 	.word	0x40013800

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001268:	4b48      	ldr	r3, [pc, #288]	; (800138c <MX_GPIO_Init+0x138>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a47      	ldr	r2, [pc, #284]	; (800138c <MX_GPIO_Init+0x138>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b45      	ldr	r3, [pc, #276]	; (800138c <MX_GPIO_Init+0x138>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b42      	ldr	r3, [pc, #264]	; (800138c <MX_GPIO_Init+0x138>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a41      	ldr	r2, [pc, #260]	; (800138c <MX_GPIO_Init+0x138>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <MX_GPIO_Init+0x138>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001298:	4b3c      	ldr	r3, [pc, #240]	; (800138c <MX_GPIO_Init+0x138>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a3b      	ldr	r2, [pc, #236]	; (800138c <MX_GPIO_Init+0x138>)
 800129e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <MX_GPIO_Init+0x138>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <MX_GPIO_Init+0x138>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a35      	ldr	r2, [pc, #212]	; (800138c <MX_GPIO_Init+0x138>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b33      	ldr	r3, [pc, #204]	; (800138c <MX_GPIO_Init+0x138>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x138>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x138>)
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <MX_GPIO_Init+0x138>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e6:	482a      	ldr	r0, [pc, #168]	; (8001390 <MX_GPIO_Init+0x13c>)
 80012e8:	f000 fe0e 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2102      	movs	r1, #2
 80012f0:	4828      	ldr	r0, [pc, #160]	; (8001394 <MX_GPIO_Init+0x140>)
 80012f2:	f000 fe09 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : K2_Btn_Pin */
  GPIO_InitStruct.Pin = K2_Btn_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_GPIO_Init+0x144>)
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4619      	mov	r1, r3
 800130a:	4824      	ldr	r0, [pc, #144]	; (800139c <MX_GPIO_Init+0x148>)
 800130c:	f000 fc68 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001310:	2308      	movs	r3, #8
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_GPIO_Init+0x14c>)
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4619      	mov	r1, r3
 8001322:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_GPIO_Init+0x150>)
 8001324:	f000 fc5c 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4619      	mov	r1, r3
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <MX_GPIO_Init+0x13c>)
 8001342:	f000 fc4d 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4619      	mov	r1, r3
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_GPIO_Init+0x140>)
 800135e:	f000 fc3f 	bl	8001be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2009      	movs	r0, #9
 8001368:	f000 fc03 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800136c:	2009      	movs	r0, #9
 800136e:	f000 fc1c 	bl	8001baa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2028      	movs	r0, #40	; 0x28
 8001378:	f000 fbfb 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f000 fc14 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	40011400 	.word	0x40011400
 8001394:	40011800 	.word	0x40011800
 8001398:	10110000 	.word	0x10110000
 800139c:	40011000 	.word	0x40011000
 80013a0:	10310000 	.word	0x10310000
 80013a4:	40010800 	.word	0x40010800

080013a8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013c2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013c6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <MX_FSMC_Init+0xc0>)
 80013cc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013e2:	2210      	movs	r2, #16
 80013e4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_FSMC_Init+0xbc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_FSMC_Init+0xbc>)
 8001400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_FSMC_Init+0xbc>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_FSMC_Init+0xbc>)
 800140e:	2200      	movs	r2, #0
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_FSMC_Init+0xbc>)
 8001414:	2200      	movs	r2, #0
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_FSMC_Init+0xbc>)
 800141a:	2200      	movs	r2, #0
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800141e:	230f      	movs	r3, #15
 8001420:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001422:	230f      	movs	r3, #15
 8001424:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001426:	23ff      	movs	r3, #255	; 0xff
 8001428:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800142a:	230f      	movs	r3, #15
 800142c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800142e:	2310      	movs	r3, #16
 8001430:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001432:	2311      	movs	r3, #17
 8001434:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <MX_FSMC_Init+0xbc>)
 8001442:	f001 faef 	bl	8002a24 <HAL_SRAM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800144c:	f000 f810 	bl	8001470 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_FSMC_Init+0xc4>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <MX_FSMC_Init+0xc4>)
 8001456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000294 	.word	0x20000294
 8001468:	a0000104 	.word	0xa0000104
 800146c:	40010000 	.word	0x40010000

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_MspInit+0x5c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_MspInit+0x5c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_MspInit+0x5c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_MspInit+0x5c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_MspInit+0x60>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_MspInit+0x60>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000

080014e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a16      	ldr	r2, [pc, #88]	; (8001554 <HAL_I2C_MspInit+0x74>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d124      	bne.n	800154a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_I2C_MspInit+0x78>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_I2C_MspInit+0x78>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_I2C_MspInit+0x78>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001518:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800151c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151e:	2312      	movs	r3, #18
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <HAL_I2C_MspInit+0x7c>)
 800152e:	f000 fb57 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0x78>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0x78>)
 8001538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0x78>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005800 	.word	0x40005800
 8001558:	40021000 	.word	0x40021000
 800155c:	40010c00 	.word	0x40010c00

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_UART_MspInit+0x8c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d131      	bne.n	80015e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x90>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_UART_MspInit+0x90>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x90>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x90>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0x90>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_UART_MspInit+0x90>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <HAL_UART_MspInit+0x94>)
 80015c6:	f000 fb0b 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_UART_MspInit+0x94>)
 80015e0:	f000 fafe 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800

080015f8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_FSMC_MspInit+0x78>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d129      	bne.n	8001668 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_FSMC_MspInit+0x78>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_FSMC_MspInit+0x7c>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_FSMC_MspInit+0x7c>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_FSMC_MspInit+0x7c>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001632:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001636:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	4619      	mov	r1, r3
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <HAL_FSMC_MspInit+0x80>)
 8001648:	f000 faca 	bl	8001be0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800164c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001650:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4619      	mov	r1, r3
 8001660:	4806      	ldr	r0, [pc, #24]	; (800167c <HAL_FSMC_MspInit+0x84>)
 8001662:	f000 fabd 	bl	8001be0 <HAL_GPIO_Init>
 8001666:	e000      	b.n	800166a <HAL_FSMC_MspInit+0x72>
    return;
 8001668:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200002dc 	.word	0x200002dc
 8001674:	40021000 	.word	0x40021000
 8001678:	40011800 	.word	0x40011800
 800167c:	40011400 	.word	0x40011400

08001680 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001688:	f7ff ffb6 	bl	80015f8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 f957 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	int status = __HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <EXTI3_IRQHandler+0x30>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	607b      	str	r3, [r7, #4]
	if (status != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <EXTI3_IRQHandler+0x22>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <EXTI3_IRQHandler+0x30>)
 80016fc:	2208      	movs	r2, #8
 80016fe:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001700:	2008      	movs	r0, #8
 8001702:	f000 fc31 	bl	8001f68 <HAL_GPIO_EXTI_Callback>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001706:	2008      	movs	r0, #8
 8001708:	f000 fc16 	bl	8001f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010400 	.word	0x40010400

08001718 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K2_Btn_Pin);
 800171c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001720:	f000 fc0a 	bl	8001f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <_kill>:

int _kill(int pid, int sig)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001740:	f001 fcb2 	bl	80030a8 <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	2216      	movs	r2, #22
 8001748:	601a      	str	r2, [r3, #0]
	return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_exit>:

void _exit (int status)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800175e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffe7 	bl	8001736 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001768:	e7fe      	b.n	8001768 <_exit+0x12>

0800176a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e00a      	b.n	8001792 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800177c:	f3af 8000 	nop.w
 8001780:	4601      	mov	r1, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	60ba      	str	r2, [r7, #8]
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	dbf0      	blt.n	800177c <_read+0x12>
	}

return len;
 800179a:	687b      	ldr	r3, [r7, #4]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e009      	b.n	80017ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60ba      	str	r2, [r7, #8]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fc72 	bl	80010a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dbf1      	blt.n	80017b6 <_write+0x12>
	}
	return len;
 80017d2:	687b      	ldr	r3, [r7, #4]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_close>:

int _close(int file)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	return -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001802:	605a      	str	r2, [r3, #4]
	return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f001 fc1c 	bl	80030a8 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20010000 	.word	0x20010000
 800189c:	00000400 	.word	0x00000400
 80018a0:	200002e0 	.word	0x200002e0
 80018a4:	200002f8 	.word	0x200002f8

080018a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b4:	f7ff fff8 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ba:	490c      	ldr	r1, [pc, #48]	; (80018ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018d0:	4c09      	ldr	r4, [pc, #36]	; (80018f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f001 fbe9 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e2:	f7ff fbf7 	bl	80010d4 <main>
  bx lr
 80018e6:	4770      	bx	lr
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80018f0:	08006554 	.word	0x08006554
  ldr r2, =_sbss
 80018f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018f8:	200002f8 	.word	0x200002f8

080018fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_Init+0x28>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_Init+0x28>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f923 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	200f      	movs	r0, #15
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fdae 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f93b 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001968:	f000 f903 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000000 	.word	0x20000000
 8001984:	20000008 	.word	0x20000008
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x1c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x20>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_IncTick+0x20>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000008 	.word	0x20000008
 80019ac:	200002e4 	.word	0x200002e4

080019b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_GetTick+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	200002e4 	.word	0x200002e4

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4906      	ldr	r1, [pc, #24]	; (8001a5c <__NVIC_EnableIRQ+0x34>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b3c:	f7ff ff90 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff2d 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff42 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff90 	bl	8001ab4 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5f 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff35 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b08b      	sub	sp, #44	; 0x2c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e179      	b.n	8001ee8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8168 	bne.w	8001ee2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a96      	ldr	r2, [pc, #600]	; (8001e70 <HAL_GPIO_Init+0x290>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d05e      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c1c:	4a94      	ldr	r2, [pc, #592]	; (8001e70 <HAL_GPIO_Init+0x290>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d875      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c22:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <HAL_GPIO_Init+0x294>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d058      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c28:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <HAL_GPIO_Init+0x294>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d86f      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c2e:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d052      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d869      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c3a:	4a90      	ldr	r2, [pc, #576]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d04c      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c40:	4a8e      	ldr	r2, [pc, #568]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d863      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c46:	4a8e      	ldr	r2, [pc, #568]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d046      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c4c:	4a8c      	ldr	r2, [pc, #560]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d85d      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d82a      	bhi.n	8001cac <HAL_GPIO_Init+0xcc>
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d859      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <HAL_GPIO_Init+0x80>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cb5 	.word	0x08001cb5
 8001c68:	08001cc7 	.word	0x08001cc7
 8001c6c:	08001d09 	.word	0x08001d09
 8001c70:	08001d0f 	.word	0x08001d0f
 8001c74:	08001d0f 	.word	0x08001d0f
 8001c78:	08001d0f 	.word	0x08001d0f
 8001c7c:	08001d0f 	.word	0x08001d0f
 8001c80:	08001d0f 	.word	0x08001d0f
 8001c84:	08001d0f 	.word	0x08001d0f
 8001c88:	08001d0f 	.word	0x08001d0f
 8001c8c:	08001d0f 	.word	0x08001d0f
 8001c90:	08001d0f 	.word	0x08001d0f
 8001c94:	08001d0f 	.word	0x08001d0f
 8001c98:	08001d0f 	.word	0x08001d0f
 8001c9c:	08001d0f 	.word	0x08001d0f
 8001ca0:	08001d0f 	.word	0x08001d0f
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cd1 	.word	0x08001cd1
 8001cac:	4a75      	ldr	r2, [pc, #468]	; (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cb2:	e02c      	b.n	8001d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e029      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e024      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e01f      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	330c      	adds	r3, #12
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e01a      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e013      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	611a      	str	r2, [r3, #16]
          break;
 8001cfa:	e009      	b.n	8001d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	615a      	str	r2, [r3, #20]
          break;
 8001d06:	e003      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          break;
 8001d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	d801      	bhi.n	8001d1a <HAL_GPIO_Init+0x13a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_Init+0x13e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2bff      	cmp	r3, #255	; 0xff
 8001d24:	d802      	bhi.n	8001d2c <HAL_GPIO_Init+0x14c>
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x152>
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3b08      	subs	r3, #8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	210f      	movs	r1, #15
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80c1 	beq.w	8001ee2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d60:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a48      	ldr	r2, [pc, #288]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d78:	4a44      	ldr	r2, [pc, #272]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3c      	ldr	r2, [pc, #240]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d01f      	beq.n	8001de4 <HAL_GPIO_Init+0x204>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_GPIO_Init+0x2b4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d019      	beq.n	8001de0 <HAL_GPIO_Init+0x200>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d013      	beq.n	8001ddc <HAL_GPIO_Init+0x1fc>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a39      	ldr	r2, [pc, #228]	; (8001e9c <HAL_GPIO_Init+0x2bc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00d      	beq.n	8001dd8 <HAL_GPIO_Init+0x1f8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <HAL_GPIO_Init+0x1f4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a37      	ldr	r2, [pc, #220]	; (8001ea4 <HAL_GPIO_Init+0x2c4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_GPIO_Init+0x1f0>
 8001dcc:	2305      	movs	r3, #5
 8001dce:	e00a      	b.n	8001de6 <HAL_GPIO_Init+0x206>
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	e008      	b.n	8001de6 <HAL_GPIO_Init+0x206>
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	e006      	b.n	8001de6 <HAL_GPIO_Init+0x206>
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e004      	b.n	8001de6 <HAL_GPIO_Init+0x206>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e002      	b.n	8001de6 <HAL_GPIO_Init+0x206>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_GPIO_Init+0x206>
 8001de4:	2300      	movs	r3, #0
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	f002 0203 	and.w	r2, r2, #3
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	4093      	lsls	r3, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001df6:	4925      	ldr	r1, [pc, #148]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4924      	ldr	r1, [pc, #144]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4920      	ldr	r1, [pc, #128]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	491a      	ldr	r1, [pc, #104]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4916      	ldr	r1, [pc, #88]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d025      	beq.n	8001eac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4910      	ldr	r1, [pc, #64]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
 8001e6c:	e025      	b.n	8001eba <HAL_GPIO_Init+0x2da>
 8001e6e:	bf00      	nop
 8001e70:	10320000 	.word	0x10320000
 8001e74:	10310000 	.word	0x10310000
 8001e78:	10220000 	.word	0x10220000
 8001e7c:	10210000 	.word	0x10210000
 8001e80:	10120000 	.word	0x10120000
 8001e84:	10110000 	.word	0x10110000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40010800 	.word	0x40010800
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40011400 	.word	0x40011400
 8001ea0:	40011800 	.word	0x40011800
 8001ea4:	40011c00 	.word	0x40011c00
 8001ea8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	4913      	ldr	r1, [pc, #76]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4909      	ldr	r1, [pc, #36]	; (8001f04 <HAL_GPIO_Init+0x324>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f47f ae7e 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	372c      	adds	r7, #44	; 0x2c
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f24:	e003      	b.n	8001f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	041a      	lsls	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f806 	bl	8001f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e12b      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fa9c 	bl	80014e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f000 fcda 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a81      	ldr	r2, [pc, #516]	; (80021f0 <HAL_I2C_Init+0x274>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d807      	bhi.n	8002000 <HAL_I2C_Init+0x84>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a80      	ldr	r2, [pc, #512]	; (80021f4 <HAL_I2C_Init+0x278>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e006      	b.n	800200e <HAL_I2C_Init+0x92>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a7d      	ldr	r2, [pc, #500]	; (80021f8 <HAL_I2C_Init+0x27c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0e7      	b.n	80021e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a78      	ldr	r2, [pc, #480]	; (80021fc <HAL_I2C_Init+0x280>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_I2C_Init+0x274>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d802      	bhi.n	8002050 <HAL_I2C_Init+0xd4>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	e009      	b.n	8002064 <HAL_I2C_Init+0xe8>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	4a69      	ldr	r2, [pc, #420]	; (8002200 <HAL_I2C_Init+0x284>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	3301      	adds	r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	495c      	ldr	r1, [pc, #368]	; (80021f0 <HAL_I2C_Init+0x274>)
 8002080:	428b      	cmp	r3, r1
 8002082:	d819      	bhi.n	80020b8 <HAL_I2C_Init+0x13c>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002098:	400b      	ands	r3, r1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_I2C_Init+0x138>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e59      	subs	r1, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	e051      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b4:	2304      	movs	r3, #4
 80020b6:	e04f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d111      	bne.n	80020e4 <HAL_I2C_Init+0x168>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e012      	b.n	800210a <HAL_I2C_Init+0x18e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	0099      	lsls	r1, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Init+0x196>
 800210e:	2301      	movs	r3, #1
 8002110:	e022      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <HAL_I2C_Init+0x1bc>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e58      	subs	r0, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	440b      	add	r3, r1
 8002128:	fbb0 f3f3 	udiv	r3, r0, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002136:	e00f      	b.n	8002158 <HAL_I2C_Init+0x1dc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6809      	ldr	r1, [r1, #0]
 800215c:	4313      	orrs	r3, r2
 800215e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6911      	ldr	r1, [r2, #16]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	000186a0 	.word	0x000186a0
 80021f4:	001e847f 	.word	0x001e847f
 80021f8:	003d08ff 	.word	0x003d08ff
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e272      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002224:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b04      	cmp	r3, #4
 800222e:	d00c      	beq.n	800224a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002230:	4b8f      	ldr	r3, [pc, #572]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d112      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
 800223c:	4b8c      	ldr	r3, [pc, #560]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4b89      	ldr	r3, [pc, #548]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06c      	beq.n	8002330 <HAL_RCC_OscConfig+0x12c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d168      	bne.n	8002330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e24c      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x76>
 800226c:	4b80      	ldr	r3, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b78      	ldr	r3, [pc, #480]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a77      	ldr	r2, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0xbc>
 80022a6:	4b72      	ldr	r3, [pc, #456]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a71      	ldr	r2, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 80022c0:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a67      	ldr	r2, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fb66 	bl	80019b0 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fb62 	bl	80019b0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e200      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe4>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fb52 	bl	80019b0 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff fb4e 	bl	80019b0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1ec      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x10c>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1c0      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4939      	ldr	r1, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff fb07 	bl	80019b0 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff fb03 	bl	80019b0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1a1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4927      	ldr	r1, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fae6 	bl	80019b0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7ff fae2 	bl	80019b0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e180      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03a      	beq.n	8002488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d019      	beq.n	800244e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fac6 	bl	80019b0 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fac2 	bl	80019b0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e160      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002446:	2001      	movs	r0, #1
 8002448:	f000 face 	bl	80029e8 <RCC_Delay>
 800244c:	e01c      	b.n	8002488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7ff faac 	bl	80019b0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245a:	e00f      	b.n	800247c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7ff faa8 	bl	80019b0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d908      	bls.n	800247c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e146      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	42420000 	.word	0x42420000
 8002478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e9      	bne.n	800245c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a6 	beq.w	80025e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a87      	ldr	r2, [pc, #540]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b85      	ldr	r3, [pc, #532]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ce:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7ff fa69 	bl	80019b0 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7ff fa65 	bl	80019b0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e103      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b75      	ldr	r3, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x312>
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e02d      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x334>
 800251e:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x356>
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a60      	ldr	r2, [pc, #384]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 800255a:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a5a      	ldr	r2, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff fa19 	bl	80019b0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff fa15 	bl	80019b0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0b1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x37e>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fa03 	bl	80019b0 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff f9ff 	bl	80019b0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e09b      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b3c      	ldr	r3, [pc, #240]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d061      	beq.n	80026bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d146      	bne.n	800268e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff f9d3 	bl	80019b0 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff f9cf 	bl	80019b0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e06d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d108      	bne.n	8002648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4921      	ldr	r1, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a19      	ldr	r1, [r3, #32]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	430b      	orrs	r3, r1
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff f9a3 	bl	80019b0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff f99f 	bl	80019b0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x46a>
 800268c:	e035      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f98c 	bl	80019b0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7ff f988 	bl	80019b0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e026      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x498>
 80026ba:	e01e      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e019      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x500>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d0      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800276e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e073      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7ff f8da 	bl	80019b0 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7ff f8d6 	bl	80019b0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e053      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1cc>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f838 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08006144 	.word	0x08006144
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x30>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x36>
 800290a:	e027      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	e027      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0c5b      	lsrs	r3, r3, #17
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	fb03 f202 	mul.w	r2, r3, r2
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e004      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	613b      	str	r3, [r7, #16]
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800295e:	613b      	str	r3, [r7, #16]
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	693b      	ldr	r3, [r7, #16]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	007a1200 	.word	0x007a1200
 8002978:	0800615c 	.word	0x0800615c
 800297c:	0800616c 	.word	0x0800616c
 8002980:	003d0900 	.word	0x003d0900

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b02      	ldr	r3, [pc, #8]	; (8002994 <HAL_RCC_GetHCLKFreq+0x10>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff2 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08006154 	.word	0x08006154

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffde 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08006154 	.word	0x08006154

080029e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCC_Delay+0x34>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <RCC_Delay+0x38>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a04:	bf00      	nop
  }
  while (Delay --);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	60fa      	str	r2, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <RCC_Delay+0x1c>
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_SRAM_Init+0x1c>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3e:	d101      	bne.n	8002a44 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e038      	b.n	8002ab6 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7fe fe11 	bl	8001680 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3308      	adds	r3, #8
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f000 fa4d 	bl	8002f08 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	f000 faaf 	bl	8002fdc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6858      	ldr	r0, [r3, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f000 fad4 	bl	8003038 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	f041 0101 	orr.w	r1, r1, #1
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e042      	b.n	8002b56 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7fe fd3b 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2224      	movs	r2, #36	; 0x24
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f972 	bl	8002dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b08a      	sub	sp, #40	; 0x28
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d175      	bne.n	8002c6a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_UART_Transmit+0x2c>
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06e      	b.n	8002c6c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2221      	movs	r2, #33	; 0x21
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe ff08 	bl	80019b0 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	d108      	bne.n	8002bca <HAL_UART_Transmit+0x6c>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e003      	b.n	8002bd2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bd2:	e02e      	b.n	8002c32 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f848 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e03a      	b.n	8002c6c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e007      	b.n	8002c24 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3301      	adds	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1cb      	bne.n	8002bd4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f814 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e006      	b.n	8002c6c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
  }
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c84:	e03b      	b.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c8c:	d037      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7fe fe8f 	bl	80019b0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e03a      	b.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d023      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d020      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d01d      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d116      	bne.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f81d 	bl	8002d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00f      	b.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d0b4      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b095      	sub	sp, #84	; 0x54
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d4e:	643a      	str	r2, [r7, #64]	; 0x40
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e5      	bne.n	8002d2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3314      	adds	r3, #20
 8002d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e5      	bne.n	8002d62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d119      	bne.n	8002dd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	330c      	adds	r3, #12
 8002da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f023 0310 	bic.w	r3, r3, #16
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dbe:	61ba      	str	r2, [r7, #24]
 8002dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	613b      	str	r3, [r7, #16]
   return(result);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e5      	bne.n	8002d9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002de0:	bf00      	nop
 8002de2:	3754      	adds	r7, #84	; 0x54
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
	...

08002dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e26:	f023 030c 	bic.w	r3, r3, #12
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <UART_SetConfig+0x114>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7ff fdb4 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	e002      	b.n	8002e62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7ff fd9c 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8002e60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <UART_SetConfig+0x118>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	0119      	lsls	r1, r3, #4
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <UART_SetConfig+0x118>)
 8002e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2064      	movs	r0, #100	; 0x64
 8002ea2:	fb00 f303 	mul.w	r3, r0, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	3332      	adds	r3, #50	; 0x32
 8002eac:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <UART_SetConfig+0x118>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb8:	4419      	add	r1, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009a      	lsls	r2, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <UART_SetConfig+0x118>)
 8002ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2064      	movs	r0, #100	; 0x64
 8002eda:	fb00 f303 	mul.w	r3, r0, r3
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	3332      	adds	r3, #50	; 0x32
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <UART_SetConfig+0x118>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	440a      	add	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40013800 	.word	0x40013800
 8002f04:	51eb851f 	.word	0x51eb851f

08002f08 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	f023 0101 	bic.w	r1, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d102      	bne.n	8002f38 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e001      	b.n	8002f3c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002f48:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002f4e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002f54:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002f5a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002f60:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002f66:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002f6c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002f72:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002f78:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <FSMC_NORSRAM_Init+0xd0>)
 8002f98:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002fa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	ea02 0103 	and.w	r1, r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4319      	orrs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0008fb7f 	.word	0x0008fb7f

08002fdc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8002ff2:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8002ffa:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8003002:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	3b01      	subs	r3, #1
 800300a:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 800300c:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	3b02      	subs	r3, #2
 8003014:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8003016:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8003022:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
	...

08003038 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800304c:	d11d      	bne.n	800308a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	6811      	ldr	r1, [r2, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	6852      	ldr	r2, [r2, #4]
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	4311      	orrs	r1, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	6892      	ldr	r2, [r2, #8]
 800306a:	0212      	lsls	r2, r2, #8
 800306c:	4311      	orrs	r1, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	6992      	ldr	r2, [r2, #24]
 8003072:	4311      	orrs	r1, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	68d2      	ldr	r2, [r2, #12]
 8003078:	0412      	lsls	r2, r2, #16
 800307a:	430a      	orrs	r2, r1
 800307c:	ea43 0102 	orr.w	r1, r3, r2
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003088:	e005      	b.n	8003096 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	cff00000 	.word	0xcff00000

080030a8 <__errno>:
 80030a8:	4b01      	ldr	r3, [pc, #4]	; (80030b0 <__errno+0x8>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	2600      	movs	r6, #0
 80030b8:	4d0c      	ldr	r5, [pc, #48]	; (80030ec <__libc_init_array+0x38>)
 80030ba:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <__libc_init_array+0x3c>)
 80030bc:	1b64      	subs	r4, r4, r5
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	f002 fd30 	bl	8005b28 <_init>
 80030c8:	2600      	movs	r6, #0
 80030ca:	4d0a      	ldr	r5, [pc, #40]	; (80030f4 <__libc_init_array+0x40>)
 80030cc:	4c0a      	ldr	r4, [pc, #40]	; (80030f8 <__libc_init_array+0x44>)
 80030ce:	1b64      	subs	r4, r4, r5
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	0800654c 	.word	0x0800654c
 80030f0:	0800654c 	.word	0x0800654c
 80030f4:	0800654c 	.word	0x0800654c
 80030f8:	08006550 	.word	0x08006550

080030fc <memset>:
 80030fc:	4603      	mov	r3, r0
 80030fe:	4402      	add	r2, r0
 8003100:	4293      	cmp	r3, r2
 8003102:	d100      	bne.n	8003106 <memset+0xa>
 8003104:	4770      	bx	lr
 8003106:	f803 1b01 	strb.w	r1, [r3], #1
 800310a:	e7f9      	b.n	8003100 <memset+0x4>

0800310c <__cvt>:
 800310c:	2b00      	cmp	r3, #0
 800310e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003112:	461f      	mov	r7, r3
 8003114:	bfbb      	ittet	lt
 8003116:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800311a:	461f      	movlt	r7, r3
 800311c:	2300      	movge	r3, #0
 800311e:	232d      	movlt	r3, #45	; 0x2d
 8003120:	b088      	sub	sp, #32
 8003122:	4614      	mov	r4, r2
 8003124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003126:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003128:	7013      	strb	r3, [r2, #0]
 800312a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800312c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003130:	f023 0820 	bic.w	r8, r3, #32
 8003134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003138:	d005      	beq.n	8003146 <__cvt+0x3a>
 800313a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800313e:	d100      	bne.n	8003142 <__cvt+0x36>
 8003140:	3501      	adds	r5, #1
 8003142:	2302      	movs	r3, #2
 8003144:	e000      	b.n	8003148 <__cvt+0x3c>
 8003146:	2303      	movs	r3, #3
 8003148:	aa07      	add	r2, sp, #28
 800314a:	9204      	str	r2, [sp, #16]
 800314c:	aa06      	add	r2, sp, #24
 800314e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003152:	e9cd 3500 	strd	r3, r5, [sp]
 8003156:	4622      	mov	r2, r4
 8003158:	463b      	mov	r3, r7
 800315a:	f000 fcc5 	bl	8003ae8 <_dtoa_r>
 800315e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003162:	4606      	mov	r6, r0
 8003164:	d102      	bne.n	800316c <__cvt+0x60>
 8003166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003168:	07db      	lsls	r3, r3, #31
 800316a:	d522      	bpl.n	80031b2 <__cvt+0xa6>
 800316c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003170:	eb06 0905 	add.w	r9, r6, r5
 8003174:	d110      	bne.n	8003198 <__cvt+0x8c>
 8003176:	7833      	ldrb	r3, [r6, #0]
 8003178:	2b30      	cmp	r3, #48	; 0x30
 800317a:	d10a      	bne.n	8003192 <__cvt+0x86>
 800317c:	2200      	movs	r2, #0
 800317e:	2300      	movs	r3, #0
 8003180:	4620      	mov	r0, r4
 8003182:	4639      	mov	r1, r7
 8003184:	f7fd fc7c 	bl	8000a80 <__aeabi_dcmpeq>
 8003188:	b918      	cbnz	r0, 8003192 <__cvt+0x86>
 800318a:	f1c5 0501 	rsb	r5, r5, #1
 800318e:	f8ca 5000 	str.w	r5, [sl]
 8003192:	f8da 3000 	ldr.w	r3, [sl]
 8003196:	4499      	add	r9, r3
 8003198:	2200      	movs	r2, #0
 800319a:	2300      	movs	r3, #0
 800319c:	4620      	mov	r0, r4
 800319e:	4639      	mov	r1, r7
 80031a0:	f7fd fc6e 	bl	8000a80 <__aeabi_dcmpeq>
 80031a4:	b108      	cbz	r0, 80031aa <__cvt+0x9e>
 80031a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80031aa:	2230      	movs	r2, #48	; 0x30
 80031ac:	9b07      	ldr	r3, [sp, #28]
 80031ae:	454b      	cmp	r3, r9
 80031b0:	d307      	bcc.n	80031c2 <__cvt+0xb6>
 80031b2:	4630      	mov	r0, r6
 80031b4:	9b07      	ldr	r3, [sp, #28]
 80031b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80031b8:	1b9b      	subs	r3, r3, r6
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	b008      	add	sp, #32
 80031be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	9107      	str	r1, [sp, #28]
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e7f0      	b.n	80031ac <__cvt+0xa0>

080031ca <__exponent>:
 80031ca:	4603      	mov	r3, r0
 80031cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ce:	2900      	cmp	r1, #0
 80031d0:	f803 2b02 	strb.w	r2, [r3], #2
 80031d4:	bfb6      	itet	lt
 80031d6:	222d      	movlt	r2, #45	; 0x2d
 80031d8:	222b      	movge	r2, #43	; 0x2b
 80031da:	4249      	neglt	r1, r1
 80031dc:	2909      	cmp	r1, #9
 80031de:	7042      	strb	r2, [r0, #1]
 80031e0:	dd2b      	ble.n	800323a <__exponent+0x70>
 80031e2:	f10d 0407 	add.w	r4, sp, #7
 80031e6:	46a4      	mov	ip, r4
 80031e8:	270a      	movs	r7, #10
 80031ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80031ee:	460a      	mov	r2, r1
 80031f0:	46a6      	mov	lr, r4
 80031f2:	fb07 1516 	mls	r5, r7, r6, r1
 80031f6:	2a63      	cmp	r2, #99	; 0x63
 80031f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80031fc:	4631      	mov	r1, r6
 80031fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003202:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003206:	dcf0      	bgt.n	80031ea <__exponent+0x20>
 8003208:	3130      	adds	r1, #48	; 0x30
 800320a:	f1ae 0502 	sub.w	r5, lr, #2
 800320e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003212:	4629      	mov	r1, r5
 8003214:	1c44      	adds	r4, r0, #1
 8003216:	4561      	cmp	r1, ip
 8003218:	d30a      	bcc.n	8003230 <__exponent+0x66>
 800321a:	f10d 0209 	add.w	r2, sp, #9
 800321e:	eba2 020e 	sub.w	r2, r2, lr
 8003222:	4565      	cmp	r5, ip
 8003224:	bf88      	it	hi
 8003226:	2200      	movhi	r2, #0
 8003228:	4413      	add	r3, r2
 800322a:	1a18      	subs	r0, r3, r0
 800322c:	b003      	add	sp, #12
 800322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003230:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003234:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003238:	e7ed      	b.n	8003216 <__exponent+0x4c>
 800323a:	2330      	movs	r3, #48	; 0x30
 800323c:	3130      	adds	r1, #48	; 0x30
 800323e:	7083      	strb	r3, [r0, #2]
 8003240:	70c1      	strb	r1, [r0, #3]
 8003242:	1d03      	adds	r3, r0, #4
 8003244:	e7f1      	b.n	800322a <__exponent+0x60>
	...

08003248 <_printf_float>:
 8003248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324c:	b091      	sub	sp, #68	; 0x44
 800324e:	460c      	mov	r4, r1
 8003250:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003254:	4616      	mov	r6, r2
 8003256:	461f      	mov	r7, r3
 8003258:	4605      	mov	r5, r0
 800325a:	f001 fa33 	bl	80046c4 <_localeconv_r>
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	9309      	str	r3, [sp, #36]	; 0x24
 8003264:	f7fc ffe0 	bl	8000228 <strlen>
 8003268:	2300      	movs	r3, #0
 800326a:	930e      	str	r3, [sp, #56]	; 0x38
 800326c:	f8d8 3000 	ldr.w	r3, [r8]
 8003270:	900a      	str	r0, [sp, #40]	; 0x28
 8003272:	3307      	adds	r3, #7
 8003274:	f023 0307 	bic.w	r3, r3, #7
 8003278:	f103 0208 	add.w	r2, r3, #8
 800327c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003280:	f8d4 b000 	ldr.w	fp, [r4]
 8003284:	f8c8 2000 	str.w	r2, [r8]
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003290:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003294:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003298:	930b      	str	r3, [sp, #44]	; 0x2c
 800329a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800329e:	4640      	mov	r0, r8
 80032a0:	4b9c      	ldr	r3, [pc, #624]	; (8003514 <_printf_float+0x2cc>)
 80032a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032a4:	f7fd fc1e 	bl	8000ae4 <__aeabi_dcmpun>
 80032a8:	bb70      	cbnz	r0, 8003308 <_printf_float+0xc0>
 80032aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ae:	4640      	mov	r0, r8
 80032b0:	4b98      	ldr	r3, [pc, #608]	; (8003514 <_printf_float+0x2cc>)
 80032b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032b4:	f7fd fbf8 	bl	8000aa8 <__aeabi_dcmple>
 80032b8:	bb30      	cbnz	r0, 8003308 <_printf_float+0xc0>
 80032ba:	2200      	movs	r2, #0
 80032bc:	2300      	movs	r3, #0
 80032be:	4640      	mov	r0, r8
 80032c0:	4651      	mov	r1, sl
 80032c2:	f7fd fbe7 	bl	8000a94 <__aeabi_dcmplt>
 80032c6:	b110      	cbz	r0, 80032ce <_printf_float+0x86>
 80032c8:	232d      	movs	r3, #45	; 0x2d
 80032ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <_printf_float+0x2d0>)
 80032d0:	4892      	ldr	r0, [pc, #584]	; (800351c <_printf_float+0x2d4>)
 80032d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80032d6:	bf94      	ite	ls
 80032d8:	4698      	movls	r8, r3
 80032da:	4680      	movhi	r8, r0
 80032dc:	2303      	movs	r3, #3
 80032de:	f04f 0a00 	mov.w	sl, #0
 80032e2:	6123      	str	r3, [r4, #16]
 80032e4:	f02b 0304 	bic.w	r3, fp, #4
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	4633      	mov	r3, r6
 80032ec:	4621      	mov	r1, r4
 80032ee:	4628      	mov	r0, r5
 80032f0:	9700      	str	r7, [sp, #0]
 80032f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80032f4:	f000 f9d4 	bl	80036a0 <_printf_common>
 80032f8:	3001      	adds	r0, #1
 80032fa:	f040 8090 	bne.w	800341e <_printf_float+0x1d6>
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003302:	b011      	add	sp, #68	; 0x44
 8003304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003308:	4642      	mov	r2, r8
 800330a:	4653      	mov	r3, sl
 800330c:	4640      	mov	r0, r8
 800330e:	4651      	mov	r1, sl
 8003310:	f7fd fbe8 	bl	8000ae4 <__aeabi_dcmpun>
 8003314:	b148      	cbz	r0, 800332a <_printf_float+0xe2>
 8003316:	f1ba 0f00 	cmp.w	sl, #0
 800331a:	bfb8      	it	lt
 800331c:	232d      	movlt	r3, #45	; 0x2d
 800331e:	4880      	ldr	r0, [pc, #512]	; (8003520 <_printf_float+0x2d8>)
 8003320:	bfb8      	it	lt
 8003322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003326:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <_printf_float+0x2dc>)
 8003328:	e7d3      	b.n	80032d2 <_printf_float+0x8a>
 800332a:	6863      	ldr	r3, [r4, #4]
 800332c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	d142      	bne.n	80033ba <_printf_float+0x172>
 8003334:	2306      	movs	r3, #6
 8003336:	6063      	str	r3, [r4, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	9206      	str	r2, [sp, #24]
 800333c:	aa0e      	add	r2, sp, #56	; 0x38
 800333e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003342:	aa0d      	add	r2, sp, #52	; 0x34
 8003344:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003348:	9203      	str	r2, [sp, #12]
 800334a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800334e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	4642      	mov	r2, r8
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4628      	mov	r0, r5
 800335c:	4653      	mov	r3, sl
 800335e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003360:	f7ff fed4 	bl	800310c <__cvt>
 8003364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003366:	4680      	mov	r8, r0
 8003368:	2947      	cmp	r1, #71	; 0x47
 800336a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800336c:	d108      	bne.n	8003380 <_printf_float+0x138>
 800336e:	1cc8      	adds	r0, r1, #3
 8003370:	db02      	blt.n	8003378 <_printf_float+0x130>
 8003372:	6863      	ldr	r3, [r4, #4]
 8003374:	4299      	cmp	r1, r3
 8003376:	dd40      	ble.n	80033fa <_printf_float+0x1b2>
 8003378:	f1a9 0902 	sub.w	r9, r9, #2
 800337c:	fa5f f989 	uxtb.w	r9, r9
 8003380:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003384:	d81f      	bhi.n	80033c6 <_printf_float+0x17e>
 8003386:	464a      	mov	r2, r9
 8003388:	3901      	subs	r1, #1
 800338a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800338e:	910d      	str	r1, [sp, #52]	; 0x34
 8003390:	f7ff ff1b 	bl	80031ca <__exponent>
 8003394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003396:	4682      	mov	sl, r0
 8003398:	1813      	adds	r3, r2, r0
 800339a:	2a01      	cmp	r2, #1
 800339c:	6123      	str	r3, [r4, #16]
 800339e:	dc02      	bgt.n	80033a6 <_printf_float+0x15e>
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	07d2      	lsls	r2, r2, #31
 80033a4:	d501      	bpl.n	80033aa <_printf_float+0x162>
 80033a6:	3301      	adds	r3, #1
 80033a8:	6123      	str	r3, [r4, #16]
 80033aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d09b      	beq.n	80032ea <_printf_float+0xa2>
 80033b2:	232d      	movs	r3, #45	; 0x2d
 80033b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b8:	e797      	b.n	80032ea <_printf_float+0xa2>
 80033ba:	2947      	cmp	r1, #71	; 0x47
 80033bc:	d1bc      	bne.n	8003338 <_printf_float+0xf0>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ba      	bne.n	8003338 <_printf_float+0xf0>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e7b7      	b.n	8003336 <_printf_float+0xee>
 80033c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80033ca:	d118      	bne.n	80033fe <_printf_float+0x1b6>
 80033cc:	2900      	cmp	r1, #0
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	dd0b      	ble.n	80033ea <_printf_float+0x1a2>
 80033d2:	6121      	str	r1, [r4, #16]
 80033d4:	b913      	cbnz	r3, 80033dc <_printf_float+0x194>
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	07d0      	lsls	r0, r2, #31
 80033da:	d502      	bpl.n	80033e2 <_printf_float+0x19a>
 80033dc:	3301      	adds	r3, #1
 80033de:	440b      	add	r3, r1
 80033e0:	6123      	str	r3, [r4, #16]
 80033e2:	f04f 0a00 	mov.w	sl, #0
 80033e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80033e8:	e7df      	b.n	80033aa <_printf_float+0x162>
 80033ea:	b913      	cbnz	r3, 80033f2 <_printf_float+0x1aa>
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	07d2      	lsls	r2, r2, #31
 80033f0:	d501      	bpl.n	80033f6 <_printf_float+0x1ae>
 80033f2:	3302      	adds	r3, #2
 80033f4:	e7f4      	b.n	80033e0 <_printf_float+0x198>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e7f2      	b.n	80033e0 <_printf_float+0x198>
 80033fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80033fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003400:	4299      	cmp	r1, r3
 8003402:	db05      	blt.n	8003410 <_printf_float+0x1c8>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	6121      	str	r1, [r4, #16]
 8003408:	07d8      	lsls	r0, r3, #31
 800340a:	d5ea      	bpl.n	80033e2 <_printf_float+0x19a>
 800340c:	1c4b      	adds	r3, r1, #1
 800340e:	e7e7      	b.n	80033e0 <_printf_float+0x198>
 8003410:	2900      	cmp	r1, #0
 8003412:	bfcc      	ite	gt
 8003414:	2201      	movgt	r2, #1
 8003416:	f1c1 0202 	rsble	r2, r1, #2
 800341a:	4413      	add	r3, r2
 800341c:	e7e0      	b.n	80033e0 <_printf_float+0x198>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	055a      	lsls	r2, r3, #21
 8003422:	d407      	bmi.n	8003434 <_printf_float+0x1ec>
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	4642      	mov	r2, r8
 8003428:	4631      	mov	r1, r6
 800342a:	4628      	mov	r0, r5
 800342c:	47b8      	blx	r7
 800342e:	3001      	adds	r0, #1
 8003430:	d12b      	bne.n	800348a <_printf_float+0x242>
 8003432:	e764      	b.n	80032fe <_printf_float+0xb6>
 8003434:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003438:	f240 80dd 	bls.w	80035f6 <_printf_float+0x3ae>
 800343c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003440:	2200      	movs	r2, #0
 8003442:	2300      	movs	r3, #0
 8003444:	f7fd fb1c 	bl	8000a80 <__aeabi_dcmpeq>
 8003448:	2800      	cmp	r0, #0
 800344a:	d033      	beq.n	80034b4 <_printf_float+0x26c>
 800344c:	2301      	movs	r3, #1
 800344e:	4631      	mov	r1, r6
 8003450:	4628      	mov	r0, r5
 8003452:	4a35      	ldr	r2, [pc, #212]	; (8003528 <_printf_float+0x2e0>)
 8003454:	47b8      	blx	r7
 8003456:	3001      	adds	r0, #1
 8003458:	f43f af51 	beq.w	80032fe <_printf_float+0xb6>
 800345c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003460:	429a      	cmp	r2, r3
 8003462:	db02      	blt.n	800346a <_printf_float+0x222>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	07d8      	lsls	r0, r3, #31
 8003468:	d50f      	bpl.n	800348a <_printf_float+0x242>
 800346a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800346e:	4631      	mov	r1, r6
 8003470:	4628      	mov	r0, r5
 8003472:	47b8      	blx	r7
 8003474:	3001      	adds	r0, #1
 8003476:	f43f af42 	beq.w	80032fe <_printf_float+0xb6>
 800347a:	f04f 0800 	mov.w	r8, #0
 800347e:	f104 091a 	add.w	r9, r4, #26
 8003482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003484:	3b01      	subs	r3, #1
 8003486:	4543      	cmp	r3, r8
 8003488:	dc09      	bgt.n	800349e <_printf_float+0x256>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	079b      	lsls	r3, r3, #30
 800348e:	f100 8102 	bmi.w	8003696 <_printf_float+0x44e>
 8003492:	68e0      	ldr	r0, [r4, #12]
 8003494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003496:	4298      	cmp	r0, r3
 8003498:	bfb8      	it	lt
 800349a:	4618      	movlt	r0, r3
 800349c:	e731      	b.n	8003302 <_printf_float+0xba>
 800349e:	2301      	movs	r3, #1
 80034a0:	464a      	mov	r2, r9
 80034a2:	4631      	mov	r1, r6
 80034a4:	4628      	mov	r0, r5
 80034a6:	47b8      	blx	r7
 80034a8:	3001      	adds	r0, #1
 80034aa:	f43f af28 	beq.w	80032fe <_printf_float+0xb6>
 80034ae:	f108 0801 	add.w	r8, r8, #1
 80034b2:	e7e6      	b.n	8003482 <_printf_float+0x23a>
 80034b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	dc38      	bgt.n	800352c <_printf_float+0x2e4>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4631      	mov	r1, r6
 80034be:	4628      	mov	r0, r5
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <_printf_float+0x2e0>)
 80034c2:	47b8      	blx	r7
 80034c4:	3001      	adds	r0, #1
 80034c6:	f43f af1a 	beq.w	80032fe <_printf_float+0xb6>
 80034ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034ce:	4313      	orrs	r3, r2
 80034d0:	d102      	bne.n	80034d8 <_printf_float+0x290>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	07d9      	lsls	r1, r3, #31
 80034d6:	d5d8      	bpl.n	800348a <_printf_float+0x242>
 80034d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034dc:	4631      	mov	r1, r6
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	f43f af0b 	beq.w	80032fe <_printf_float+0xb6>
 80034e8:	f04f 0900 	mov.w	r9, #0
 80034ec:	f104 0a1a 	add.w	sl, r4, #26
 80034f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034f2:	425b      	negs	r3, r3
 80034f4:	454b      	cmp	r3, r9
 80034f6:	dc01      	bgt.n	80034fc <_printf_float+0x2b4>
 80034f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034fa:	e794      	b.n	8003426 <_printf_float+0x1de>
 80034fc:	2301      	movs	r3, #1
 80034fe:	4652      	mov	r2, sl
 8003500:	4631      	mov	r1, r6
 8003502:	4628      	mov	r0, r5
 8003504:	47b8      	blx	r7
 8003506:	3001      	adds	r0, #1
 8003508:	f43f aef9 	beq.w	80032fe <_printf_float+0xb6>
 800350c:	f109 0901 	add.w	r9, r9, #1
 8003510:	e7ee      	b.n	80034f0 <_printf_float+0x2a8>
 8003512:	bf00      	nop
 8003514:	7fefffff 	.word	0x7fefffff
 8003518:	08006174 	.word	0x08006174
 800351c:	08006178 	.word	0x08006178
 8003520:	08006180 	.word	0x08006180
 8003524:	0800617c 	.word	0x0800617c
 8003528:	08006184 	.word	0x08006184
 800352c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800352e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003530:	429a      	cmp	r2, r3
 8003532:	bfa8      	it	ge
 8003534:	461a      	movge	r2, r3
 8003536:	2a00      	cmp	r2, #0
 8003538:	4691      	mov	r9, r2
 800353a:	dc37      	bgt.n	80035ac <_printf_float+0x364>
 800353c:	f04f 0b00 	mov.w	fp, #0
 8003540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003544:	f104 021a 	add.w	r2, r4, #26
 8003548:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800354c:	ebaa 0309 	sub.w	r3, sl, r9
 8003550:	455b      	cmp	r3, fp
 8003552:	dc33      	bgt.n	80035bc <_printf_float+0x374>
 8003554:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003558:	429a      	cmp	r2, r3
 800355a:	db3b      	blt.n	80035d4 <_printf_float+0x38c>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	07da      	lsls	r2, r3, #31
 8003560:	d438      	bmi.n	80035d4 <_printf_float+0x38c>
 8003562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003564:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003566:	eba3 020a 	sub.w	r2, r3, sl
 800356a:	eba3 0901 	sub.w	r9, r3, r1
 800356e:	4591      	cmp	r9, r2
 8003570:	bfa8      	it	ge
 8003572:	4691      	movge	r9, r2
 8003574:	f1b9 0f00 	cmp.w	r9, #0
 8003578:	dc34      	bgt.n	80035e4 <_printf_float+0x39c>
 800357a:	f04f 0800 	mov.w	r8, #0
 800357e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003582:	f104 0a1a 	add.w	sl, r4, #26
 8003586:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	eba3 0309 	sub.w	r3, r3, r9
 8003590:	4543      	cmp	r3, r8
 8003592:	f77f af7a 	ble.w	800348a <_printf_float+0x242>
 8003596:	2301      	movs	r3, #1
 8003598:	4652      	mov	r2, sl
 800359a:	4631      	mov	r1, r6
 800359c:	4628      	mov	r0, r5
 800359e:	47b8      	blx	r7
 80035a0:	3001      	adds	r0, #1
 80035a2:	f43f aeac 	beq.w	80032fe <_printf_float+0xb6>
 80035a6:	f108 0801 	add.w	r8, r8, #1
 80035aa:	e7ec      	b.n	8003586 <_printf_float+0x33e>
 80035ac:	4613      	mov	r3, r2
 80035ae:	4631      	mov	r1, r6
 80035b0:	4642      	mov	r2, r8
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b8      	blx	r7
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1c0      	bne.n	800353c <_printf_float+0x2f4>
 80035ba:	e6a0      	b.n	80032fe <_printf_float+0xb6>
 80035bc:	2301      	movs	r3, #1
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80035c4:	47b8      	blx	r7
 80035c6:	3001      	adds	r0, #1
 80035c8:	f43f ae99 	beq.w	80032fe <_printf_float+0xb6>
 80035cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035ce:	f10b 0b01 	add.w	fp, fp, #1
 80035d2:	e7b9      	b.n	8003548 <_printf_float+0x300>
 80035d4:	4631      	mov	r1, r6
 80035d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035da:	4628      	mov	r0, r5
 80035dc:	47b8      	blx	r7
 80035de:	3001      	adds	r0, #1
 80035e0:	d1bf      	bne.n	8003562 <_printf_float+0x31a>
 80035e2:	e68c      	b.n	80032fe <_printf_float+0xb6>
 80035e4:	464b      	mov	r3, r9
 80035e6:	4631      	mov	r1, r6
 80035e8:	4628      	mov	r0, r5
 80035ea:	eb08 020a 	add.w	r2, r8, sl
 80035ee:	47b8      	blx	r7
 80035f0:	3001      	adds	r0, #1
 80035f2:	d1c2      	bne.n	800357a <_printf_float+0x332>
 80035f4:	e683      	b.n	80032fe <_printf_float+0xb6>
 80035f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035f8:	2a01      	cmp	r2, #1
 80035fa:	dc01      	bgt.n	8003600 <_printf_float+0x3b8>
 80035fc:	07db      	lsls	r3, r3, #31
 80035fe:	d537      	bpl.n	8003670 <_printf_float+0x428>
 8003600:	2301      	movs	r3, #1
 8003602:	4642      	mov	r2, r8
 8003604:	4631      	mov	r1, r6
 8003606:	4628      	mov	r0, r5
 8003608:	47b8      	blx	r7
 800360a:	3001      	adds	r0, #1
 800360c:	f43f ae77 	beq.w	80032fe <_printf_float+0xb6>
 8003610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003614:	4631      	mov	r1, r6
 8003616:	4628      	mov	r0, r5
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	f43f ae6f 	beq.w	80032fe <_printf_float+0xb6>
 8003620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003624:	2200      	movs	r2, #0
 8003626:	2300      	movs	r3, #0
 8003628:	f7fd fa2a 	bl	8000a80 <__aeabi_dcmpeq>
 800362c:	b9d8      	cbnz	r0, 8003666 <_printf_float+0x41e>
 800362e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003630:	f108 0201 	add.w	r2, r8, #1
 8003634:	3b01      	subs	r3, #1
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	d10e      	bne.n	800365e <_printf_float+0x416>
 8003640:	e65d      	b.n	80032fe <_printf_float+0xb6>
 8003642:	2301      	movs	r3, #1
 8003644:	464a      	mov	r2, r9
 8003646:	4631      	mov	r1, r6
 8003648:	4628      	mov	r0, r5
 800364a:	47b8      	blx	r7
 800364c:	3001      	adds	r0, #1
 800364e:	f43f ae56 	beq.w	80032fe <_printf_float+0xb6>
 8003652:	f108 0801 	add.w	r8, r8, #1
 8003656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003658:	3b01      	subs	r3, #1
 800365a:	4543      	cmp	r3, r8
 800365c:	dcf1      	bgt.n	8003642 <_printf_float+0x3fa>
 800365e:	4653      	mov	r3, sl
 8003660:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003664:	e6e0      	b.n	8003428 <_printf_float+0x1e0>
 8003666:	f04f 0800 	mov.w	r8, #0
 800366a:	f104 091a 	add.w	r9, r4, #26
 800366e:	e7f2      	b.n	8003656 <_printf_float+0x40e>
 8003670:	2301      	movs	r3, #1
 8003672:	4642      	mov	r2, r8
 8003674:	e7df      	b.n	8003636 <_printf_float+0x3ee>
 8003676:	2301      	movs	r3, #1
 8003678:	464a      	mov	r2, r9
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	f43f ae3c 	beq.w	80032fe <_printf_float+0xb6>
 8003686:	f108 0801 	add.w	r8, r8, #1
 800368a:	68e3      	ldr	r3, [r4, #12]
 800368c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	4543      	cmp	r3, r8
 8003692:	dcf0      	bgt.n	8003676 <_printf_float+0x42e>
 8003694:	e6fd      	b.n	8003492 <_printf_float+0x24a>
 8003696:	f04f 0800 	mov.w	r8, #0
 800369a:	f104 0919 	add.w	r9, r4, #25
 800369e:	e7f4      	b.n	800368a <_printf_float+0x442>

080036a0 <_printf_common>:
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	4616      	mov	r6, r2
 80036a6:	4699      	mov	r9, r3
 80036a8:	688a      	ldr	r2, [r1, #8]
 80036aa:	690b      	ldr	r3, [r1, #16]
 80036ac:	4607      	mov	r7, r0
 80036ae:	4293      	cmp	r3, r2
 80036b0:	bfb8      	it	lt
 80036b2:	4613      	movlt	r3, r2
 80036b4:	6033      	str	r3, [r6, #0]
 80036b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ba:	460c      	mov	r4, r1
 80036bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036c0:	b10a      	cbz	r2, 80036c6 <_printf_common+0x26>
 80036c2:	3301      	adds	r3, #1
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	0699      	lsls	r1, r3, #26
 80036ca:	bf42      	ittt	mi
 80036cc:	6833      	ldrmi	r3, [r6, #0]
 80036ce:	3302      	addmi	r3, #2
 80036d0:	6033      	strmi	r3, [r6, #0]
 80036d2:	6825      	ldr	r5, [r4, #0]
 80036d4:	f015 0506 	ands.w	r5, r5, #6
 80036d8:	d106      	bne.n	80036e8 <_printf_common+0x48>
 80036da:	f104 0a19 	add.w	sl, r4, #25
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	6832      	ldr	r2, [r6, #0]
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	42ab      	cmp	r3, r5
 80036e6:	dc28      	bgt.n	800373a <_printf_common+0x9a>
 80036e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036ec:	1e13      	subs	r3, r2, #0
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	bf18      	it	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	0692      	lsls	r2, r2, #26
 80036f6:	d42d      	bmi.n	8003754 <_printf_common+0xb4>
 80036f8:	4649      	mov	r1, r9
 80036fa:	4638      	mov	r0, r7
 80036fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003700:	47c0      	blx	r8
 8003702:	3001      	adds	r0, #1
 8003704:	d020      	beq.n	8003748 <_printf_common+0xa8>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	68e5      	ldr	r5, [r4, #12]
 800370a:	f003 0306 	and.w	r3, r3, #6
 800370e:	2b04      	cmp	r3, #4
 8003710:	bf18      	it	ne
 8003712:	2500      	movne	r5, #0
 8003714:	6832      	ldr	r2, [r6, #0]
 8003716:	f04f 0600 	mov.w	r6, #0
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	bf08      	it	eq
 800371e:	1aad      	subeq	r5, r5, r2
 8003720:	6922      	ldr	r2, [r4, #16]
 8003722:	bf08      	it	eq
 8003724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003728:	4293      	cmp	r3, r2
 800372a:	bfc4      	itt	gt
 800372c:	1a9b      	subgt	r3, r3, r2
 800372e:	18ed      	addgt	r5, r5, r3
 8003730:	341a      	adds	r4, #26
 8003732:	42b5      	cmp	r5, r6
 8003734:	d11a      	bne.n	800376c <_printf_common+0xcc>
 8003736:	2000      	movs	r0, #0
 8003738:	e008      	b.n	800374c <_printf_common+0xac>
 800373a:	2301      	movs	r3, #1
 800373c:	4652      	mov	r2, sl
 800373e:	4649      	mov	r1, r9
 8003740:	4638      	mov	r0, r7
 8003742:	47c0      	blx	r8
 8003744:	3001      	adds	r0, #1
 8003746:	d103      	bne.n	8003750 <_printf_common+0xb0>
 8003748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003750:	3501      	adds	r5, #1
 8003752:	e7c4      	b.n	80036de <_printf_common+0x3e>
 8003754:	2030      	movs	r0, #48	; 0x30
 8003756:	18e1      	adds	r1, r4, r3
 8003758:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003762:	4422      	add	r2, r4
 8003764:	3302      	adds	r3, #2
 8003766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800376a:	e7c5      	b.n	80036f8 <_printf_common+0x58>
 800376c:	2301      	movs	r3, #1
 800376e:	4622      	mov	r2, r4
 8003770:	4649      	mov	r1, r9
 8003772:	4638      	mov	r0, r7
 8003774:	47c0      	blx	r8
 8003776:	3001      	adds	r0, #1
 8003778:	d0e6      	beq.n	8003748 <_printf_common+0xa8>
 800377a:	3601      	adds	r6, #1
 800377c:	e7d9      	b.n	8003732 <_printf_common+0x92>
	...

08003780 <_printf_i>:
 8003780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003784:	7e0f      	ldrb	r7, [r1, #24]
 8003786:	4691      	mov	r9, r2
 8003788:	2f78      	cmp	r7, #120	; 0x78
 800378a:	4680      	mov	r8, r0
 800378c:	460c      	mov	r4, r1
 800378e:	469a      	mov	sl, r3
 8003790:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003796:	d807      	bhi.n	80037a8 <_printf_i+0x28>
 8003798:	2f62      	cmp	r7, #98	; 0x62
 800379a:	d80a      	bhi.n	80037b2 <_printf_i+0x32>
 800379c:	2f00      	cmp	r7, #0
 800379e:	f000 80d9 	beq.w	8003954 <_printf_i+0x1d4>
 80037a2:	2f58      	cmp	r7, #88	; 0x58
 80037a4:	f000 80a4 	beq.w	80038f0 <_printf_i+0x170>
 80037a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037b0:	e03a      	b.n	8003828 <_printf_i+0xa8>
 80037b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037b6:	2b15      	cmp	r3, #21
 80037b8:	d8f6      	bhi.n	80037a8 <_printf_i+0x28>
 80037ba:	a101      	add	r1, pc, #4	; (adr r1, 80037c0 <_printf_i+0x40>)
 80037bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037c0:	08003819 	.word	0x08003819
 80037c4:	0800382d 	.word	0x0800382d
 80037c8:	080037a9 	.word	0x080037a9
 80037cc:	080037a9 	.word	0x080037a9
 80037d0:	080037a9 	.word	0x080037a9
 80037d4:	080037a9 	.word	0x080037a9
 80037d8:	0800382d 	.word	0x0800382d
 80037dc:	080037a9 	.word	0x080037a9
 80037e0:	080037a9 	.word	0x080037a9
 80037e4:	080037a9 	.word	0x080037a9
 80037e8:	080037a9 	.word	0x080037a9
 80037ec:	0800393b 	.word	0x0800393b
 80037f0:	0800385d 	.word	0x0800385d
 80037f4:	0800391d 	.word	0x0800391d
 80037f8:	080037a9 	.word	0x080037a9
 80037fc:	080037a9 	.word	0x080037a9
 8003800:	0800395d 	.word	0x0800395d
 8003804:	080037a9 	.word	0x080037a9
 8003808:	0800385d 	.word	0x0800385d
 800380c:	080037a9 	.word	0x080037a9
 8003810:	080037a9 	.word	0x080037a9
 8003814:	08003925 	.word	0x08003925
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003828:	2301      	movs	r3, #1
 800382a:	e0a4      	b.n	8003976 <_printf_i+0x1f6>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	6829      	ldr	r1, [r5, #0]
 8003830:	0606      	lsls	r6, r0, #24
 8003832:	f101 0304 	add.w	r3, r1, #4
 8003836:	d50a      	bpl.n	800384e <_printf_i+0xce>
 8003838:	680e      	ldr	r6, [r1, #0]
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	2e00      	cmp	r6, #0
 800383e:	da03      	bge.n	8003848 <_printf_i+0xc8>
 8003840:	232d      	movs	r3, #45	; 0x2d
 8003842:	4276      	negs	r6, r6
 8003844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003848:	230a      	movs	r3, #10
 800384a:	485e      	ldr	r0, [pc, #376]	; (80039c4 <_printf_i+0x244>)
 800384c:	e019      	b.n	8003882 <_printf_i+0x102>
 800384e:	680e      	ldr	r6, [r1, #0]
 8003850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003854:	602b      	str	r3, [r5, #0]
 8003856:	bf18      	it	ne
 8003858:	b236      	sxthne	r6, r6
 800385a:	e7ef      	b.n	800383c <_printf_i+0xbc>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	1d19      	adds	r1, r3, #4
 8003862:	6029      	str	r1, [r5, #0]
 8003864:	0601      	lsls	r1, r0, #24
 8003866:	d501      	bpl.n	800386c <_printf_i+0xec>
 8003868:	681e      	ldr	r6, [r3, #0]
 800386a:	e002      	b.n	8003872 <_printf_i+0xf2>
 800386c:	0646      	lsls	r6, r0, #25
 800386e:	d5fb      	bpl.n	8003868 <_printf_i+0xe8>
 8003870:	881e      	ldrh	r6, [r3, #0]
 8003872:	2f6f      	cmp	r7, #111	; 0x6f
 8003874:	bf0c      	ite	eq
 8003876:	2308      	moveq	r3, #8
 8003878:	230a      	movne	r3, #10
 800387a:	4852      	ldr	r0, [pc, #328]	; (80039c4 <_printf_i+0x244>)
 800387c:	2100      	movs	r1, #0
 800387e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003882:	6865      	ldr	r5, [r4, #4]
 8003884:	2d00      	cmp	r5, #0
 8003886:	bfa8      	it	ge
 8003888:	6821      	ldrge	r1, [r4, #0]
 800388a:	60a5      	str	r5, [r4, #8]
 800388c:	bfa4      	itt	ge
 800388e:	f021 0104 	bicge.w	r1, r1, #4
 8003892:	6021      	strge	r1, [r4, #0]
 8003894:	b90e      	cbnz	r6, 800389a <_printf_i+0x11a>
 8003896:	2d00      	cmp	r5, #0
 8003898:	d04d      	beq.n	8003936 <_printf_i+0x1b6>
 800389a:	4615      	mov	r5, r2
 800389c:	fbb6 f1f3 	udiv	r1, r6, r3
 80038a0:	fb03 6711 	mls	r7, r3, r1, r6
 80038a4:	5dc7      	ldrb	r7, [r0, r7]
 80038a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038aa:	4637      	mov	r7, r6
 80038ac:	42bb      	cmp	r3, r7
 80038ae:	460e      	mov	r6, r1
 80038b0:	d9f4      	bls.n	800389c <_printf_i+0x11c>
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d10b      	bne.n	80038ce <_printf_i+0x14e>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	07de      	lsls	r6, r3, #31
 80038ba:	d508      	bpl.n	80038ce <_printf_i+0x14e>
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	6861      	ldr	r1, [r4, #4]
 80038c0:	4299      	cmp	r1, r3
 80038c2:	bfde      	ittt	le
 80038c4:	2330      	movle	r3, #48	; 0x30
 80038c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038ce:	1b52      	subs	r2, r2, r5
 80038d0:	6122      	str	r2, [r4, #16]
 80038d2:	464b      	mov	r3, r9
 80038d4:	4621      	mov	r1, r4
 80038d6:	4640      	mov	r0, r8
 80038d8:	f8cd a000 	str.w	sl, [sp]
 80038dc:	aa03      	add	r2, sp, #12
 80038de:	f7ff fedf 	bl	80036a0 <_printf_common>
 80038e2:	3001      	adds	r0, #1
 80038e4:	d14c      	bne.n	8003980 <_printf_i+0x200>
 80038e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ea:	b004      	add	sp, #16
 80038ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f0:	4834      	ldr	r0, [pc, #208]	; (80039c4 <_printf_i+0x244>)
 80038f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038f6:	6829      	ldr	r1, [r5, #0]
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80038fe:	6029      	str	r1, [r5, #0]
 8003900:	061d      	lsls	r5, r3, #24
 8003902:	d514      	bpl.n	800392e <_printf_i+0x1ae>
 8003904:	07df      	lsls	r7, r3, #31
 8003906:	bf44      	itt	mi
 8003908:	f043 0320 	orrmi.w	r3, r3, #32
 800390c:	6023      	strmi	r3, [r4, #0]
 800390e:	b91e      	cbnz	r6, 8003918 <_printf_i+0x198>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f023 0320 	bic.w	r3, r3, #32
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	2310      	movs	r3, #16
 800391a:	e7af      	b.n	800387c <_printf_i+0xfc>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	f043 0320 	orr.w	r3, r3, #32
 8003922:	6023      	str	r3, [r4, #0]
 8003924:	2378      	movs	r3, #120	; 0x78
 8003926:	4828      	ldr	r0, [pc, #160]	; (80039c8 <_printf_i+0x248>)
 8003928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800392c:	e7e3      	b.n	80038f6 <_printf_i+0x176>
 800392e:	0659      	lsls	r1, r3, #25
 8003930:	bf48      	it	mi
 8003932:	b2b6      	uxthmi	r6, r6
 8003934:	e7e6      	b.n	8003904 <_printf_i+0x184>
 8003936:	4615      	mov	r5, r2
 8003938:	e7bb      	b.n	80038b2 <_printf_i+0x132>
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	6826      	ldr	r6, [r4, #0]
 800393e:	1d18      	adds	r0, r3, #4
 8003940:	6961      	ldr	r1, [r4, #20]
 8003942:	6028      	str	r0, [r5, #0]
 8003944:	0635      	lsls	r5, r6, #24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	d501      	bpl.n	800394e <_printf_i+0x1ce>
 800394a:	6019      	str	r1, [r3, #0]
 800394c:	e002      	b.n	8003954 <_printf_i+0x1d4>
 800394e:	0670      	lsls	r0, r6, #25
 8003950:	d5fb      	bpl.n	800394a <_printf_i+0x1ca>
 8003952:	8019      	strh	r1, [r3, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	4615      	mov	r5, r2
 8003958:	6123      	str	r3, [r4, #16]
 800395a:	e7ba      	b.n	80038d2 <_printf_i+0x152>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	2100      	movs	r1, #0
 8003960:	1d1a      	adds	r2, r3, #4
 8003962:	602a      	str	r2, [r5, #0]
 8003964:	681d      	ldr	r5, [r3, #0]
 8003966:	6862      	ldr	r2, [r4, #4]
 8003968:	4628      	mov	r0, r5
 800396a:	f000 feb7 	bl	80046dc <memchr>
 800396e:	b108      	cbz	r0, 8003974 <_printf_i+0x1f4>
 8003970:	1b40      	subs	r0, r0, r5
 8003972:	6060      	str	r0, [r4, #4]
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	6123      	str	r3, [r4, #16]
 8003978:	2300      	movs	r3, #0
 800397a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800397e:	e7a8      	b.n	80038d2 <_printf_i+0x152>
 8003980:	462a      	mov	r2, r5
 8003982:	4649      	mov	r1, r9
 8003984:	4640      	mov	r0, r8
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	47d0      	blx	sl
 800398a:	3001      	adds	r0, #1
 800398c:	d0ab      	beq.n	80038e6 <_printf_i+0x166>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	079b      	lsls	r3, r3, #30
 8003992:	d413      	bmi.n	80039bc <_printf_i+0x23c>
 8003994:	68e0      	ldr	r0, [r4, #12]
 8003996:	9b03      	ldr	r3, [sp, #12]
 8003998:	4298      	cmp	r0, r3
 800399a:	bfb8      	it	lt
 800399c:	4618      	movlt	r0, r3
 800399e:	e7a4      	b.n	80038ea <_printf_i+0x16a>
 80039a0:	2301      	movs	r3, #1
 80039a2:	4632      	mov	r2, r6
 80039a4:	4649      	mov	r1, r9
 80039a6:	4640      	mov	r0, r8
 80039a8:	47d0      	blx	sl
 80039aa:	3001      	adds	r0, #1
 80039ac:	d09b      	beq.n	80038e6 <_printf_i+0x166>
 80039ae:	3501      	adds	r5, #1
 80039b0:	68e3      	ldr	r3, [r4, #12]
 80039b2:	9903      	ldr	r1, [sp, #12]
 80039b4:	1a5b      	subs	r3, r3, r1
 80039b6:	42ab      	cmp	r3, r5
 80039b8:	dcf2      	bgt.n	80039a0 <_printf_i+0x220>
 80039ba:	e7eb      	b.n	8003994 <_printf_i+0x214>
 80039bc:	2500      	movs	r5, #0
 80039be:	f104 0619 	add.w	r6, r4, #25
 80039c2:	e7f5      	b.n	80039b0 <_printf_i+0x230>
 80039c4:	08006186 	.word	0x08006186
 80039c8:	08006197 	.word	0x08006197

080039cc <quorem>:
 80039cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d0:	6903      	ldr	r3, [r0, #16]
 80039d2:	690c      	ldr	r4, [r1, #16]
 80039d4:	4607      	mov	r7, r0
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	f2c0 8082 	blt.w	8003ae0 <quorem+0x114>
 80039dc:	3c01      	subs	r4, #1
 80039de:	f100 0514 	add.w	r5, r0, #20
 80039e2:	f101 0814 	add.w	r8, r1, #20
 80039e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80039f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039f4:	3301      	adds	r3, #1
 80039f6:	429a      	cmp	r2, r3
 80039f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80039fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a04:	d331      	bcc.n	8003a6a <quorem+0x9e>
 8003a06:	f04f 0e00 	mov.w	lr, #0
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	46ac      	mov	ip, r5
 8003a0e:	46f2      	mov	sl, lr
 8003a10:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a14:	b293      	uxth	r3, r2
 8003a16:	fb06 e303 	mla	r3, r6, r3, lr
 8003a1a:	0c12      	lsrs	r2, r2, #16
 8003a1c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	fb06 e202 	mla	r2, r6, r2, lr
 8003a26:	ebaa 0303 	sub.w	r3, sl, r3
 8003a2a:	f8dc a000 	ldr.w	sl, [ip]
 8003a2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a32:	fa1f fa8a 	uxth.w	sl, sl
 8003a36:	4453      	add	r3, sl
 8003a38:	f8dc a000 	ldr.w	sl, [ip]
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003a42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a4c:	4581      	cmp	r9, r0
 8003a4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003a52:	f84c 3b04 	str.w	r3, [ip], #4
 8003a56:	d2db      	bcs.n	8003a10 <quorem+0x44>
 8003a58:	f855 300b 	ldr.w	r3, [r5, fp]
 8003a5c:	b92b      	cbnz	r3, 8003a6a <quorem+0x9e>
 8003a5e:	9b01      	ldr	r3, [sp, #4]
 8003a60:	3b04      	subs	r3, #4
 8003a62:	429d      	cmp	r5, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	d32f      	bcc.n	8003ac8 <quorem+0xfc>
 8003a68:	613c      	str	r4, [r7, #16]
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	f001 f8d0 	bl	8004c10 <__mcmp>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	db25      	blt.n	8003ac0 <quorem+0xf4>
 8003a74:	4628      	mov	r0, r5
 8003a76:	f04f 0c00 	mov.w	ip, #0
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	f858 1b04 	ldr.w	r1, [r8], #4
 8003a80:	f8d0 e000 	ldr.w	lr, [r0]
 8003a84:	b28b      	uxth	r3, r1
 8003a86:	ebac 0303 	sub.w	r3, ip, r3
 8003a8a:	fa1f f28e 	uxth.w	r2, lr
 8003a8e:	4413      	add	r3, r2
 8003a90:	0c0a      	lsrs	r2, r1, #16
 8003a92:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aa0:	45c1      	cmp	r9, r8
 8003aa2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003aa6:	f840 3b04 	str.w	r3, [r0], #4
 8003aaa:	d2e7      	bcs.n	8003a7c <quorem+0xb0>
 8003aac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ab4:	b922      	cbnz	r2, 8003ac0 <quorem+0xf4>
 8003ab6:	3b04      	subs	r3, #4
 8003ab8:	429d      	cmp	r5, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	d30a      	bcc.n	8003ad4 <quorem+0x108>
 8003abe:	613c      	str	r4, [r7, #16]
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	b003      	add	sp, #12
 8003ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	3b04      	subs	r3, #4
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	d1cb      	bne.n	8003a68 <quorem+0x9c>
 8003ad0:	3c01      	subs	r4, #1
 8003ad2:	e7c6      	b.n	8003a62 <quorem+0x96>
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	3b04      	subs	r3, #4
 8003ad8:	2a00      	cmp	r2, #0
 8003ada:	d1f0      	bne.n	8003abe <quorem+0xf2>
 8003adc:	3c01      	subs	r4, #1
 8003ade:	e7eb      	b.n	8003ab8 <quorem+0xec>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	e7ee      	b.n	8003ac2 <quorem+0xf6>
 8003ae4:	0000      	movs	r0, r0
	...

08003ae8 <_dtoa_r>:
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	4616      	mov	r6, r2
 8003aee:	461f      	mov	r7, r3
 8003af0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003af2:	b099      	sub	sp, #100	; 0x64
 8003af4:	4605      	mov	r5, r0
 8003af6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003afa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003afe:	b974      	cbnz	r4, 8003b1e <_dtoa_r+0x36>
 8003b00:	2010      	movs	r0, #16
 8003b02:	f000 fde3 	bl	80046cc <malloc>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6268      	str	r0, [r5, #36]	; 0x24
 8003b0a:	b920      	cbnz	r0, 8003b16 <_dtoa_r+0x2e>
 8003b0c:	21ea      	movs	r1, #234	; 0xea
 8003b0e:	4ba8      	ldr	r3, [pc, #672]	; (8003db0 <_dtoa_r+0x2c8>)
 8003b10:	48a8      	ldr	r0, [pc, #672]	; (8003db4 <_dtoa_r+0x2cc>)
 8003b12:	f001 fa81 	bl	8005018 <__assert_func>
 8003b16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003b1a:	6004      	str	r4, [r0, #0]
 8003b1c:	60c4      	str	r4, [r0, #12]
 8003b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	b151      	cbz	r1, 8003b3a <_dtoa_r+0x52>
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	2301      	movs	r3, #1
 8003b28:	4093      	lsls	r3, r2
 8003b2a:	604a      	str	r2, [r1, #4]
 8003b2c:	608b      	str	r3, [r1, #8]
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 fe30 	bl	8004794 <_Bfree>
 8003b34:	2200      	movs	r2, #0
 8003b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	1e3b      	subs	r3, r7, #0
 8003b3c:	bfaf      	iteee	ge
 8003b3e:	2300      	movge	r3, #0
 8003b40:	2201      	movlt	r2, #1
 8003b42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b46:	9305      	strlt	r3, [sp, #20]
 8003b48:	bfa8      	it	ge
 8003b4a:	f8c8 3000 	strge.w	r3, [r8]
 8003b4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003b52:	4b99      	ldr	r3, [pc, #612]	; (8003db8 <_dtoa_r+0x2d0>)
 8003b54:	bfb8      	it	lt
 8003b56:	f8c8 2000 	strlt.w	r2, [r8]
 8003b5a:	ea33 0309 	bics.w	r3, r3, r9
 8003b5e:	d119      	bne.n	8003b94 <_dtoa_r+0xac>
 8003b60:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003b6c:	4333      	orrs	r3, r6
 8003b6e:	f000 857f 	beq.w	8004670 <_dtoa_r+0xb88>
 8003b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b74:	b953      	cbnz	r3, 8003b8c <_dtoa_r+0xa4>
 8003b76:	4b91      	ldr	r3, [pc, #580]	; (8003dbc <_dtoa_r+0x2d4>)
 8003b78:	e022      	b.n	8003bc0 <_dtoa_r+0xd8>
 8003b7a:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <_dtoa_r+0x2d8>)
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	9803      	ldr	r0, [sp, #12]
 8003b86:	b019      	add	sp, #100	; 0x64
 8003b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b8c:	4b8b      	ldr	r3, [pc, #556]	; (8003dbc <_dtoa_r+0x2d4>)
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	3303      	adds	r3, #3
 8003b92:	e7f5      	b.n	8003b80 <_dtoa_r+0x98>
 8003b94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003b98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f7fc ff6c 	bl	8000a80 <__aeabi_dcmpeq>
 8003ba8:	4680      	mov	r8, r0
 8003baa:	b158      	cbz	r0, 8003bc4 <_dtoa_r+0xdc>
 8003bac:	2301      	movs	r3, #1
 8003bae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8558 	beq.w	800466a <_dtoa_r+0xb82>
 8003bba:	4882      	ldr	r0, [pc, #520]	; (8003dc4 <_dtoa_r+0x2dc>)
 8003bbc:	6018      	str	r0, [r3, #0]
 8003bbe:	1e43      	subs	r3, r0, #1
 8003bc0:	9303      	str	r3, [sp, #12]
 8003bc2:	e7df      	b.n	8003b84 <_dtoa_r+0x9c>
 8003bc4:	ab16      	add	r3, sp, #88	; 0x58
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	ab17      	add	r3, sp, #92	; 0x5c
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003bd2:	f001 f8c5 	bl	8004d60 <__d2b>
 8003bd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003bda:	4683      	mov	fp, r0
 8003bdc:	2c00      	cmp	r4, #0
 8003bde:	d07f      	beq.n	8003ce0 <_dtoa_r+0x1f8>
 8003be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003be6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003bf2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003bf6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4b72      	ldr	r3, [pc, #456]	; (8003dc8 <_dtoa_r+0x2e0>)
 8003bfe:	f7fc fb1f 	bl	8000240 <__aeabi_dsub>
 8003c02:	a365      	add	r3, pc, #404	; (adr r3, 8003d98 <_dtoa_r+0x2b0>)
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f7fc fcd2 	bl	80005b0 <__aeabi_dmul>
 8003c0c:	a364      	add	r3, pc, #400	; (adr r3, 8003da0 <_dtoa_r+0x2b8>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc fb17 	bl	8000244 <__adddf3>
 8003c16:	4606      	mov	r6, r0
 8003c18:	4620      	mov	r0, r4
 8003c1a:	460f      	mov	r7, r1
 8003c1c:	f7fc fc5e 	bl	80004dc <__aeabi_i2d>
 8003c20:	a361      	add	r3, pc, #388	; (adr r3, 8003da8 <_dtoa_r+0x2c0>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f7fc fcc3 	bl	80005b0 <__aeabi_dmul>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4630      	mov	r0, r6
 8003c30:	4639      	mov	r1, r7
 8003c32:	f7fc fb07 	bl	8000244 <__adddf3>
 8003c36:	4606      	mov	r6, r0
 8003c38:	460f      	mov	r7, r1
 8003c3a:	f7fc ff69 	bl	8000b10 <__aeabi_d2iz>
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4682      	mov	sl, r0
 8003c42:	2300      	movs	r3, #0
 8003c44:	4630      	mov	r0, r6
 8003c46:	4639      	mov	r1, r7
 8003c48:	f7fc ff24 	bl	8000a94 <__aeabi_dcmplt>
 8003c4c:	b148      	cbz	r0, 8003c62 <_dtoa_r+0x17a>
 8003c4e:	4650      	mov	r0, sl
 8003c50:	f7fc fc44 	bl	80004dc <__aeabi_i2d>
 8003c54:	4632      	mov	r2, r6
 8003c56:	463b      	mov	r3, r7
 8003c58:	f7fc ff12 	bl	8000a80 <__aeabi_dcmpeq>
 8003c5c:	b908      	cbnz	r0, 8003c62 <_dtoa_r+0x17a>
 8003c5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003c62:	f1ba 0f16 	cmp.w	sl, #22
 8003c66:	d858      	bhi.n	8003d1a <_dtoa_r+0x232>
 8003c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c6c:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <_dtoa_r+0x2e4>)
 8003c6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc ff0d 	bl	8000a94 <__aeabi_dcmplt>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d04f      	beq.n	8003d1e <_dtoa_r+0x236>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c88:	1b1c      	subs	r4, r3, r4
 8003c8a:	1e63      	subs	r3, r4, #1
 8003c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8e:	bf49      	itett	mi
 8003c90:	f1c4 0301 	rsbmi	r3, r4, #1
 8003c94:	2300      	movpl	r3, #0
 8003c96:	9306      	strmi	r3, [sp, #24]
 8003c98:	2300      	movmi	r3, #0
 8003c9a:	bf54      	ite	pl
 8003c9c:	9306      	strpl	r3, [sp, #24]
 8003c9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003ca0:	f1ba 0f00 	cmp.w	sl, #0
 8003ca4:	db3d      	blt.n	8003d22 <_dtoa_r+0x23a>
 8003ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003cac:	4453      	add	r3, sl
 8003cae:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8003cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cb6:	2b09      	cmp	r3, #9
 8003cb8:	f200 808c 	bhi.w	8003dd4 <_dtoa_r+0x2ec>
 8003cbc:	2b05      	cmp	r3, #5
 8003cbe:	bfc4      	itt	gt
 8003cc0:	3b04      	subgt	r3, #4
 8003cc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cc6:	bfc8      	it	gt
 8003cc8:	2400      	movgt	r4, #0
 8003cca:	f1a3 0302 	sub.w	r3, r3, #2
 8003cce:	bfd8      	it	le
 8003cd0:	2401      	movle	r4, #1
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	f200 808a 	bhi.w	8003dec <_dtoa_r+0x304>
 8003cd8:	e8df f003 	tbb	[pc, r3]
 8003cdc:	5b4d4f2d 	.word	0x5b4d4f2d
 8003ce0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ce4:	441c      	add	r4, r3
 8003ce6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	bfc3      	ittte	gt
 8003cee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003cf2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003cf6:	fa09 f303 	lslgt.w	r3, r9, r3
 8003cfa:	f1c3 0320 	rsble	r3, r3, #32
 8003cfe:	bfc6      	itte	gt
 8003d00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003d04:	4318      	orrgt	r0, r3
 8003d06:	fa06 f003 	lslle.w	r0, r6, r3
 8003d0a:	f7fc fbd7 	bl	80004bc <__aeabi_ui2d>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003d14:	3c01      	subs	r4, #1
 8003d16:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d18:	e76f      	b.n	8003bfa <_dtoa_r+0x112>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e7b2      	b.n	8003c84 <_dtoa_r+0x19c>
 8003d1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003d20:	e7b1      	b.n	8003c86 <_dtoa_r+0x19e>
 8003d22:	9b06      	ldr	r3, [sp, #24]
 8003d24:	eba3 030a 	sub.w	r3, r3, sl
 8003d28:	9306      	str	r3, [sp, #24]
 8003d2a:	f1ca 0300 	rsb	r3, sl, #0
 8003d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d30:	2300      	movs	r3, #0
 8003d32:	930e      	str	r3, [sp, #56]	; 0x38
 8003d34:	e7be      	b.n	8003cb4 <_dtoa_r+0x1cc>
 8003d36:	2300      	movs	r3, #0
 8003d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dc58      	bgt.n	8003df2 <_dtoa_r+0x30a>
 8003d40:	f04f 0901 	mov.w	r9, #1
 8003d44:	464b      	mov	r3, r9
 8003d46:	f8cd 9020 	str.w	r9, [sp, #32]
 8003d4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003d4e:	2200      	movs	r2, #0
 8003d50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003d52:	6042      	str	r2, [r0, #4]
 8003d54:	2204      	movs	r2, #4
 8003d56:	f102 0614 	add.w	r6, r2, #20
 8003d5a:	429e      	cmp	r6, r3
 8003d5c:	6841      	ldr	r1, [r0, #4]
 8003d5e:	d94e      	bls.n	8003dfe <_dtoa_r+0x316>
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 fcd7 	bl	8004714 <_Balloc>
 8003d66:	9003      	str	r0, [sp, #12]
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d14c      	bne.n	8003e06 <_dtoa_r+0x31e>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <_dtoa_r+0x2e8>)
 8003d74:	e6cc      	b.n	8003b10 <_dtoa_r+0x28>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e7de      	b.n	8003d38 <_dtoa_r+0x250>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d80:	eb0a 0903 	add.w	r9, sl, r3
 8003d84:	f109 0301 	add.w	r3, r9, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	9308      	str	r3, [sp, #32]
 8003d8c:	bfb8      	it	lt
 8003d8e:	2301      	movlt	r3, #1
 8003d90:	e7dd      	b.n	8003d4e <_dtoa_r+0x266>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e7f2      	b.n	8003d7c <_dtoa_r+0x294>
 8003d96:	bf00      	nop
 8003d98:	636f4361 	.word	0x636f4361
 8003d9c:	3fd287a7 	.word	0x3fd287a7
 8003da0:	8b60c8b3 	.word	0x8b60c8b3
 8003da4:	3fc68a28 	.word	0x3fc68a28
 8003da8:	509f79fb 	.word	0x509f79fb
 8003dac:	3fd34413 	.word	0x3fd34413
 8003db0:	080061b5 	.word	0x080061b5
 8003db4:	080061cc 	.word	0x080061cc
 8003db8:	7ff00000 	.word	0x7ff00000
 8003dbc:	080061b1 	.word	0x080061b1
 8003dc0:	080061a8 	.word	0x080061a8
 8003dc4:	08006185 	.word	0x08006185
 8003dc8:	3ff80000 	.word	0x3ff80000
 8003dcc:	080062c0 	.word	0x080062c0
 8003dd0:	08006227 	.word	0x08006227
 8003dd4:	2401      	movs	r4, #1
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8003dda:	9322      	str	r3, [sp, #136]	; 0x88
 8003ddc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003de0:	2200      	movs	r2, #0
 8003de2:	2312      	movs	r3, #18
 8003de4:	f8cd 9020 	str.w	r9, [sp, #32]
 8003de8:	9223      	str	r2, [sp, #140]	; 0x8c
 8003dea:	e7b0      	b.n	8003d4e <_dtoa_r+0x266>
 8003dec:	2301      	movs	r3, #1
 8003dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003df0:	e7f4      	b.n	8003ddc <_dtoa_r+0x2f4>
 8003df2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003df6:	464b      	mov	r3, r9
 8003df8:	f8cd 9020 	str.w	r9, [sp, #32]
 8003dfc:	e7a7      	b.n	8003d4e <_dtoa_r+0x266>
 8003dfe:	3101      	adds	r1, #1
 8003e00:	6041      	str	r1, [r0, #4]
 8003e02:	0052      	lsls	r2, r2, #1
 8003e04:	e7a7      	b.n	8003d56 <_dtoa_r+0x26e>
 8003e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e08:	9a03      	ldr	r2, [sp, #12]
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	9b08      	ldr	r3, [sp, #32]
 8003e0e:	2b0e      	cmp	r3, #14
 8003e10:	f200 80a8 	bhi.w	8003f64 <_dtoa_r+0x47c>
 8003e14:	2c00      	cmp	r4, #0
 8003e16:	f000 80a5 	beq.w	8003f64 <_dtoa_r+0x47c>
 8003e1a:	f1ba 0f00 	cmp.w	sl, #0
 8003e1e:	dd34      	ble.n	8003e8a <_dtoa_r+0x3a2>
 8003e20:	4a9a      	ldr	r2, [pc, #616]	; (800408c <_dtoa_r+0x5a4>)
 8003e22:	f00a 030f 	and.w	r3, sl, #15
 8003e26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003e36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003e3a:	d016      	beq.n	8003e6a <_dtoa_r+0x382>
 8003e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e40:	4b93      	ldr	r3, [pc, #588]	; (8004090 <_dtoa_r+0x5a8>)
 8003e42:	2703      	movs	r7, #3
 8003e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e48:	f7fc fcdc 	bl	8000804 <__aeabi_ddiv>
 8003e4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e50:	f004 040f 	and.w	r4, r4, #15
 8003e54:	4e8e      	ldr	r6, [pc, #568]	; (8004090 <_dtoa_r+0x5a8>)
 8003e56:	b954      	cbnz	r4, 8003e6e <_dtoa_r+0x386>
 8003e58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e60:	f7fc fcd0 	bl	8000804 <__aeabi_ddiv>
 8003e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e68:	e029      	b.n	8003ebe <_dtoa_r+0x3d6>
 8003e6a:	2702      	movs	r7, #2
 8003e6c:	e7f2      	b.n	8003e54 <_dtoa_r+0x36c>
 8003e6e:	07e1      	lsls	r1, r4, #31
 8003e70:	d508      	bpl.n	8003e84 <_dtoa_r+0x39c>
 8003e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e7a:	f7fc fb99 	bl	80005b0 <__aeabi_dmul>
 8003e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e82:	3701      	adds	r7, #1
 8003e84:	1064      	asrs	r4, r4, #1
 8003e86:	3608      	adds	r6, #8
 8003e88:	e7e5      	b.n	8003e56 <_dtoa_r+0x36e>
 8003e8a:	f000 80a5 	beq.w	8003fd8 <_dtoa_r+0x4f0>
 8003e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e92:	f1ca 0400 	rsb	r4, sl, #0
 8003e96:	4b7d      	ldr	r3, [pc, #500]	; (800408c <_dtoa_r+0x5a4>)
 8003e98:	f004 020f 	and.w	r2, r4, #15
 8003e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc fb84 	bl	80005b0 <__aeabi_dmul>
 8003ea8:	2702      	movs	r7, #2
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003eb0:	4e77      	ldr	r6, [pc, #476]	; (8004090 <_dtoa_r+0x5a8>)
 8003eb2:	1124      	asrs	r4, r4, #4
 8003eb4:	2c00      	cmp	r4, #0
 8003eb6:	f040 8084 	bne.w	8003fc2 <_dtoa_r+0x4da>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1d2      	bne.n	8003e64 <_dtoa_r+0x37c>
 8003ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 808b 	beq.w	8003fdc <_dtoa_r+0x4f4>
 8003ec6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003eca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003ece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	; (8004094 <_dtoa_r+0x5ac>)
 8003ed6:	f7fc fddd 	bl	8000a94 <__aeabi_dcmplt>
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d07e      	beq.n	8003fdc <_dtoa_r+0x4f4>
 8003ede:	9b08      	ldr	r3, [sp, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d07b      	beq.n	8003fdc <_dtoa_r+0x4f4>
 8003ee4:	f1b9 0f00 	cmp.w	r9, #0
 8003ee8:	dd38      	ble.n	8003f5c <_dtoa_r+0x474>
 8003eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003eee:	2200      	movs	r2, #0
 8003ef0:	4b69      	ldr	r3, [pc, #420]	; (8004098 <_dtoa_r+0x5b0>)
 8003ef2:	f7fc fb5d 	bl	80005b0 <__aeabi_dmul>
 8003ef6:	464c      	mov	r4, r9
 8003ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003efc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8003f00:	3701      	adds	r7, #1
 8003f02:	4638      	mov	r0, r7
 8003f04:	f7fc faea 	bl	80004dc <__aeabi_i2d>
 8003f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f0c:	f7fc fb50 	bl	80005b0 <__aeabi_dmul>
 8003f10:	2200      	movs	r2, #0
 8003f12:	4b62      	ldr	r3, [pc, #392]	; (800409c <_dtoa_r+0x5b4>)
 8003f14:	f7fc f996 	bl	8000244 <__adddf3>
 8003f18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003f1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f20:	9611      	str	r6, [sp, #68]	; 0x44
 8003f22:	2c00      	cmp	r4, #0
 8003f24:	d15d      	bne.n	8003fe2 <_dtoa_r+0x4fa>
 8003f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <_dtoa_r+0x5b8>)
 8003f2e:	f7fc f987 	bl	8000240 <__aeabi_dsub>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f3a:	4633      	mov	r3, r6
 8003f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f3e:	f7fc fdc7 	bl	8000ad0 <__aeabi_dcmpgt>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	f040 829c 	bne.w	8004480 <_dtoa_r+0x998>
 8003f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003f52:	f7fc fd9f 	bl	8000a94 <__aeabi_dcmplt>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	f040 8290 	bne.w	800447c <_dtoa_r+0x994>
 8003f5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003f60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f2c0 8152 	blt.w	8004210 <_dtoa_r+0x728>
 8003f6c:	f1ba 0f0e 	cmp.w	sl, #14
 8003f70:	f300 814e 	bgt.w	8004210 <_dtoa_r+0x728>
 8003f74:	4b45      	ldr	r3, [pc, #276]	; (800408c <_dtoa_r+0x5a4>)
 8003f76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003f7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003f82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f280 80db 	bge.w	8004140 <_dtoa_r+0x658>
 8003f8a:	9b08      	ldr	r3, [sp, #32]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f300 80d7 	bgt.w	8004140 <_dtoa_r+0x658>
 8003f92:	f040 8272 	bne.w	800447a <_dtoa_r+0x992>
 8003f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <_dtoa_r+0x5b8>)
 8003f9e:	f7fc fb07 	bl	80005b0 <__aeabi_dmul>
 8003fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fa6:	f7fc fd89 	bl	8000abc <__aeabi_dcmpge>
 8003faa:	9c08      	ldr	r4, [sp, #32]
 8003fac:	4626      	mov	r6, r4
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	f040 8248 	bne.w	8004444 <_dtoa_r+0x95c>
 8003fb4:	2331      	movs	r3, #49	; 0x31
 8003fb6:	9f03      	ldr	r7, [sp, #12]
 8003fb8:	f10a 0a01 	add.w	sl, sl, #1
 8003fbc:	f807 3b01 	strb.w	r3, [r7], #1
 8003fc0:	e244      	b.n	800444c <_dtoa_r+0x964>
 8003fc2:	07e2      	lsls	r2, r4, #31
 8003fc4:	d505      	bpl.n	8003fd2 <_dtoa_r+0x4ea>
 8003fc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003fca:	f7fc faf1 	bl	80005b0 <__aeabi_dmul>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	3701      	adds	r7, #1
 8003fd2:	1064      	asrs	r4, r4, #1
 8003fd4:	3608      	adds	r6, #8
 8003fd6:	e76d      	b.n	8003eb4 <_dtoa_r+0x3cc>
 8003fd8:	2702      	movs	r7, #2
 8003fda:	e770      	b.n	8003ebe <_dtoa_r+0x3d6>
 8003fdc:	46d0      	mov	r8, sl
 8003fde:	9c08      	ldr	r4, [sp, #32]
 8003fe0:	e78f      	b.n	8003f02 <_dtoa_r+0x41a>
 8003fe2:	9903      	ldr	r1, [sp, #12]
 8003fe4:	4b29      	ldr	r3, [pc, #164]	; (800408c <_dtoa_r+0x5a4>)
 8003fe6:	4421      	add	r1, r4
 8003fe8:	9112      	str	r1, [sp, #72]	; 0x48
 8003fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ff0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003ff4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	d055      	beq.n	80040a8 <_dtoa_r+0x5c0>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4929      	ldr	r1, [pc, #164]	; (80040a4 <_dtoa_r+0x5bc>)
 8004000:	f7fc fc00 	bl	8000804 <__aeabi_ddiv>
 8004004:	463b      	mov	r3, r7
 8004006:	4632      	mov	r2, r6
 8004008:	f7fc f91a 	bl	8000240 <__aeabi_dsub>
 800400c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004010:	9f03      	ldr	r7, [sp, #12]
 8004012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004016:	f7fc fd7b 	bl	8000b10 <__aeabi_d2iz>
 800401a:	4604      	mov	r4, r0
 800401c:	f7fc fa5e 	bl	80004dc <__aeabi_i2d>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004028:	f7fc f90a 	bl	8000240 <__aeabi_dsub>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	3430      	adds	r4, #48	; 0x30
 8004032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800403a:	f807 4b01 	strb.w	r4, [r7], #1
 800403e:	f7fc fd29 	bl	8000a94 <__aeabi_dcmplt>
 8004042:	2800      	cmp	r0, #0
 8004044:	d174      	bne.n	8004130 <_dtoa_r+0x648>
 8004046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800404a:	2000      	movs	r0, #0
 800404c:	4911      	ldr	r1, [pc, #68]	; (8004094 <_dtoa_r+0x5ac>)
 800404e:	f7fc f8f7 	bl	8000240 <__aeabi_dsub>
 8004052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004056:	f7fc fd1d 	bl	8000a94 <__aeabi_dcmplt>
 800405a:	2800      	cmp	r0, #0
 800405c:	f040 80b7 	bne.w	80041ce <_dtoa_r+0x6e6>
 8004060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004062:	429f      	cmp	r7, r3
 8004064:	f43f af7a 	beq.w	8003f5c <_dtoa_r+0x474>
 8004068:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800406c:	2200      	movs	r2, #0
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <_dtoa_r+0x5b0>)
 8004070:	f7fc fa9e 	bl	80005b0 <__aeabi_dmul>
 8004074:	2200      	movs	r2, #0
 8004076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800407a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <_dtoa_r+0x5b0>)
 8004080:	f7fc fa96 	bl	80005b0 <__aeabi_dmul>
 8004084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004088:	e7c3      	b.n	8004012 <_dtoa_r+0x52a>
 800408a:	bf00      	nop
 800408c:	080062c0 	.word	0x080062c0
 8004090:	08006298 	.word	0x08006298
 8004094:	3ff00000 	.word	0x3ff00000
 8004098:	40240000 	.word	0x40240000
 800409c:	401c0000 	.word	0x401c0000
 80040a0:	40140000 	.word	0x40140000
 80040a4:	3fe00000 	.word	0x3fe00000
 80040a8:	4630      	mov	r0, r6
 80040aa:	4639      	mov	r1, r7
 80040ac:	f7fc fa80 	bl	80005b0 <__aeabi_dmul>
 80040b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040b6:	9c03      	ldr	r4, [sp, #12]
 80040b8:	9314      	str	r3, [sp, #80]	; 0x50
 80040ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040be:	f7fc fd27 	bl	8000b10 <__aeabi_d2iz>
 80040c2:	9015      	str	r0, [sp, #84]	; 0x54
 80040c4:	f7fc fa0a 	bl	80004dc <__aeabi_i2d>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040d0:	f7fc f8b6 	bl	8000240 <__aeabi_dsub>
 80040d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040d6:	4606      	mov	r6, r0
 80040d8:	3330      	adds	r3, #48	; 0x30
 80040da:	f804 3b01 	strb.w	r3, [r4], #1
 80040de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040e0:	460f      	mov	r7, r1
 80040e2:	429c      	cmp	r4, r3
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	d124      	bne.n	8004134 <_dtoa_r+0x64c>
 80040ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040ee:	4bb0      	ldr	r3, [pc, #704]	; (80043b0 <_dtoa_r+0x8c8>)
 80040f0:	f7fc f8a8 	bl	8000244 <__adddf3>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4630      	mov	r0, r6
 80040fa:	4639      	mov	r1, r7
 80040fc:	f7fc fce8 	bl	8000ad0 <__aeabi_dcmpgt>
 8004100:	2800      	cmp	r0, #0
 8004102:	d163      	bne.n	80041cc <_dtoa_r+0x6e4>
 8004104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004108:	2000      	movs	r0, #0
 800410a:	49a9      	ldr	r1, [pc, #676]	; (80043b0 <_dtoa_r+0x8c8>)
 800410c:	f7fc f898 	bl	8000240 <__aeabi_dsub>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4630      	mov	r0, r6
 8004116:	4639      	mov	r1, r7
 8004118:	f7fc fcbc 	bl	8000a94 <__aeabi_dcmplt>
 800411c:	2800      	cmp	r0, #0
 800411e:	f43f af1d 	beq.w	8003f5c <_dtoa_r+0x474>
 8004122:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004124:	1e7b      	subs	r3, r7, #1
 8004126:	9314      	str	r3, [sp, #80]	; 0x50
 8004128:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d0f8      	beq.n	8004122 <_dtoa_r+0x63a>
 8004130:	46c2      	mov	sl, r8
 8004132:	e03b      	b.n	80041ac <_dtoa_r+0x6c4>
 8004134:	4b9f      	ldr	r3, [pc, #636]	; (80043b4 <_dtoa_r+0x8cc>)
 8004136:	f7fc fa3b 	bl	80005b0 <__aeabi_dmul>
 800413a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800413e:	e7bc      	b.n	80040ba <_dtoa_r+0x5d2>
 8004140:	9f03      	ldr	r7, [sp, #12]
 8004142:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800414a:	4640      	mov	r0, r8
 800414c:	4649      	mov	r1, r9
 800414e:	f7fc fb59 	bl	8000804 <__aeabi_ddiv>
 8004152:	f7fc fcdd 	bl	8000b10 <__aeabi_d2iz>
 8004156:	4604      	mov	r4, r0
 8004158:	f7fc f9c0 	bl	80004dc <__aeabi_i2d>
 800415c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004160:	f7fc fa26 	bl	80005b0 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4640      	mov	r0, r8
 800416a:	4649      	mov	r1, r9
 800416c:	f7fc f868 	bl	8000240 <__aeabi_dsub>
 8004170:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004174:	f807 6b01 	strb.w	r6, [r7], #1
 8004178:	9e03      	ldr	r6, [sp, #12]
 800417a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800417e:	1bbe      	subs	r6, r7, r6
 8004180:	45b4      	cmp	ip, r6
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	d136      	bne.n	80041f6 <_dtoa_r+0x70e>
 8004188:	f7fc f85c 	bl	8000244 <__adddf3>
 800418c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004190:	4680      	mov	r8, r0
 8004192:	4689      	mov	r9, r1
 8004194:	f7fc fc9c 	bl	8000ad0 <__aeabi_dcmpgt>
 8004198:	bb58      	cbnz	r0, 80041f2 <_dtoa_r+0x70a>
 800419a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800419e:	4640      	mov	r0, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	f7fc fc6d 	bl	8000a80 <__aeabi_dcmpeq>
 80041a6:	b108      	cbz	r0, 80041ac <_dtoa_r+0x6c4>
 80041a8:	07e1      	lsls	r1, r4, #31
 80041aa:	d422      	bmi.n	80041f2 <_dtoa_r+0x70a>
 80041ac:	4628      	mov	r0, r5
 80041ae:	4659      	mov	r1, fp
 80041b0:	f000 faf0 	bl	8004794 <_Bfree>
 80041b4:	2300      	movs	r3, #0
 80041b6:	703b      	strb	r3, [r7, #0]
 80041b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80041ba:	f10a 0001 	add.w	r0, sl, #1
 80041be:	6018      	str	r0, [r3, #0]
 80041c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f43f acde 	beq.w	8003b84 <_dtoa_r+0x9c>
 80041c8:	601f      	str	r7, [r3, #0]
 80041ca:	e4db      	b.n	8003b84 <_dtoa_r+0x9c>
 80041cc:	4627      	mov	r7, r4
 80041ce:	463b      	mov	r3, r7
 80041d0:	461f      	mov	r7, r3
 80041d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041d6:	2a39      	cmp	r2, #57	; 0x39
 80041d8:	d107      	bne.n	80041ea <_dtoa_r+0x702>
 80041da:	9a03      	ldr	r2, [sp, #12]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1f7      	bne.n	80041d0 <_dtoa_r+0x6e8>
 80041e0:	2230      	movs	r2, #48	; 0x30
 80041e2:	9903      	ldr	r1, [sp, #12]
 80041e4:	f108 0801 	add.w	r8, r8, #1
 80041e8:	700a      	strb	r2, [r1, #0]
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	3201      	adds	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e79e      	b.n	8004130 <_dtoa_r+0x648>
 80041f2:	46d0      	mov	r8, sl
 80041f4:	e7eb      	b.n	80041ce <_dtoa_r+0x6e6>
 80041f6:	2200      	movs	r2, #0
 80041f8:	4b6e      	ldr	r3, [pc, #440]	; (80043b4 <_dtoa_r+0x8cc>)
 80041fa:	f7fc f9d9 	bl	80005b0 <__aeabi_dmul>
 80041fe:	2200      	movs	r2, #0
 8004200:	2300      	movs	r3, #0
 8004202:	4680      	mov	r8, r0
 8004204:	4689      	mov	r9, r1
 8004206:	f7fc fc3b 	bl	8000a80 <__aeabi_dcmpeq>
 800420a:	2800      	cmp	r0, #0
 800420c:	d09b      	beq.n	8004146 <_dtoa_r+0x65e>
 800420e:	e7cd      	b.n	80041ac <_dtoa_r+0x6c4>
 8004210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004212:	2a00      	cmp	r2, #0
 8004214:	f000 80d0 	beq.w	80043b8 <_dtoa_r+0x8d0>
 8004218:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800421a:	2a01      	cmp	r2, #1
 800421c:	f300 80ae 	bgt.w	800437c <_dtoa_r+0x894>
 8004220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004222:	2a00      	cmp	r2, #0
 8004224:	f000 80a6 	beq.w	8004374 <_dtoa_r+0x88c>
 8004228:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800422c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800422e:	9f06      	ldr	r7, [sp, #24]
 8004230:	9a06      	ldr	r2, [sp, #24]
 8004232:	2101      	movs	r1, #1
 8004234:	441a      	add	r2, r3
 8004236:	9206      	str	r2, [sp, #24]
 8004238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800423a:	4628      	mov	r0, r5
 800423c:	441a      	add	r2, r3
 800423e:	9209      	str	r2, [sp, #36]	; 0x24
 8004240:	f000 fb5e 	bl	8004900 <__i2b>
 8004244:	4606      	mov	r6, r0
 8004246:	2f00      	cmp	r7, #0
 8004248:	dd0c      	ble.n	8004264 <_dtoa_r+0x77c>
 800424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	dd09      	ble.n	8004264 <_dtoa_r+0x77c>
 8004250:	42bb      	cmp	r3, r7
 8004252:	bfa8      	it	ge
 8004254:	463b      	movge	r3, r7
 8004256:	9a06      	ldr	r2, [sp, #24]
 8004258:	1aff      	subs	r7, r7, r3
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	9206      	str	r2, [sp, #24]
 800425e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	9309      	str	r3, [sp, #36]	; 0x24
 8004264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004266:	b1f3      	cbz	r3, 80042a6 <_dtoa_r+0x7be>
 8004268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80a8 	beq.w	80043c0 <_dtoa_r+0x8d8>
 8004270:	2c00      	cmp	r4, #0
 8004272:	dd10      	ble.n	8004296 <_dtoa_r+0x7ae>
 8004274:	4631      	mov	r1, r6
 8004276:	4622      	mov	r2, r4
 8004278:	4628      	mov	r0, r5
 800427a:	f000 fbff 	bl	8004a7c <__pow5mult>
 800427e:	465a      	mov	r2, fp
 8004280:	4601      	mov	r1, r0
 8004282:	4606      	mov	r6, r0
 8004284:	4628      	mov	r0, r5
 8004286:	f000 fb51 	bl	800492c <__multiply>
 800428a:	4680      	mov	r8, r0
 800428c:	4659      	mov	r1, fp
 800428e:	4628      	mov	r0, r5
 8004290:	f000 fa80 	bl	8004794 <_Bfree>
 8004294:	46c3      	mov	fp, r8
 8004296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004298:	1b1a      	subs	r2, r3, r4
 800429a:	d004      	beq.n	80042a6 <_dtoa_r+0x7be>
 800429c:	4659      	mov	r1, fp
 800429e:	4628      	mov	r0, r5
 80042a0:	f000 fbec 	bl	8004a7c <__pow5mult>
 80042a4:	4683      	mov	fp, r0
 80042a6:	2101      	movs	r1, #1
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 fb29 	bl	8004900 <__i2b>
 80042ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b0:	4604      	mov	r4, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f340 8086 	ble.w	80043c4 <_dtoa_r+0x8dc>
 80042b8:	461a      	mov	r2, r3
 80042ba:	4601      	mov	r1, r0
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 fbdd 	bl	8004a7c <__pow5mult>
 80042c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042c4:	4604      	mov	r4, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	dd7f      	ble.n	80043ca <_dtoa_r+0x8e2>
 80042ca:	f04f 0800 	mov.w	r8, #0
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80042d4:	6918      	ldr	r0, [r3, #16]
 80042d6:	f000 fac5 	bl	8004864 <__hi0bits>
 80042da:	f1c0 0020 	rsb	r0, r0, #32
 80042de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e0:	4418      	add	r0, r3
 80042e2:	f010 001f 	ands.w	r0, r0, #31
 80042e6:	f000 8092 	beq.w	800440e <_dtoa_r+0x926>
 80042ea:	f1c0 0320 	rsb	r3, r0, #32
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	f340 808a 	ble.w	8004408 <_dtoa_r+0x920>
 80042f4:	f1c0 001c 	rsb	r0, r0, #28
 80042f8:	9b06      	ldr	r3, [sp, #24]
 80042fa:	4407      	add	r7, r0
 80042fc:	4403      	add	r3, r0
 80042fe:	9306      	str	r3, [sp, #24]
 8004300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004302:	4403      	add	r3, r0
 8004304:	9309      	str	r3, [sp, #36]	; 0x24
 8004306:	9b06      	ldr	r3, [sp, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	dd05      	ble.n	8004318 <_dtoa_r+0x830>
 800430c:	4659      	mov	r1, fp
 800430e:	461a      	mov	r2, r3
 8004310:	4628      	mov	r0, r5
 8004312:	f000 fc0d 	bl	8004b30 <__lshift>
 8004316:	4683      	mov	fp, r0
 8004318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	dd05      	ble.n	800432a <_dtoa_r+0x842>
 800431e:	4621      	mov	r1, r4
 8004320:	461a      	mov	r2, r3
 8004322:	4628      	mov	r0, r5
 8004324:	f000 fc04 	bl	8004b30 <__lshift>
 8004328:	4604      	mov	r4, r0
 800432a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d070      	beq.n	8004412 <_dtoa_r+0x92a>
 8004330:	4621      	mov	r1, r4
 8004332:	4658      	mov	r0, fp
 8004334:	f000 fc6c 	bl	8004c10 <__mcmp>
 8004338:	2800      	cmp	r0, #0
 800433a:	da6a      	bge.n	8004412 <_dtoa_r+0x92a>
 800433c:	2300      	movs	r3, #0
 800433e:	4659      	mov	r1, fp
 8004340:	220a      	movs	r2, #10
 8004342:	4628      	mov	r0, r5
 8004344:	f000 fa48 	bl	80047d8 <__multadd>
 8004348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800434a:	4683      	mov	fp, r0
 800434c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8194 	beq.w	800467e <_dtoa_r+0xb96>
 8004356:	4631      	mov	r1, r6
 8004358:	2300      	movs	r3, #0
 800435a:	220a      	movs	r2, #10
 800435c:	4628      	mov	r0, r5
 800435e:	f000 fa3b 	bl	80047d8 <__multadd>
 8004362:	f1b9 0f00 	cmp.w	r9, #0
 8004366:	4606      	mov	r6, r0
 8004368:	f300 8093 	bgt.w	8004492 <_dtoa_r+0x9aa>
 800436c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800436e:	2b02      	cmp	r3, #2
 8004370:	dc57      	bgt.n	8004422 <_dtoa_r+0x93a>
 8004372:	e08e      	b.n	8004492 <_dtoa_r+0x9aa>
 8004374:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800437a:	e757      	b.n	800422c <_dtoa_r+0x744>
 800437c:	9b08      	ldr	r3, [sp, #32]
 800437e:	1e5c      	subs	r4, r3, #1
 8004380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004382:	42a3      	cmp	r3, r4
 8004384:	bfb7      	itett	lt
 8004386:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004388:	1b1c      	subge	r4, r3, r4
 800438a:	1ae2      	sublt	r2, r4, r3
 800438c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800438e:	bfbe      	ittt	lt
 8004390:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004392:	189b      	addlt	r3, r3, r2
 8004394:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004396:	9b08      	ldr	r3, [sp, #32]
 8004398:	bfb8      	it	lt
 800439a:	2400      	movlt	r4, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	bfbb      	ittet	lt
 80043a0:	9b06      	ldrlt	r3, [sp, #24]
 80043a2:	9a08      	ldrlt	r2, [sp, #32]
 80043a4:	9f06      	ldrge	r7, [sp, #24]
 80043a6:	1a9f      	sublt	r7, r3, r2
 80043a8:	bfac      	ite	ge
 80043aa:	9b08      	ldrge	r3, [sp, #32]
 80043ac:	2300      	movlt	r3, #0
 80043ae:	e73f      	b.n	8004230 <_dtoa_r+0x748>
 80043b0:	3fe00000 	.word	0x3fe00000
 80043b4:	40240000 	.word	0x40240000
 80043b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043ba:	9f06      	ldr	r7, [sp, #24]
 80043bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80043be:	e742      	b.n	8004246 <_dtoa_r+0x75e>
 80043c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043c2:	e76b      	b.n	800429c <_dtoa_r+0x7b4>
 80043c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	dc19      	bgt.n	80043fe <_dtoa_r+0x916>
 80043ca:	9b04      	ldr	r3, [sp, #16]
 80043cc:	b9bb      	cbnz	r3, 80043fe <_dtoa_r+0x916>
 80043ce:	9b05      	ldr	r3, [sp, #20]
 80043d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d4:	b99b      	cbnz	r3, 80043fe <_dtoa_r+0x916>
 80043d6:	9b05      	ldr	r3, [sp, #20]
 80043d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	0d1b      	lsrs	r3, r3, #20
 80043de:	051b      	lsls	r3, r3, #20
 80043e0:	b183      	cbz	r3, 8004404 <_dtoa_r+0x91c>
 80043e2:	f04f 0801 	mov.w	r8, #1
 80043e6:	9b06      	ldr	r3, [sp, #24]
 80043e8:	3301      	adds	r3, #1
 80043ea:	9306      	str	r3, [sp, #24]
 80043ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ee:	3301      	adds	r3, #1
 80043f0:	9309      	str	r3, [sp, #36]	; 0x24
 80043f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f af6a 	bne.w	80042ce <_dtoa_r+0x7e6>
 80043fa:	2001      	movs	r0, #1
 80043fc:	e76f      	b.n	80042de <_dtoa_r+0x7f6>
 80043fe:	f04f 0800 	mov.w	r8, #0
 8004402:	e7f6      	b.n	80043f2 <_dtoa_r+0x90a>
 8004404:	4698      	mov	r8, r3
 8004406:	e7f4      	b.n	80043f2 <_dtoa_r+0x90a>
 8004408:	f43f af7d 	beq.w	8004306 <_dtoa_r+0x81e>
 800440c:	4618      	mov	r0, r3
 800440e:	301c      	adds	r0, #28
 8004410:	e772      	b.n	80042f8 <_dtoa_r+0x810>
 8004412:	9b08      	ldr	r3, [sp, #32]
 8004414:	2b00      	cmp	r3, #0
 8004416:	dc36      	bgt.n	8004486 <_dtoa_r+0x99e>
 8004418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800441a:	2b02      	cmp	r3, #2
 800441c:	dd33      	ble.n	8004486 <_dtoa_r+0x99e>
 800441e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004422:	f1b9 0f00 	cmp.w	r9, #0
 8004426:	d10d      	bne.n	8004444 <_dtoa_r+0x95c>
 8004428:	4621      	mov	r1, r4
 800442a:	464b      	mov	r3, r9
 800442c:	2205      	movs	r2, #5
 800442e:	4628      	mov	r0, r5
 8004430:	f000 f9d2 	bl	80047d8 <__multadd>
 8004434:	4601      	mov	r1, r0
 8004436:	4604      	mov	r4, r0
 8004438:	4658      	mov	r0, fp
 800443a:	f000 fbe9 	bl	8004c10 <__mcmp>
 800443e:	2800      	cmp	r0, #0
 8004440:	f73f adb8 	bgt.w	8003fb4 <_dtoa_r+0x4cc>
 8004444:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004446:	9f03      	ldr	r7, [sp, #12]
 8004448:	ea6f 0a03 	mvn.w	sl, r3
 800444c:	f04f 0800 	mov.w	r8, #0
 8004450:	4621      	mov	r1, r4
 8004452:	4628      	mov	r0, r5
 8004454:	f000 f99e 	bl	8004794 <_Bfree>
 8004458:	2e00      	cmp	r6, #0
 800445a:	f43f aea7 	beq.w	80041ac <_dtoa_r+0x6c4>
 800445e:	f1b8 0f00 	cmp.w	r8, #0
 8004462:	d005      	beq.n	8004470 <_dtoa_r+0x988>
 8004464:	45b0      	cmp	r8, r6
 8004466:	d003      	beq.n	8004470 <_dtoa_r+0x988>
 8004468:	4641      	mov	r1, r8
 800446a:	4628      	mov	r0, r5
 800446c:	f000 f992 	bl	8004794 <_Bfree>
 8004470:	4631      	mov	r1, r6
 8004472:	4628      	mov	r0, r5
 8004474:	f000 f98e 	bl	8004794 <_Bfree>
 8004478:	e698      	b.n	80041ac <_dtoa_r+0x6c4>
 800447a:	2400      	movs	r4, #0
 800447c:	4626      	mov	r6, r4
 800447e:	e7e1      	b.n	8004444 <_dtoa_r+0x95c>
 8004480:	46c2      	mov	sl, r8
 8004482:	4626      	mov	r6, r4
 8004484:	e596      	b.n	8003fb4 <_dtoa_r+0x4cc>
 8004486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80fd 	beq.w	800468c <_dtoa_r+0xba4>
 8004492:	2f00      	cmp	r7, #0
 8004494:	dd05      	ble.n	80044a2 <_dtoa_r+0x9ba>
 8004496:	4631      	mov	r1, r6
 8004498:	463a      	mov	r2, r7
 800449a:	4628      	mov	r0, r5
 800449c:	f000 fb48 	bl	8004b30 <__lshift>
 80044a0:	4606      	mov	r6, r0
 80044a2:	f1b8 0f00 	cmp.w	r8, #0
 80044a6:	d05c      	beq.n	8004562 <_dtoa_r+0xa7a>
 80044a8:	4628      	mov	r0, r5
 80044aa:	6871      	ldr	r1, [r6, #4]
 80044ac:	f000 f932 	bl	8004714 <_Balloc>
 80044b0:	4607      	mov	r7, r0
 80044b2:	b928      	cbnz	r0, 80044c0 <_dtoa_r+0x9d8>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80044ba:	4b7f      	ldr	r3, [pc, #508]	; (80046b8 <_dtoa_r+0xbd0>)
 80044bc:	f7ff bb28 	b.w	8003b10 <_dtoa_r+0x28>
 80044c0:	6932      	ldr	r2, [r6, #16]
 80044c2:	f106 010c 	add.w	r1, r6, #12
 80044c6:	3202      	adds	r2, #2
 80044c8:	0092      	lsls	r2, r2, #2
 80044ca:	300c      	adds	r0, #12
 80044cc:	f000 f914 	bl	80046f8 <memcpy>
 80044d0:	2201      	movs	r2, #1
 80044d2:	4639      	mov	r1, r7
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 fb2b 	bl	8004b30 <__lshift>
 80044da:	46b0      	mov	r8, r6
 80044dc:	4606      	mov	r6, r0
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	9308      	str	r3, [sp, #32]
 80044e4:	9b03      	ldr	r3, [sp, #12]
 80044e6:	444b      	add	r3, r9
 80044e8:	930a      	str	r3, [sp, #40]	; 0x28
 80044ea:	9b04      	ldr	r3, [sp, #16]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	9309      	str	r3, [sp, #36]	; 0x24
 80044f2:	9b08      	ldr	r3, [sp, #32]
 80044f4:	4621      	mov	r1, r4
 80044f6:	3b01      	subs	r3, #1
 80044f8:	4658      	mov	r0, fp
 80044fa:	9304      	str	r3, [sp, #16]
 80044fc:	f7ff fa66 	bl	80039cc <quorem>
 8004500:	4603      	mov	r3, r0
 8004502:	4641      	mov	r1, r8
 8004504:	3330      	adds	r3, #48	; 0x30
 8004506:	9006      	str	r0, [sp, #24]
 8004508:	4658      	mov	r0, fp
 800450a:	930b      	str	r3, [sp, #44]	; 0x2c
 800450c:	f000 fb80 	bl	8004c10 <__mcmp>
 8004510:	4632      	mov	r2, r6
 8004512:	4681      	mov	r9, r0
 8004514:	4621      	mov	r1, r4
 8004516:	4628      	mov	r0, r5
 8004518:	f000 fb96 	bl	8004c48 <__mdiff>
 800451c:	68c2      	ldr	r2, [r0, #12]
 800451e:	4607      	mov	r7, r0
 8004520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004522:	bb02      	cbnz	r2, 8004566 <_dtoa_r+0xa7e>
 8004524:	4601      	mov	r1, r0
 8004526:	4658      	mov	r0, fp
 8004528:	f000 fb72 	bl	8004c10 <__mcmp>
 800452c:	4602      	mov	r2, r0
 800452e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004530:	4639      	mov	r1, r7
 8004532:	4628      	mov	r0, r5
 8004534:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004538:	f000 f92c 	bl	8004794 <_Bfree>
 800453c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800453e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004540:	9f08      	ldr	r7, [sp, #32]
 8004542:	ea43 0102 	orr.w	r1, r3, r2
 8004546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004548:	430b      	orrs	r3, r1
 800454a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800454c:	d10d      	bne.n	800456a <_dtoa_r+0xa82>
 800454e:	2b39      	cmp	r3, #57	; 0x39
 8004550:	d029      	beq.n	80045a6 <_dtoa_r+0xabe>
 8004552:	f1b9 0f00 	cmp.w	r9, #0
 8004556:	dd01      	ble.n	800455c <_dtoa_r+0xa74>
 8004558:	9b06      	ldr	r3, [sp, #24]
 800455a:	3331      	adds	r3, #49	; 0x31
 800455c:	9a04      	ldr	r2, [sp, #16]
 800455e:	7013      	strb	r3, [r2, #0]
 8004560:	e776      	b.n	8004450 <_dtoa_r+0x968>
 8004562:	4630      	mov	r0, r6
 8004564:	e7b9      	b.n	80044da <_dtoa_r+0x9f2>
 8004566:	2201      	movs	r2, #1
 8004568:	e7e2      	b.n	8004530 <_dtoa_r+0xa48>
 800456a:	f1b9 0f00 	cmp.w	r9, #0
 800456e:	db06      	blt.n	800457e <_dtoa_r+0xa96>
 8004570:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004572:	ea41 0909 	orr.w	r9, r1, r9
 8004576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004578:	ea59 0101 	orrs.w	r1, r9, r1
 800457c:	d120      	bne.n	80045c0 <_dtoa_r+0xad8>
 800457e:	2a00      	cmp	r2, #0
 8004580:	ddec      	ble.n	800455c <_dtoa_r+0xa74>
 8004582:	4659      	mov	r1, fp
 8004584:	2201      	movs	r2, #1
 8004586:	4628      	mov	r0, r5
 8004588:	9308      	str	r3, [sp, #32]
 800458a:	f000 fad1 	bl	8004b30 <__lshift>
 800458e:	4621      	mov	r1, r4
 8004590:	4683      	mov	fp, r0
 8004592:	f000 fb3d 	bl	8004c10 <__mcmp>
 8004596:	2800      	cmp	r0, #0
 8004598:	9b08      	ldr	r3, [sp, #32]
 800459a:	dc02      	bgt.n	80045a2 <_dtoa_r+0xaba>
 800459c:	d1de      	bne.n	800455c <_dtoa_r+0xa74>
 800459e:	07da      	lsls	r2, r3, #31
 80045a0:	d5dc      	bpl.n	800455c <_dtoa_r+0xa74>
 80045a2:	2b39      	cmp	r3, #57	; 0x39
 80045a4:	d1d8      	bne.n	8004558 <_dtoa_r+0xa70>
 80045a6:	2339      	movs	r3, #57	; 0x39
 80045a8:	9a04      	ldr	r2, [sp, #16]
 80045aa:	7013      	strb	r3, [r2, #0]
 80045ac:	463b      	mov	r3, r7
 80045ae:	461f      	mov	r7, r3
 80045b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	2a39      	cmp	r2, #57	; 0x39
 80045b8:	d050      	beq.n	800465c <_dtoa_r+0xb74>
 80045ba:	3201      	adds	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e747      	b.n	8004450 <_dtoa_r+0x968>
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	dd03      	ble.n	80045cc <_dtoa_r+0xae4>
 80045c4:	2b39      	cmp	r3, #57	; 0x39
 80045c6:	d0ee      	beq.n	80045a6 <_dtoa_r+0xabe>
 80045c8:	3301      	adds	r3, #1
 80045ca:	e7c7      	b.n	800455c <_dtoa_r+0xa74>
 80045cc:	9a08      	ldr	r2, [sp, #32]
 80045ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80045d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80045d4:	428a      	cmp	r2, r1
 80045d6:	d02a      	beq.n	800462e <_dtoa_r+0xb46>
 80045d8:	4659      	mov	r1, fp
 80045da:	2300      	movs	r3, #0
 80045dc:	220a      	movs	r2, #10
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f8fa 	bl	80047d8 <__multadd>
 80045e4:	45b0      	cmp	r8, r6
 80045e6:	4683      	mov	fp, r0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	f04f 020a 	mov.w	r2, #10
 80045f0:	4641      	mov	r1, r8
 80045f2:	4628      	mov	r0, r5
 80045f4:	d107      	bne.n	8004606 <_dtoa_r+0xb1e>
 80045f6:	f000 f8ef 	bl	80047d8 <__multadd>
 80045fa:	4680      	mov	r8, r0
 80045fc:	4606      	mov	r6, r0
 80045fe:	9b08      	ldr	r3, [sp, #32]
 8004600:	3301      	adds	r3, #1
 8004602:	9308      	str	r3, [sp, #32]
 8004604:	e775      	b.n	80044f2 <_dtoa_r+0xa0a>
 8004606:	f000 f8e7 	bl	80047d8 <__multadd>
 800460a:	4631      	mov	r1, r6
 800460c:	4680      	mov	r8, r0
 800460e:	2300      	movs	r3, #0
 8004610:	220a      	movs	r2, #10
 8004612:	4628      	mov	r0, r5
 8004614:	f000 f8e0 	bl	80047d8 <__multadd>
 8004618:	4606      	mov	r6, r0
 800461a:	e7f0      	b.n	80045fe <_dtoa_r+0xb16>
 800461c:	f1b9 0f00 	cmp.w	r9, #0
 8004620:	bfcc      	ite	gt
 8004622:	464f      	movgt	r7, r9
 8004624:	2701      	movle	r7, #1
 8004626:	f04f 0800 	mov.w	r8, #0
 800462a:	9a03      	ldr	r2, [sp, #12]
 800462c:	4417      	add	r7, r2
 800462e:	4659      	mov	r1, fp
 8004630:	2201      	movs	r2, #1
 8004632:	4628      	mov	r0, r5
 8004634:	9308      	str	r3, [sp, #32]
 8004636:	f000 fa7b 	bl	8004b30 <__lshift>
 800463a:	4621      	mov	r1, r4
 800463c:	4683      	mov	fp, r0
 800463e:	f000 fae7 	bl	8004c10 <__mcmp>
 8004642:	2800      	cmp	r0, #0
 8004644:	dcb2      	bgt.n	80045ac <_dtoa_r+0xac4>
 8004646:	d102      	bne.n	800464e <_dtoa_r+0xb66>
 8004648:	9b08      	ldr	r3, [sp, #32]
 800464a:	07db      	lsls	r3, r3, #31
 800464c:	d4ae      	bmi.n	80045ac <_dtoa_r+0xac4>
 800464e:	463b      	mov	r3, r7
 8004650:	461f      	mov	r7, r3
 8004652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004656:	2a30      	cmp	r2, #48	; 0x30
 8004658:	d0fa      	beq.n	8004650 <_dtoa_r+0xb68>
 800465a:	e6f9      	b.n	8004450 <_dtoa_r+0x968>
 800465c:	9a03      	ldr	r2, [sp, #12]
 800465e:	429a      	cmp	r2, r3
 8004660:	d1a5      	bne.n	80045ae <_dtoa_r+0xac6>
 8004662:	2331      	movs	r3, #49	; 0x31
 8004664:	f10a 0a01 	add.w	sl, sl, #1
 8004668:	e779      	b.n	800455e <_dtoa_r+0xa76>
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <_dtoa_r+0xbd4>)
 800466c:	f7ff baa8 	b.w	8003bc0 <_dtoa_r+0xd8>
 8004670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004672:	2b00      	cmp	r3, #0
 8004674:	f47f aa81 	bne.w	8003b7a <_dtoa_r+0x92>
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <_dtoa_r+0xbd8>)
 800467a:	f7ff baa1 	b.w	8003bc0 <_dtoa_r+0xd8>
 800467e:	f1b9 0f00 	cmp.w	r9, #0
 8004682:	dc03      	bgt.n	800468c <_dtoa_r+0xba4>
 8004684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004686:	2b02      	cmp	r3, #2
 8004688:	f73f aecb 	bgt.w	8004422 <_dtoa_r+0x93a>
 800468c:	9f03      	ldr	r7, [sp, #12]
 800468e:	4621      	mov	r1, r4
 8004690:	4658      	mov	r0, fp
 8004692:	f7ff f99b 	bl	80039cc <quorem>
 8004696:	9a03      	ldr	r2, [sp, #12]
 8004698:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800469c:	f807 3b01 	strb.w	r3, [r7], #1
 80046a0:	1aba      	subs	r2, r7, r2
 80046a2:	4591      	cmp	r9, r2
 80046a4:	ddba      	ble.n	800461c <_dtoa_r+0xb34>
 80046a6:	4659      	mov	r1, fp
 80046a8:	2300      	movs	r3, #0
 80046aa:	220a      	movs	r2, #10
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 f893 	bl	80047d8 <__multadd>
 80046b2:	4683      	mov	fp, r0
 80046b4:	e7eb      	b.n	800468e <_dtoa_r+0xba6>
 80046b6:	bf00      	nop
 80046b8:	08006227 	.word	0x08006227
 80046bc:	08006184 	.word	0x08006184
 80046c0:	080061a8 	.word	0x080061a8

080046c4 <_localeconv_r>:
 80046c4:	4800      	ldr	r0, [pc, #0]	; (80046c8 <_localeconv_r+0x4>)
 80046c6:	4770      	bx	lr
 80046c8:	20000160 	.word	0x20000160

080046cc <malloc>:
 80046cc:	4b02      	ldr	r3, [pc, #8]	; (80046d8 <malloc+0xc>)
 80046ce:	4601      	mov	r1, r0
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	f000 bc1d 	b.w	8004f10 <_malloc_r>
 80046d6:	bf00      	nop
 80046d8:	2000000c 	.word	0x2000000c

080046dc <memchr>:
 80046dc:	4603      	mov	r3, r0
 80046de:	b510      	push	{r4, lr}
 80046e0:	b2c9      	uxtb	r1, r1
 80046e2:	4402      	add	r2, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	d101      	bne.n	80046ee <memchr+0x12>
 80046ea:	2000      	movs	r0, #0
 80046ec:	e003      	b.n	80046f6 <memchr+0x1a>
 80046ee:	7804      	ldrb	r4, [r0, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	428c      	cmp	r4, r1
 80046f4:	d1f6      	bne.n	80046e4 <memchr+0x8>
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <memcpy>:
 80046f8:	440a      	add	r2, r1
 80046fa:	4291      	cmp	r1, r2
 80046fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004700:	d100      	bne.n	8004704 <memcpy+0xc>
 8004702:	4770      	bx	lr
 8004704:	b510      	push	{r4, lr}
 8004706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800470a:	4291      	cmp	r1, r2
 800470c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004710:	d1f9      	bne.n	8004706 <memcpy+0xe>
 8004712:	bd10      	pop	{r4, pc}

08004714 <_Balloc>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004718:	4604      	mov	r4, r0
 800471a:	460d      	mov	r5, r1
 800471c:	b976      	cbnz	r6, 800473c <_Balloc+0x28>
 800471e:	2010      	movs	r0, #16
 8004720:	f7ff ffd4 	bl	80046cc <malloc>
 8004724:	4602      	mov	r2, r0
 8004726:	6260      	str	r0, [r4, #36]	; 0x24
 8004728:	b920      	cbnz	r0, 8004734 <_Balloc+0x20>
 800472a:	2166      	movs	r1, #102	; 0x66
 800472c:	4b17      	ldr	r3, [pc, #92]	; (800478c <_Balloc+0x78>)
 800472e:	4818      	ldr	r0, [pc, #96]	; (8004790 <_Balloc+0x7c>)
 8004730:	f000 fc72 	bl	8005018 <__assert_func>
 8004734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004738:	6006      	str	r6, [r0, #0]
 800473a:	60c6      	str	r6, [r0, #12]
 800473c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800473e:	68f3      	ldr	r3, [r6, #12]
 8004740:	b183      	cbz	r3, 8004764 <_Balloc+0x50>
 8004742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800474a:	b9b8      	cbnz	r0, 800477c <_Balloc+0x68>
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f605 	lsl.w	r6, r1, r5
 8004752:	1d72      	adds	r2, r6, #5
 8004754:	4620      	mov	r0, r4
 8004756:	0092      	lsls	r2, r2, #2
 8004758:	f000 fb5e 	bl	8004e18 <_calloc_r>
 800475c:	b160      	cbz	r0, 8004778 <_Balloc+0x64>
 800475e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004762:	e00e      	b.n	8004782 <_Balloc+0x6e>
 8004764:	2221      	movs	r2, #33	; 0x21
 8004766:	2104      	movs	r1, #4
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fb55 	bl	8004e18 <_calloc_r>
 800476e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004770:	60f0      	str	r0, [r6, #12]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e4      	bne.n	8004742 <_Balloc+0x2e>
 8004778:	2000      	movs	r0, #0
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	6802      	ldr	r2, [r0, #0]
 800477e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004782:	2300      	movs	r3, #0
 8004784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004788:	e7f7      	b.n	800477a <_Balloc+0x66>
 800478a:	bf00      	nop
 800478c:	080061b5 	.word	0x080061b5
 8004790:	08006238 	.word	0x08006238

08004794 <_Bfree>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004798:	4605      	mov	r5, r0
 800479a:	460c      	mov	r4, r1
 800479c:	b976      	cbnz	r6, 80047bc <_Bfree+0x28>
 800479e:	2010      	movs	r0, #16
 80047a0:	f7ff ff94 	bl	80046cc <malloc>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6268      	str	r0, [r5, #36]	; 0x24
 80047a8:	b920      	cbnz	r0, 80047b4 <_Bfree+0x20>
 80047aa:	218a      	movs	r1, #138	; 0x8a
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <_Bfree+0x3c>)
 80047ae:	4809      	ldr	r0, [pc, #36]	; (80047d4 <_Bfree+0x40>)
 80047b0:	f000 fc32 	bl	8005018 <__assert_func>
 80047b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047b8:	6006      	str	r6, [r0, #0]
 80047ba:	60c6      	str	r6, [r0, #12]
 80047bc:	b13c      	cbz	r4, 80047ce <_Bfree+0x3a>
 80047be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047c0:	6862      	ldr	r2, [r4, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047c8:	6021      	str	r1, [r4, #0]
 80047ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	080061b5 	.word	0x080061b5
 80047d4:	08006238 	.word	0x08006238

080047d8 <__multadd>:
 80047d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047dc:	4607      	mov	r7, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	461e      	mov	r6, r3
 80047e2:	2000      	movs	r0, #0
 80047e4:	690d      	ldr	r5, [r1, #16]
 80047e6:	f101 0c14 	add.w	ip, r1, #20
 80047ea:	f8dc 3000 	ldr.w	r3, [ip]
 80047ee:	3001      	adds	r0, #1
 80047f0:	b299      	uxth	r1, r3
 80047f2:	fb02 6101 	mla	r1, r2, r1, r6
 80047f6:	0c1e      	lsrs	r6, r3, #16
 80047f8:	0c0b      	lsrs	r3, r1, #16
 80047fa:	fb02 3306 	mla	r3, r2, r6, r3
 80047fe:	b289      	uxth	r1, r1
 8004800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004804:	4285      	cmp	r5, r0
 8004806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800480a:	f84c 1b04 	str.w	r1, [ip], #4
 800480e:	dcec      	bgt.n	80047ea <__multadd+0x12>
 8004810:	b30e      	cbz	r6, 8004856 <__multadd+0x7e>
 8004812:	68a3      	ldr	r3, [r4, #8]
 8004814:	42ab      	cmp	r3, r5
 8004816:	dc19      	bgt.n	800484c <__multadd+0x74>
 8004818:	6861      	ldr	r1, [r4, #4]
 800481a:	4638      	mov	r0, r7
 800481c:	3101      	adds	r1, #1
 800481e:	f7ff ff79 	bl	8004714 <_Balloc>
 8004822:	4680      	mov	r8, r0
 8004824:	b928      	cbnz	r0, 8004832 <__multadd+0x5a>
 8004826:	4602      	mov	r2, r0
 8004828:	21b5      	movs	r1, #181	; 0xb5
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <__multadd+0x84>)
 800482c:	480c      	ldr	r0, [pc, #48]	; (8004860 <__multadd+0x88>)
 800482e:	f000 fbf3 	bl	8005018 <__assert_func>
 8004832:	6922      	ldr	r2, [r4, #16]
 8004834:	f104 010c 	add.w	r1, r4, #12
 8004838:	3202      	adds	r2, #2
 800483a:	0092      	lsls	r2, r2, #2
 800483c:	300c      	adds	r0, #12
 800483e:	f7ff ff5b 	bl	80046f8 <memcpy>
 8004842:	4621      	mov	r1, r4
 8004844:	4638      	mov	r0, r7
 8004846:	f7ff ffa5 	bl	8004794 <_Bfree>
 800484a:	4644      	mov	r4, r8
 800484c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004850:	3501      	adds	r5, #1
 8004852:	615e      	str	r6, [r3, #20]
 8004854:	6125      	str	r5, [r4, #16]
 8004856:	4620      	mov	r0, r4
 8004858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485c:	08006227 	.word	0x08006227
 8004860:	08006238 	.word	0x08006238

08004864 <__hi0bits>:
 8004864:	0c02      	lsrs	r2, r0, #16
 8004866:	0412      	lsls	r2, r2, #16
 8004868:	4603      	mov	r3, r0
 800486a:	b9ca      	cbnz	r2, 80048a0 <__hi0bits+0x3c>
 800486c:	0403      	lsls	r3, r0, #16
 800486e:	2010      	movs	r0, #16
 8004870:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004874:	bf04      	itt	eq
 8004876:	021b      	lsleq	r3, r3, #8
 8004878:	3008      	addeq	r0, #8
 800487a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800487e:	bf04      	itt	eq
 8004880:	011b      	lsleq	r3, r3, #4
 8004882:	3004      	addeq	r0, #4
 8004884:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004888:	bf04      	itt	eq
 800488a:	009b      	lsleq	r3, r3, #2
 800488c:	3002      	addeq	r0, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	db05      	blt.n	800489e <__hi0bits+0x3a>
 8004892:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004896:	f100 0001 	add.w	r0, r0, #1
 800489a:	bf08      	it	eq
 800489c:	2020      	moveq	r0, #32
 800489e:	4770      	bx	lr
 80048a0:	2000      	movs	r0, #0
 80048a2:	e7e5      	b.n	8004870 <__hi0bits+0xc>

080048a4 <__lo0bits>:
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	4602      	mov	r2, r0
 80048a8:	f013 0007 	ands.w	r0, r3, #7
 80048ac:	d00b      	beq.n	80048c6 <__lo0bits+0x22>
 80048ae:	07d9      	lsls	r1, r3, #31
 80048b0:	d421      	bmi.n	80048f6 <__lo0bits+0x52>
 80048b2:	0798      	lsls	r0, r3, #30
 80048b4:	bf49      	itett	mi
 80048b6:	085b      	lsrmi	r3, r3, #1
 80048b8:	089b      	lsrpl	r3, r3, #2
 80048ba:	2001      	movmi	r0, #1
 80048bc:	6013      	strmi	r3, [r2, #0]
 80048be:	bf5c      	itt	pl
 80048c0:	2002      	movpl	r0, #2
 80048c2:	6013      	strpl	r3, [r2, #0]
 80048c4:	4770      	bx	lr
 80048c6:	b299      	uxth	r1, r3
 80048c8:	b909      	cbnz	r1, 80048ce <__lo0bits+0x2a>
 80048ca:	2010      	movs	r0, #16
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	b2d9      	uxtb	r1, r3
 80048d0:	b909      	cbnz	r1, 80048d6 <__lo0bits+0x32>
 80048d2:	3008      	adds	r0, #8
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	0719      	lsls	r1, r3, #28
 80048d8:	bf04      	itt	eq
 80048da:	091b      	lsreq	r3, r3, #4
 80048dc:	3004      	addeq	r0, #4
 80048de:	0799      	lsls	r1, r3, #30
 80048e0:	bf04      	itt	eq
 80048e2:	089b      	lsreq	r3, r3, #2
 80048e4:	3002      	addeq	r0, #2
 80048e6:	07d9      	lsls	r1, r3, #31
 80048e8:	d403      	bmi.n	80048f2 <__lo0bits+0x4e>
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	f100 0001 	add.w	r0, r0, #1
 80048f0:	d003      	beq.n	80048fa <__lo0bits+0x56>
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4770      	bx	lr
 80048f6:	2000      	movs	r0, #0
 80048f8:	4770      	bx	lr
 80048fa:	2020      	movs	r0, #32
 80048fc:	4770      	bx	lr
	...

08004900 <__i2b>:
 8004900:	b510      	push	{r4, lr}
 8004902:	460c      	mov	r4, r1
 8004904:	2101      	movs	r1, #1
 8004906:	f7ff ff05 	bl	8004714 <_Balloc>
 800490a:	4602      	mov	r2, r0
 800490c:	b928      	cbnz	r0, 800491a <__i2b+0x1a>
 800490e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <__i2b+0x24>)
 8004914:	4804      	ldr	r0, [pc, #16]	; (8004928 <__i2b+0x28>)
 8004916:	f000 fb7f 	bl	8005018 <__assert_func>
 800491a:	2301      	movs	r3, #1
 800491c:	6144      	str	r4, [r0, #20]
 800491e:	6103      	str	r3, [r0, #16]
 8004920:	bd10      	pop	{r4, pc}
 8004922:	bf00      	nop
 8004924:	08006227 	.word	0x08006227
 8004928:	08006238 	.word	0x08006238

0800492c <__multiply>:
 800492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	4691      	mov	r9, r2
 8004932:	690a      	ldr	r2, [r1, #16]
 8004934:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004938:	460c      	mov	r4, r1
 800493a:	429a      	cmp	r2, r3
 800493c:	bfbe      	ittt	lt
 800493e:	460b      	movlt	r3, r1
 8004940:	464c      	movlt	r4, r9
 8004942:	4699      	movlt	r9, r3
 8004944:	6927      	ldr	r7, [r4, #16]
 8004946:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800494a:	68a3      	ldr	r3, [r4, #8]
 800494c:	6861      	ldr	r1, [r4, #4]
 800494e:	eb07 060a 	add.w	r6, r7, sl
 8004952:	42b3      	cmp	r3, r6
 8004954:	b085      	sub	sp, #20
 8004956:	bfb8      	it	lt
 8004958:	3101      	addlt	r1, #1
 800495a:	f7ff fedb 	bl	8004714 <_Balloc>
 800495e:	b930      	cbnz	r0, 800496e <__multiply+0x42>
 8004960:	4602      	mov	r2, r0
 8004962:	f240 115d 	movw	r1, #349	; 0x15d
 8004966:	4b43      	ldr	r3, [pc, #268]	; (8004a74 <__multiply+0x148>)
 8004968:	4843      	ldr	r0, [pc, #268]	; (8004a78 <__multiply+0x14c>)
 800496a:	f000 fb55 	bl	8005018 <__assert_func>
 800496e:	f100 0514 	add.w	r5, r0, #20
 8004972:	462b      	mov	r3, r5
 8004974:	2200      	movs	r2, #0
 8004976:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800497a:	4543      	cmp	r3, r8
 800497c:	d321      	bcc.n	80049c2 <__multiply+0x96>
 800497e:	f104 0314 	add.w	r3, r4, #20
 8004982:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004986:	f109 0314 	add.w	r3, r9, #20
 800498a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800498e:	9202      	str	r2, [sp, #8]
 8004990:	1b3a      	subs	r2, r7, r4
 8004992:	3a15      	subs	r2, #21
 8004994:	f022 0203 	bic.w	r2, r2, #3
 8004998:	3204      	adds	r2, #4
 800499a:	f104 0115 	add.w	r1, r4, #21
 800499e:	428f      	cmp	r7, r1
 80049a0:	bf38      	it	cc
 80049a2:	2204      	movcc	r2, #4
 80049a4:	9201      	str	r2, [sp, #4]
 80049a6:	9a02      	ldr	r2, [sp, #8]
 80049a8:	9303      	str	r3, [sp, #12]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d80c      	bhi.n	80049c8 <__multiply+0x9c>
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	dd03      	ble.n	80049ba <__multiply+0x8e>
 80049b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d059      	beq.n	8004a6e <__multiply+0x142>
 80049ba:	6106      	str	r6, [r0, #16]
 80049bc:	b005      	add	sp, #20
 80049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c2:	f843 2b04 	str.w	r2, [r3], #4
 80049c6:	e7d8      	b.n	800497a <__multiply+0x4e>
 80049c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80049cc:	f1ba 0f00 	cmp.w	sl, #0
 80049d0:	d023      	beq.n	8004a1a <__multiply+0xee>
 80049d2:	46a9      	mov	r9, r5
 80049d4:	f04f 0c00 	mov.w	ip, #0
 80049d8:	f104 0e14 	add.w	lr, r4, #20
 80049dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80049e0:	f8d9 1000 	ldr.w	r1, [r9]
 80049e4:	fa1f fb82 	uxth.w	fp, r2
 80049e8:	b289      	uxth	r1, r1
 80049ea:	fb0a 110b 	mla	r1, sl, fp, r1
 80049ee:	4461      	add	r1, ip
 80049f0:	f8d9 c000 	ldr.w	ip, [r9]
 80049f4:	0c12      	lsrs	r2, r2, #16
 80049f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80049fa:	fb0a c202 	mla	r2, sl, r2, ip
 80049fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004a02:	b289      	uxth	r1, r1
 8004a04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a08:	4577      	cmp	r7, lr
 8004a0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a0e:	f849 1b04 	str.w	r1, [r9], #4
 8004a12:	d8e3      	bhi.n	80049dc <__multiply+0xb0>
 8004a14:	9a01      	ldr	r2, [sp, #4]
 8004a16:	f845 c002 	str.w	ip, [r5, r2]
 8004a1a:	9a03      	ldr	r2, [sp, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a22:	f1b9 0f00 	cmp.w	r9, #0
 8004a26:	d020      	beq.n	8004a6a <__multiply+0x13e>
 8004a28:	46ae      	mov	lr, r5
 8004a2a:	f04f 0a00 	mov.w	sl, #0
 8004a2e:	6829      	ldr	r1, [r5, #0]
 8004a30:	f104 0c14 	add.w	ip, r4, #20
 8004a34:	f8bc b000 	ldrh.w	fp, [ip]
 8004a38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004a3c:	b289      	uxth	r1, r1
 8004a3e:	fb09 220b 	mla	r2, r9, fp, r2
 8004a42:	4492      	add	sl, r2
 8004a44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004a48:	f84e 1b04 	str.w	r1, [lr], #4
 8004a4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004a50:	f8be 1000 	ldrh.w	r1, [lr]
 8004a54:	0c12      	lsrs	r2, r2, #16
 8004a56:	fb09 1102 	mla	r1, r9, r2, r1
 8004a5a:	4567      	cmp	r7, ip
 8004a5c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004a60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a64:	d8e6      	bhi.n	8004a34 <__multiply+0x108>
 8004a66:	9a01      	ldr	r2, [sp, #4]
 8004a68:	50a9      	str	r1, [r5, r2]
 8004a6a:	3504      	adds	r5, #4
 8004a6c:	e79b      	b.n	80049a6 <__multiply+0x7a>
 8004a6e:	3e01      	subs	r6, #1
 8004a70:	e79d      	b.n	80049ae <__multiply+0x82>
 8004a72:	bf00      	nop
 8004a74:	08006227 	.word	0x08006227
 8004a78:	08006238 	.word	0x08006238

08004a7c <__pow5mult>:
 8004a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a80:	4615      	mov	r5, r2
 8004a82:	f012 0203 	ands.w	r2, r2, #3
 8004a86:	4606      	mov	r6, r0
 8004a88:	460f      	mov	r7, r1
 8004a8a:	d007      	beq.n	8004a9c <__pow5mult+0x20>
 8004a8c:	4c25      	ldr	r4, [pc, #148]	; (8004b24 <__pow5mult+0xa8>)
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	2300      	movs	r3, #0
 8004a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a96:	f7ff fe9f 	bl	80047d8 <__multadd>
 8004a9a:	4607      	mov	r7, r0
 8004a9c:	10ad      	asrs	r5, r5, #2
 8004a9e:	d03d      	beq.n	8004b1c <__pow5mult+0xa0>
 8004aa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004aa2:	b97c      	cbnz	r4, 8004ac4 <__pow5mult+0x48>
 8004aa4:	2010      	movs	r0, #16
 8004aa6:	f7ff fe11 	bl	80046cc <malloc>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6270      	str	r0, [r6, #36]	; 0x24
 8004aae:	b928      	cbnz	r0, 8004abc <__pow5mult+0x40>
 8004ab0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <__pow5mult+0xac>)
 8004ab6:	481d      	ldr	r0, [pc, #116]	; (8004b2c <__pow5mult+0xb0>)
 8004ab8:	f000 faae 	bl	8005018 <__assert_func>
 8004abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ac0:	6004      	str	r4, [r0, #0]
 8004ac2:	60c4      	str	r4, [r0, #12]
 8004ac4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004acc:	b94c      	cbnz	r4, 8004ae2 <__pow5mult+0x66>
 8004ace:	f240 2171 	movw	r1, #625	; 0x271
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ff14 	bl	8004900 <__i2b>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ae0:	6003      	str	r3, [r0, #0]
 8004ae2:	f04f 0900 	mov.w	r9, #0
 8004ae6:	07eb      	lsls	r3, r5, #31
 8004ae8:	d50a      	bpl.n	8004b00 <__pow5mult+0x84>
 8004aea:	4639      	mov	r1, r7
 8004aec:	4622      	mov	r2, r4
 8004aee:	4630      	mov	r0, r6
 8004af0:	f7ff ff1c 	bl	800492c <__multiply>
 8004af4:	4680      	mov	r8, r0
 8004af6:	4639      	mov	r1, r7
 8004af8:	4630      	mov	r0, r6
 8004afa:	f7ff fe4b 	bl	8004794 <_Bfree>
 8004afe:	4647      	mov	r7, r8
 8004b00:	106d      	asrs	r5, r5, #1
 8004b02:	d00b      	beq.n	8004b1c <__pow5mult+0xa0>
 8004b04:	6820      	ldr	r0, [r4, #0]
 8004b06:	b938      	cbnz	r0, 8004b18 <__pow5mult+0x9c>
 8004b08:	4622      	mov	r2, r4
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f7ff ff0d 	bl	800492c <__multiply>
 8004b12:	6020      	str	r0, [r4, #0]
 8004b14:	f8c0 9000 	str.w	r9, [r0]
 8004b18:	4604      	mov	r4, r0
 8004b1a:	e7e4      	b.n	8004ae6 <__pow5mult+0x6a>
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b22:	bf00      	nop
 8004b24:	08006388 	.word	0x08006388
 8004b28:	080061b5 	.word	0x080061b5
 8004b2c:	08006238 	.word	0x08006238

08004b30 <__lshift>:
 8004b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b34:	460c      	mov	r4, r1
 8004b36:	4607      	mov	r7, r0
 8004b38:	4691      	mov	r9, r2
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b42:	68a3      	ldr	r3, [r4, #8]
 8004b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b48:	f108 0601 	add.w	r6, r8, #1
 8004b4c:	42b3      	cmp	r3, r6
 8004b4e:	db0b      	blt.n	8004b68 <__lshift+0x38>
 8004b50:	4638      	mov	r0, r7
 8004b52:	f7ff fddf 	bl	8004714 <_Balloc>
 8004b56:	4605      	mov	r5, r0
 8004b58:	b948      	cbnz	r0, 8004b6e <__lshift+0x3e>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b60:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <__lshift+0xd8>)
 8004b62:	482a      	ldr	r0, [pc, #168]	; (8004c0c <__lshift+0xdc>)
 8004b64:	f000 fa58 	bl	8005018 <__assert_func>
 8004b68:	3101      	adds	r1, #1
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	e7ee      	b.n	8004b4c <__lshift+0x1c>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f100 0114 	add.w	r1, r0, #20
 8004b74:	f100 0210 	add.w	r2, r0, #16
 8004b78:	4618      	mov	r0, r3
 8004b7a:	4553      	cmp	r3, sl
 8004b7c:	db37      	blt.n	8004bee <__lshift+0xbe>
 8004b7e:	6920      	ldr	r0, [r4, #16]
 8004b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b84:	f104 0314 	add.w	r3, r4, #20
 8004b88:	f019 091f 	ands.w	r9, r9, #31
 8004b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b94:	d02f      	beq.n	8004bf6 <__lshift+0xc6>
 8004b96:	468a      	mov	sl, r1
 8004b98:	f04f 0c00 	mov.w	ip, #0
 8004b9c:	f1c9 0e20 	rsb	lr, r9, #32
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	fa02 f209 	lsl.w	r2, r2, r9
 8004ba6:	ea42 020c 	orr.w	r2, r2, ip
 8004baa:	f84a 2b04 	str.w	r2, [sl], #4
 8004bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004bb8:	d8f2      	bhi.n	8004ba0 <__lshift+0x70>
 8004bba:	1b03      	subs	r3, r0, r4
 8004bbc:	3b15      	subs	r3, #21
 8004bbe:	f023 0303 	bic.w	r3, r3, #3
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	f104 0215 	add.w	r2, r4, #21
 8004bc8:	4290      	cmp	r0, r2
 8004bca:	bf38      	it	cc
 8004bcc:	2304      	movcc	r3, #4
 8004bce:	f841 c003 	str.w	ip, [r1, r3]
 8004bd2:	f1bc 0f00 	cmp.w	ip, #0
 8004bd6:	d001      	beq.n	8004bdc <__lshift+0xac>
 8004bd8:	f108 0602 	add.w	r6, r8, #2
 8004bdc:	3e01      	subs	r6, #1
 8004bde:	4638      	mov	r0, r7
 8004be0:	4621      	mov	r1, r4
 8004be2:	612e      	str	r6, [r5, #16]
 8004be4:	f7ff fdd6 	bl	8004794 <_Bfree>
 8004be8:	4628      	mov	r0, r5
 8004bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bee:	f842 0f04 	str.w	r0, [r2, #4]!
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	e7c1      	b.n	8004b7a <__lshift+0x4a>
 8004bf6:	3904      	subs	r1, #4
 8004bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bfc:	4298      	cmp	r0, r3
 8004bfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c02:	d8f9      	bhi.n	8004bf8 <__lshift+0xc8>
 8004c04:	e7ea      	b.n	8004bdc <__lshift+0xac>
 8004c06:	bf00      	nop
 8004c08:	08006227 	.word	0x08006227
 8004c0c:	08006238 	.word	0x08006238

08004c10 <__mcmp>:
 8004c10:	4603      	mov	r3, r0
 8004c12:	690a      	ldr	r2, [r1, #16]
 8004c14:	6900      	ldr	r0, [r0, #16]
 8004c16:	b530      	push	{r4, r5, lr}
 8004c18:	1a80      	subs	r0, r0, r2
 8004c1a:	d10d      	bne.n	8004c38 <__mcmp+0x28>
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	3114      	adds	r1, #20
 8004c20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004c24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c30:	4295      	cmp	r5, r2
 8004c32:	d002      	beq.n	8004c3a <__mcmp+0x2a>
 8004c34:	d304      	bcc.n	8004c40 <__mcmp+0x30>
 8004c36:	2001      	movs	r0, #1
 8004c38:	bd30      	pop	{r4, r5, pc}
 8004c3a:	42a3      	cmp	r3, r4
 8004c3c:	d3f4      	bcc.n	8004c28 <__mcmp+0x18>
 8004c3e:	e7fb      	b.n	8004c38 <__mcmp+0x28>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c44:	e7f8      	b.n	8004c38 <__mcmp+0x28>
	...

08004c48 <__mdiff>:
 8004c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	4607      	mov	r7, r0
 8004c50:	4611      	mov	r1, r2
 8004c52:	4628      	mov	r0, r5
 8004c54:	4614      	mov	r4, r2
 8004c56:	f7ff ffdb 	bl	8004c10 <__mcmp>
 8004c5a:	1e06      	subs	r6, r0, #0
 8004c5c:	d111      	bne.n	8004c82 <__mdiff+0x3a>
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4638      	mov	r0, r7
 8004c62:	f7ff fd57 	bl	8004714 <_Balloc>
 8004c66:	4602      	mov	r2, r0
 8004c68:	b928      	cbnz	r0, 8004c76 <__mdiff+0x2e>
 8004c6a:	f240 2132 	movw	r1, #562	; 0x232
 8004c6e:	4b3a      	ldr	r3, [pc, #232]	; (8004d58 <__mdiff+0x110>)
 8004c70:	483a      	ldr	r0, [pc, #232]	; (8004d5c <__mdiff+0x114>)
 8004c72:	f000 f9d1 	bl	8005018 <__assert_func>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c82:	bfa4      	itt	ge
 8004c84:	4623      	movge	r3, r4
 8004c86:	462c      	movge	r4, r5
 8004c88:	4638      	mov	r0, r7
 8004c8a:	6861      	ldr	r1, [r4, #4]
 8004c8c:	bfa6      	itte	ge
 8004c8e:	461d      	movge	r5, r3
 8004c90:	2600      	movge	r6, #0
 8004c92:	2601      	movlt	r6, #1
 8004c94:	f7ff fd3e 	bl	8004714 <_Balloc>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	b918      	cbnz	r0, 8004ca4 <__mdiff+0x5c>
 8004c9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <__mdiff+0x110>)
 8004ca2:	e7e5      	b.n	8004c70 <__mdiff+0x28>
 8004ca4:	f102 0814 	add.w	r8, r2, #20
 8004ca8:	46c2      	mov	sl, r8
 8004caa:	f04f 0c00 	mov.w	ip, #0
 8004cae:	6927      	ldr	r7, [r4, #16]
 8004cb0:	60c6      	str	r6, [r0, #12]
 8004cb2:	692e      	ldr	r6, [r5, #16]
 8004cb4:	f104 0014 	add.w	r0, r4, #20
 8004cb8:	f105 0914 	add.w	r9, r5, #20
 8004cbc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004cc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004cc4:	3410      	adds	r4, #16
 8004cc6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004cca:	f859 3b04 	ldr.w	r3, [r9], #4
 8004cce:	fa1f f18b 	uxth.w	r1, fp
 8004cd2:	448c      	add	ip, r1
 8004cd4:	b299      	uxth	r1, r3
 8004cd6:	0c1b      	lsrs	r3, r3, #16
 8004cd8:	ebac 0101 	sub.w	r1, ip, r1
 8004cdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ce0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ce4:	b289      	uxth	r1, r1
 8004ce6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004cea:	454e      	cmp	r6, r9
 8004cec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004cf0:	f84a 3b04 	str.w	r3, [sl], #4
 8004cf4:	d8e7      	bhi.n	8004cc6 <__mdiff+0x7e>
 8004cf6:	1b73      	subs	r3, r6, r5
 8004cf8:	3b15      	subs	r3, #21
 8004cfa:	f023 0303 	bic.w	r3, r3, #3
 8004cfe:	3515      	adds	r5, #21
 8004d00:	3304      	adds	r3, #4
 8004d02:	42ae      	cmp	r6, r5
 8004d04:	bf38      	it	cc
 8004d06:	2304      	movcc	r3, #4
 8004d08:	4418      	add	r0, r3
 8004d0a:	4443      	add	r3, r8
 8004d0c:	461e      	mov	r6, r3
 8004d0e:	4605      	mov	r5, r0
 8004d10:	4575      	cmp	r5, lr
 8004d12:	d30e      	bcc.n	8004d32 <__mdiff+0xea>
 8004d14:	f10e 0103 	add.w	r1, lr, #3
 8004d18:	1a09      	subs	r1, r1, r0
 8004d1a:	f021 0103 	bic.w	r1, r1, #3
 8004d1e:	3803      	subs	r0, #3
 8004d20:	4586      	cmp	lr, r0
 8004d22:	bf38      	it	cc
 8004d24:	2100      	movcc	r1, #0
 8004d26:	4419      	add	r1, r3
 8004d28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004d2c:	b18b      	cbz	r3, 8004d52 <__mdiff+0x10a>
 8004d2e:	6117      	str	r7, [r2, #16]
 8004d30:	e7a4      	b.n	8004c7c <__mdiff+0x34>
 8004d32:	f855 8b04 	ldr.w	r8, [r5], #4
 8004d36:	fa1f f188 	uxth.w	r1, r8
 8004d3a:	4461      	add	r1, ip
 8004d3c:	140c      	asrs	r4, r1, #16
 8004d3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004d42:	b289      	uxth	r1, r1
 8004d44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004d48:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004d4c:	f846 1b04 	str.w	r1, [r6], #4
 8004d50:	e7de      	b.n	8004d10 <__mdiff+0xc8>
 8004d52:	3f01      	subs	r7, #1
 8004d54:	e7e8      	b.n	8004d28 <__mdiff+0xe0>
 8004d56:	bf00      	nop
 8004d58:	08006227 	.word	0x08006227
 8004d5c:	08006238 	.word	0x08006238

08004d60 <__d2b>:
 8004d60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d64:	2101      	movs	r1, #1
 8004d66:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004d6a:	4690      	mov	r8, r2
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	f7ff fcd1 	bl	8004714 <_Balloc>
 8004d72:	4604      	mov	r4, r0
 8004d74:	b930      	cbnz	r0, 8004d84 <__d2b+0x24>
 8004d76:	4602      	mov	r2, r0
 8004d78:	f240 310a 	movw	r1, #778	; 0x30a
 8004d7c:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <__d2b+0xb0>)
 8004d7e:	4825      	ldr	r0, [pc, #148]	; (8004e14 <__d2b+0xb4>)
 8004d80:	f000 f94a 	bl	8005018 <__assert_func>
 8004d84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004d88:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004d8c:	bb2d      	cbnz	r5, 8004dda <__d2b+0x7a>
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	f1b8 0300 	subs.w	r3, r8, #0
 8004d94:	d026      	beq.n	8004de4 <__d2b+0x84>
 8004d96:	4668      	mov	r0, sp
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	f7ff fd83 	bl	80048a4 <__lo0bits>
 8004d9e:	9900      	ldr	r1, [sp, #0]
 8004da0:	b1f0      	cbz	r0, 8004de0 <__d2b+0x80>
 8004da2:	9a01      	ldr	r2, [sp, #4]
 8004da4:	f1c0 0320 	rsb	r3, r0, #32
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	430b      	orrs	r3, r1
 8004dae:	40c2      	lsrs	r2, r0
 8004db0:	6163      	str	r3, [r4, #20]
 8004db2:	9201      	str	r2, [sp, #4]
 8004db4:	9b01      	ldr	r3, [sp, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf14      	ite	ne
 8004dba:	2102      	movne	r1, #2
 8004dbc:	2101      	moveq	r1, #1
 8004dbe:	61a3      	str	r3, [r4, #24]
 8004dc0:	6121      	str	r1, [r4, #16]
 8004dc2:	b1c5      	cbz	r5, 8004df6 <__d2b+0x96>
 8004dc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004dc8:	4405      	add	r5, r0
 8004dca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004dce:	603d      	str	r5, [r7, #0]
 8004dd0:	6030      	str	r0, [r6, #0]
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	b002      	add	sp, #8
 8004dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dde:	e7d6      	b.n	8004d8e <__d2b+0x2e>
 8004de0:	6161      	str	r1, [r4, #20]
 8004de2:	e7e7      	b.n	8004db4 <__d2b+0x54>
 8004de4:	a801      	add	r0, sp, #4
 8004de6:	f7ff fd5d 	bl	80048a4 <__lo0bits>
 8004dea:	2101      	movs	r1, #1
 8004dec:	9b01      	ldr	r3, [sp, #4]
 8004dee:	6121      	str	r1, [r4, #16]
 8004df0:	6163      	str	r3, [r4, #20]
 8004df2:	3020      	adds	r0, #32
 8004df4:	e7e5      	b.n	8004dc2 <__d2b+0x62>
 8004df6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004dfa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004dfe:	6038      	str	r0, [r7, #0]
 8004e00:	6918      	ldr	r0, [r3, #16]
 8004e02:	f7ff fd2f 	bl	8004864 <__hi0bits>
 8004e06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004e0a:	6031      	str	r1, [r6, #0]
 8004e0c:	e7e1      	b.n	8004dd2 <__d2b+0x72>
 8004e0e:	bf00      	nop
 8004e10:	08006227 	.word	0x08006227
 8004e14:	08006238 	.word	0x08006238

08004e18 <_calloc_r>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	fba1 5402 	umull	r5, r4, r1, r2
 8004e1e:	b934      	cbnz	r4, 8004e2e <_calloc_r+0x16>
 8004e20:	4629      	mov	r1, r5
 8004e22:	f000 f875 	bl	8004f10 <_malloc_r>
 8004e26:	4606      	mov	r6, r0
 8004e28:	b928      	cbnz	r0, 8004e36 <_calloc_r+0x1e>
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
 8004e2e:	220c      	movs	r2, #12
 8004e30:	2600      	movs	r6, #0
 8004e32:	6002      	str	r2, [r0, #0]
 8004e34:	e7f9      	b.n	8004e2a <_calloc_r+0x12>
 8004e36:	462a      	mov	r2, r5
 8004e38:	4621      	mov	r1, r4
 8004e3a:	f7fe f95f 	bl	80030fc <memset>
 8004e3e:	e7f4      	b.n	8004e2a <_calloc_r+0x12>

08004e40 <_free_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4605      	mov	r5, r0
 8004e44:	2900      	cmp	r1, #0
 8004e46:	d040      	beq.n	8004eca <_free_r+0x8a>
 8004e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e4c:	1f0c      	subs	r4, r1, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfb8      	it	lt
 8004e52:	18e4      	addlt	r4, r4, r3
 8004e54:	f000 f922 	bl	800509c <__malloc_lock>
 8004e58:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <_free_r+0x8c>)
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	b933      	cbnz	r3, 8004e6c <_free_r+0x2c>
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	6014      	str	r4, [r2, #0]
 8004e62:	4628      	mov	r0, r5
 8004e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e68:	f000 b91e 	b.w	80050a8 <__malloc_unlock>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d908      	bls.n	8004e82 <_free_r+0x42>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	1821      	adds	r1, r4, r0
 8004e74:	428b      	cmp	r3, r1
 8004e76:	bf01      	itttt	eq
 8004e78:	6819      	ldreq	r1, [r3, #0]
 8004e7a:	685b      	ldreq	r3, [r3, #4]
 8004e7c:	1809      	addeq	r1, r1, r0
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	e7ed      	b.n	8004e5e <_free_r+0x1e>
 8004e82:	461a      	mov	r2, r3
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	b10b      	cbz	r3, 8004e8c <_free_r+0x4c>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d9fa      	bls.n	8004e82 <_free_r+0x42>
 8004e8c:	6811      	ldr	r1, [r2, #0]
 8004e8e:	1850      	adds	r0, r2, r1
 8004e90:	42a0      	cmp	r0, r4
 8004e92:	d10b      	bne.n	8004eac <_free_r+0x6c>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	4401      	add	r1, r0
 8004e98:	1850      	adds	r0, r2, r1
 8004e9a:	4283      	cmp	r3, r0
 8004e9c:	6011      	str	r1, [r2, #0]
 8004e9e:	d1e0      	bne.n	8004e62 <_free_r+0x22>
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4401      	add	r1, r0
 8004ea6:	6011      	str	r1, [r2, #0]
 8004ea8:	6053      	str	r3, [r2, #4]
 8004eaa:	e7da      	b.n	8004e62 <_free_r+0x22>
 8004eac:	d902      	bls.n	8004eb4 <_free_r+0x74>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	e7d6      	b.n	8004e62 <_free_r+0x22>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	1821      	adds	r1, r4, r0
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	bf01      	itttt	eq
 8004ebc:	6819      	ldreq	r1, [r3, #0]
 8004ebe:	685b      	ldreq	r3, [r3, #4]
 8004ec0:	1809      	addeq	r1, r1, r0
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	6063      	str	r3, [r4, #4]
 8004ec6:	6054      	str	r4, [r2, #4]
 8004ec8:	e7cb      	b.n	8004e62 <_free_r+0x22>
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	200002e8 	.word	0x200002e8

08004ed0 <sbrk_aligned>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	4e0e      	ldr	r6, [pc, #56]	; (8004f0c <sbrk_aligned+0x3c>)
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	6831      	ldr	r1, [r6, #0]
 8004ed8:	4605      	mov	r5, r0
 8004eda:	b911      	cbnz	r1, 8004ee2 <sbrk_aligned+0x12>
 8004edc:	f000 f88c 	bl	8004ff8 <_sbrk_r>
 8004ee0:	6030      	str	r0, [r6, #0]
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f887 	bl	8004ff8 <_sbrk_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d00a      	beq.n	8004f04 <sbrk_aligned+0x34>
 8004eee:	1cc4      	adds	r4, r0, #3
 8004ef0:	f024 0403 	bic.w	r4, r4, #3
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d007      	beq.n	8004f08 <sbrk_aligned+0x38>
 8004ef8:	1a21      	subs	r1, r4, r0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f87c 	bl	8004ff8 <_sbrk_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d101      	bne.n	8004f08 <sbrk_aligned+0x38>
 8004f04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f08:	4620      	mov	r0, r4
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	200002ec 	.word	0x200002ec

08004f10 <_malloc_r>:
 8004f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	1ccd      	adds	r5, r1, #3
 8004f16:	f025 0503 	bic.w	r5, r5, #3
 8004f1a:	3508      	adds	r5, #8
 8004f1c:	2d0c      	cmp	r5, #12
 8004f1e:	bf38      	it	cc
 8004f20:	250c      	movcc	r5, #12
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	4607      	mov	r7, r0
 8004f26:	db01      	blt.n	8004f2c <_malloc_r+0x1c>
 8004f28:	42a9      	cmp	r1, r5
 8004f2a:	d905      	bls.n	8004f38 <_malloc_r+0x28>
 8004f2c:	230c      	movs	r3, #12
 8004f2e:	2600      	movs	r6, #0
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4630      	mov	r0, r6
 8004f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f38:	4e2e      	ldr	r6, [pc, #184]	; (8004ff4 <_malloc_r+0xe4>)
 8004f3a:	f000 f8af 	bl	800509c <__malloc_lock>
 8004f3e:	6833      	ldr	r3, [r6, #0]
 8004f40:	461c      	mov	r4, r3
 8004f42:	bb34      	cbnz	r4, 8004f92 <_malloc_r+0x82>
 8004f44:	4629      	mov	r1, r5
 8004f46:	4638      	mov	r0, r7
 8004f48:	f7ff ffc2 	bl	8004ed0 <sbrk_aligned>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	4604      	mov	r4, r0
 8004f50:	d14d      	bne.n	8004fee <_malloc_r+0xde>
 8004f52:	6834      	ldr	r4, [r6, #0]
 8004f54:	4626      	mov	r6, r4
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d140      	bne.n	8004fdc <_malloc_r+0xcc>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4638      	mov	r0, r7
 8004f60:	eb04 0803 	add.w	r8, r4, r3
 8004f64:	f000 f848 	bl	8004ff8 <_sbrk_r>
 8004f68:	4580      	cmp	r8, r0
 8004f6a:	d13a      	bne.n	8004fe2 <_malloc_r+0xd2>
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	3503      	adds	r5, #3
 8004f70:	1a6d      	subs	r5, r5, r1
 8004f72:	f025 0503 	bic.w	r5, r5, #3
 8004f76:	3508      	adds	r5, #8
 8004f78:	2d0c      	cmp	r5, #12
 8004f7a:	bf38      	it	cc
 8004f7c:	250c      	movcc	r5, #12
 8004f7e:	4638      	mov	r0, r7
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7ff ffa5 	bl	8004ed0 <sbrk_aligned>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d02b      	beq.n	8004fe2 <_malloc_r+0xd2>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	442b      	add	r3, r5
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	e00e      	b.n	8004fb0 <_malloc_r+0xa0>
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	1b52      	subs	r2, r2, r5
 8004f96:	d41e      	bmi.n	8004fd6 <_malloc_r+0xc6>
 8004f98:	2a0b      	cmp	r2, #11
 8004f9a:	d916      	bls.n	8004fca <_malloc_r+0xba>
 8004f9c:	1961      	adds	r1, r4, r5
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	6025      	str	r5, [r4, #0]
 8004fa2:	bf18      	it	ne
 8004fa4:	6059      	strne	r1, [r3, #4]
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	bf08      	it	eq
 8004faa:	6031      	streq	r1, [r6, #0]
 8004fac:	5162      	str	r2, [r4, r5]
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f104 060b 	add.w	r6, r4, #11
 8004fb6:	f000 f877 	bl	80050a8 <__malloc_unlock>
 8004fba:	f026 0607 	bic.w	r6, r6, #7
 8004fbe:	1d23      	adds	r3, r4, #4
 8004fc0:	1af2      	subs	r2, r6, r3
 8004fc2:	d0b6      	beq.n	8004f32 <_malloc_r+0x22>
 8004fc4:	1b9b      	subs	r3, r3, r6
 8004fc6:	50a3      	str	r3, [r4, r2]
 8004fc8:	e7b3      	b.n	8004f32 <_malloc_r+0x22>
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	bf0c      	ite	eq
 8004fd0:	6032      	streq	r2, [r6, #0]
 8004fd2:	605a      	strne	r2, [r3, #4]
 8004fd4:	e7ec      	b.n	8004fb0 <_malloc_r+0xa0>
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	6864      	ldr	r4, [r4, #4]
 8004fda:	e7b2      	b.n	8004f42 <_malloc_r+0x32>
 8004fdc:	4634      	mov	r4, r6
 8004fde:	6876      	ldr	r6, [r6, #4]
 8004fe0:	e7b9      	b.n	8004f56 <_malloc_r+0x46>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	f000 f85e 	bl	80050a8 <__malloc_unlock>
 8004fec:	e7a1      	b.n	8004f32 <_malloc_r+0x22>
 8004fee:	6025      	str	r5, [r4, #0]
 8004ff0:	e7de      	b.n	8004fb0 <_malloc_r+0xa0>
 8004ff2:	bf00      	nop
 8004ff4:	200002e8 	.word	0x200002e8

08004ff8 <_sbrk_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4d05      	ldr	r5, [pc, #20]	; (8005014 <_sbrk_r+0x1c>)
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	f7fc fc1a 	bl	800183c <_sbrk>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_sbrk_r+0x1a>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_sbrk_r+0x1a>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	200002f0 	.word	0x200002f0

08005018 <__assert_func>:
 8005018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800501a:	4614      	mov	r4, r2
 800501c:	461a      	mov	r2, r3
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <__assert_func+0x2c>)
 8005020:	4605      	mov	r5, r0
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68d8      	ldr	r0, [r3, #12]
 8005026:	b14c      	cbz	r4, 800503c <__assert_func+0x24>
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <__assert_func+0x30>)
 800502a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800502e:	9100      	str	r1, [sp, #0]
 8005030:	462b      	mov	r3, r5
 8005032:	4906      	ldr	r1, [pc, #24]	; (800504c <__assert_func+0x34>)
 8005034:	f000 f80e 	bl	8005054 <fiprintf>
 8005038:	f000 fa62 	bl	8005500 <abort>
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <__assert_func+0x38>)
 800503e:	461c      	mov	r4, r3
 8005040:	e7f3      	b.n	800502a <__assert_func+0x12>
 8005042:	bf00      	nop
 8005044:	2000000c 	.word	0x2000000c
 8005048:	08006394 	.word	0x08006394
 800504c:	080063a1 	.word	0x080063a1
 8005050:	080063cf 	.word	0x080063cf

08005054 <fiprintf>:
 8005054:	b40e      	push	{r1, r2, r3}
 8005056:	b503      	push	{r0, r1, lr}
 8005058:	4601      	mov	r1, r0
 800505a:	ab03      	add	r3, sp, #12
 800505c:	4805      	ldr	r0, [pc, #20]	; (8005074 <fiprintf+0x20>)
 800505e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005062:	6800      	ldr	r0, [r0, #0]
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	f000 f84d 	bl	8005104 <_vfiprintf_r>
 800506a:	b002      	add	sp, #8
 800506c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005070:	b003      	add	sp, #12
 8005072:	4770      	bx	lr
 8005074:	2000000c 	.word	0x2000000c

08005078 <__ascii_mbtowc>:
 8005078:	b082      	sub	sp, #8
 800507a:	b901      	cbnz	r1, 800507e <__ascii_mbtowc+0x6>
 800507c:	a901      	add	r1, sp, #4
 800507e:	b142      	cbz	r2, 8005092 <__ascii_mbtowc+0x1a>
 8005080:	b14b      	cbz	r3, 8005096 <__ascii_mbtowc+0x1e>
 8005082:	7813      	ldrb	r3, [r2, #0]
 8005084:	600b      	str	r3, [r1, #0]
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	1e10      	subs	r0, r2, #0
 800508a:	bf18      	it	ne
 800508c:	2001      	movne	r0, #1
 800508e:	b002      	add	sp, #8
 8005090:	4770      	bx	lr
 8005092:	4610      	mov	r0, r2
 8005094:	e7fb      	b.n	800508e <__ascii_mbtowc+0x16>
 8005096:	f06f 0001 	mvn.w	r0, #1
 800509a:	e7f8      	b.n	800508e <__ascii_mbtowc+0x16>

0800509c <__malloc_lock>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <__malloc_lock+0x8>)
 800509e:	f000 bbeb 	b.w	8005878 <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	200002f4 	.word	0x200002f4

080050a8 <__malloc_unlock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__malloc_unlock+0x8>)
 80050aa:	f000 bbe6 	b.w	800587a <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	200002f4 	.word	0x200002f4

080050b4 <__sfputc_r>:
 80050b4:	6893      	ldr	r3, [r2, #8]
 80050b6:	b410      	push	{r4}
 80050b8:	3b01      	subs	r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	6093      	str	r3, [r2, #8]
 80050be:	da07      	bge.n	80050d0 <__sfputc_r+0x1c>
 80050c0:	6994      	ldr	r4, [r2, #24]
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	db01      	blt.n	80050ca <__sfputc_r+0x16>
 80050c6:	290a      	cmp	r1, #10
 80050c8:	d102      	bne.n	80050d0 <__sfputc_r+0x1c>
 80050ca:	bc10      	pop	{r4}
 80050cc:	f000 b94a 	b.w	8005364 <__swbuf_r>
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	1c58      	adds	r0, r3, #1
 80050d4:	6010      	str	r0, [r2, #0]
 80050d6:	7019      	strb	r1, [r3, #0]
 80050d8:	4608      	mov	r0, r1
 80050da:	bc10      	pop	{r4}
 80050dc:	4770      	bx	lr

080050de <__sfputs_r>:
 80050de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e0:	4606      	mov	r6, r0
 80050e2:	460f      	mov	r7, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	18d5      	adds	r5, r2, r3
 80050e8:	42ac      	cmp	r4, r5
 80050ea:	d101      	bne.n	80050f0 <__sfputs_r+0x12>
 80050ec:	2000      	movs	r0, #0
 80050ee:	e007      	b.n	8005100 <__sfputs_r+0x22>
 80050f0:	463a      	mov	r2, r7
 80050f2:	4630      	mov	r0, r6
 80050f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f8:	f7ff ffdc 	bl	80050b4 <__sfputc_r>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d1f3      	bne.n	80050e8 <__sfputs_r+0xa>
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005104 <_vfiprintf_r>:
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	460d      	mov	r5, r1
 800510a:	4614      	mov	r4, r2
 800510c:	4698      	mov	r8, r3
 800510e:	4606      	mov	r6, r0
 8005110:	b09d      	sub	sp, #116	; 0x74
 8005112:	b118      	cbz	r0, 800511c <_vfiprintf_r+0x18>
 8005114:	6983      	ldr	r3, [r0, #24]
 8005116:	b90b      	cbnz	r3, 800511c <_vfiprintf_r+0x18>
 8005118:	f000 fb10 	bl	800573c <__sinit>
 800511c:	4b89      	ldr	r3, [pc, #548]	; (8005344 <_vfiprintf_r+0x240>)
 800511e:	429d      	cmp	r5, r3
 8005120:	d11b      	bne.n	800515a <_vfiprintf_r+0x56>
 8005122:	6875      	ldr	r5, [r6, #4]
 8005124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005126:	07d9      	lsls	r1, r3, #31
 8005128:	d405      	bmi.n	8005136 <_vfiprintf_r+0x32>
 800512a:	89ab      	ldrh	r3, [r5, #12]
 800512c:	059a      	lsls	r2, r3, #22
 800512e:	d402      	bmi.n	8005136 <_vfiprintf_r+0x32>
 8005130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005132:	f000 fba1 	bl	8005878 <__retarget_lock_acquire_recursive>
 8005136:	89ab      	ldrh	r3, [r5, #12]
 8005138:	071b      	lsls	r3, r3, #28
 800513a:	d501      	bpl.n	8005140 <_vfiprintf_r+0x3c>
 800513c:	692b      	ldr	r3, [r5, #16]
 800513e:	b9eb      	cbnz	r3, 800517c <_vfiprintf_r+0x78>
 8005140:	4629      	mov	r1, r5
 8005142:	4630      	mov	r0, r6
 8005144:	f000 f96e 	bl	8005424 <__swsetup_r>
 8005148:	b1c0      	cbz	r0, 800517c <_vfiprintf_r+0x78>
 800514a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514c:	07dc      	lsls	r4, r3, #31
 800514e:	d50e      	bpl.n	800516e <_vfiprintf_r+0x6a>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005154:	b01d      	add	sp, #116	; 0x74
 8005156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515a:	4b7b      	ldr	r3, [pc, #492]	; (8005348 <_vfiprintf_r+0x244>)
 800515c:	429d      	cmp	r5, r3
 800515e:	d101      	bne.n	8005164 <_vfiprintf_r+0x60>
 8005160:	68b5      	ldr	r5, [r6, #8]
 8005162:	e7df      	b.n	8005124 <_vfiprintf_r+0x20>
 8005164:	4b79      	ldr	r3, [pc, #484]	; (800534c <_vfiprintf_r+0x248>)
 8005166:	429d      	cmp	r5, r3
 8005168:	bf08      	it	eq
 800516a:	68f5      	ldreq	r5, [r6, #12]
 800516c:	e7da      	b.n	8005124 <_vfiprintf_r+0x20>
 800516e:	89ab      	ldrh	r3, [r5, #12]
 8005170:	0598      	lsls	r0, r3, #22
 8005172:	d4ed      	bmi.n	8005150 <_vfiprintf_r+0x4c>
 8005174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005176:	f000 fb80 	bl	800587a <__retarget_lock_release_recursive>
 800517a:	e7e9      	b.n	8005150 <_vfiprintf_r+0x4c>
 800517c:	2300      	movs	r3, #0
 800517e:	9309      	str	r3, [sp, #36]	; 0x24
 8005180:	2320      	movs	r3, #32
 8005182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005186:	2330      	movs	r3, #48	; 0x30
 8005188:	f04f 0901 	mov.w	r9, #1
 800518c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005190:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005350 <_vfiprintf_r+0x24c>
 8005194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005198:	4623      	mov	r3, r4
 800519a:	469a      	mov	sl, r3
 800519c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a0:	b10a      	cbz	r2, 80051a6 <_vfiprintf_r+0xa2>
 80051a2:	2a25      	cmp	r2, #37	; 0x25
 80051a4:	d1f9      	bne.n	800519a <_vfiprintf_r+0x96>
 80051a6:	ebba 0b04 	subs.w	fp, sl, r4
 80051aa:	d00b      	beq.n	80051c4 <_vfiprintf_r+0xc0>
 80051ac:	465b      	mov	r3, fp
 80051ae:	4622      	mov	r2, r4
 80051b0:	4629      	mov	r1, r5
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff ff93 	bl	80050de <__sfputs_r>
 80051b8:	3001      	adds	r0, #1
 80051ba:	f000 80aa 	beq.w	8005312 <_vfiprintf_r+0x20e>
 80051be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c0:	445a      	add	r2, fp
 80051c2:	9209      	str	r2, [sp, #36]	; 0x24
 80051c4:	f89a 3000 	ldrb.w	r3, [sl]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a2 	beq.w	8005312 <_vfiprintf_r+0x20e>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d8:	f10a 0a01 	add.w	sl, sl, #1
 80051dc:	9304      	str	r3, [sp, #16]
 80051de:	9307      	str	r3, [sp, #28]
 80051e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051e4:	931a      	str	r3, [sp, #104]	; 0x68
 80051e6:	4654      	mov	r4, sl
 80051e8:	2205      	movs	r2, #5
 80051ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ee:	4858      	ldr	r0, [pc, #352]	; (8005350 <_vfiprintf_r+0x24c>)
 80051f0:	f7ff fa74 	bl	80046dc <memchr>
 80051f4:	9a04      	ldr	r2, [sp, #16]
 80051f6:	b9d8      	cbnz	r0, 8005230 <_vfiprintf_r+0x12c>
 80051f8:	06d1      	lsls	r1, r2, #27
 80051fa:	bf44      	itt	mi
 80051fc:	2320      	movmi	r3, #32
 80051fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005202:	0713      	lsls	r3, r2, #28
 8005204:	bf44      	itt	mi
 8005206:	232b      	movmi	r3, #43	; 0x2b
 8005208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800520c:	f89a 3000 	ldrb.w	r3, [sl]
 8005210:	2b2a      	cmp	r3, #42	; 0x2a
 8005212:	d015      	beq.n	8005240 <_vfiprintf_r+0x13c>
 8005214:	4654      	mov	r4, sl
 8005216:	2000      	movs	r0, #0
 8005218:	f04f 0c0a 	mov.w	ip, #10
 800521c:	9a07      	ldr	r2, [sp, #28]
 800521e:	4621      	mov	r1, r4
 8005220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005224:	3b30      	subs	r3, #48	; 0x30
 8005226:	2b09      	cmp	r3, #9
 8005228:	d94e      	bls.n	80052c8 <_vfiprintf_r+0x1c4>
 800522a:	b1b0      	cbz	r0, 800525a <_vfiprintf_r+0x156>
 800522c:	9207      	str	r2, [sp, #28]
 800522e:	e014      	b.n	800525a <_vfiprintf_r+0x156>
 8005230:	eba0 0308 	sub.w	r3, r0, r8
 8005234:	fa09 f303 	lsl.w	r3, r9, r3
 8005238:	4313      	orrs	r3, r2
 800523a:	46a2      	mov	sl, r4
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	e7d2      	b.n	80051e6 <_vfiprintf_r+0xe2>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	1d19      	adds	r1, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	9103      	str	r1, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	bfbb      	ittet	lt
 800524c:	425b      	neglt	r3, r3
 800524e:	f042 0202 	orrlt.w	r2, r2, #2
 8005252:	9307      	strge	r3, [sp, #28]
 8005254:	9307      	strlt	r3, [sp, #28]
 8005256:	bfb8      	it	lt
 8005258:	9204      	strlt	r2, [sp, #16]
 800525a:	7823      	ldrb	r3, [r4, #0]
 800525c:	2b2e      	cmp	r3, #46	; 0x2e
 800525e:	d10c      	bne.n	800527a <_vfiprintf_r+0x176>
 8005260:	7863      	ldrb	r3, [r4, #1]
 8005262:	2b2a      	cmp	r3, #42	; 0x2a
 8005264:	d135      	bne.n	80052d2 <_vfiprintf_r+0x1ce>
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	3402      	adds	r4, #2
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	9203      	str	r2, [sp, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	bfb8      	it	lt
 8005274:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005278:	9305      	str	r3, [sp, #20]
 800527a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005354 <_vfiprintf_r+0x250>
 800527e:	2203      	movs	r2, #3
 8005280:	4650      	mov	r0, sl
 8005282:	7821      	ldrb	r1, [r4, #0]
 8005284:	f7ff fa2a 	bl	80046dc <memchr>
 8005288:	b140      	cbz	r0, 800529c <_vfiprintf_r+0x198>
 800528a:	2340      	movs	r3, #64	; 0x40
 800528c:	eba0 000a 	sub.w	r0, r0, sl
 8005290:	fa03 f000 	lsl.w	r0, r3, r0
 8005294:	9b04      	ldr	r3, [sp, #16]
 8005296:	3401      	adds	r4, #1
 8005298:	4303      	orrs	r3, r0
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a0:	2206      	movs	r2, #6
 80052a2:	482d      	ldr	r0, [pc, #180]	; (8005358 <_vfiprintf_r+0x254>)
 80052a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052a8:	f7ff fa18 	bl	80046dc <memchr>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d03f      	beq.n	8005330 <_vfiprintf_r+0x22c>
 80052b0:	4b2a      	ldr	r3, [pc, #168]	; (800535c <_vfiprintf_r+0x258>)
 80052b2:	bb1b      	cbnz	r3, 80052fc <_vfiprintf_r+0x1f8>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	3307      	adds	r3, #7
 80052b8:	f023 0307 	bic.w	r3, r3, #7
 80052bc:	3308      	adds	r3, #8
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	443b      	add	r3, r7
 80052c4:	9309      	str	r3, [sp, #36]	; 0x24
 80052c6:	e767      	b.n	8005198 <_vfiprintf_r+0x94>
 80052c8:	460c      	mov	r4, r1
 80052ca:	2001      	movs	r0, #1
 80052cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d0:	e7a5      	b.n	800521e <_vfiprintf_r+0x11a>
 80052d2:	2300      	movs	r3, #0
 80052d4:	f04f 0c0a 	mov.w	ip, #10
 80052d8:	4619      	mov	r1, r3
 80052da:	3401      	adds	r4, #1
 80052dc:	9305      	str	r3, [sp, #20]
 80052de:	4620      	mov	r0, r4
 80052e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e4:	3a30      	subs	r2, #48	; 0x30
 80052e6:	2a09      	cmp	r2, #9
 80052e8:	d903      	bls.n	80052f2 <_vfiprintf_r+0x1ee>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0c5      	beq.n	800527a <_vfiprintf_r+0x176>
 80052ee:	9105      	str	r1, [sp, #20]
 80052f0:	e7c3      	b.n	800527a <_vfiprintf_r+0x176>
 80052f2:	4604      	mov	r4, r0
 80052f4:	2301      	movs	r3, #1
 80052f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052fa:	e7f0      	b.n	80052de <_vfiprintf_r+0x1da>
 80052fc:	ab03      	add	r3, sp, #12
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	462a      	mov	r2, r5
 8005302:	4630      	mov	r0, r6
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <_vfiprintf_r+0x25c>)
 8005306:	a904      	add	r1, sp, #16
 8005308:	f7fd ff9e 	bl	8003248 <_printf_float>
 800530c:	4607      	mov	r7, r0
 800530e:	1c78      	adds	r0, r7, #1
 8005310:	d1d6      	bne.n	80052c0 <_vfiprintf_r+0x1bc>
 8005312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005314:	07d9      	lsls	r1, r3, #31
 8005316:	d405      	bmi.n	8005324 <_vfiprintf_r+0x220>
 8005318:	89ab      	ldrh	r3, [r5, #12]
 800531a:	059a      	lsls	r2, r3, #22
 800531c:	d402      	bmi.n	8005324 <_vfiprintf_r+0x220>
 800531e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005320:	f000 faab 	bl	800587a <__retarget_lock_release_recursive>
 8005324:	89ab      	ldrh	r3, [r5, #12]
 8005326:	065b      	lsls	r3, r3, #25
 8005328:	f53f af12 	bmi.w	8005150 <_vfiprintf_r+0x4c>
 800532c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800532e:	e711      	b.n	8005154 <_vfiprintf_r+0x50>
 8005330:	ab03      	add	r3, sp, #12
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	462a      	mov	r2, r5
 8005336:	4630      	mov	r0, r6
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <_vfiprintf_r+0x25c>)
 800533a:	a904      	add	r1, sp, #16
 800533c:	f7fe fa20 	bl	8003780 <_printf_i>
 8005340:	e7e4      	b.n	800530c <_vfiprintf_r+0x208>
 8005342:	bf00      	nop
 8005344:	0800650c 	.word	0x0800650c
 8005348:	0800652c 	.word	0x0800652c
 800534c:	080064ec 	.word	0x080064ec
 8005350:	080063da 	.word	0x080063da
 8005354:	080063e0 	.word	0x080063e0
 8005358:	080063e4 	.word	0x080063e4
 800535c:	08003249 	.word	0x08003249
 8005360:	080050df 	.word	0x080050df

08005364 <__swbuf_r>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	460e      	mov	r6, r1
 8005368:	4614      	mov	r4, r2
 800536a:	4605      	mov	r5, r0
 800536c:	b118      	cbz	r0, 8005376 <__swbuf_r+0x12>
 800536e:	6983      	ldr	r3, [r0, #24]
 8005370:	b90b      	cbnz	r3, 8005376 <__swbuf_r+0x12>
 8005372:	f000 f9e3 	bl	800573c <__sinit>
 8005376:	4b21      	ldr	r3, [pc, #132]	; (80053fc <__swbuf_r+0x98>)
 8005378:	429c      	cmp	r4, r3
 800537a:	d12b      	bne.n	80053d4 <__swbuf_r+0x70>
 800537c:	686c      	ldr	r4, [r5, #4]
 800537e:	69a3      	ldr	r3, [r4, #24]
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	071a      	lsls	r2, r3, #28
 8005386:	d52f      	bpl.n	80053e8 <__swbuf_r+0x84>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	b36b      	cbz	r3, 80053e8 <__swbuf_r+0x84>
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	6820      	ldr	r0, [r4, #0]
 8005390:	b2f6      	uxtb	r6, r6
 8005392:	1ac0      	subs	r0, r0, r3
 8005394:	6963      	ldr	r3, [r4, #20]
 8005396:	4637      	mov	r7, r6
 8005398:	4283      	cmp	r3, r0
 800539a:	dc04      	bgt.n	80053a6 <__swbuf_r+0x42>
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f938 	bl	8005614 <_fflush_r>
 80053a4:	bb30      	cbnz	r0, 80053f4 <__swbuf_r+0x90>
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	3001      	adds	r0, #1
 80053aa:	3b01      	subs	r3, #1
 80053ac:	60a3      	str	r3, [r4, #8]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	6022      	str	r2, [r4, #0]
 80053b4:	701e      	strb	r6, [r3, #0]
 80053b6:	6963      	ldr	r3, [r4, #20]
 80053b8:	4283      	cmp	r3, r0
 80053ba:	d004      	beq.n	80053c6 <__swbuf_r+0x62>
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	07db      	lsls	r3, r3, #31
 80053c0:	d506      	bpl.n	80053d0 <__swbuf_r+0x6c>
 80053c2:	2e0a      	cmp	r6, #10
 80053c4:	d104      	bne.n	80053d0 <__swbuf_r+0x6c>
 80053c6:	4621      	mov	r1, r4
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 f923 	bl	8005614 <_fflush_r>
 80053ce:	b988      	cbnz	r0, 80053f4 <__swbuf_r+0x90>
 80053d0:	4638      	mov	r0, r7
 80053d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <__swbuf_r+0x9c>)
 80053d6:	429c      	cmp	r4, r3
 80053d8:	d101      	bne.n	80053de <__swbuf_r+0x7a>
 80053da:	68ac      	ldr	r4, [r5, #8]
 80053dc:	e7cf      	b.n	800537e <__swbuf_r+0x1a>
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <__swbuf_r+0xa0>)
 80053e0:	429c      	cmp	r4, r3
 80053e2:	bf08      	it	eq
 80053e4:	68ec      	ldreq	r4, [r5, #12]
 80053e6:	e7ca      	b.n	800537e <__swbuf_r+0x1a>
 80053e8:	4621      	mov	r1, r4
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f81a 	bl	8005424 <__swsetup_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0cb      	beq.n	800538c <__swbuf_r+0x28>
 80053f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053f8:	e7ea      	b.n	80053d0 <__swbuf_r+0x6c>
 80053fa:	bf00      	nop
 80053fc:	0800650c 	.word	0x0800650c
 8005400:	0800652c 	.word	0x0800652c
 8005404:	080064ec 	.word	0x080064ec

08005408 <__ascii_wctomb>:
 8005408:	4603      	mov	r3, r0
 800540a:	4608      	mov	r0, r1
 800540c:	b141      	cbz	r1, 8005420 <__ascii_wctomb+0x18>
 800540e:	2aff      	cmp	r2, #255	; 0xff
 8005410:	d904      	bls.n	800541c <__ascii_wctomb+0x14>
 8005412:	228a      	movs	r2, #138	; 0x8a
 8005414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	4770      	bx	lr
 800541c:	2001      	movs	r0, #1
 800541e:	700a      	strb	r2, [r1, #0]
 8005420:	4770      	bx	lr
	...

08005424 <__swsetup_r>:
 8005424:	4b32      	ldr	r3, [pc, #200]	; (80054f0 <__swsetup_r+0xcc>)
 8005426:	b570      	push	{r4, r5, r6, lr}
 8005428:	681d      	ldr	r5, [r3, #0]
 800542a:	4606      	mov	r6, r0
 800542c:	460c      	mov	r4, r1
 800542e:	b125      	cbz	r5, 800543a <__swsetup_r+0x16>
 8005430:	69ab      	ldr	r3, [r5, #24]
 8005432:	b913      	cbnz	r3, 800543a <__swsetup_r+0x16>
 8005434:	4628      	mov	r0, r5
 8005436:	f000 f981 	bl	800573c <__sinit>
 800543a:	4b2e      	ldr	r3, [pc, #184]	; (80054f4 <__swsetup_r+0xd0>)
 800543c:	429c      	cmp	r4, r3
 800543e:	d10f      	bne.n	8005460 <__swsetup_r+0x3c>
 8005440:	686c      	ldr	r4, [r5, #4]
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005448:	0719      	lsls	r1, r3, #28
 800544a:	d42c      	bmi.n	80054a6 <__swsetup_r+0x82>
 800544c:	06dd      	lsls	r5, r3, #27
 800544e:	d411      	bmi.n	8005474 <__swsetup_r+0x50>
 8005450:	2309      	movs	r3, #9
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e03e      	b.n	80054de <__swsetup_r+0xba>
 8005460:	4b25      	ldr	r3, [pc, #148]	; (80054f8 <__swsetup_r+0xd4>)
 8005462:	429c      	cmp	r4, r3
 8005464:	d101      	bne.n	800546a <__swsetup_r+0x46>
 8005466:	68ac      	ldr	r4, [r5, #8]
 8005468:	e7eb      	b.n	8005442 <__swsetup_r+0x1e>
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <__swsetup_r+0xd8>)
 800546c:	429c      	cmp	r4, r3
 800546e:	bf08      	it	eq
 8005470:	68ec      	ldreq	r4, [r5, #12]
 8005472:	e7e6      	b.n	8005442 <__swsetup_r+0x1e>
 8005474:	0758      	lsls	r0, r3, #29
 8005476:	d512      	bpl.n	800549e <__swsetup_r+0x7a>
 8005478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800547a:	b141      	cbz	r1, 800548e <__swsetup_r+0x6a>
 800547c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005480:	4299      	cmp	r1, r3
 8005482:	d002      	beq.n	800548a <__swsetup_r+0x66>
 8005484:	4630      	mov	r0, r6
 8005486:	f7ff fcdb 	bl	8004e40 <_free_r>
 800548a:	2300      	movs	r3, #0
 800548c:	6363      	str	r3, [r4, #52]	; 0x34
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005494:	81a3      	strh	r3, [r4, #12]
 8005496:	2300      	movs	r3, #0
 8005498:	6063      	str	r3, [r4, #4]
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	b94b      	cbnz	r3, 80054be <__swsetup_r+0x9a>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b4:	d003      	beq.n	80054be <__swsetup_r+0x9a>
 80054b6:	4621      	mov	r1, r4
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 fa05 	bl	80058c8 <__smakebuf_r>
 80054be:	89a0      	ldrh	r0, [r4, #12]
 80054c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054c4:	f010 0301 	ands.w	r3, r0, #1
 80054c8:	d00a      	beq.n	80054e0 <__swsetup_r+0xbc>
 80054ca:	2300      	movs	r3, #0
 80054cc:	60a3      	str	r3, [r4, #8]
 80054ce:	6963      	ldr	r3, [r4, #20]
 80054d0:	425b      	negs	r3, r3
 80054d2:	61a3      	str	r3, [r4, #24]
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	b943      	cbnz	r3, 80054ea <__swsetup_r+0xc6>
 80054d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054dc:	d1ba      	bne.n	8005454 <__swsetup_r+0x30>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	0781      	lsls	r1, r0, #30
 80054e2:	bf58      	it	pl
 80054e4:	6963      	ldrpl	r3, [r4, #20]
 80054e6:	60a3      	str	r3, [r4, #8]
 80054e8:	e7f4      	b.n	80054d4 <__swsetup_r+0xb0>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e7f7      	b.n	80054de <__swsetup_r+0xba>
 80054ee:	bf00      	nop
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	0800650c 	.word	0x0800650c
 80054f8:	0800652c 	.word	0x0800652c
 80054fc:	080064ec 	.word	0x080064ec

08005500 <abort>:
 8005500:	2006      	movs	r0, #6
 8005502:	b508      	push	{r3, lr}
 8005504:	f000 fa48 	bl	8005998 <raise>
 8005508:	2001      	movs	r0, #1
 800550a:	f7fc f924 	bl	8001756 <_exit>
	...

08005510 <__sflush_r>:
 8005510:	898a      	ldrh	r2, [r1, #12]
 8005512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005514:	4605      	mov	r5, r0
 8005516:	0710      	lsls	r0, r2, #28
 8005518:	460c      	mov	r4, r1
 800551a:	d457      	bmi.n	80055cc <__sflush_r+0xbc>
 800551c:	684b      	ldr	r3, [r1, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	dc04      	bgt.n	800552c <__sflush_r+0x1c>
 8005522:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	dc01      	bgt.n	800552c <__sflush_r+0x1c>
 8005528:	2000      	movs	r0, #0
 800552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800552e:	2e00      	cmp	r6, #0
 8005530:	d0fa      	beq.n	8005528 <__sflush_r+0x18>
 8005532:	2300      	movs	r3, #0
 8005534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005538:	682f      	ldr	r7, [r5, #0]
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	d032      	beq.n	80055a4 <__sflush_r+0x94>
 800553e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	075a      	lsls	r2, r3, #29
 8005544:	d505      	bpl.n	8005552 <__sflush_r+0x42>
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	1ac0      	subs	r0, r0, r3
 800554a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800554c:	b10b      	cbz	r3, 8005552 <__sflush_r+0x42>
 800554e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005550:	1ac0      	subs	r0, r0, r3
 8005552:	2300      	movs	r3, #0
 8005554:	4602      	mov	r2, r0
 8005556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005558:	4628      	mov	r0, r5
 800555a:	6a21      	ldr	r1, [r4, #32]
 800555c:	47b0      	blx	r6
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	d106      	bne.n	8005572 <__sflush_r+0x62>
 8005564:	6829      	ldr	r1, [r5, #0]
 8005566:	291d      	cmp	r1, #29
 8005568:	d82c      	bhi.n	80055c4 <__sflush_r+0xb4>
 800556a:	4a29      	ldr	r2, [pc, #164]	; (8005610 <__sflush_r+0x100>)
 800556c:	40ca      	lsrs	r2, r1
 800556e:	07d6      	lsls	r6, r2, #31
 8005570:	d528      	bpl.n	80055c4 <__sflush_r+0xb4>
 8005572:	2200      	movs	r2, #0
 8005574:	6062      	str	r2, [r4, #4]
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	04d9      	lsls	r1, r3, #19
 800557a:	6022      	str	r2, [r4, #0]
 800557c:	d504      	bpl.n	8005588 <__sflush_r+0x78>
 800557e:	1c42      	adds	r2, r0, #1
 8005580:	d101      	bne.n	8005586 <__sflush_r+0x76>
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	b903      	cbnz	r3, 8005588 <__sflush_r+0x78>
 8005586:	6560      	str	r0, [r4, #84]	; 0x54
 8005588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800558a:	602f      	str	r7, [r5, #0]
 800558c:	2900      	cmp	r1, #0
 800558e:	d0cb      	beq.n	8005528 <__sflush_r+0x18>
 8005590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005594:	4299      	cmp	r1, r3
 8005596:	d002      	beq.n	800559e <__sflush_r+0x8e>
 8005598:	4628      	mov	r0, r5
 800559a:	f7ff fc51 	bl	8004e40 <_free_r>
 800559e:	2000      	movs	r0, #0
 80055a0:	6360      	str	r0, [r4, #52]	; 0x34
 80055a2:	e7c2      	b.n	800552a <__sflush_r+0x1a>
 80055a4:	6a21      	ldr	r1, [r4, #32]
 80055a6:	2301      	movs	r3, #1
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	1c41      	adds	r1, r0, #1
 80055ae:	d1c7      	bne.n	8005540 <__sflush_r+0x30>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0c4      	beq.n	8005540 <__sflush_r+0x30>
 80055b6:	2b1d      	cmp	r3, #29
 80055b8:	d001      	beq.n	80055be <__sflush_r+0xae>
 80055ba:	2b16      	cmp	r3, #22
 80055bc:	d101      	bne.n	80055c2 <__sflush_r+0xb2>
 80055be:	602f      	str	r7, [r5, #0]
 80055c0:	e7b2      	b.n	8005528 <__sflush_r+0x18>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	e7ae      	b.n	800552a <__sflush_r+0x1a>
 80055cc:	690f      	ldr	r7, [r1, #16]
 80055ce:	2f00      	cmp	r7, #0
 80055d0:	d0aa      	beq.n	8005528 <__sflush_r+0x18>
 80055d2:	0793      	lsls	r3, r2, #30
 80055d4:	bf18      	it	ne
 80055d6:	2300      	movne	r3, #0
 80055d8:	680e      	ldr	r6, [r1, #0]
 80055da:	bf08      	it	eq
 80055dc:	694b      	ldreq	r3, [r1, #20]
 80055de:	1bf6      	subs	r6, r6, r7
 80055e0:	600f      	str	r7, [r1, #0]
 80055e2:	608b      	str	r3, [r1, #8]
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	dd9f      	ble.n	8005528 <__sflush_r+0x18>
 80055e8:	4633      	mov	r3, r6
 80055ea:	463a      	mov	r2, r7
 80055ec:	4628      	mov	r0, r5
 80055ee:	6a21      	ldr	r1, [r4, #32]
 80055f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80055f4:	47e0      	blx	ip
 80055f6:	2800      	cmp	r0, #0
 80055f8:	dc06      	bgt.n	8005608 <__sflush_r+0xf8>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	e790      	b.n	800552a <__sflush_r+0x1a>
 8005608:	4407      	add	r7, r0
 800560a:	1a36      	subs	r6, r6, r0
 800560c:	e7ea      	b.n	80055e4 <__sflush_r+0xd4>
 800560e:	bf00      	nop
 8005610:	20400001 	.word	0x20400001

08005614 <_fflush_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	690b      	ldr	r3, [r1, #16]
 8005618:	4605      	mov	r5, r0
 800561a:	460c      	mov	r4, r1
 800561c:	b913      	cbnz	r3, 8005624 <_fflush_r+0x10>
 800561e:	2500      	movs	r5, #0
 8005620:	4628      	mov	r0, r5
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	b118      	cbz	r0, 800562e <_fflush_r+0x1a>
 8005626:	6983      	ldr	r3, [r0, #24]
 8005628:	b90b      	cbnz	r3, 800562e <_fflush_r+0x1a>
 800562a:	f000 f887 	bl	800573c <__sinit>
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <_fflush_r+0x6c>)
 8005630:	429c      	cmp	r4, r3
 8005632:	d11b      	bne.n	800566c <_fflush_r+0x58>
 8005634:	686c      	ldr	r4, [r5, #4]
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ef      	beq.n	800561e <_fflush_r+0xa>
 800563e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005640:	07d0      	lsls	r0, r2, #31
 8005642:	d404      	bmi.n	800564e <_fflush_r+0x3a>
 8005644:	0599      	lsls	r1, r3, #22
 8005646:	d402      	bmi.n	800564e <_fflush_r+0x3a>
 8005648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564a:	f000 f915 	bl	8005878 <__retarget_lock_acquire_recursive>
 800564e:	4628      	mov	r0, r5
 8005650:	4621      	mov	r1, r4
 8005652:	f7ff ff5d 	bl	8005510 <__sflush_r>
 8005656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005658:	4605      	mov	r5, r0
 800565a:	07da      	lsls	r2, r3, #31
 800565c:	d4e0      	bmi.n	8005620 <_fflush_r+0xc>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	059b      	lsls	r3, r3, #22
 8005662:	d4dd      	bmi.n	8005620 <_fflush_r+0xc>
 8005664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005666:	f000 f908 	bl	800587a <__retarget_lock_release_recursive>
 800566a:	e7d9      	b.n	8005620 <_fflush_r+0xc>
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <_fflush_r+0x70>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d101      	bne.n	8005676 <_fflush_r+0x62>
 8005672:	68ac      	ldr	r4, [r5, #8]
 8005674:	e7df      	b.n	8005636 <_fflush_r+0x22>
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <_fflush_r+0x74>)
 8005678:	429c      	cmp	r4, r3
 800567a:	bf08      	it	eq
 800567c:	68ec      	ldreq	r4, [r5, #12]
 800567e:	e7da      	b.n	8005636 <_fflush_r+0x22>
 8005680:	0800650c 	.word	0x0800650c
 8005684:	0800652c 	.word	0x0800652c
 8005688:	080064ec 	.word	0x080064ec

0800568c <std>:
 800568c:	2300      	movs	r3, #0
 800568e:	b510      	push	{r4, lr}
 8005690:	4604      	mov	r4, r0
 8005692:	e9c0 3300 	strd	r3, r3, [r0]
 8005696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	; 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	6183      	str	r3, [r0, #24]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2208      	movs	r2, #8
 80056a8:	305c      	adds	r0, #92	; 0x5c
 80056aa:	f7fd fd27 	bl	80030fc <memset>
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <std+0x38>)
 80056b0:	6224      	str	r4, [r4, #32]
 80056b2:	6263      	str	r3, [r4, #36]	; 0x24
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <std+0x3c>)
 80056b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <std+0x40>)
 80056ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <std+0x44>)
 80056be:	6323      	str	r3, [r4, #48]	; 0x30
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	080059d1 	.word	0x080059d1
 80056c8:	080059f3 	.word	0x080059f3
 80056cc:	08005a2b 	.word	0x08005a2b
 80056d0:	08005a4f 	.word	0x08005a4f

080056d4 <_cleanup_r>:
 80056d4:	4901      	ldr	r1, [pc, #4]	; (80056dc <_cleanup_r+0x8>)
 80056d6:	f000 b8af 	b.w	8005838 <_fwalk_reent>
 80056da:	bf00      	nop
 80056dc:	08005615 	.word	0x08005615

080056e0 <__sfmoreglue>:
 80056e0:	2268      	movs	r2, #104	; 0x68
 80056e2:	b570      	push	{r4, r5, r6, lr}
 80056e4:	1e4d      	subs	r5, r1, #1
 80056e6:	4355      	muls	r5, r2
 80056e8:	460e      	mov	r6, r1
 80056ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056ee:	f7ff fc0f 	bl	8004f10 <_malloc_r>
 80056f2:	4604      	mov	r4, r0
 80056f4:	b140      	cbz	r0, 8005708 <__sfmoreglue+0x28>
 80056f6:	2100      	movs	r1, #0
 80056f8:	e9c0 1600 	strd	r1, r6, [r0]
 80056fc:	300c      	adds	r0, #12
 80056fe:	60a0      	str	r0, [r4, #8]
 8005700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005704:	f7fd fcfa 	bl	80030fc <memset>
 8005708:	4620      	mov	r0, r4
 800570a:	bd70      	pop	{r4, r5, r6, pc}

0800570c <__sfp_lock_acquire>:
 800570c:	4801      	ldr	r0, [pc, #4]	; (8005714 <__sfp_lock_acquire+0x8>)
 800570e:	f000 b8b3 	b.w	8005878 <__retarget_lock_acquire_recursive>
 8005712:	bf00      	nop
 8005714:	200002f5 	.word	0x200002f5

08005718 <__sfp_lock_release>:
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <__sfp_lock_release+0x8>)
 800571a:	f000 b8ae 	b.w	800587a <__retarget_lock_release_recursive>
 800571e:	bf00      	nop
 8005720:	200002f5 	.word	0x200002f5

08005724 <__sinit_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__sinit_lock_acquire+0x8>)
 8005726:	f000 b8a7 	b.w	8005878 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	200002f6 	.word	0x200002f6

08005730 <__sinit_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__sinit_lock_release+0x8>)
 8005732:	f000 b8a2 	b.w	800587a <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	200002f6 	.word	0x200002f6

0800573c <__sinit>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	f7ff fff0 	bl	8005724 <__sinit_lock_acquire>
 8005744:	69a3      	ldr	r3, [r4, #24]
 8005746:	b11b      	cbz	r3, 8005750 <__sinit+0x14>
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f7ff bff0 	b.w	8005730 <__sinit_lock_release>
 8005750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005754:	6523      	str	r3, [r4, #80]	; 0x50
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <__sinit+0x68>)
 8005758:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <__sinit+0x6c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	62a2      	str	r2, [r4, #40]	; 0x28
 800575e:	42a3      	cmp	r3, r4
 8005760:	bf08      	it	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	4620      	mov	r0, r4
 8005766:	bf08      	it	eq
 8005768:	61a3      	streq	r3, [r4, #24]
 800576a:	f000 f81f 	bl	80057ac <__sfp>
 800576e:	6060      	str	r0, [r4, #4]
 8005770:	4620      	mov	r0, r4
 8005772:	f000 f81b 	bl	80057ac <__sfp>
 8005776:	60a0      	str	r0, [r4, #8]
 8005778:	4620      	mov	r0, r4
 800577a:	f000 f817 	bl	80057ac <__sfp>
 800577e:	2200      	movs	r2, #0
 8005780:	2104      	movs	r1, #4
 8005782:	60e0      	str	r0, [r4, #12]
 8005784:	6860      	ldr	r0, [r4, #4]
 8005786:	f7ff ff81 	bl	800568c <std>
 800578a:	2201      	movs	r2, #1
 800578c:	2109      	movs	r1, #9
 800578e:	68a0      	ldr	r0, [r4, #8]
 8005790:	f7ff ff7c 	bl	800568c <std>
 8005794:	2202      	movs	r2, #2
 8005796:	2112      	movs	r1, #18
 8005798:	68e0      	ldr	r0, [r4, #12]
 800579a:	f7ff ff77 	bl	800568c <std>
 800579e:	2301      	movs	r3, #1
 80057a0:	61a3      	str	r3, [r4, #24]
 80057a2:	e7d1      	b.n	8005748 <__sinit+0xc>
 80057a4:	08006170 	.word	0x08006170
 80057a8:	080056d5 	.word	0x080056d5

080057ac <__sfp>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	4607      	mov	r7, r0
 80057b0:	f7ff ffac 	bl	800570c <__sfp_lock_acquire>
 80057b4:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <__sfp+0x84>)
 80057b6:	681e      	ldr	r6, [r3, #0]
 80057b8:	69b3      	ldr	r3, [r6, #24]
 80057ba:	b913      	cbnz	r3, 80057c2 <__sfp+0x16>
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff ffbd 	bl	800573c <__sinit>
 80057c2:	3648      	adds	r6, #72	; 0x48
 80057c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	d503      	bpl.n	80057d4 <__sfp+0x28>
 80057cc:	6833      	ldr	r3, [r6, #0]
 80057ce:	b30b      	cbz	r3, 8005814 <__sfp+0x68>
 80057d0:	6836      	ldr	r6, [r6, #0]
 80057d2:	e7f7      	b.n	80057c4 <__sfp+0x18>
 80057d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057d8:	b9d5      	cbnz	r5, 8005810 <__sfp+0x64>
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <__sfp+0x88>)
 80057dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057e0:	60e3      	str	r3, [r4, #12]
 80057e2:	6665      	str	r5, [r4, #100]	; 0x64
 80057e4:	f000 f847 	bl	8005876 <__retarget_lock_init_recursive>
 80057e8:	f7ff ff96 	bl	8005718 <__sfp_lock_release>
 80057ec:	2208      	movs	r2, #8
 80057ee:	4629      	mov	r1, r5
 80057f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057f8:	6025      	str	r5, [r4, #0]
 80057fa:	61a5      	str	r5, [r4, #24]
 80057fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005800:	f7fd fc7c 	bl	80030fc <memset>
 8005804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800580c:	4620      	mov	r0, r4
 800580e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005810:	3468      	adds	r4, #104	; 0x68
 8005812:	e7d9      	b.n	80057c8 <__sfp+0x1c>
 8005814:	2104      	movs	r1, #4
 8005816:	4638      	mov	r0, r7
 8005818:	f7ff ff62 	bl	80056e0 <__sfmoreglue>
 800581c:	4604      	mov	r4, r0
 800581e:	6030      	str	r0, [r6, #0]
 8005820:	2800      	cmp	r0, #0
 8005822:	d1d5      	bne.n	80057d0 <__sfp+0x24>
 8005824:	f7ff ff78 	bl	8005718 <__sfp_lock_release>
 8005828:	230c      	movs	r3, #12
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	e7ee      	b.n	800580c <__sfp+0x60>
 800582e:	bf00      	nop
 8005830:	08006170 	.word	0x08006170
 8005834:	ffff0001 	.word	0xffff0001

08005838 <_fwalk_reent>:
 8005838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800583c:	4606      	mov	r6, r0
 800583e:	4688      	mov	r8, r1
 8005840:	2700      	movs	r7, #0
 8005842:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800584a:	f1b9 0901 	subs.w	r9, r9, #1
 800584e:	d505      	bpl.n	800585c <_fwalk_reent+0x24>
 8005850:	6824      	ldr	r4, [r4, #0]
 8005852:	2c00      	cmp	r4, #0
 8005854:	d1f7      	bne.n	8005846 <_fwalk_reent+0xe>
 8005856:	4638      	mov	r0, r7
 8005858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d907      	bls.n	8005872 <_fwalk_reent+0x3a>
 8005862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005866:	3301      	adds	r3, #1
 8005868:	d003      	beq.n	8005872 <_fwalk_reent+0x3a>
 800586a:	4629      	mov	r1, r5
 800586c:	4630      	mov	r0, r6
 800586e:	47c0      	blx	r8
 8005870:	4307      	orrs	r7, r0
 8005872:	3568      	adds	r5, #104	; 0x68
 8005874:	e7e9      	b.n	800584a <_fwalk_reent+0x12>

08005876 <__retarget_lock_init_recursive>:
 8005876:	4770      	bx	lr

08005878 <__retarget_lock_acquire_recursive>:
 8005878:	4770      	bx	lr

0800587a <__retarget_lock_release_recursive>:
 800587a:	4770      	bx	lr

0800587c <__swhatbuf_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	460e      	mov	r6, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	4614      	mov	r4, r2
 8005886:	2900      	cmp	r1, #0
 8005888:	461d      	mov	r5, r3
 800588a:	b096      	sub	sp, #88	; 0x58
 800588c:	da08      	bge.n	80058a0 <__swhatbuf_r+0x24>
 800588e:	2200      	movs	r2, #0
 8005890:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	061a      	lsls	r2, r3, #24
 8005898:	d410      	bmi.n	80058bc <__swhatbuf_r+0x40>
 800589a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589e:	e00e      	b.n	80058be <__swhatbuf_r+0x42>
 80058a0:	466a      	mov	r2, sp
 80058a2:	f000 f8fb 	bl	8005a9c <_fstat_r>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	dbf1      	blt.n	800588e <__swhatbuf_r+0x12>
 80058aa:	9a01      	ldr	r2, [sp, #4]
 80058ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058b4:	425a      	negs	r2, r3
 80058b6:	415a      	adcs	r2, r3
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	e7ee      	b.n	800589a <__swhatbuf_r+0x1e>
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	2000      	movs	r0, #0
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	b016      	add	sp, #88	; 0x58
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080058c8 <__smakebuf_r>:
 80058c8:	898b      	ldrh	r3, [r1, #12]
 80058ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058cc:	079d      	lsls	r5, r3, #30
 80058ce:	4606      	mov	r6, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	d507      	bpl.n	80058e4 <__smakebuf_r+0x1c>
 80058d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2301      	movs	r3, #1
 80058de:	6163      	str	r3, [r4, #20]
 80058e0:	b002      	add	sp, #8
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	466a      	mov	r2, sp
 80058e6:	ab01      	add	r3, sp, #4
 80058e8:	f7ff ffc8 	bl	800587c <__swhatbuf_r>
 80058ec:	9900      	ldr	r1, [sp, #0]
 80058ee:	4605      	mov	r5, r0
 80058f0:	4630      	mov	r0, r6
 80058f2:	f7ff fb0d 	bl	8004f10 <_malloc_r>
 80058f6:	b948      	cbnz	r0, 800590c <__smakebuf_r+0x44>
 80058f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fc:	059a      	lsls	r2, r3, #22
 80058fe:	d4ef      	bmi.n	80058e0 <__smakebuf_r+0x18>
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	e7e3      	b.n	80058d4 <__smakebuf_r+0xc>
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <__smakebuf_r+0x7c>)
 800590e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	6020      	str	r0, [r4, #0]
 8005914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	9b00      	ldr	r3, [sp, #0]
 800591c:	6120      	str	r0, [r4, #16]
 800591e:	6163      	str	r3, [r4, #20]
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	b15b      	cbz	r3, 800593c <__smakebuf_r+0x74>
 8005924:	4630      	mov	r0, r6
 8005926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800592a:	f000 f8c9 	bl	8005ac0 <_isatty_r>
 800592e:	b128      	cbz	r0, 800593c <__smakebuf_r+0x74>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	89a0      	ldrh	r0, [r4, #12]
 800593e:	4305      	orrs	r5, r0
 8005940:	81a5      	strh	r5, [r4, #12]
 8005942:	e7cd      	b.n	80058e0 <__smakebuf_r+0x18>
 8005944:	080056d5 	.word	0x080056d5

08005948 <_raise_r>:
 8005948:	291f      	cmp	r1, #31
 800594a:	b538      	push	{r3, r4, r5, lr}
 800594c:	4604      	mov	r4, r0
 800594e:	460d      	mov	r5, r1
 8005950:	d904      	bls.n	800595c <_raise_r+0x14>
 8005952:	2316      	movs	r3, #22
 8005954:	6003      	str	r3, [r0, #0]
 8005956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800595e:	b112      	cbz	r2, 8005966 <_raise_r+0x1e>
 8005960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005964:	b94b      	cbnz	r3, 800597a <_raise_r+0x32>
 8005966:	4620      	mov	r0, r4
 8005968:	f000 f830 	bl	80059cc <_getpid_r>
 800596c:	462a      	mov	r2, r5
 800596e:	4601      	mov	r1, r0
 8005970:	4620      	mov	r0, r4
 8005972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005976:	f000 b817 	b.w	80059a8 <_kill_r>
 800597a:	2b01      	cmp	r3, #1
 800597c:	d00a      	beq.n	8005994 <_raise_r+0x4c>
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	d103      	bne.n	800598a <_raise_r+0x42>
 8005982:	2316      	movs	r3, #22
 8005984:	6003      	str	r3, [r0, #0]
 8005986:	2001      	movs	r0, #1
 8005988:	e7e7      	b.n	800595a <_raise_r+0x12>
 800598a:	2400      	movs	r4, #0
 800598c:	4628      	mov	r0, r5
 800598e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005992:	4798      	blx	r3
 8005994:	2000      	movs	r0, #0
 8005996:	e7e0      	b.n	800595a <_raise_r+0x12>

08005998 <raise>:
 8005998:	4b02      	ldr	r3, [pc, #8]	; (80059a4 <raise+0xc>)
 800599a:	4601      	mov	r1, r0
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f7ff bfd3 	b.w	8005948 <_raise_r>
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c

080059a8 <_kill_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	2300      	movs	r3, #0
 80059ac:	4d06      	ldr	r5, [pc, #24]	; (80059c8 <_kill_r+0x20>)
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	602b      	str	r3, [r5, #0]
 80059b6:	f7fb febe 	bl	8001736 <_kill>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	d102      	bne.n	80059c4 <_kill_r+0x1c>
 80059be:	682b      	ldr	r3, [r5, #0]
 80059c0:	b103      	cbz	r3, 80059c4 <_kill_r+0x1c>
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	bd38      	pop	{r3, r4, r5, pc}
 80059c6:	bf00      	nop
 80059c8:	200002f0 	.word	0x200002f0

080059cc <_getpid_r>:
 80059cc:	f7fb beac 	b.w	8001728 <_getpid>

080059d0 <__sread>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	460c      	mov	r4, r1
 80059d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d8:	f000 f894 	bl	8005b04 <_read_r>
 80059dc:	2800      	cmp	r0, #0
 80059de:	bfab      	itete	ge
 80059e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059e2:	89a3      	ldrhlt	r3, [r4, #12]
 80059e4:	181b      	addge	r3, r3, r0
 80059e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ea:	bfac      	ite	ge
 80059ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ee:	81a3      	strhlt	r3, [r4, #12]
 80059f0:	bd10      	pop	{r4, pc}

080059f2 <__swrite>:
 80059f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	461f      	mov	r7, r3
 80059f8:	898b      	ldrh	r3, [r1, #12]
 80059fa:	4605      	mov	r5, r0
 80059fc:	05db      	lsls	r3, r3, #23
 80059fe:	460c      	mov	r4, r1
 8005a00:	4616      	mov	r6, r2
 8005a02:	d505      	bpl.n	8005a10 <__swrite+0x1e>
 8005a04:	2302      	movs	r3, #2
 8005a06:	2200      	movs	r2, #0
 8005a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0c:	f000 f868 	bl	8005ae0 <_lseek_r>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	4632      	mov	r2, r6
 8005a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a26:	f000 b817 	b.w	8005a58 <_write_r>

08005a2a <__sseek>:
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a32:	f000 f855 	bl	8005ae0 <_lseek_r>
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	bf15      	itete	ne
 8005a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a46:	81a3      	strheq	r3, [r4, #12]
 8005a48:	bf18      	it	ne
 8005a4a:	81a3      	strhne	r3, [r4, #12]
 8005a4c:	bd10      	pop	{r4, pc}

08005a4e <__sclose>:
 8005a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a52:	f000 b813 	b.w	8005a7c <_close_r>
	...

08005a58 <_write_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	2200      	movs	r2, #0
 8005a62:	4d05      	ldr	r5, [pc, #20]	; (8005a78 <_write_r+0x20>)
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb fe9c 	bl	80017a4 <_write>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_write_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_write_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	200002f0 	.word	0x200002f0

08005a7c <_close_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	2300      	movs	r3, #0
 8005a80:	4d05      	ldr	r5, [pc, #20]	; (8005a98 <_close_r+0x1c>)
 8005a82:	4604      	mov	r4, r0
 8005a84:	4608      	mov	r0, r1
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	f7fb fea8 	bl	80017dc <_close>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d102      	bne.n	8005a96 <_close_r+0x1a>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b103      	cbz	r3, 8005a96 <_close_r+0x1a>
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	200002f0 	.word	0x200002f0

08005a9c <_fstat_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4d06      	ldr	r5, [pc, #24]	; (8005abc <_fstat_r+0x20>)
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	f7fb fea2 	bl	80017f2 <_fstat>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d102      	bne.n	8005ab8 <_fstat_r+0x1c>
 8005ab2:	682b      	ldr	r3, [r5, #0]
 8005ab4:	b103      	cbz	r3, 8005ab8 <_fstat_r+0x1c>
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
 8005aba:	bf00      	nop
 8005abc:	200002f0 	.word	0x200002f0

08005ac0 <_isatty_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4d05      	ldr	r5, [pc, #20]	; (8005adc <_isatty_r+0x1c>)
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	4608      	mov	r0, r1
 8005aca:	602b      	str	r3, [r5, #0]
 8005acc:	f7fb fea0 	bl	8001810 <_isatty>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_isatty_r+0x1a>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_isatty_r+0x1a>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	200002f0 	.word	0x200002f0

08005ae0 <_lseek_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4d05      	ldr	r5, [pc, #20]	; (8005b00 <_lseek_r+0x20>)
 8005aec:	602a      	str	r2, [r5, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f7fb fe98 	bl	8001824 <_lseek>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_lseek_r+0x1e>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_lseek_r+0x1e>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	200002f0 	.word	0x200002f0

08005b04 <_read_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4d05      	ldr	r5, [pc, #20]	; (8005b24 <_read_r+0x20>)
 8005b10:	602a      	str	r2, [r5, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f7fb fe29 	bl	800176a <_read>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_read_r+0x1e>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_read_r+0x1e>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	200002f0 	.word	0x200002f0

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
