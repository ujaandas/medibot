
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08006ca8  08006ca8  00016ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076cc  080076cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080076cc  080076cc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076cc  080076cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080076d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001dc  080078b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080078b0  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013199  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a68  00000000  00000000  0003339e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00035e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00036fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da0e  00000000  00000000  00038068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b13  00000000  00000000  00055a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0701  00000000  00000000  0006a589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ac8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  0010acdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006c90 	.word	0x08006c90

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006c90 	.word	0x08006c90

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <_Z5Delaym>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <_Z5Delaym+0x20>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	e7f3      	b.n	8000ba8 <_Z5Delaym+0x8>
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <_Z8LCD_INITv>:

void LCD_INIT ( void )
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 f829 	bl	8000c28 <_Z19LCD_BackLed_Control15FunctionalState>
	LCD_Rst();
 8000bd6:	f000 f80f 	bl	8000bf8 <_Z7LCD_Rstv>
	LCD_REG_Config();
 8000bda:	f000 f85f 	bl	8000c9c <_Z14LCD_REG_Configv>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000be8:	22f0      	movs	r2, #240	; 0xf0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 f9e5 	bl	8000fbc <_Z9LCD_Clearttttt>
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_Z7LCD_Rstv>:



void LCD_Rst ( void )
{			
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <_Z7LCD_Rstv+0x28>)
 8000c02:	f001 fca9 	bl	8002558 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <_Z7LCD_Rstv+0x2c>)
 8000c08:	f7ff ffca 	bl	8000ba0 <_Z5Delaym>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <_Z7LCD_Rstv+0x28>)
 8000c12:	f001 fca1 	bl	8002558 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <_Z7LCD_Rstv+0x2c>)
 8000c18:	f7ff ffc2 	bl	8000ba0 <_Z5Delaym>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40011800 	.word	0x40011800
 8000c24:	0002bffc 	.word	0x0002bffc

08000c28 <_Z19LCD_BackLed_Control15FunctionalState>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <_Z19LCD_BackLed_Control15FunctionalState+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <_Z19LCD_BackLed_Control15FunctionalState+0x34>)
 8000c40:	f001 fc8a 	bl	8002558 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000c44:	e005      	b.n	8000c52 <_Z19LCD_BackLed_Control15FunctionalState+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <_Z19LCD_BackLed_Control15FunctionalState+0x34>)
 8000c4e:	f001 fc83 	bl	8002558 <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40011400 	.word	0x40011400

08000c60 <_Z13LCD_Write_Cmdt>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c6a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	8013      	strh	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <_Z14LCD_Write_Datat>:




void LCD_Write_Data ( uint16_t usData )
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <_Z14LCD_Write_Datat+0x1c>)
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	8013      	strh	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	60020000 	.word	0x60020000

08000c9c <_Z14LCD_REG_Configv>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000ca0:	20cf      	movs	r0, #207	; 0xcf
 8000ca2:	f7ff ffdd 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00  );
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ffe8 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x81  );
 8000cac:	2081      	movs	r0, #129	; 0x81
 8000cae:	f7ff ffe5 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x30  );
 8000cb2:	2030      	movs	r0, #48	; 0x30
 8000cb4:	f7ff ffe2 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000cb8:	20ed      	movs	r0, #237	; 0xed
 8000cba:	f7ff ffd1 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x64 );
 8000cbe:	2064      	movs	r0, #100	; 0x64
 8000cc0:	f7ff ffdc 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x03 );
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f7ff ffd9 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x12 );
 8000cca:	2012      	movs	r0, #18
 8000ccc:	f7ff ffd6 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x81 );
 8000cd0:	2081      	movs	r0, #129	; 0x81
 8000cd2:	f7ff ffd3 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000cd6:	20e8      	movs	r0, #232	; 0xe8
 8000cd8:	f7ff ffc2 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x85 );
 8000cdc:	2085      	movs	r0, #133	; 0x85
 8000cde:	f7ff ffcd 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x10 );
 8000ce2:	2010      	movs	r0, #16
 8000ce4:	f7ff ffca 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x78 );
 8000ce8:	2078      	movs	r0, #120	; 0x78
 8000cea:	f7ff ffc7 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000cee:	20cb      	movs	r0, #203	; 0xcb
 8000cf0:	f7ff ffb6 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x39 );
 8000cf4:	2039      	movs	r0, #57	; 0x39
 8000cf6:	f7ff ffc1 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x2C );
 8000cfa:	202c      	movs	r0, #44	; 0x2c
 8000cfc:	f7ff ffbe 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ffbb 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x34 );
 8000d06:	2034      	movs	r0, #52	; 0x34
 8000d08:	f7ff ffb8 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x02 );
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f7ff ffb5 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000d12:	20f7      	movs	r0, #247	; 0xf7
 8000d14:	f7ff ffa4 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x20 );
 8000d18:	2020      	movs	r0, #32
 8000d1a:	f7ff ffaf 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000d1e:	20ea      	movs	r0, #234	; 0xea
 8000d20:	f7ff ff9e 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff ffa9 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff ffa6 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000d30:	20b1      	movs	r0, #177	; 0xb1
 8000d32:	f7ff ff95 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ffa0 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x1B );
 8000d3c:	201b      	movs	r0, #27
 8000d3e:	f7ff ff9d 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000d42:	20b6      	movs	r0, #182	; 0xb6
 8000d44:	f7ff ff8c 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x0A );
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f7ff ff97 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0xA2 );
 8000d4e:	20a2      	movs	r0, #162	; 0xa2
 8000d50:	f7ff ff94 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d54:	20c0      	movs	r0, #192	; 0xc0
 8000d56:	f7ff ff83 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x35 );
 8000d5a:	2035      	movs	r0, #53	; 0x35
 8000d5c:	f7ff ff8e 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d60:	20c1      	movs	r0, #193	; 0xc1
 8000d62:	f7ff ff7d 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x11 );
 8000d66:	2011      	movs	r0, #17
 8000d68:	f7ff ff88 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d6c:	20c5      	movs	r0, #197	; 0xc5
 8000d6e:	f7ff ff77 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x45 );
 8000d72:	2045      	movs	r0, #69	; 0x45
 8000d74:	f7ff ff82 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x45 );
 8000d78:	2045      	movs	r0, #69	; 0x45
 8000d7a:	f7ff ff7f 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d7e:	20c7      	movs	r0, #199	; 0xc7
 8000d80:	f7ff ff6e 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0xA2 );
 8000d84:	20a2      	movs	r0, #162	; 0xa2
 8000d86:	f7ff ff79 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d8a:	20f2      	movs	r0, #242	; 0xf2
 8000d8c:	f7ff ff68 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff ff73 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d96:	2026      	movs	r0, #38	; 0x26
 8000d98:	f7ff ff62 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x01 );
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ff6d 	bl	8000c7c <_Z14LCD_Write_Datat>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000da2:	20e0      	movs	r0, #224	; 0xe0
 8000da4:	f7ff ff5c 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x0F );
 8000da8:	200f      	movs	r0, #15
 8000daa:	f7ff ff67 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x26 );
 8000dae:	2026      	movs	r0, #38	; 0x26
 8000db0:	f7ff ff64 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x24 );
 8000db4:	2024      	movs	r0, #36	; 0x24
 8000db6:	f7ff ff61 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0B );
 8000dba:	200b      	movs	r0, #11
 8000dbc:	f7ff ff5e 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0E );
 8000dc0:	200e      	movs	r0, #14
 8000dc2:	f7ff ff5b 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x09 );
 8000dc6:	2009      	movs	r0, #9
 8000dc8:	f7ff ff58 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x54 );
 8000dcc:	2054      	movs	r0, #84	; 0x54
 8000dce:	f7ff ff55 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0xA8 );
 8000dd2:	20a8      	movs	r0, #168	; 0xa8
 8000dd4:	f7ff ff52 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x46 );
 8000dd8:	2046      	movs	r0, #70	; 0x46
 8000dda:	f7ff ff4f 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0C );
 8000dde:	200c      	movs	r0, #12
 8000de0:	f7ff ff4c 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x17 );
 8000de4:	2017      	movs	r0, #23
 8000de6:	f7ff ff49 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x09 );
 8000dea:	2009      	movs	r0, #9
 8000dec:	f7ff ff46 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0F );
 8000df0:	200f      	movs	r0, #15
 8000df2:	f7ff ff43 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x07 );
 8000df6:	2007      	movs	r0, #7
 8000df8:	f7ff ff40 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff3d 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000e02:	20e1      	movs	r0, #225	; 0xe1
 8000e04:	f7ff ff2c 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff ff37 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x19 );
 8000e0e:	2019      	movs	r0, #25
 8000e10:	f7ff ff34 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x1B );
 8000e14:	201b      	movs	r0, #27
 8000e16:	f7ff ff31 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x04 );
 8000e1a:	2004      	movs	r0, #4
 8000e1c:	f7ff ff2e 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x10 );
 8000e20:	2010      	movs	r0, #16
 8000e22:	f7ff ff2b 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x07 );
 8000e26:	2007      	movs	r0, #7
 8000e28:	f7ff ff28 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x2A );
 8000e2c:	202a      	movs	r0, #42	; 0x2a
 8000e2e:	f7ff ff25 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x47 );
 8000e32:	2047      	movs	r0, #71	; 0x47
 8000e34:	f7ff ff22 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x39 );
 8000e38:	2039      	movs	r0, #57	; 0x39
 8000e3a:	f7ff ff1f 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x03 );
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f7ff ff1c 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x06 );
 8000e44:	2006      	movs	r0, #6
 8000e46:	f7ff ff19 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x06 );
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	f7ff ff16 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x30 );
 8000e50:	2030      	movs	r0, #48	; 0x30
 8000e52:	f7ff ff13 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x38 );
 8000e56:	2038      	movs	r0, #56	; 0x38
 8000e58:	f7ff ff10 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0F );
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	f7ff ff0d 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e62:	2036      	movs	r0, #54	; 0x36
 8000e64:	f7ff fefc 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000e68:	20c8      	movs	r0, #200	; 0xc8
 8000e6a:	f7ff ff07 	bl	8000c7c <_Z14LCD_Write_Datat>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e6e:	202a      	movs	r0, #42	; 0x2a
 8000e70:	f7ff fef6 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff ff01 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fefe 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fefb 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0xEF );
 8000e86:	20ef      	movs	r0, #239	; 0xef
 8000e88:	f7ff fef8 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e8c:	202b      	movs	r0, #43	; 0x2b
 8000e8e:	f7ff fee7 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fef2 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff feef 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x01 );
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff feec 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x3F );
 8000ea4:	203f      	movs	r0, #63	; 0x3f
 8000ea6:	f7ff fee9 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000eaa:	203a      	movs	r0, #58	; 0x3a
 8000eac:	f7ff fed8 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x55 );
 8000eb0:	2055      	movs	r0, #85	; 0x55
 8000eb2:	f7ff fee3 	bl	8000c7c <_Z14LCD_Write_Datat>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000eb6:	2011      	movs	r0, #17
 8000eb8:	f7ff fed2 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	Delay ( 0xAFFf<<2 );
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <_Z14LCD_REG_Configv+0x230>)
 8000ebe:	f7ff fe6f 	bl	8000ba0 <_Z5Delaym>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000ec2:	2029      	movs	r0, #41	; 0x29
 8000ec4:	f7ff fecc 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	
	
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0002bffc 	.word	0x0002bffc

08000ed0 <_Z14LCD_OpenWindowtttt>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	80fb      	strh	r3, [r7, #6]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80bb      	strh	r3, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	807b      	strh	r3, [r7, #2]
 8000eea:	4613      	mov	r3, r2
 8000eec:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000eee:	202a      	movs	r0, #42	; 0x2a
 8000ef0:	f7ff feb6 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff febe 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff feb8 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000f0c:	88fa      	ldrh	r2, [r7, #6]
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	4413      	add	r3, r2
 8000f12:	3b01      	subs	r3, #1
 8000f14:	121b      	asrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff feaf 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4413      	add	r3, r2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3b01      	subs	r3, #1
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fea4 	bl	8000c7c <_Z14LCD_Write_Datat>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000f34:	202b      	movs	r0, #43	; 0x2b
 8000f36:	f7ff fe93 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( usPAGE >> 8  );
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe9b 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe95 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f52:	88ba      	ldrh	r2, [r7, #4]
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	121b      	asrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe8c 	bl	8000c7c <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f64:	88ba      	ldrh	r2, [r7, #4]
 8000f66:	883b      	ldrh	r3, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe81 	bl	8000c7c <_Z14LCD_Write_Datat>
	
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}

08000f82 <_Z13LCD_FillColormt>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f92:	202c      	movs	r0, #44	; 0x2c
 8000f94:	f7ff fe64 	bl	8000c60 <_Z13LCD_Write_Cmdt>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_Z13LCD_FillColormt+0x32>
		LCD_Write_Data ( usColor );
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe68 	bl	8000c7c <_Z14LCD_Write_Datat>
	for ( i = 0; i < usPoint; i ++ )
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e7f3      	b.n	8000f9c <_Z13LCD_FillColormt+0x1a>
		
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_Z9LCD_Clearttttt>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4623      	mov	r3, r4
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000fda:	883b      	ldrh	r3, [r7, #0]
 8000fdc:	887a      	ldrh	r2, [r7, #2]
 8000fde:	88b9      	ldrh	r1, [r7, #4]
 8000fe0:	88f8      	ldrh	r0, [r7, #6]
 8000fe2:	f7ff ff75 	bl	8000ed0 <_Z14LCD_OpenWindowtttt>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	883a      	ldrh	r2, [r7, #0]
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f7ff ffc4 	bl	8000f82 <_Z13LCD_FillColormt>
	
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
	...

08001004 <_Z12LCD_DrawCharttc>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	460b      	mov	r3, r1
 8001010:	80bb      	strh	r3, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	3b20      	subs	r3, #32
 800101a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800101c:	88b9      	ldrh	r1, [r7, #4]
 800101e:	88f8      	ldrh	r0, [r7, #6]
 8001020:	2310      	movs	r3, #16
 8001022:	2208      	movs	r2, #8
 8001024:	f7ff ff54 	bl	8000ed0 <_Z14LCD_OpenWindowtttt>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001028:	202c      	movs	r0, #44	; 0x2c
 800102a:	f7ff fe19 	bl	8000c60 <_Z13LCD_Write_Cmdt>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d824      	bhi.n	8001082 <_Z12LCD_DrawCharttc+0x7e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001038:	7b3a      	ldrb	r2, [r7, #12]
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	4913      	ldr	r1, [pc, #76]	; (800108c <_Z12LCD_DrawCharttc+0x88>)
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	440a      	add	r2, r1
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001048:	2300      	movs	r3, #0
 800104a:	737b      	strb	r3, [r7, #13]
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	2b07      	cmp	r3, #7
 8001050:	d813      	bhi.n	800107a <_Z12LCD_DrawCharttc+0x76>
		{
			if ( ucTemp & 0x01 )
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <_Z12LCD_DrawCharttc+0x60>
				LCD_Write_Data ( 0x001F );
 800105c:	201f      	movs	r0, #31
 800105e:	f7ff fe0d 	bl	8000c7c <_Z14LCD_Write_Datat>
 8001062:	e003      	b.n	800106c <_Z12LCD_DrawCharttc+0x68>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001064:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001068:	f7ff fe08 	bl	8000c7c <_Z14LCD_Write_Datat>
			
			ucTemp >>= 1;		
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	3301      	adds	r3, #1
 8001076:	737b      	strb	r3, [r7, #13]
 8001078:	e7e8      	b.n	800104c <_Z12LCD_DrawCharttc+0x48>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	3301      	adds	r3, #1
 800107e:	73bb      	strb	r3, [r7, #14]
 8001080:	e7d7      	b.n	8001032 <_Z12LCD_DrawCharttc+0x2e>
			
		}
		
	}
	
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08006cd4 	.word	0x08006cd4

08001090 <_Z14LCD_DrawStringttPKc>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	603a      	str	r2, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	460b      	mov	r3, r1
 800109e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01d      	beq.n	80010e4 <_Z14LCD_DrawStringttPKc+0x54>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	2be8      	cmp	r3, #232	; 0xe8
 80010ac:	d904      	bls.n	80010b8 <_Z14LCD_DrawStringttPKc+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010ae:	2300      	movs	r3, #0
 80010b0:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	3310      	adds	r3, #16
 80010b6:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80010be:	d903      	bls.n	80010c8 <_Z14LCD_DrawStringttPKc+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010c0:	2300      	movs	r3, #0
 80010c2:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	88b9      	ldrh	r1, [r7, #4]
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff97 	bl	8001004 <_Z12LCD_DrawCharttc>
		
		pStr ++;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	3308      	adds	r3, #8
 80010e0:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80010e2:	e7dd      	b.n	80010a0 <_Z14LCD_DrawStringttPKc+0x10>
		
	}
	
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	0000      	movs	r0, r0
	...

080010f0 <_ZN10ServoMotorC1EP17TIM_HandleTypeDeft>:
 *      Author: ooj
 */

#include <ServoMotor/ServoMotor.h>

ServoMotor::ServoMotor(TIM_HandleTypeDef* timer, uint16_t timerChannel) :
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	80fb      	strh	r3, [r7, #6]
	timer(timer), timerChannel(timerChannel){
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	88fa      	ldrh	r2, [r7, #6]
 8001108:	819a      	strh	r2, [r3, #12]
	HAL_TIM_PWM_Start(timer, timerChannel);
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4619      	mov	r1, r3
 800110e:	68b8      	ldr	r0, [r7, #8]
 8001110:	f002 f934 	bl	800337c <HAL_TIM_PWM_Start>
	uint16_t arr = timer->Init.Period;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	82fb      	strh	r3, [r7, #22]
	minPulse = arr * 0.025;
 800111a:	8afb      	ldrh	r3, [r7, #22]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f9dd 	bl	80004dc <__aeabi_i2d>
 8001122:	a319      	add	r3, pc, #100	; (adr r3, 8001188 <_ZN10ServoMotorC1EP17TIM_HandleTypeDeft+0x98>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa42 	bl	80005b0 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd14 	bl	8000b60 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	801a      	strh	r2, [r3, #0]
	maxPulse = arr * 0.125;
 8001140:	8afb      	ldrh	r3, [r7, #22]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9ca 	bl	80004dc <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001150:	f7ff fa2e 	bl	80005b0 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fd00 	bl	8000b60 <__aeabi_d2uiz>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	805a      	strh	r2, [r3, #2]
	totalSteps = maxPulse - minPulse;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	885a      	ldrh	r2, [r3, #2]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	809a      	strh	r2, [r3, #4]
}
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	9999999a 	.word	0x9999999a
 800118c:	3f999999 	.word	0x3f999999

08001190 <_ZN10ServoMotor6spinToEt>:


void ServoMotor::spinTo(uint16_t angle) {
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
    if (angle > 180) angle = 180;
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	2bb4      	cmp	r3, #180	; 0xb4
 80011a0:	d901      	bls.n	80011a6 <_ZN10ServoMotor6spinToEt+0x16>
 80011a2:	23b4      	movs	r3, #180	; 0xb4
 80011a4:	807b      	strh	r3, [r7, #2]
    if (angle < 0) angle = 0;

    uint16_t pulseWidth = minPulse + ((angle * totalSteps) / 180);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	881a      	ldrh	r2, [r3, #0]
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	8889      	ldrh	r1, [r1, #4]
 80011b0:	fb01 f303 	mul.w	r3, r1, r3
 80011b4:	4918      	ldr	r1, [pc, #96]	; (8001218 <_ZN10ServoMotor6spinToEt+0x88>)
 80011b6:	fb81 0103 	smull	r0, r1, r1, r3
 80011ba:	4419      	add	r1, r3
 80011bc:	11c9      	asrs	r1, r1, #7
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1acb      	subs	r3, r1, r3
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	81fb      	strh	r3, [r7, #14]

    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	899b      	ldrh	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <_ZN10ServoMotor6spinToEt+0x4c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	89fa      	ldrh	r2, [r7, #14]
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011da:	e018      	b.n	800120e <_ZN10ServoMotor6spinToEt+0x7e>
    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	899b      	ldrh	r3, [r3, #12]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d105      	bne.n	80011f0 <_ZN10ServoMotor6spinToEt+0x60>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	89fa      	ldrh	r2, [r7, #14]
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80011ee:	e00e      	b.n	800120e <_ZN10ServoMotor6spinToEt+0x7e>
    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	899b      	ldrh	r3, [r3, #12]
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d105      	bne.n	8001204 <_ZN10ServoMotor6spinToEt+0x74>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	89fa      	ldrh	r2, [r7, #14]
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001202:	e004      	b.n	800120e <_ZN10ServoMotor6spinToEt+0x7e>
    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	89fa      	ldrh	r2, [r7, #14]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	b60b60b7 	.word	0xb60b60b7

0800121c <_ZN12StepperMotorC1EP12GPIO_TypeDefttttP17TIM_HandleTypeDef>:
 *      Author: ooj
 */

#include <StepperMotor/StepperMotor.h>

StepperMotor::StepperMotor(GPIO_TypeDef* gpioPort, uint16_t pin1, uint16_t pin2, uint16_t pin3, uint16_t pin4, TIM_HandleTypeDef* timer)
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	4611      	mov	r1, r2
 8001228:	461a      	mov	r2, r3
 800122a:	460b      	mov	r3, r1
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	4613      	mov	r3, r2
 8001230:	80bb      	strh	r3, [r7, #4]
    : gpioPort(gpioPort), pin1(pin1), pin2(pin2), pin3(pin3), pin4(pin4), timer(timer) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	809a      	strh	r2, [r3, #4]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	88ba      	ldrh	r2, [r7, #4]
 8001242:	80da      	strh	r2, [r3, #6]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8c3a      	ldrh	r2, [r7, #32]
 8001248:	811a      	strh	r2, [r3, #8]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800124e:	815a      	strh	r2, [r3, #10]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a08      	ldr	r2, [pc, #32]	; (800127c <_ZN12StepperMotorC1EP12GPIO_TypeDefttttP17TIM_HandleTypeDef+0x60>)
 800125a:	f103 0410 	add.w	r4, r3, #16
 800125e:	4615      	mov	r5, r2
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_TIM_Base_Start(timer);
 800126c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800126e:	f001 ffd5 	bl	800321c <HAL_TIM_Base_Start>
}
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bdb0      	pop	{r4, r5, r7, pc}
 800127c:	08006ca8 	.word	0x08006ca8

08001280 <_ZN12StepperMotor10microDelayEt>:

void StepperMotor::microDelay(uint16_t delay) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COUNTER(timer, 0);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(timer) < delay);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	bf34      	ite	cc
 80012a4:	2301      	movcc	r3, #1
 80012a6:	2300      	movcs	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d000      	beq.n	80012b0 <_ZN12StepperMotor10microDelayEt+0x30>
 80012ae:	e7f2      	b.n	8001296 <_ZN12StepperMotor10microDelayEt+0x16>
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <_ZN12StepperMotor10singleStepEi>:

void StepperMotor::singleStep(int index) {
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(gpioPort, pin1, state[index][0]);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	8899      	ldrh	r1, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	3204      	adds	r2, #4
 80012d2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80012d6:	461a      	mov	r2, r3
 80012d8:	f001 f93e 	bl	8002558 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpioPort, pin2, state[index][1]);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	88d9      	ldrh	r1, [r3, #6]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	7c5b      	ldrb	r3, [r3, #17]
 80012ee:	461a      	mov	r2, r3
 80012f0:	f001 f932 	bl	8002558 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpioPort, pin3, state[index][2]);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	8919      	ldrh	r1, [r3, #8]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	7c9b      	ldrb	r3, [r3, #18]
 8001306:	461a      	mov	r2, r3
 8001308:	f001 f926 	bl	8002558 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpioPort, pin4, state[index][3]);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	8959      	ldrh	r1, [r3, #10]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	7cdb      	ldrb	r3, [r3, #19]
 800131e:	461a      	mov	r2, r3
 8001320:	f001 f91a 	bl	8002558 <HAL_GPIO_WritePin>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN12StepperMotor9makeStepsEitb>:

void StepperMotor::makeSteps(int steps, uint16_t delay, bool clockwise) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	460b      	mov	r3, r1
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	4613      	mov	r3, r2
 8001340:	717b      	strb	r3, [r7, #5]
    for (int x = 0; x < steps; ++x) {
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	429a      	cmp	r2, r3
 800134c:	da1e      	bge.n	800138c <_ZN12StepperMotor9makeStepsEitb+0x60>
        for (int i = 0; i < STEP_COUNT; ++i) {
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b07      	cmp	r3, #7
 8001356:	dc15      	bgt.n	8001384 <_ZN12StepperMotor9makeStepsEitb+0x58>
            int index = clockwise ? (STEP_COUNT - 1 - i) : i;
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <_ZN12StepperMotor9makeStepsEitb+0x3a>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	f1c3 0307 	rsb	r3, r3, #7
 8001364:	e000      	b.n	8001368 <_ZN12StepperMotor9makeStepsEitb+0x3c>
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	617b      	str	r3, [r7, #20]
            singleStep(index);
 800136a:	6979      	ldr	r1, [r7, #20]
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff ffa4 	bl	80012ba <_ZN12StepperMotor10singleStepEi>
            microDelay(delay);
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	4619      	mov	r1, r3
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff ff82 	bl	8001280 <_ZN12StepperMotor10microDelayEt>
        for (int i = 0; i < STEP_COUNT; ++i) {
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	3301      	adds	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	e7e6      	b.n	8001352 <_ZN12StepperMotor9makeStepsEitb+0x26>
    for (int x = 0; x < steps; ++x) {
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	3301      	adds	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e7dc      	b.n	8001346 <_ZN12StepperMotor9makeStepsEitb+0x1a>
        }
    }
}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001398:	f000 fdb6 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 f811 	bl	80013c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f000 f97a 	bl	8001698 <MX_GPIO_Init>
  MX_FSMC_Init();
 80013a4:	f000 fa42 	bl	800182c <MX_FSMC_Init>
  MX_I2C2_Init();
 80013a8:	f000 f856 	bl	8001458 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80013ac:	f000 f94a 	bl	8001644 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80013b0:	f000 f880 	bl	80014b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013b4:	f000 f8ce 	bl	8001554 <MX_TIM3_Init>
    /* USER CODE BEGIN 3 */
  }

  // the main entry point in the C++ source after initializing
  // the runtime environment.
  return mymain();
 80013b8:	f000 faa2 	bl	8001900 <mymain>
 80013bc:	4603      	mov	r3, r0
  /* USER CODE END 3 */
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b090      	sub	sp, #64	; 0x40
 80013c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c8:	f107 0318 	add.w	r3, r7, #24
 80013cc:	2228      	movs	r2, #40	; 0x28
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 ff47 	bl	8004264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f2:	2301      	movs	r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fa22 	bl	8002854 <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001416:	f000 fa6d 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	230f      	movs	r3, #15
 800141c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141e:	2302      	movs	r3, #2
 8001420:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f001 fc8f 	bl	8002d58 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001440:	f000 fa58 	bl	80018f4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8001444:	2200      	movs	r2, #0
 8001446:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800144a:	2000      	movs	r0, #0
 800144c:	f001 fd6e 	bl	8002f2c <HAL_RCC_MCOConfig>
}
 8001450:	bf00      	nop
 8001452:	3740      	adds	r7, #64	; 0x40
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C2_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <MX_I2C2_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_I2C2_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C2_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_I2C2_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_I2C2_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001496:	f001 f899 	bl	80025cc <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 fa28 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200001f8 	.word	0x200001f8
 80014ac:	40005800 	.word	0x40005800
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_TIM1_Init+0x98>)
 80014d2:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <MX_TIM1_Init+0x9c>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_TIM1_Init+0x98>)
 80014d8:	2247      	movs	r2, #71	; 0x47
 80014da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_TIM1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_TIM1_Init+0x98>)
 80014e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_TIM1_Init+0x98>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_TIM1_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_TIM1_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fc:	4813      	ldr	r0, [pc, #76]	; (800154c <MX_TIM1_Init+0x98>)
 80014fe:	f001 fe3e 	bl	800317e <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001508:	f000 f9f4 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_TIM1_Init+0x98>)
 800151a:	f002 f8ab 	bl	8003674 <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001524:	f000 f9e6 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_TIM1_Init+0x98>)
 8001536:	f002 fc51 	bl	8003ddc <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001540:	f000 f9d8 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000024c 	.word	0x2000024c
 8001550:	40012c00 	.word	0x40012c00

08001554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08e      	sub	sp, #56	; 0x38
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <MX_TIM3_Init+0xe8>)
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <MX_TIM3_Init+0xec>)
 8001588:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <MX_TIM3_Init+0xe8>)
 800158c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001590:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <MX_TIM3_Init+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 480-1;
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_TIM3_Init+0xe8>)
 800159a:	f240 12df 	movw	r2, #479	; 0x1df
 800159e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <MX_TIM3_Init+0xe8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <MX_TIM3_Init+0xe8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ac:	4823      	ldr	r0, [pc, #140]	; (800163c <MX_TIM3_Init+0xe8>)
 80015ae:	f001 fde6 	bl	800317e <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015b8:	f000 f99c 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c6:	4619      	mov	r1, r3
 80015c8:	481c      	ldr	r0, [pc, #112]	; (800163c <MX_TIM3_Init+0xe8>)
 80015ca:	f002 f853 	bl	8003674 <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015d4:	f000 f98e 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM3_Init+0xe8>)
 80015da:	f001 fe77 	bl	80032cc <HAL_TIM_PWM_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015e4:	f000 f986 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	4619      	mov	r1, r3
 80015f6:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_TIM3_Init+0xe8>)
 80015f8:	f002 fbf0 	bl	8003ddc <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001602:	f000 f977 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2360      	movs	r3, #96	; 0x60
 8001608:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 120;
 800160a:	2378      	movs	r3, #120	; 0x78
 800160c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	4807      	ldr	r0, [pc, #28]	; (800163c <MX_TIM3_Init+0xe8>)
 800161e:	f001 ff67 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001628:	f000 f964 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <MX_TIM3_Init+0xe8>)
 800162e:	f000 fa55 	bl	8001adc <HAL_TIM_MspPostInit>

}
 8001632:	bf00      	nop
 8001634:	3738      	adds	r7, #56	; 0x38
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000294 	.word	0x20000294
 8001640:	40000400 	.word	0x40000400

08001644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f002 fc1a 	bl	8003eb4 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f935 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002dc 	.word	0x200002dc
 8001694:	40013800 	.word	0x40013800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b58      	ldr	r3, [pc, #352]	; (8001810 <MX_GPIO_Init+0x178>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a57      	ldr	r2, [pc, #348]	; (8001810 <MX_GPIO_Init+0x178>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b55      	ldr	r3, [pc, #340]	; (8001810 <MX_GPIO_Init+0x178>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <MX_GPIO_Init+0x178>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a51      	ldr	r2, [pc, #324]	; (8001810 <MX_GPIO_Init+0x178>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <MX_GPIO_Init+0x178>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <MX_GPIO_Init+0x178>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <MX_GPIO_Init+0x178>)
 80016e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b49      	ldr	r3, [pc, #292]	; (8001810 <MX_GPIO_Init+0x178>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <MX_GPIO_Init+0x178>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a45      	ldr	r2, [pc, #276]	; (8001810 <MX_GPIO_Init+0x178>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <MX_GPIO_Init+0x178>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <MX_GPIO_Init+0x178>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a3f      	ldr	r2, [pc, #252]	; (8001810 <MX_GPIO_Init+0x178>)
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <MX_GPIO_Init+0x178>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STP_1_Pin|STP_2_Pin|STP_3_Pin|STP_4_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	21f0      	movs	r1, #240	; 0xf0
 8001728:	483a      	ldr	r0, [pc, #232]	; (8001814 <MX_GPIO_Init+0x17c>)
 800172a:	f000 ff15 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001734:	4838      	ldr	r0, [pc, #224]	; (8001818 <MX_GPIO_Init+0x180>)
 8001736:	f000 ff0f 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2102      	movs	r1, #2
 800173e:	4837      	ldr	r0, [pc, #220]	; (800181c <MX_GPIO_Init+0x184>)
 8001740:	f000 ff0a 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : K2_Btn_Pin */
  GPIO_InitStruct.Pin = K2_Btn_Pin;
 8001744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <MX_GPIO_Init+0x188>)
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4619      	mov	r1, r3
 8001758:	4832      	ldr	r0, [pc, #200]	; (8001824 <MX_GPIO_Init+0x18c>)
 800175a:	f000 fd69 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800175e:	2308      	movs	r3, #8
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <MX_GPIO_Init+0x190>)
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0318 	add.w	r3, r7, #24
 800176e:	4619      	mov	r1, r3
 8001770:	4828      	ldr	r0, [pc, #160]	; (8001814 <MX_GPIO_Init+0x17c>)
 8001772:	f000 fd5d 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : STP_1_Pin STP_2_Pin STP_3_Pin STP_4_Pin */
  GPIO_InitStruct.Pin = STP_1_Pin|STP_2_Pin|STP_3_Pin|STP_4_Pin;
 8001776:	23f0      	movs	r3, #240	; 0xf0
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4619      	mov	r1, r3
 800178c:	4821      	ldr	r0, [pc, #132]	; (8001814 <MX_GPIO_Init+0x17c>)
 800178e:	f000 fd4f 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	4619      	mov	r1, r3
 80017aa:	481b      	ldr	r0, [pc, #108]	; (8001818 <MX_GPIO_Init+0x180>)
 80017ac:	f000 fd40 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	4619      	mov	r1, r3
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_GPIO_Init+0x17c>)
 80017c6:	f000 fd33 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	4619      	mov	r1, r3
 80017e0:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_GPIO_Init+0x184>)
 80017e2:	f000 fd25 	bl	8002230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2009      	movs	r0, #9
 80017ec:	f000 fce9 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017f0:	2009      	movs	r0, #9
 80017f2:	f000 fd02 	bl	80021fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2028      	movs	r0, #40	; 0x28
 80017fc:	f000 fce1 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001800:	2028      	movs	r0, #40	; 0x28
 8001802:	f000 fcfa 	bl	80021fa <HAL_NVIC_EnableIRQ>

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40010800 	.word	0x40010800
 8001818:	40011400 	.word	0x40011400
 800181c:	40011800 	.word	0x40011800
 8001820:	10110000 	.word	0x10110000
 8001824:	40011000 	.word	0x40011000
 8001828:	10310000 	.word	0x10310000

0800182c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001846:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800184a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <MX_FSMC_Init+0xbc>)
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <MX_FSMC_Init+0xc0>)
 8001850:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <MX_FSMC_Init+0xbc>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001866:	2210      	movs	r2, #16
 8001868:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <MX_FSMC_Init+0xbc>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_FSMC_Init+0xbc>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_FSMC_Init+0xbc>)
 800188c:	2200      	movs	r2, #0
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001892:	2200      	movs	r2, #0
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_FSMC_Init+0xbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_FSMC_Init+0xbc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80018a2:	230f      	movs	r3, #15
 80018a4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018a6:	230f      	movs	r3, #15
 80018a8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80018aa:	23ff      	movs	r3, #255	; 0xff
 80018ac:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80018ae:	230f      	movs	r3, #15
 80018b0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018b2:	2310      	movs	r3, #16
 80018b4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018b6:	2311      	movs	r3, #17
 80018b8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <MX_FSMC_Init+0xbc>)
 80018c6:	f001 fc0d 	bl	80030e4 <HAL_SRAM_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80018d0:	f000 f810 	bl	80018f4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_FSMC_Init+0xc4>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <MX_FSMC_Init+0xc4>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000324 	.word	0x20000324
 80018ec:	a0000104 	.word	0xa0000104
 80018f0:	40010000 	.word	0x40010000

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>
	...

08001900 <mymain>:

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim3;

int mymain(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b098      	sub	sp, #96	; 0x60
 8001904:	af04      	add	r7, sp, #16
  LCD_INIT();
 8001906:	f7ff f960 	bl	8000bca <_Z8LCD_INITv>

  char name[] = "DAS, Ujaan";
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <mymain+0x84>)
 800190c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001910:	ca07      	ldmia	r2, {r0, r1, r2}
 8001912:	c303      	stmia	r3!, {r0, r1}
 8001914:	801a      	strh	r2, [r3, #0]
 8001916:	3302      	adds	r3, #2
 8001918:	0c12      	lsrs	r2, r2, #16
 800191a:	701a      	strb	r2, [r3, #0]
  LCD_DrawString(0, 0, name);
 800191c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001920:	461a      	mov	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fbb3 	bl	8001090 <_Z14LCD_DrawStringttPKc>

  StepperMotor stepper(GPIOA, STP_1_Pin, STP_2_Pin, STP_3_Pin, STP_4_Pin, &htim1);
 800192a:	f107 0014 	add.w	r0, r7, #20
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <mymain+0x88>)
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	2340      	movs	r3, #64	; 0x40
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2320      	movs	r3, #32
 800193c:	2210      	movs	r2, #16
 800193e:	4913      	ldr	r1, [pc, #76]	; (800198c <mymain+0x8c>)
 8001940:	f7ff fc6c 	bl	800121c <_ZN12StepperMotorC1EP12GPIO_TypeDefttttP17TIM_HandleTypeDef>
  ServoMotor servo(&htim3, TIM_CHANNEL_1);
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	4911      	ldr	r1, [pc, #68]	; (8001990 <mymain+0x90>)
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fbd0 	bl	80010f0 <_ZN10ServoMotorC1EP17TIM_HandleTypeDeft>

  while (1)
  {
	  stepper.makeSteps(256, 300, true);
 8001950:	f107 0014 	add.w	r0, r7, #20
 8001954:	2301      	movs	r3, #1
 8001956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	f7ff fce5 	bl	800132c <_ZN12StepperMotor9makeStepsEitb>
	  servo.spinTo(90);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	215a      	movs	r1, #90	; 0x5a
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fc12 	bl	8001190 <_ZN10ServoMotor6spinToEt>
	  HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	; 0x64
 800196e:	f000 fb2d 	bl	8001fcc <HAL_Delay>
//	  servo.spinTo(0);
	  stepper.makeSteps(128, 300, false);
 8001972:	f107 0014 	add.w	r0, r7, #20
 8001976:	2300      	movs	r3, #0
 8001978:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	f7ff fcd5 	bl	800132c <_ZN12StepperMotor9makeStepsEitb>
	  stepper.makeSteps(256, 300, true);
 8001982:	e7e5      	b.n	8001950 <mymain+0x50>
 8001984:	08006cc8 	.word	0x08006cc8
 8001988:	2000024c 	.word	0x2000024c
 800198c:	40010800 	.word	0x40010800
 8001990:	20000294 	.word	0x20000294

08001994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_MspInit+0x5c>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <HAL_MspInit+0x5c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6193      	str	r3, [r2, #24]
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_MspInit+0x5c>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x5c>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x5c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x5c>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_MspInit+0x60>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_MspInit+0x60>)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000

080019f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_I2C_MspInit+0x74>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d124      	bne.n	8001a62 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_I2C_MspInit+0x78>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_I2C_MspInit+0x78>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_I2C_MspInit+0x78>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a36:	2312      	movs	r3, #18
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4619      	mov	r1, r3
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <HAL_I2C_MspInit+0x7c>)
 8001a46:	f000 fbf3 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_I2C_MspInit+0x78>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_I2C_MspInit+0x78>)
 8001a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_I2C_MspInit+0x78>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40005800 	.word	0x40005800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010c00 	.word	0x40010c00

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_TIM_Base_MspInit+0x58>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10c      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8001a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aa2:	e010      	b.n	8001ac6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_TIM_Base_MspInit+0x60>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10b      	bne.n	8001ac6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_TIM_Base_MspInit+0x5c>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40012c00 	.word	0x40012c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40000400 	.word	0x40000400

08001adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <HAL_TIM_MspPostInit+0x7c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d129      	bne.n	8001b50 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_TIM_MspPostInit+0x80>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_TIM_MspPostInit+0x80>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_TIM_MspPostInit+0x80>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <HAL_TIM_MspPostInit+0x84>)
 8001b28:	f000 fb82 	bl	8002230 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_TIM_MspPostInit+0x88>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_TIM_MspPostInit+0x88>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40011000 	.word	0x40011000
 8001b64:	40010000 	.word	0x40010000

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_UART_MspInit+0x8c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d131      	bne.n	8001bec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <HAL_UART_MspInit+0x94>)
 8001bce:	f000 fb2f 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4619      	mov	r1, r3
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <HAL_UART_MspInit+0x94>)
 8001be8:	f000 fb22 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010800 	.word	0x40010800

08001c00 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_FSMC_MspInit+0x78>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d129      	bne.n	8001c70 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_FSMC_MspInit+0x78>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_FSMC_MspInit+0x7c>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <HAL_FSMC_MspInit+0x7c>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6153      	str	r3, [r2, #20]
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_FSMC_MspInit+0x7c>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c3a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001c3e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <HAL_FSMC_MspInit+0x80>)
 8001c50:	f000 faee 	bl	8002230 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c54:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001c58:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4619      	mov	r1, r3
 8001c68:	4806      	ldr	r0, [pc, #24]	; (8001c84 <HAL_FSMC_MspInit+0x84>)
 8001c6a:	f000 fae1 	bl	8002230 <HAL_GPIO_Init>
 8001c6e:	e000      	b.n	8001c72 <HAL_FSMC_MspInit+0x72>
    return;
 8001c70:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000036c 	.word	0x2000036c
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40011800 	.word	0x40011800
 8001c84:	40011400 	.word	0x40011400

08001c88 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001c90:	f7ff ffb6 	bl	8001c00 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce2:	f000 f957 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	int status = __HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <EXTI3_IRQHandler+0x30>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	607b      	str	r3, [r7, #4]
	if (status != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <EXTI3_IRQHandler+0x22>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <EXTI3_IRQHandler+0x30>)
 8001d04:	2208      	movs	r2, #8
 8001d06:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001d08:	2008      	movs	r0, #8
 8001d0a:	f000 fc55 	bl	80025b8 <HAL_GPIO_EXTI_Callback>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d0e:	2008      	movs	r0, #8
 8001d10:	f000 fc3a 	bl	8002588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40010400 	.word	0x40010400

08001d20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K2_Btn_Pin);
 8001d24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d28:	f000 fc2e 	bl	8002588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
	return 1;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <_kill>:

int _kill(int pid, int sig)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d48:	f002 fa62 	bl	8004210 <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2216      	movs	r2, #22
 8001d50:	601a      	str	r2, [r3, #0]
	return -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_exit>:

void _exit (int status)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffe7 	bl	8001d3e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d70:	e7fe      	b.n	8001d70 <_exit+0x12>

08001d72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e00a      	b.n	8001d9a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d84:	f3af 8000 	nop.w
 8001d88:	4601      	mov	r1, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60ba      	str	r2, [r7, #8]
 8001d90:	b2ca      	uxtb	r2, r1
 8001d92:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	dbf0      	blt.n	8001d84 <_read+0x12>
	}

return len;
 8001da2:	687b      	ldr	r3, [r7, #4]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e009      	b.n	8001dd2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	60ba      	str	r2, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbf1      	blt.n	8001dbe <_write+0x12>
	}
	return len;
 8001dda:	687b      	ldr	r3, [r7, #4]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_close>:

int _close(int file)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	return -1;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <_isatty>:

int _isatty(int file)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f002 f9cc 	bl	8004210 <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20010000 	.word	0x20010000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	20000370 	.word	0x20000370
 8001eac:	20000388 	.word	0x20000388

08001eb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff fff8 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ec2:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed8:	4c09      	ldr	r4, [pc, #36]	; (8001f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f002 f999 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eea:	f7ff fa53 	bl	8001394 <main>
  bx lr
 8001eee:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ef8:	080076d4 	.word	0x080076d4
  ldr r2, =_sbss
 8001efc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f00:	20000388 	.word	0x20000388

08001f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_2_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x28>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 f947 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fd36 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f95f 	bl	8002216 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f70:	f000 f927 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000374 	.word	0x20000374

08001fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000374 	.word	0x20000374

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffe0 	bl	8001fb8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4906      	ldr	r1, [pc, #24]	; (80020ac <__NVIC_EnableIRQ+0x34>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800218c:	f7ff ff90 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff2d 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff42 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff90 	bl	8002104 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5f 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff35 	bl	8002078 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffa2 	bl	8002168 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b08b      	sub	sp, #44	; 0x2c
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	e179      	b.n	8002538 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002244:	2201      	movs	r2, #1
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 8168 	bne.w	8002532 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a96      	ldr	r2, [pc, #600]	; (80024c0 <HAL_GPIO_Init+0x290>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d05e      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 800226c:	4a94      	ldr	r2, [pc, #592]	; (80024c0 <HAL_GPIO_Init+0x290>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d875      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 8002272:	4a94      	ldr	r2, [pc, #592]	; (80024c4 <HAL_GPIO_Init+0x294>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d058      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 8002278:	4a92      	ldr	r2, [pc, #584]	; (80024c4 <HAL_GPIO_Init+0x294>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d86f      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 800227e:	4a92      	ldr	r2, [pc, #584]	; (80024c8 <HAL_GPIO_Init+0x298>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d052      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 8002284:	4a90      	ldr	r2, [pc, #576]	; (80024c8 <HAL_GPIO_Init+0x298>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d869      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 800228a:	4a90      	ldr	r2, [pc, #576]	; (80024cc <HAL_GPIO_Init+0x29c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d04c      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 8002290:	4a8e      	ldr	r2, [pc, #568]	; (80024cc <HAL_GPIO_Init+0x29c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d863      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 8002296:	4a8e      	ldr	r2, [pc, #568]	; (80024d0 <HAL_GPIO_Init+0x2a0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d046      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 800229c:	4a8c      	ldr	r2, [pc, #560]	; (80024d0 <HAL_GPIO_Init+0x2a0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d85d      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 80022a2:	2b12      	cmp	r3, #18
 80022a4:	d82a      	bhi.n	80022fc <HAL_GPIO_Init+0xcc>
 80022a6:	2b12      	cmp	r3, #18
 80022a8:	d859      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 80022aa:	a201      	add	r2, pc, #4	; (adr r2, 80022b0 <HAL_GPIO_Init+0x80>)
 80022ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b0:	0800232b 	.word	0x0800232b
 80022b4:	08002305 	.word	0x08002305
 80022b8:	08002317 	.word	0x08002317
 80022bc:	08002359 	.word	0x08002359
 80022c0:	0800235f 	.word	0x0800235f
 80022c4:	0800235f 	.word	0x0800235f
 80022c8:	0800235f 	.word	0x0800235f
 80022cc:	0800235f 	.word	0x0800235f
 80022d0:	0800235f 	.word	0x0800235f
 80022d4:	0800235f 	.word	0x0800235f
 80022d8:	0800235f 	.word	0x0800235f
 80022dc:	0800235f 	.word	0x0800235f
 80022e0:	0800235f 	.word	0x0800235f
 80022e4:	0800235f 	.word	0x0800235f
 80022e8:	0800235f 	.word	0x0800235f
 80022ec:	0800235f 	.word	0x0800235f
 80022f0:	0800235f 	.word	0x0800235f
 80022f4:	0800230d 	.word	0x0800230d
 80022f8:	08002321 	.word	0x08002321
 80022fc:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <HAL_GPIO_Init+0x2a4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002302:	e02c      	b.n	800235e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	623b      	str	r3, [r7, #32]
          break;
 800230a:	e029      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	3304      	adds	r3, #4
 8002312:	623b      	str	r3, [r7, #32]
          break;
 8002314:	e024      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	3308      	adds	r3, #8
 800231c:	623b      	str	r3, [r7, #32]
          break;
 800231e:	e01f      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	330c      	adds	r3, #12
 8002326:	623b      	str	r3, [r7, #32]
          break;
 8002328:	e01a      	b.n	8002360 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002332:	2304      	movs	r3, #4
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e013      	b.n	8002360 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002340:	2308      	movs	r3, #8
 8002342:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	611a      	str	r2, [r3, #16]
          break;
 800234a:	e009      	b.n	8002360 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800234c:	2308      	movs	r3, #8
 800234e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	615a      	str	r2, [r3, #20]
          break;
 8002356:	e003      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
          break;
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x130>
          break;
 800235e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2bff      	cmp	r3, #255	; 0xff
 8002364:	d801      	bhi.n	800236a <HAL_GPIO_Init+0x13a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	e001      	b.n	800236e <HAL_GPIO_Init+0x13e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2bff      	cmp	r3, #255	; 0xff
 8002374:	d802      	bhi.n	800237c <HAL_GPIO_Init+0x14c>
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	e002      	b.n	8002382 <HAL_GPIO_Init+0x152>
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	3b08      	subs	r3, #8
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	210f      	movs	r1, #15
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	6a39      	ldr	r1, [r7, #32]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	431a      	orrs	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80c1 	beq.w	8002532 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b0:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_GPIO_Init+0x2a8>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a48      	ldr	r2, [pc, #288]	; (80024d8 <HAL_GPIO_Init+0x2a8>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_GPIO_Init+0x2a8>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023c8:	4a44      	ldr	r2, [pc, #272]	; (80024dc <HAL_GPIO_Init+0x2ac>)
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	220f      	movs	r2, #15
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <HAL_GPIO_Init+0x2b0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01f      	beq.n	8002434 <HAL_GPIO_Init+0x204>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3b      	ldr	r2, [pc, #236]	; (80024e4 <HAL_GPIO_Init+0x2b4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d019      	beq.n	8002430 <HAL_GPIO_Init+0x200>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3a      	ldr	r2, [pc, #232]	; (80024e8 <HAL_GPIO_Init+0x2b8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x1fc>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a39      	ldr	r2, [pc, #228]	; (80024ec <HAL_GPIO_Init+0x2bc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1f8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <HAL_GPIO_Init+0x2c0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1f4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a37      	ldr	r2, [pc, #220]	; (80024f4 <HAL_GPIO_Init+0x2c4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1f0>
 800241c:	2305      	movs	r3, #5
 800241e:	e00a      	b.n	8002436 <HAL_GPIO_Init+0x206>
 8002420:	2306      	movs	r3, #6
 8002422:	e008      	b.n	8002436 <HAL_GPIO_Init+0x206>
 8002424:	2304      	movs	r3, #4
 8002426:	e006      	b.n	8002436 <HAL_GPIO_Init+0x206>
 8002428:	2303      	movs	r3, #3
 800242a:	e004      	b.n	8002436 <HAL_GPIO_Init+0x206>
 800242c:	2302      	movs	r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x206>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_GPIO_Init+0x206>
 8002434:	2300      	movs	r3, #0
 8002436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002446:	4925      	ldr	r1, [pc, #148]	; (80024dc <HAL_GPIO_Init+0x2ac>)
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4924      	ldr	r1, [pc, #144]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4920      	ldr	r1, [pc, #128]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 8002478:	4013      	ands	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	491a      	ldr	r1, [pc, #104]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	4916      	ldr	r1, [pc, #88]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d025      	beq.n	80024fc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4910      	ldr	r1, [pc, #64]	; (80024f8 <HAL_GPIO_Init+0x2c8>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e025      	b.n	800250a <HAL_GPIO_Init+0x2da>
 80024be:	bf00      	nop
 80024c0:	10320000 	.word	0x10320000
 80024c4:	10310000 	.word	0x10310000
 80024c8:	10220000 	.word	0x10220000
 80024cc:	10210000 	.word	0x10210000
 80024d0:	10120000 	.word	0x10120000
 80024d4:	10110000 	.word	0x10110000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40010800 	.word	0x40010800
 80024e4:	40010c00 	.word	0x40010c00
 80024e8:	40011000 	.word	0x40011000
 80024ec:	40011400 	.word	0x40011400
 80024f0:	40011800 	.word	0x40011800
 80024f4:	40011c00 	.word	0x40011c00
 80024f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_GPIO_Init+0x324>)
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	43db      	mvns	r3, r3
 8002504:	4913      	ldr	r1, [pc, #76]	; (8002554 <HAL_GPIO_Init+0x324>)
 8002506:	4013      	ands	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_GPIO_Init+0x324>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	490e      	ldr	r1, [pc, #56]	; (8002554 <HAL_GPIO_Init+0x324>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_GPIO_Init+0x324>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	43db      	mvns	r3, r3
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <HAL_GPIO_Init+0x324>)
 800252e:	4013      	ands	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f ae7e 	bne.w	8002244 <HAL_GPIO_Init+0x14>
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	372c      	adds	r7, #44	; 0x2c
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002574:	e003      	b.n	800257e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f806 	bl	80025b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e12b      	b.n	8002836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fa00 	bl	80019f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2224      	movs	r2, #36	; 0x24
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002630:	f000 fd12 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a81      	ldr	r2, [pc, #516]	; (8002840 <HAL_I2C_Init+0x274>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d807      	bhi.n	8002650 <HAL_I2C_Init+0x84>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a80      	ldr	r2, [pc, #512]	; (8002844 <HAL_I2C_Init+0x278>)
 8002644:	4293      	cmp	r3, r2
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e006      	b.n	800265e <HAL_I2C_Init+0x92>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <HAL_I2C_Init+0x27c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0e7      	b.n	8002836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a78      	ldr	r2, [pc, #480]	; (800284c <HAL_I2C_Init+0x280>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_I2C_Init+0x274>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d802      	bhi.n	80026a0 <HAL_I2C_Init+0xd4>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	e009      	b.n	80026b4 <HAL_I2C_Init+0xe8>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_I2C_Init+0x284>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	3301      	adds	r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	495c      	ldr	r1, [pc, #368]	; (8002840 <HAL_I2C_Init+0x274>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d819      	bhi.n	8002708 <HAL_I2C_Init+0x13c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e59      	subs	r1, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_I2C_Init+0x138>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e59      	subs	r1, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	e051      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002704:	2304      	movs	r3, #4
 8002706:	e04f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <HAL_I2C_Init+0x168>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e012      	b.n	800275a <HAL_I2C_Init+0x18e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Init+0x196>
 800275e:	2301      	movs	r3, #1
 8002760:	e022      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10e      	bne.n	8002788 <HAL_I2C_Init+0x1bc>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e58      	subs	r0, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	440b      	add	r3, r1
 8002778:	fbb0 f3f3 	udiv	r3, r0, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002786:	e00f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e58      	subs	r0, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	6809      	ldr	r1, [r1, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6911      	ldr	r1, [r2, #16]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	000186a0 	.word	0x000186a0
 8002844:	001e847f 	.word	0x001e847f
 8002848:	003d08ff 	.word	0x003d08ff
 800284c:	431bde83 	.word	0x431bde83
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e272      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8087 	beq.w	8002982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002874:	4b92      	ldr	r3, [pc, #584]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b04      	cmp	r3, #4
 800287e:	d00c      	beq.n	800289a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002880:	4b8f      	ldr	r3, [pc, #572]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d112      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
 800288c:	4b8c      	ldr	r3, [pc, #560]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d10b      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	4b89      	ldr	r3, [pc, #548]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06c      	beq.n	8002980 <HAL_RCC_OscConfig+0x12c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d168      	bne.n	8002980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e24c      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x76>
 80028bc:	4b80      	ldr	r3, [pc, #512]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a7f      	ldr	r2, [pc, #508]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	e02e      	b.n	8002928 <HAL_RCC_OscConfig+0xd4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x98>
 80028d2:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7a      	ldr	r2, [pc, #488]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b78      	ldr	r3, [pc, #480]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a77      	ldr	r2, [pc, #476]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01d      	b.n	8002928 <HAL_RCC_OscConfig+0xd4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0xbc>
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a71      	ldr	r2, [pc, #452]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xd4>
 8002910:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6a      	ldr	r2, [pc, #424]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a67      	ldr	r2, [pc, #412]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff fb42 	bl	8001fb8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff fb3e 	bl	8001fb8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e200      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0xe4>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff fb2e 	bl	8001fb8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff fb2a 	bl	8001fb8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1ec      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x10c>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298e:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800299a:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x18c>
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x176>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1c0      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4939      	ldr	r1, [pc, #228]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7ff fae3 	bl	8001fb8 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f6:	f7ff fadf 	bl	8001fb8 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1a1      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4927      	ldr	r1, [pc, #156]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff fac2 	bl	8001fb8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a38:	f7ff fabe 	bl	8001fb8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e180      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d03a      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d019      	beq.n	8002a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7ff faa2 	bl	8001fb8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff fa9e 	bl	8001fb8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e160      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a96:	2001      	movs	r0, #1
 8002a98:	f000 fb06 	bl	80030a8 <RCC_Delay>
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7ff fa88 	bl	8001fb8 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aaa:	e00f      	b.n	8002acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7ff fa84 	bl	8001fb8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d908      	bls.n	8002acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e146      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	42420000 	.word	0x42420000
 8002ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e9      	bne.n	8002aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a6 	beq.w	8002c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b8b      	ldr	r3, [pc, #556]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a87      	ldr	r2, [pc, #540]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	61d3      	str	r3, [r2, #28]
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7e      	ldr	r2, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7ff fa45 	bl	8001fb8 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7ff fa41 	bl	8001fb8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e103      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x4c8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x312>
 8002b58:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	e02d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x36e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x334>
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a69      	ldr	r2, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b67      	ldr	r3, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	e01c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x36e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCC_OscConfig+0x356>
 8002b90:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4a60      	ldr	r2, [pc, #384]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6213      	str	r3, [r2, #32]
 8002b9c:	4b5e      	ldr	r3, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4a5d      	ldr	r2, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x36e>
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d015      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7ff f9f5 	bl	8001fb8 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7ff f9f1 	bl	8001fb8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0b1      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x37e>
 8002bf4:	e014      	b.n	8002c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f9df 	bl	8001fb8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7ff f9db 	bl	8001fb8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e09b      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d105      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c26:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a3b      	ldr	r2, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8087 	beq.w	8002d4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d061      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d146      	bne.n	8002cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7ff f9af 	bl	8001fb8 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7ff f9ab 	bl	8001fb8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e06d      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4921      	ldr	r1, [pc, #132]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c98:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a19      	ldr	r1, [r3, #32]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7ff f97f 	bl	8001fb8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7ff f97b 	bl	8001fb8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03d      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x46a>
 8002cdc:	e035      	b.n	8002d4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7ff f968 	bl	8001fb8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7ff f964 	bl	8001fb8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e026      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x498>
 8002d0a:	e01e      	b.n	8002d4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e019      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_OscConfig+0x500>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0d0      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d910      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0207 	bic.w	r2, r3, #7
 8002d82:	4965      	ldr	r1, [pc, #404]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0b8      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	494d      	ldr	r1, [pc, #308]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d040      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d115      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07f      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e073      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06b      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4936      	ldr	r1, [pc, #216]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7ff f8b6 	bl	8001fb8 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7ff f8b2 	bl	8001fb8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e053      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d210      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4922      	ldr	r1, [pc, #136]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e032      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4916      	ldr	r1, [pc, #88]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	490e      	ldr	r1, [pc, #56]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ee6:	f000 f859 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002eea:	4602      	mov	r2, r0
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	490a      	ldr	r1, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	5ccb      	ldrb	r3, [r1, r3]
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_RCC_ClockConfig+0x1cc>)
 8002f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1d0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f814 	bl	8001f34 <HAL_InitTick>

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080072c4 	.word	0x080072c4
 8002f24:	20000000 	.word	0x20000000
 8002f28:	20000004 	.word	0x20000004

08002f2c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002f38:	f107 0318 	add.w	r3, r7, #24
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f56:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_RCC_MCOConfig+0x68>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_RCC_MCOConfig+0x68>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6193      	str	r3, [r2, #24]
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_MCOConfig+0x68>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002f70:	f107 0318 	add.w	r3, r7, #24
 8002f74:	4619      	mov	r1, r3
 8002f76:	4808      	ldr	r0, [pc, #32]	; (8002f98 <HAL_RCC_MCOConfig+0x6c>)
 8002f78:	f7ff f95a 	bl	8002230 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_MCOConfig+0x68>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002f84:	4903      	ldr	r1, [pc, #12]	; (8002f94 <HAL_RCC_MCOConfig+0x68>)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
}
 8002f8c:	bf00      	nop
 8002f8e:	3728      	adds	r7, #40	; 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010800 	.word	0x40010800

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x30>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002fca:	e027      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fce:	613b      	str	r3, [r7, #16]
      break;
 8002fd0:	e027      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0c9b      	lsrs	r3, r3, #18
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a17      	ldr	r2, [pc, #92]	; (8003038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0c5b      	lsrs	r3, r3, #17
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffe:	fb03 f202 	mul.w	r2, r3, r2
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e004      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	613b      	str	r3, [r7, #16]
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 800301e:	613b      	str	r3, [r7, #16]
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	693b      	ldr	r3, [r7, #16]
}
 8003024:	4618      	mov	r0, r3
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	007a1200 	.word	0x007a1200
 8003038:	080072dc 	.word	0x080072dc
 800303c:	080072ec 	.word	0x080072ec
 8003040:	003d0900 	.word	0x003d0900

08003044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b02      	ldr	r3, [pc, #8]	; (8003054 <HAL_RCC_GetHCLKFreq+0x10>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	20000000 	.word	0x20000000

08003058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800305c:	f7ff fff2 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4903      	ldr	r1, [pc, #12]	; (800307c <HAL_RCC_GetPCLK1Freq+0x24>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	080072d4 	.word	0x080072d4

08003080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003084:	f7ff ffde 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0adb      	lsrs	r3, r3, #11
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4903      	ldr	r1, [pc, #12]	; (80030a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	080072d4 	.word	0x080072d4

080030a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <RCC_Delay+0x34>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <RCC_Delay+0x38>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0a5b      	lsrs	r3, r3, #9
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030c4:	bf00      	nop
  }
  while (Delay --);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	60fa      	str	r2, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f9      	bne.n	80030c4 <RCC_Delay+0x1c>
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000000 	.word	0x20000000
 80030e0:	10624dd3 	.word	0x10624dd3

080030e4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <HAL_SRAM_Init+0x1c>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fe:	d101      	bne.n	8003104 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e038      	b.n	8003176 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7fe fdb5 	bl	8001c88 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3308      	adds	r3, #8
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f000 ffa1 	bl	8004070 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	461a      	mov	r2, r3
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	f001 f803 	bl	8004144 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6858      	ldr	r0, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	f001 f828 	bl	80041a0 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	f041 0101 	orr.w	r1, r1, #1
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e041      	b.n	8003214 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d106      	bne.n	80031aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fe fc67 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 fb21 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d001      	beq.n	8003234 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e03c      	b.n	80032ae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_TIM_Base_Start+0x9c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d018      	beq.n	8003278 <HAL_TIM_Base_Start+0x5c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <HAL_TIM_Base_Start+0xa0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_TIM_Base_Start+0x5c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d00e      	beq.n	8003278 <HAL_TIM_Base_Start+0x5c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <HAL_TIM_Base_Start+0xa4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_TIM_Base_Start+0x5c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <HAL_TIM_Base_Start+0xa8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_TIM_Base_Start+0x5c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <HAL_TIM_Base_Start+0xac>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d111      	bne.n	800329c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b06      	cmp	r3, #6
 8003288:	d010      	beq.n	80032ac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329a:	e007      	b.n	80032ac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40013400 	.word	0x40013400
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00

080032cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e041      	b.n	8003362 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f839 	bl	800336a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f000 fa7a 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_TIM_PWM_Start+0x24>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e022      	b.n	80033e6 <HAL_TIM_PWM_Start+0x6a>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d109      	bne.n	80033ba <HAL_TIM_PWM_Start+0x3e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e015      	b.n	80033e6 <HAL_TIM_PWM_Start+0x6a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d109      	bne.n	80033d4 <HAL_TIM_PWM_Start+0x58>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e008      	b.n	80033e6 <HAL_TIM_PWM_Start+0x6a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e072      	b.n	80034d4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_PWM_Start+0x82>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fc:	e013      	b.n	8003426 <HAL_TIM_PWM_Start+0xaa>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b04      	cmp	r3, #4
 8003402:	d104      	bne.n	800340e <HAL_TIM_PWM_Start+0x92>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800340c:	e00b      	b.n	8003426 <HAL_TIM_PWM_Start+0xaa>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d104      	bne.n	800341e <HAL_TIM_PWM_Start+0xa2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	e003      	b.n	8003426 <HAL_TIM_PWM_Start+0xaa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2201      	movs	r2, #1
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fcb0 	bl	8003d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <HAL_TIM_PWM_Start+0x160>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_TIM_PWM_Start+0xcc>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <HAL_TIM_PWM_Start+0x164>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_TIM_PWM_Start+0xd0>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_TIM_PWM_Start+0xd2>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_TIM_PWM_Start+0x160>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_TIM_PWM_Start+0x122>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_TIM_PWM_Start+0x164>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_TIM_PWM_Start+0x122>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d00e      	beq.n	800349e <HAL_TIM_PWM_Start+0x122>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_TIM_PWM_Start+0x168>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_TIM_PWM_Start+0x122>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <HAL_TIM_PWM_Start+0x16c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_TIM_PWM_Start+0x122>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <HAL_TIM_PWM_Start+0x170>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d111      	bne.n	80034c2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b06      	cmp	r3, #6
 80034ae:	d010      	beq.n	80034d2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c0:	e007      	b.n	80034d2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40013400 	.word	0x40013400
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00

080034f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800350a:	2302      	movs	r3, #2
 800350c:	e0ae      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	f200 809f 	bhi.w	800365c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003559 	.word	0x08003559
 8003528:	0800365d 	.word	0x0800365d
 800352c:	0800365d 	.word	0x0800365d
 8003530:	0800365d 	.word	0x0800365d
 8003534:	08003599 	.word	0x08003599
 8003538:	0800365d 	.word	0x0800365d
 800353c:	0800365d 	.word	0x0800365d
 8003540:	0800365d 	.word	0x0800365d
 8003544:	080035db 	.word	0x080035db
 8003548:	0800365d 	.word	0x0800365d
 800354c:	0800365d 	.word	0x0800365d
 8003550:	0800365d 	.word	0x0800365d
 8003554:	0800361b 	.word	0x0800361b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f9d6 	bl	8003910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6999      	ldr	r1, [r3, #24]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	619a      	str	r2, [r3, #24]
      break;
 8003596:	e064      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa26 	bl	80039f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	619a      	str	r2, [r3, #24]
      break;
 80035d8:	e043      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa79 	bl	8003ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0208 	orr.w	r2, r2, #8
 80035f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0204 	bic.w	r2, r2, #4
 8003604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69d9      	ldr	r1, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	61da      	str	r2, [r3, #28]
      break;
 8003618:	e023      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 facd 	bl	8003bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	021a      	lsls	r2, r3, #8
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	61da      	str	r2, [r3, #28]
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0b4      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x186>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd4>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x172>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xa6>
 80036e4:	2b70      	cmp	r3, #112	; 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11a>
 80036ec:	2b60      	cmp	r3, #96	; 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b50      	cmp	r3, #80	; 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfa>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13a>
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b30      	cmp	r3, #48	; 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b30      	cmp	r3, #48	; 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f000 fb14 	bl	8003d56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f000 fafd 	bl	8003d56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fa74 	bl	8003c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	; 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 facb 	bl	8003d22 <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fa92 	bl	8003cc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	; 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fabb 	bl	8003d22 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fa54 	bl	8003c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 faab 	bl	8003d22 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 faa2 	bl	8003d22 <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a39      	ldr	r2, [pc, #228]	; (80038fc <TIM_Base_SetConfig+0xf8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a38      	ldr	r2, [pc, #224]	; (8003900 <TIM_Base_SetConfig+0xfc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00f      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a35      	ldr	r2, [pc, #212]	; (8003904 <TIM_Base_SetConfig+0x100>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <TIM_Base_SetConfig+0x104>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a33      	ldr	r2, [pc, #204]	; (800390c <TIM_Base_SetConfig+0x108>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <TIM_Base_SetConfig+0xf8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <TIM_Base_SetConfig+0x82>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <TIM_Base_SetConfig+0xfc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00f      	beq.n	8003886 <TIM_Base_SetConfig+0x82>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d00b      	beq.n	8003886 <TIM_Base_SetConfig+0x82>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a24      	ldr	r2, [pc, #144]	; (8003904 <TIM_Base_SetConfig+0x100>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_Base_SetConfig+0x82>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a23      	ldr	r2, [pc, #140]	; (8003908 <TIM_Base_SetConfig+0x104>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_Base_SetConfig+0x82>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a22      	ldr	r2, [pc, #136]	; (800390c <TIM_Base_SetConfig+0x108>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d108      	bne.n	8003898 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <TIM_Base_SetConfig+0xf8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0xc8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <TIM_Base_SetConfig+0xfc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d103      	bne.n	80038d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f023 0201 	bic.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	611a      	str	r2, [r3, #16]
  }
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40013400 	.word	0x40013400
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00

08003910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f023 0201 	bic.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f023 0302 	bic.w	r3, r3, #2
 8003958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <TIM_OC1_SetConfig+0xd8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC1_SetConfig+0x64>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <TIM_OC1_SetConfig+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10c      	bne.n	800398e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0308 	bic.w	r3, r3, #8
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <TIM_OC1_SetConfig+0xd8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_OC1_SetConfig+0x8e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <TIM_OC1_SetConfig+0xdc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d111      	bne.n	80039c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40013400 	.word	0x40013400

080039f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 0210 	bic.w	r2, r3, #16
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0320 	bic.w	r3, r3, #32
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <TIM_OC2_SetConfig+0xe0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC2_SetConfig+0x68>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a20      	ldr	r2, [pc, #128]	; (8003ad4 <TIM_OC2_SetConfig+0xe4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10d      	bne.n	8003a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <TIM_OC2_SetConfig+0xe0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_OC2_SetConfig+0x94>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <TIM_OC2_SetConfig+0xe4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d113      	bne.n	8003aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40013400 	.word	0x40013400

08003ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <TIM_OC3_SetConfig+0xe0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC3_SetConfig+0x66>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <TIM_OC3_SetConfig+0xe4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d10d      	bne.n	8003b5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <TIM_OC3_SetConfig+0xe0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_OC3_SetConfig+0x92>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <TIM_OC3_SetConfig+0xe4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d113      	bne.n	8003b92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40013400 	.word	0x40013400

08003bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	031b      	lsls	r3, r3, #12
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <TIM_OC4_SetConfig+0xa0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_OC4_SetConfig+0x68>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <TIM_OC4_SetConfig+0xa4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d109      	bne.n	8003c3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40013400 	.word	0x40013400

08003c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 030a 	bic.w	r3, r3, #10
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0210 	bic.w	r2, r3, #16
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	031b      	lsls	r3, r3, #12
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	621a      	str	r2, [r3, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f043 0307 	orr.w	r3, r3, #7
 8003d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	609a      	str	r2, [r3, #8]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2201      	movs	r2, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	401a      	ands	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e050      	b.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d018      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d00e      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10c      	bne.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40013400 	.word	0x40013400
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00

08003eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e042      	b.n	8003f4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fe44 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f82b 	bl	8003f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f8e:	f023 030c 	bic.w	r3, r3, #12
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <UART_SetConfig+0x114>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d103      	bne.n	8003fc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7ff f860 	bl	8003080 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	e002      	b.n	8003fca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7ff f848 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <UART_SetConfig+0x118>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	0119      	lsls	r1, r3, #4
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <UART_SetConfig+0x118>)
 8004002:	fba3 0302 	umull	r0, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2064      	movs	r0, #100	; 0x64
 800400a:	fb00 f303 	mul.w	r3, r0, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	3332      	adds	r3, #50	; 0x32
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <UART_SetConfig+0x118>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004020:	4419      	add	r1, r3
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	fbb2 f2f3 	udiv	r2, r2, r3
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <UART_SetConfig+0x118>)
 800403a:	fba3 0302 	umull	r0, r3, r3, r2
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2064      	movs	r0, #100	; 0x64
 8004042:	fb00 f303 	mul.w	r3, r0, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	3332      	adds	r3, #50	; 0x32
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <UART_SetConfig+0x118>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	f003 020f 	and.w	r2, r3, #15
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	440a      	add	r2, r1
 800405e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40013800 	.word	0x40013800
 800406c:	51eb851f 	.word	0x51eb851f

08004070 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	f023 0101 	bic.w	r1, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b08      	cmp	r3, #8
 8004098:	d102      	bne.n	80040a0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e001      	b.n	80040a4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80040b0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80040b6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80040bc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80040c2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80040c8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80040ce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80040d4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80040da:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80040e0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <FSMC_NORSRAM_Init+0xd0>)
 8004100:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004108:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004110:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43db      	mvns	r3, r3
 8004120:	ea02 0103 	and.w	r1, r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4319      	orrs	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	0008fb7f 	.word	0x0008fb7f

08004144 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 800415a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8004162:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 800416a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	3b01      	subs	r3, #1
 8004172:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8004174:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	3b02      	subs	r3, #2
 800417c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 800417e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 800418a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
	...

080041a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b4:	d11d      	bne.n	80041f2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	6811      	ldr	r1, [r2, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	6852      	ldr	r2, [r2, #4]
 80041ca:	0112      	lsls	r2, r2, #4
 80041cc:	4311      	orrs	r1, r2
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	6892      	ldr	r2, [r2, #8]
 80041d2:	0212      	lsls	r2, r2, #8
 80041d4:	4311      	orrs	r1, r2
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	6992      	ldr	r2, [r2, #24]
 80041da:	4311      	orrs	r1, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	68d2      	ldr	r2, [r2, #12]
 80041e0:	0412      	lsls	r2, r2, #16
 80041e2:	430a      	orrs	r2, r1
 80041e4:	ea43 0102 	orr.w	r1, r3, r2
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80041f0:	e005      	b.n	80041fe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80041fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	cff00000 	.word	0xcff00000

08004210 <__errno>:
 8004210:	4b01      	ldr	r3, [pc, #4]	; (8004218 <__errno+0x8>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000000c 	.word	0x2000000c

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	2600      	movs	r6, #0
 8004220:	4d0c      	ldr	r5, [pc, #48]	; (8004254 <__libc_init_array+0x38>)
 8004222:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	42a6      	cmp	r6, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	f002 fd30 	bl	8006c90 <_init>
 8004230:	2600      	movs	r6, #0
 8004232:	4d0a      	ldr	r5, [pc, #40]	; (800425c <__libc_init_array+0x40>)
 8004234:	4c0a      	ldr	r4, [pc, #40]	; (8004260 <__libc_init_array+0x44>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	42a6      	cmp	r6, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f855 3b04 	ldr.w	r3, [r5], #4
 8004244:	4798      	blx	r3
 8004246:	3601      	adds	r6, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f855 3b04 	ldr.w	r3, [r5], #4
 800424e:	4798      	blx	r3
 8004250:	3601      	adds	r6, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	080076cc 	.word	0x080076cc
 8004258:	080076cc 	.word	0x080076cc
 800425c:	080076cc 	.word	0x080076cc
 8004260:	080076d0 	.word	0x080076d0

08004264 <memset>:
 8004264:	4603      	mov	r3, r0
 8004266:	4402      	add	r2, r0
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	f803 1b01 	strb.w	r1, [r3], #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <__cvt>:
 8004274:	2b00      	cmp	r3, #0
 8004276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800427a:	461f      	mov	r7, r3
 800427c:	bfbb      	ittet	lt
 800427e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004282:	461f      	movlt	r7, r3
 8004284:	2300      	movge	r3, #0
 8004286:	232d      	movlt	r3, #45	; 0x2d
 8004288:	b088      	sub	sp, #32
 800428a:	4614      	mov	r4, r2
 800428c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800428e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004290:	7013      	strb	r3, [r2, #0]
 8004292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004294:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004298:	f023 0820 	bic.w	r8, r3, #32
 800429c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042a0:	d005      	beq.n	80042ae <__cvt+0x3a>
 80042a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042a6:	d100      	bne.n	80042aa <__cvt+0x36>
 80042a8:	3501      	adds	r5, #1
 80042aa:	2302      	movs	r3, #2
 80042ac:	e000      	b.n	80042b0 <__cvt+0x3c>
 80042ae:	2303      	movs	r3, #3
 80042b0:	aa07      	add	r2, sp, #28
 80042b2:	9204      	str	r2, [sp, #16]
 80042b4:	aa06      	add	r2, sp, #24
 80042b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042ba:	e9cd 3500 	strd	r3, r5, [sp]
 80042be:	4622      	mov	r2, r4
 80042c0:	463b      	mov	r3, r7
 80042c2:	f000 fcc5 	bl	8004c50 <_dtoa_r>
 80042c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042ca:	4606      	mov	r6, r0
 80042cc:	d102      	bne.n	80042d4 <__cvt+0x60>
 80042ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042d0:	07db      	lsls	r3, r3, #31
 80042d2:	d522      	bpl.n	800431a <__cvt+0xa6>
 80042d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042d8:	eb06 0905 	add.w	r9, r6, r5
 80042dc:	d110      	bne.n	8004300 <__cvt+0x8c>
 80042de:	7833      	ldrb	r3, [r6, #0]
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	d10a      	bne.n	80042fa <__cvt+0x86>
 80042e4:	2200      	movs	r2, #0
 80042e6:	2300      	movs	r3, #0
 80042e8:	4620      	mov	r0, r4
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fc fbc8 	bl	8000a80 <__aeabi_dcmpeq>
 80042f0:	b918      	cbnz	r0, 80042fa <__cvt+0x86>
 80042f2:	f1c5 0501 	rsb	r5, r5, #1
 80042f6:	f8ca 5000 	str.w	r5, [sl]
 80042fa:	f8da 3000 	ldr.w	r3, [sl]
 80042fe:	4499      	add	r9, r3
 8004300:	2200      	movs	r2, #0
 8004302:	2300      	movs	r3, #0
 8004304:	4620      	mov	r0, r4
 8004306:	4639      	mov	r1, r7
 8004308:	f7fc fbba 	bl	8000a80 <__aeabi_dcmpeq>
 800430c:	b108      	cbz	r0, 8004312 <__cvt+0x9e>
 800430e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004312:	2230      	movs	r2, #48	; 0x30
 8004314:	9b07      	ldr	r3, [sp, #28]
 8004316:	454b      	cmp	r3, r9
 8004318:	d307      	bcc.n	800432a <__cvt+0xb6>
 800431a:	4630      	mov	r0, r6
 800431c:	9b07      	ldr	r3, [sp, #28]
 800431e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004320:	1b9b      	subs	r3, r3, r6
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	b008      	add	sp, #32
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	9107      	str	r1, [sp, #28]
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e7f0      	b.n	8004314 <__cvt+0xa0>

08004332 <__exponent>:
 8004332:	4603      	mov	r3, r0
 8004334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004336:	2900      	cmp	r1, #0
 8004338:	f803 2b02 	strb.w	r2, [r3], #2
 800433c:	bfb6      	itet	lt
 800433e:	222d      	movlt	r2, #45	; 0x2d
 8004340:	222b      	movge	r2, #43	; 0x2b
 8004342:	4249      	neglt	r1, r1
 8004344:	2909      	cmp	r1, #9
 8004346:	7042      	strb	r2, [r0, #1]
 8004348:	dd2b      	ble.n	80043a2 <__exponent+0x70>
 800434a:	f10d 0407 	add.w	r4, sp, #7
 800434e:	46a4      	mov	ip, r4
 8004350:	270a      	movs	r7, #10
 8004352:	fb91 f6f7 	sdiv	r6, r1, r7
 8004356:	460a      	mov	r2, r1
 8004358:	46a6      	mov	lr, r4
 800435a:	fb07 1516 	mls	r5, r7, r6, r1
 800435e:	2a63      	cmp	r2, #99	; 0x63
 8004360:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004364:	4631      	mov	r1, r6
 8004366:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800436a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800436e:	dcf0      	bgt.n	8004352 <__exponent+0x20>
 8004370:	3130      	adds	r1, #48	; 0x30
 8004372:	f1ae 0502 	sub.w	r5, lr, #2
 8004376:	f804 1c01 	strb.w	r1, [r4, #-1]
 800437a:	4629      	mov	r1, r5
 800437c:	1c44      	adds	r4, r0, #1
 800437e:	4561      	cmp	r1, ip
 8004380:	d30a      	bcc.n	8004398 <__exponent+0x66>
 8004382:	f10d 0209 	add.w	r2, sp, #9
 8004386:	eba2 020e 	sub.w	r2, r2, lr
 800438a:	4565      	cmp	r5, ip
 800438c:	bf88      	it	hi
 800438e:	2200      	movhi	r2, #0
 8004390:	4413      	add	r3, r2
 8004392:	1a18      	subs	r0, r3, r0
 8004394:	b003      	add	sp, #12
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004398:	f811 2b01 	ldrb.w	r2, [r1], #1
 800439c:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043a0:	e7ed      	b.n	800437e <__exponent+0x4c>
 80043a2:	2330      	movs	r3, #48	; 0x30
 80043a4:	3130      	adds	r1, #48	; 0x30
 80043a6:	7083      	strb	r3, [r0, #2]
 80043a8:	70c1      	strb	r1, [r0, #3]
 80043aa:	1d03      	adds	r3, r0, #4
 80043ac:	e7f1      	b.n	8004392 <__exponent+0x60>
	...

080043b0 <_printf_float>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	b091      	sub	sp, #68	; 0x44
 80043b6:	460c      	mov	r4, r1
 80043b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80043bc:	4616      	mov	r6, r2
 80043be:	461f      	mov	r7, r3
 80043c0:	4605      	mov	r5, r0
 80043c2:	f001 fa33 	bl	800582c <_localeconv_r>
 80043c6:	6803      	ldr	r3, [r0, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	9309      	str	r3, [sp, #36]	; 0x24
 80043cc:	f7fb ff2c 	bl	8000228 <strlen>
 80043d0:	2300      	movs	r3, #0
 80043d2:	930e      	str	r3, [sp, #56]	; 0x38
 80043d4:	f8d8 3000 	ldr.w	r3, [r8]
 80043d8:	900a      	str	r0, [sp, #40]	; 0x28
 80043da:	3307      	adds	r3, #7
 80043dc:	f023 0307 	bic.w	r3, r3, #7
 80043e0:	f103 0208 	add.w	r2, r3, #8
 80043e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043e8:	f8d4 b000 	ldr.w	fp, [r4]
 80043ec:	f8c8 2000 	str.w	r2, [r8]
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80043fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004400:	930b      	str	r3, [sp, #44]	; 0x2c
 8004402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004406:	4640      	mov	r0, r8
 8004408:	4b9c      	ldr	r3, [pc, #624]	; (800467c <_printf_float+0x2cc>)
 800440a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800440c:	f7fc fb6a 	bl	8000ae4 <__aeabi_dcmpun>
 8004410:	bb70      	cbnz	r0, 8004470 <_printf_float+0xc0>
 8004412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004416:	4640      	mov	r0, r8
 8004418:	4b98      	ldr	r3, [pc, #608]	; (800467c <_printf_float+0x2cc>)
 800441a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800441c:	f7fc fb44 	bl	8000aa8 <__aeabi_dcmple>
 8004420:	bb30      	cbnz	r0, 8004470 <_printf_float+0xc0>
 8004422:	2200      	movs	r2, #0
 8004424:	2300      	movs	r3, #0
 8004426:	4640      	mov	r0, r8
 8004428:	4651      	mov	r1, sl
 800442a:	f7fc fb33 	bl	8000a94 <__aeabi_dcmplt>
 800442e:	b110      	cbz	r0, 8004436 <_printf_float+0x86>
 8004430:	232d      	movs	r3, #45	; 0x2d
 8004432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004436:	4b92      	ldr	r3, [pc, #584]	; (8004680 <_printf_float+0x2d0>)
 8004438:	4892      	ldr	r0, [pc, #584]	; (8004684 <_printf_float+0x2d4>)
 800443a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800443e:	bf94      	ite	ls
 8004440:	4698      	movls	r8, r3
 8004442:	4680      	movhi	r8, r0
 8004444:	2303      	movs	r3, #3
 8004446:	f04f 0a00 	mov.w	sl, #0
 800444a:	6123      	str	r3, [r4, #16]
 800444c:	f02b 0304 	bic.w	r3, fp, #4
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	4633      	mov	r3, r6
 8004454:	4621      	mov	r1, r4
 8004456:	4628      	mov	r0, r5
 8004458:	9700      	str	r7, [sp, #0]
 800445a:	aa0f      	add	r2, sp, #60	; 0x3c
 800445c:	f000 f9d4 	bl	8004808 <_printf_common>
 8004460:	3001      	adds	r0, #1
 8004462:	f040 8090 	bne.w	8004586 <_printf_float+0x1d6>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800446a:	b011      	add	sp, #68	; 0x44
 800446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004470:	4642      	mov	r2, r8
 8004472:	4653      	mov	r3, sl
 8004474:	4640      	mov	r0, r8
 8004476:	4651      	mov	r1, sl
 8004478:	f7fc fb34 	bl	8000ae4 <__aeabi_dcmpun>
 800447c:	b148      	cbz	r0, 8004492 <_printf_float+0xe2>
 800447e:	f1ba 0f00 	cmp.w	sl, #0
 8004482:	bfb8      	it	lt
 8004484:	232d      	movlt	r3, #45	; 0x2d
 8004486:	4880      	ldr	r0, [pc, #512]	; (8004688 <_printf_float+0x2d8>)
 8004488:	bfb8      	it	lt
 800448a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800448e:	4b7f      	ldr	r3, [pc, #508]	; (800468c <_printf_float+0x2dc>)
 8004490:	e7d3      	b.n	800443a <_printf_float+0x8a>
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	d142      	bne.n	8004522 <_printf_float+0x172>
 800449c:	2306      	movs	r3, #6
 800449e:	6063      	str	r3, [r4, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	9206      	str	r2, [sp, #24]
 80044a4:	aa0e      	add	r2, sp, #56	; 0x38
 80044a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80044aa:	aa0d      	add	r2, sp, #52	; 0x34
 80044ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80044b0:	9203      	str	r2, [sp, #12]
 80044b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80044b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	4642      	mov	r2, r8
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4628      	mov	r0, r5
 80044c4:	4653      	mov	r3, sl
 80044c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80044c8:	f7ff fed4 	bl	8004274 <__cvt>
 80044cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ce:	4680      	mov	r8, r0
 80044d0:	2947      	cmp	r1, #71	; 0x47
 80044d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044d4:	d108      	bne.n	80044e8 <_printf_float+0x138>
 80044d6:	1cc8      	adds	r0, r1, #3
 80044d8:	db02      	blt.n	80044e0 <_printf_float+0x130>
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	4299      	cmp	r1, r3
 80044de:	dd40      	ble.n	8004562 <_printf_float+0x1b2>
 80044e0:	f1a9 0902 	sub.w	r9, r9, #2
 80044e4:	fa5f f989 	uxtb.w	r9, r9
 80044e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044ec:	d81f      	bhi.n	800452e <_printf_float+0x17e>
 80044ee:	464a      	mov	r2, r9
 80044f0:	3901      	subs	r1, #1
 80044f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044f6:	910d      	str	r1, [sp, #52]	; 0x34
 80044f8:	f7ff ff1b 	bl	8004332 <__exponent>
 80044fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044fe:	4682      	mov	sl, r0
 8004500:	1813      	adds	r3, r2, r0
 8004502:	2a01      	cmp	r2, #1
 8004504:	6123      	str	r3, [r4, #16]
 8004506:	dc02      	bgt.n	800450e <_printf_float+0x15e>
 8004508:	6822      	ldr	r2, [r4, #0]
 800450a:	07d2      	lsls	r2, r2, #31
 800450c:	d501      	bpl.n	8004512 <_printf_float+0x162>
 800450e:	3301      	adds	r3, #1
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004516:	2b00      	cmp	r3, #0
 8004518:	d09b      	beq.n	8004452 <_printf_float+0xa2>
 800451a:	232d      	movs	r3, #45	; 0x2d
 800451c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004520:	e797      	b.n	8004452 <_printf_float+0xa2>
 8004522:	2947      	cmp	r1, #71	; 0x47
 8004524:	d1bc      	bne.n	80044a0 <_printf_float+0xf0>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ba      	bne.n	80044a0 <_printf_float+0xf0>
 800452a:	2301      	movs	r3, #1
 800452c:	e7b7      	b.n	800449e <_printf_float+0xee>
 800452e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004532:	d118      	bne.n	8004566 <_printf_float+0x1b6>
 8004534:	2900      	cmp	r1, #0
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	dd0b      	ble.n	8004552 <_printf_float+0x1a2>
 800453a:	6121      	str	r1, [r4, #16]
 800453c:	b913      	cbnz	r3, 8004544 <_printf_float+0x194>
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	07d0      	lsls	r0, r2, #31
 8004542:	d502      	bpl.n	800454a <_printf_float+0x19a>
 8004544:	3301      	adds	r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	6123      	str	r3, [r4, #16]
 800454a:	f04f 0a00 	mov.w	sl, #0
 800454e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004550:	e7df      	b.n	8004512 <_printf_float+0x162>
 8004552:	b913      	cbnz	r3, 800455a <_printf_float+0x1aa>
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	07d2      	lsls	r2, r2, #31
 8004558:	d501      	bpl.n	800455e <_printf_float+0x1ae>
 800455a:	3302      	adds	r3, #2
 800455c:	e7f4      	b.n	8004548 <_printf_float+0x198>
 800455e:	2301      	movs	r3, #1
 8004560:	e7f2      	b.n	8004548 <_printf_float+0x198>
 8004562:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004568:	4299      	cmp	r1, r3
 800456a:	db05      	blt.n	8004578 <_printf_float+0x1c8>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	6121      	str	r1, [r4, #16]
 8004570:	07d8      	lsls	r0, r3, #31
 8004572:	d5ea      	bpl.n	800454a <_printf_float+0x19a>
 8004574:	1c4b      	adds	r3, r1, #1
 8004576:	e7e7      	b.n	8004548 <_printf_float+0x198>
 8004578:	2900      	cmp	r1, #0
 800457a:	bfcc      	ite	gt
 800457c:	2201      	movgt	r2, #1
 800457e:	f1c1 0202 	rsble	r2, r1, #2
 8004582:	4413      	add	r3, r2
 8004584:	e7e0      	b.n	8004548 <_printf_float+0x198>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	055a      	lsls	r2, r3, #21
 800458a:	d407      	bmi.n	800459c <_printf_float+0x1ec>
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	4642      	mov	r2, r8
 8004590:	4631      	mov	r1, r6
 8004592:	4628      	mov	r0, r5
 8004594:	47b8      	blx	r7
 8004596:	3001      	adds	r0, #1
 8004598:	d12b      	bne.n	80045f2 <_printf_float+0x242>
 800459a:	e764      	b.n	8004466 <_printf_float+0xb6>
 800459c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045a0:	f240 80dd 	bls.w	800475e <_printf_float+0x3ae>
 80045a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	f7fc fa68 	bl	8000a80 <__aeabi_dcmpeq>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d033      	beq.n	800461c <_printf_float+0x26c>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4631      	mov	r1, r6
 80045b8:	4628      	mov	r0, r5
 80045ba:	4a35      	ldr	r2, [pc, #212]	; (8004690 <_printf_float+0x2e0>)
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af51 	beq.w	8004466 <_printf_float+0xb6>
 80045c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045c8:	429a      	cmp	r2, r3
 80045ca:	db02      	blt.n	80045d2 <_printf_float+0x222>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	07d8      	lsls	r0, r3, #31
 80045d0:	d50f      	bpl.n	80045f2 <_printf_float+0x242>
 80045d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f af42 	beq.w	8004466 <_printf_float+0xb6>
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	f104 091a 	add.w	r9, r4, #26
 80045ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4543      	cmp	r3, r8
 80045f0:	dc09      	bgt.n	8004606 <_printf_float+0x256>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	079b      	lsls	r3, r3, #30
 80045f6:	f100 8102 	bmi.w	80047fe <_printf_float+0x44e>
 80045fa:	68e0      	ldr	r0, [r4, #12]
 80045fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045fe:	4298      	cmp	r0, r3
 8004600:	bfb8      	it	lt
 8004602:	4618      	movlt	r0, r3
 8004604:	e731      	b.n	800446a <_printf_float+0xba>
 8004606:	2301      	movs	r3, #1
 8004608:	464a      	mov	r2, r9
 800460a:	4631      	mov	r1, r6
 800460c:	4628      	mov	r0, r5
 800460e:	47b8      	blx	r7
 8004610:	3001      	adds	r0, #1
 8004612:	f43f af28 	beq.w	8004466 <_printf_float+0xb6>
 8004616:	f108 0801 	add.w	r8, r8, #1
 800461a:	e7e6      	b.n	80045ea <_printf_float+0x23a>
 800461c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800461e:	2b00      	cmp	r3, #0
 8004620:	dc38      	bgt.n	8004694 <_printf_float+0x2e4>
 8004622:	2301      	movs	r3, #1
 8004624:	4631      	mov	r1, r6
 8004626:	4628      	mov	r0, r5
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <_printf_float+0x2e0>)
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f af1a 	beq.w	8004466 <_printf_float+0xb6>
 8004632:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004636:	4313      	orrs	r3, r2
 8004638:	d102      	bne.n	8004640 <_printf_float+0x290>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	07d9      	lsls	r1, r3, #31
 800463e:	d5d8      	bpl.n	80045f2 <_printf_float+0x242>
 8004640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	f43f af0b 	beq.w	8004466 <_printf_float+0xb6>
 8004650:	f04f 0900 	mov.w	r9, #0
 8004654:	f104 0a1a 	add.w	sl, r4, #26
 8004658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800465a:	425b      	negs	r3, r3
 800465c:	454b      	cmp	r3, r9
 800465e:	dc01      	bgt.n	8004664 <_printf_float+0x2b4>
 8004660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004662:	e794      	b.n	800458e <_printf_float+0x1de>
 8004664:	2301      	movs	r3, #1
 8004666:	4652      	mov	r2, sl
 8004668:	4631      	mov	r1, r6
 800466a:	4628      	mov	r0, r5
 800466c:	47b8      	blx	r7
 800466e:	3001      	adds	r0, #1
 8004670:	f43f aef9 	beq.w	8004466 <_printf_float+0xb6>
 8004674:	f109 0901 	add.w	r9, r9, #1
 8004678:	e7ee      	b.n	8004658 <_printf_float+0x2a8>
 800467a:	bf00      	nop
 800467c:	7fefffff 	.word	0x7fefffff
 8004680:	080072f4 	.word	0x080072f4
 8004684:	080072f8 	.word	0x080072f8
 8004688:	08007300 	.word	0x08007300
 800468c:	080072fc 	.word	0x080072fc
 8004690:	08007304 	.word	0x08007304
 8004694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004698:	429a      	cmp	r2, r3
 800469a:	bfa8      	it	ge
 800469c:	461a      	movge	r2, r3
 800469e:	2a00      	cmp	r2, #0
 80046a0:	4691      	mov	r9, r2
 80046a2:	dc37      	bgt.n	8004714 <_printf_float+0x364>
 80046a4:	f04f 0b00 	mov.w	fp, #0
 80046a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ac:	f104 021a 	add.w	r2, r4, #26
 80046b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046b4:	ebaa 0309 	sub.w	r3, sl, r9
 80046b8:	455b      	cmp	r3, fp
 80046ba:	dc33      	bgt.n	8004724 <_printf_float+0x374>
 80046bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046c0:	429a      	cmp	r2, r3
 80046c2:	db3b      	blt.n	800473c <_printf_float+0x38c>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	07da      	lsls	r2, r3, #31
 80046c8:	d438      	bmi.n	800473c <_printf_float+0x38c>
 80046ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046ce:	eba3 020a 	sub.w	r2, r3, sl
 80046d2:	eba3 0901 	sub.w	r9, r3, r1
 80046d6:	4591      	cmp	r9, r2
 80046d8:	bfa8      	it	ge
 80046da:	4691      	movge	r9, r2
 80046dc:	f1b9 0f00 	cmp.w	r9, #0
 80046e0:	dc34      	bgt.n	800474c <_printf_float+0x39c>
 80046e2:	f04f 0800 	mov.w	r8, #0
 80046e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ea:	f104 0a1a 	add.w	sl, r4, #26
 80046ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	eba3 0309 	sub.w	r3, r3, r9
 80046f8:	4543      	cmp	r3, r8
 80046fa:	f77f af7a 	ble.w	80045f2 <_printf_float+0x242>
 80046fe:	2301      	movs	r3, #1
 8004700:	4652      	mov	r2, sl
 8004702:	4631      	mov	r1, r6
 8004704:	4628      	mov	r0, r5
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	f43f aeac 	beq.w	8004466 <_printf_float+0xb6>
 800470e:	f108 0801 	add.w	r8, r8, #1
 8004712:	e7ec      	b.n	80046ee <_printf_float+0x33e>
 8004714:	4613      	mov	r3, r2
 8004716:	4631      	mov	r1, r6
 8004718:	4642      	mov	r2, r8
 800471a:	4628      	mov	r0, r5
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	d1c0      	bne.n	80046a4 <_printf_float+0x2f4>
 8004722:	e6a0      	b.n	8004466 <_printf_float+0xb6>
 8004724:	2301      	movs	r3, #1
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	920b      	str	r2, [sp, #44]	; 0x2c
 800472c:	47b8      	blx	r7
 800472e:	3001      	adds	r0, #1
 8004730:	f43f ae99 	beq.w	8004466 <_printf_float+0xb6>
 8004734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004736:	f10b 0b01 	add.w	fp, fp, #1
 800473a:	e7b9      	b.n	80046b0 <_printf_float+0x300>
 800473c:	4631      	mov	r1, r6
 800473e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	d1bf      	bne.n	80046ca <_printf_float+0x31a>
 800474a:	e68c      	b.n	8004466 <_printf_float+0xb6>
 800474c:	464b      	mov	r3, r9
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	eb08 020a 	add.w	r2, r8, sl
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	d1c2      	bne.n	80046e2 <_printf_float+0x332>
 800475c:	e683      	b.n	8004466 <_printf_float+0xb6>
 800475e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004760:	2a01      	cmp	r2, #1
 8004762:	dc01      	bgt.n	8004768 <_printf_float+0x3b8>
 8004764:	07db      	lsls	r3, r3, #31
 8004766:	d537      	bpl.n	80047d8 <_printf_float+0x428>
 8004768:	2301      	movs	r3, #1
 800476a:	4642      	mov	r2, r8
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f ae77 	beq.w	8004466 <_printf_float+0xb6>
 8004778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800477c:	4631      	mov	r1, r6
 800477e:	4628      	mov	r0, r5
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	f43f ae6f 	beq.w	8004466 <_printf_float+0xb6>
 8004788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800478c:	2200      	movs	r2, #0
 800478e:	2300      	movs	r3, #0
 8004790:	f7fc f976 	bl	8000a80 <__aeabi_dcmpeq>
 8004794:	b9d8      	cbnz	r0, 80047ce <_printf_float+0x41e>
 8004796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004798:	f108 0201 	add.w	r2, r8, #1
 800479c:	3b01      	subs	r3, #1
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	d10e      	bne.n	80047c6 <_printf_float+0x416>
 80047a8:	e65d      	b.n	8004466 <_printf_float+0xb6>
 80047aa:	2301      	movs	r3, #1
 80047ac:	464a      	mov	r2, r9
 80047ae:	4631      	mov	r1, r6
 80047b0:	4628      	mov	r0, r5
 80047b2:	47b8      	blx	r7
 80047b4:	3001      	adds	r0, #1
 80047b6:	f43f ae56 	beq.w	8004466 <_printf_float+0xb6>
 80047ba:	f108 0801 	add.w	r8, r8, #1
 80047be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c0:	3b01      	subs	r3, #1
 80047c2:	4543      	cmp	r3, r8
 80047c4:	dcf1      	bgt.n	80047aa <_printf_float+0x3fa>
 80047c6:	4653      	mov	r3, sl
 80047c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047cc:	e6e0      	b.n	8004590 <_printf_float+0x1e0>
 80047ce:	f04f 0800 	mov.w	r8, #0
 80047d2:	f104 091a 	add.w	r9, r4, #26
 80047d6:	e7f2      	b.n	80047be <_printf_float+0x40e>
 80047d8:	2301      	movs	r3, #1
 80047da:	4642      	mov	r2, r8
 80047dc:	e7df      	b.n	800479e <_printf_float+0x3ee>
 80047de:	2301      	movs	r3, #1
 80047e0:	464a      	mov	r2, r9
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f ae3c 	beq.w	8004466 <_printf_float+0xb6>
 80047ee:	f108 0801 	add.w	r8, r8, #1
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80047f6:	1a5b      	subs	r3, r3, r1
 80047f8:	4543      	cmp	r3, r8
 80047fa:	dcf0      	bgt.n	80047de <_printf_float+0x42e>
 80047fc:	e6fd      	b.n	80045fa <_printf_float+0x24a>
 80047fe:	f04f 0800 	mov.w	r8, #0
 8004802:	f104 0919 	add.w	r9, r4, #25
 8004806:	e7f4      	b.n	80047f2 <_printf_float+0x442>

08004808 <_printf_common>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	4699      	mov	r9, r3
 8004810:	688a      	ldr	r2, [r1, #8]
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	4607      	mov	r7, r0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfb8      	it	lt
 800481a:	4613      	movlt	r3, r2
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004822:	460c      	mov	r4, r1
 8004824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004828:	b10a      	cbz	r2, 800482e <_printf_common+0x26>
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	0699      	lsls	r1, r3, #26
 8004832:	bf42      	ittt	mi
 8004834:	6833      	ldrmi	r3, [r6, #0]
 8004836:	3302      	addmi	r3, #2
 8004838:	6033      	strmi	r3, [r6, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	f015 0506 	ands.w	r5, r5, #6
 8004840:	d106      	bne.n	8004850 <_printf_common+0x48>
 8004842:	f104 0a19 	add.w	sl, r4, #25
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc28      	bgt.n	80048a2 <_printf_common+0x9a>
 8004850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004854:	1e13      	subs	r3, r2, #0
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	bf18      	it	ne
 800485a:	2301      	movne	r3, #1
 800485c:	0692      	lsls	r2, r2, #26
 800485e:	d42d      	bmi.n	80048bc <_printf_common+0xb4>
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d020      	beq.n	80048b0 <_printf_common+0xa8>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	68e5      	ldr	r5, [r4, #12]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf18      	it	ne
 800487a:	2500      	movne	r5, #0
 800487c:	6832      	ldr	r2, [r6, #0]
 800487e:	f04f 0600 	mov.w	r6, #0
 8004882:	68a3      	ldr	r3, [r4, #8]
 8004884:	bf08      	it	eq
 8004886:	1aad      	subeq	r5, r5, r2
 8004888:	6922      	ldr	r2, [r4, #16]
 800488a:	bf08      	it	eq
 800488c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004890:	4293      	cmp	r3, r2
 8004892:	bfc4      	itt	gt
 8004894:	1a9b      	subgt	r3, r3, r2
 8004896:	18ed      	addgt	r5, r5, r3
 8004898:	341a      	adds	r4, #26
 800489a:	42b5      	cmp	r5, r6
 800489c:	d11a      	bne.n	80048d4 <_printf_common+0xcc>
 800489e:	2000      	movs	r0, #0
 80048a0:	e008      	b.n	80048b4 <_printf_common+0xac>
 80048a2:	2301      	movs	r3, #1
 80048a4:	4652      	mov	r2, sl
 80048a6:	4649      	mov	r1, r9
 80048a8:	4638      	mov	r0, r7
 80048aa:	47c0      	blx	r8
 80048ac:	3001      	adds	r0, #1
 80048ae:	d103      	bne.n	80048b8 <_printf_common+0xb0>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b8:	3501      	adds	r5, #1
 80048ba:	e7c4      	b.n	8004846 <_printf_common+0x3e>
 80048bc:	2030      	movs	r0, #48	; 0x30
 80048be:	18e1      	adds	r1, r4, r3
 80048c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ca:	4422      	add	r2, r4
 80048cc:	3302      	adds	r3, #2
 80048ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048d2:	e7c5      	b.n	8004860 <_printf_common+0x58>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4622      	mov	r2, r4
 80048d8:	4649      	mov	r1, r9
 80048da:	4638      	mov	r0, r7
 80048dc:	47c0      	blx	r8
 80048de:	3001      	adds	r0, #1
 80048e0:	d0e6      	beq.n	80048b0 <_printf_common+0xa8>
 80048e2:	3601      	adds	r6, #1
 80048e4:	e7d9      	b.n	800489a <_printf_common+0x92>
	...

080048e8 <_printf_i>:
 80048e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048ec:	7e0f      	ldrb	r7, [r1, #24]
 80048ee:	4691      	mov	r9, r2
 80048f0:	2f78      	cmp	r7, #120	; 0x78
 80048f2:	4680      	mov	r8, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	469a      	mov	sl, r3
 80048f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048fe:	d807      	bhi.n	8004910 <_printf_i+0x28>
 8004900:	2f62      	cmp	r7, #98	; 0x62
 8004902:	d80a      	bhi.n	800491a <_printf_i+0x32>
 8004904:	2f00      	cmp	r7, #0
 8004906:	f000 80d9 	beq.w	8004abc <_printf_i+0x1d4>
 800490a:	2f58      	cmp	r7, #88	; 0x58
 800490c:	f000 80a4 	beq.w	8004a58 <_printf_i+0x170>
 8004910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004918:	e03a      	b.n	8004990 <_printf_i+0xa8>
 800491a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800491e:	2b15      	cmp	r3, #21
 8004920:	d8f6      	bhi.n	8004910 <_printf_i+0x28>
 8004922:	a101      	add	r1, pc, #4	; (adr r1, 8004928 <_printf_i+0x40>)
 8004924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004928:	08004981 	.word	0x08004981
 800492c:	08004995 	.word	0x08004995
 8004930:	08004911 	.word	0x08004911
 8004934:	08004911 	.word	0x08004911
 8004938:	08004911 	.word	0x08004911
 800493c:	08004911 	.word	0x08004911
 8004940:	08004995 	.word	0x08004995
 8004944:	08004911 	.word	0x08004911
 8004948:	08004911 	.word	0x08004911
 800494c:	08004911 	.word	0x08004911
 8004950:	08004911 	.word	0x08004911
 8004954:	08004aa3 	.word	0x08004aa3
 8004958:	080049c5 	.word	0x080049c5
 800495c:	08004a85 	.word	0x08004a85
 8004960:	08004911 	.word	0x08004911
 8004964:	08004911 	.word	0x08004911
 8004968:	08004ac5 	.word	0x08004ac5
 800496c:	08004911 	.word	0x08004911
 8004970:	080049c5 	.word	0x080049c5
 8004974:	08004911 	.word	0x08004911
 8004978:	08004911 	.word	0x08004911
 800497c:	08004a8d 	.word	0x08004a8d
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	602a      	str	r2, [r5, #0]
 8004988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004990:	2301      	movs	r3, #1
 8004992:	e0a4      	b.n	8004ade <_printf_i+0x1f6>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	6829      	ldr	r1, [r5, #0]
 8004998:	0606      	lsls	r6, r0, #24
 800499a:	f101 0304 	add.w	r3, r1, #4
 800499e:	d50a      	bpl.n	80049b6 <_printf_i+0xce>
 80049a0:	680e      	ldr	r6, [r1, #0]
 80049a2:	602b      	str	r3, [r5, #0]
 80049a4:	2e00      	cmp	r6, #0
 80049a6:	da03      	bge.n	80049b0 <_printf_i+0xc8>
 80049a8:	232d      	movs	r3, #45	; 0x2d
 80049aa:	4276      	negs	r6, r6
 80049ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b0:	230a      	movs	r3, #10
 80049b2:	485e      	ldr	r0, [pc, #376]	; (8004b2c <_printf_i+0x244>)
 80049b4:	e019      	b.n	80049ea <_printf_i+0x102>
 80049b6:	680e      	ldr	r6, [r1, #0]
 80049b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	bf18      	it	ne
 80049c0:	b236      	sxthne	r6, r6
 80049c2:	e7ef      	b.n	80049a4 <_printf_i+0xbc>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	1d19      	adds	r1, r3, #4
 80049ca:	6029      	str	r1, [r5, #0]
 80049cc:	0601      	lsls	r1, r0, #24
 80049ce:	d501      	bpl.n	80049d4 <_printf_i+0xec>
 80049d0:	681e      	ldr	r6, [r3, #0]
 80049d2:	e002      	b.n	80049da <_printf_i+0xf2>
 80049d4:	0646      	lsls	r6, r0, #25
 80049d6:	d5fb      	bpl.n	80049d0 <_printf_i+0xe8>
 80049d8:	881e      	ldrh	r6, [r3, #0]
 80049da:	2f6f      	cmp	r7, #111	; 0x6f
 80049dc:	bf0c      	ite	eq
 80049de:	2308      	moveq	r3, #8
 80049e0:	230a      	movne	r3, #10
 80049e2:	4852      	ldr	r0, [pc, #328]	; (8004b2c <_printf_i+0x244>)
 80049e4:	2100      	movs	r1, #0
 80049e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ea:	6865      	ldr	r5, [r4, #4]
 80049ec:	2d00      	cmp	r5, #0
 80049ee:	bfa8      	it	ge
 80049f0:	6821      	ldrge	r1, [r4, #0]
 80049f2:	60a5      	str	r5, [r4, #8]
 80049f4:	bfa4      	itt	ge
 80049f6:	f021 0104 	bicge.w	r1, r1, #4
 80049fa:	6021      	strge	r1, [r4, #0]
 80049fc:	b90e      	cbnz	r6, 8004a02 <_printf_i+0x11a>
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	d04d      	beq.n	8004a9e <_printf_i+0x1b6>
 8004a02:	4615      	mov	r5, r2
 8004a04:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a08:	fb03 6711 	mls	r7, r3, r1, r6
 8004a0c:	5dc7      	ldrb	r7, [r0, r7]
 8004a0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a12:	4637      	mov	r7, r6
 8004a14:	42bb      	cmp	r3, r7
 8004a16:	460e      	mov	r6, r1
 8004a18:	d9f4      	bls.n	8004a04 <_printf_i+0x11c>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d10b      	bne.n	8004a36 <_printf_i+0x14e>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	07de      	lsls	r6, r3, #31
 8004a22:	d508      	bpl.n	8004a36 <_printf_i+0x14e>
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	6861      	ldr	r1, [r4, #4]
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	bfde      	ittt	le
 8004a2c:	2330      	movle	r3, #48	; 0x30
 8004a2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a32:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a36:	1b52      	subs	r2, r2, r5
 8004a38:	6122      	str	r2, [r4, #16]
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4640      	mov	r0, r8
 8004a40:	f8cd a000 	str.w	sl, [sp]
 8004a44:	aa03      	add	r2, sp, #12
 8004a46:	f7ff fedf 	bl	8004808 <_printf_common>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d14c      	bne.n	8004ae8 <_printf_i+0x200>
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a52:	b004      	add	sp, #16
 8004a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a58:	4834      	ldr	r0, [pc, #208]	; (8004b2c <_printf_i+0x244>)
 8004a5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a5e:	6829      	ldr	r1, [r5, #0]
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a66:	6029      	str	r1, [r5, #0]
 8004a68:	061d      	lsls	r5, r3, #24
 8004a6a:	d514      	bpl.n	8004a96 <_printf_i+0x1ae>
 8004a6c:	07df      	lsls	r7, r3, #31
 8004a6e:	bf44      	itt	mi
 8004a70:	f043 0320 	orrmi.w	r3, r3, #32
 8004a74:	6023      	strmi	r3, [r4, #0]
 8004a76:	b91e      	cbnz	r6, 8004a80 <_printf_i+0x198>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	f023 0320 	bic.w	r3, r3, #32
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	2310      	movs	r3, #16
 8004a82:	e7af      	b.n	80049e4 <_printf_i+0xfc>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	f043 0320 	orr.w	r3, r3, #32
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	2378      	movs	r3, #120	; 0x78
 8004a8e:	4828      	ldr	r0, [pc, #160]	; (8004b30 <_printf_i+0x248>)
 8004a90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a94:	e7e3      	b.n	8004a5e <_printf_i+0x176>
 8004a96:	0659      	lsls	r1, r3, #25
 8004a98:	bf48      	it	mi
 8004a9a:	b2b6      	uxthmi	r6, r6
 8004a9c:	e7e6      	b.n	8004a6c <_printf_i+0x184>
 8004a9e:	4615      	mov	r5, r2
 8004aa0:	e7bb      	b.n	8004a1a <_printf_i+0x132>
 8004aa2:	682b      	ldr	r3, [r5, #0]
 8004aa4:	6826      	ldr	r6, [r4, #0]
 8004aa6:	1d18      	adds	r0, r3, #4
 8004aa8:	6961      	ldr	r1, [r4, #20]
 8004aaa:	6028      	str	r0, [r5, #0]
 8004aac:	0635      	lsls	r5, r6, #24
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	d501      	bpl.n	8004ab6 <_printf_i+0x1ce>
 8004ab2:	6019      	str	r1, [r3, #0]
 8004ab4:	e002      	b.n	8004abc <_printf_i+0x1d4>
 8004ab6:	0670      	lsls	r0, r6, #25
 8004ab8:	d5fb      	bpl.n	8004ab2 <_printf_i+0x1ca>
 8004aba:	8019      	strh	r1, [r3, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	4615      	mov	r5, r2
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	e7ba      	b.n	8004a3a <_printf_i+0x152>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	1d1a      	adds	r2, r3, #4
 8004aca:	602a      	str	r2, [r5, #0]
 8004acc:	681d      	ldr	r5, [r3, #0]
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 feb7 	bl	8005844 <memchr>
 8004ad6:	b108      	cbz	r0, 8004adc <_printf_i+0x1f4>
 8004ad8:	1b40      	subs	r0, r0, r5
 8004ada:	6060      	str	r0, [r4, #4]
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae6:	e7a8      	b.n	8004a3a <_printf_i+0x152>
 8004ae8:	462a      	mov	r2, r5
 8004aea:	4649      	mov	r1, r9
 8004aec:	4640      	mov	r0, r8
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	47d0      	blx	sl
 8004af2:	3001      	adds	r0, #1
 8004af4:	d0ab      	beq.n	8004a4e <_printf_i+0x166>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	079b      	lsls	r3, r3, #30
 8004afa:	d413      	bmi.n	8004b24 <_printf_i+0x23c>
 8004afc:	68e0      	ldr	r0, [r4, #12]
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	4298      	cmp	r0, r3
 8004b02:	bfb8      	it	lt
 8004b04:	4618      	movlt	r0, r3
 8004b06:	e7a4      	b.n	8004a52 <_printf_i+0x16a>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4640      	mov	r0, r8
 8004b10:	47d0      	blx	sl
 8004b12:	3001      	adds	r0, #1
 8004b14:	d09b      	beq.n	8004a4e <_printf_i+0x166>
 8004b16:	3501      	adds	r5, #1
 8004b18:	68e3      	ldr	r3, [r4, #12]
 8004b1a:	9903      	ldr	r1, [sp, #12]
 8004b1c:	1a5b      	subs	r3, r3, r1
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	dcf2      	bgt.n	8004b08 <_printf_i+0x220>
 8004b22:	e7eb      	b.n	8004afc <_printf_i+0x214>
 8004b24:	2500      	movs	r5, #0
 8004b26:	f104 0619 	add.w	r6, r4, #25
 8004b2a:	e7f5      	b.n	8004b18 <_printf_i+0x230>
 8004b2c:	08007306 	.word	0x08007306
 8004b30:	08007317 	.word	0x08007317

08004b34 <quorem>:
 8004b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b38:	6903      	ldr	r3, [r0, #16]
 8004b3a:	690c      	ldr	r4, [r1, #16]
 8004b3c:	4607      	mov	r7, r0
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	f2c0 8082 	blt.w	8004c48 <quorem+0x114>
 8004b44:	3c01      	subs	r4, #1
 8004b46:	f100 0514 	add.w	r5, r0, #20
 8004b4a:	f101 0814 	add.w	r8, r1, #20
 8004b4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b6c:	d331      	bcc.n	8004bd2 <quorem+0x9e>
 8004b6e:	f04f 0e00 	mov.w	lr, #0
 8004b72:	4640      	mov	r0, r8
 8004b74:	46ac      	mov	ip, r5
 8004b76:	46f2      	mov	sl, lr
 8004b78:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b7c:	b293      	uxth	r3, r2
 8004b7e:	fb06 e303 	mla	r3, r6, r3, lr
 8004b82:	0c12      	lsrs	r2, r2, #16
 8004b84:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	fb06 e202 	mla	r2, r6, r2, lr
 8004b8e:	ebaa 0303 	sub.w	r3, sl, r3
 8004b92:	f8dc a000 	ldr.w	sl, [ip]
 8004b96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b9a:	fa1f fa8a 	uxth.w	sl, sl
 8004b9e:	4453      	add	r3, sl
 8004ba0:	f8dc a000 	ldr.w	sl, [ip]
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004baa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bb4:	4581      	cmp	r9, r0
 8004bb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bba:	f84c 3b04 	str.w	r3, [ip], #4
 8004bbe:	d2db      	bcs.n	8004b78 <quorem+0x44>
 8004bc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bc4:	b92b      	cbnz	r3, 8004bd2 <quorem+0x9e>
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	429d      	cmp	r5, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	d32f      	bcc.n	8004c30 <quorem+0xfc>
 8004bd0:	613c      	str	r4, [r7, #16]
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f001 f8d0 	bl	8005d78 <__mcmp>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	db25      	blt.n	8004c28 <quorem+0xf4>
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f04f 0c00 	mov.w	ip, #0
 8004be2:	3601      	adds	r6, #1
 8004be4:	f858 1b04 	ldr.w	r1, [r8], #4
 8004be8:	f8d0 e000 	ldr.w	lr, [r0]
 8004bec:	b28b      	uxth	r3, r1
 8004bee:	ebac 0303 	sub.w	r3, ip, r3
 8004bf2:	fa1f f28e 	uxth.w	r2, lr
 8004bf6:	4413      	add	r3, r2
 8004bf8:	0c0a      	lsrs	r2, r1, #16
 8004bfa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c08:	45c1      	cmp	r9, r8
 8004c0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c0e:	f840 3b04 	str.w	r3, [r0], #4
 8004c12:	d2e7      	bcs.n	8004be4 <quorem+0xb0>
 8004c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c1c:	b922      	cbnz	r2, 8004c28 <quorem+0xf4>
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	429d      	cmp	r5, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	d30a      	bcc.n	8004c3c <quorem+0x108>
 8004c26:	613c      	str	r4, [r7, #16]
 8004c28:	4630      	mov	r0, r6
 8004c2a:	b003      	add	sp, #12
 8004c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	3b04      	subs	r3, #4
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	d1cb      	bne.n	8004bd0 <quorem+0x9c>
 8004c38:	3c01      	subs	r4, #1
 8004c3a:	e7c6      	b.n	8004bca <quorem+0x96>
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	2a00      	cmp	r2, #0
 8004c42:	d1f0      	bne.n	8004c26 <quorem+0xf2>
 8004c44:	3c01      	subs	r4, #1
 8004c46:	e7eb      	b.n	8004c20 <quorem+0xec>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	e7ee      	b.n	8004c2a <quorem+0xf6>
 8004c4c:	0000      	movs	r0, r0
	...

08004c50 <_dtoa_r>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	4616      	mov	r6, r2
 8004c56:	461f      	mov	r7, r3
 8004c58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c5a:	b099      	sub	sp, #100	; 0x64
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c66:	b974      	cbnz	r4, 8004c86 <_dtoa_r+0x36>
 8004c68:	2010      	movs	r0, #16
 8004c6a:	f000 fde3 	bl	8005834 <malloc>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6268      	str	r0, [r5, #36]	; 0x24
 8004c72:	b920      	cbnz	r0, 8004c7e <_dtoa_r+0x2e>
 8004c74:	21ea      	movs	r1, #234	; 0xea
 8004c76:	4ba8      	ldr	r3, [pc, #672]	; (8004f18 <_dtoa_r+0x2c8>)
 8004c78:	48a8      	ldr	r0, [pc, #672]	; (8004f1c <_dtoa_r+0x2cc>)
 8004c7a:	f001 fa81 	bl	8006180 <__assert_func>
 8004c7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c82:	6004      	str	r4, [r0, #0]
 8004c84:	60c4      	str	r4, [r0, #12]
 8004c86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c88:	6819      	ldr	r1, [r3, #0]
 8004c8a:	b151      	cbz	r1, 8004ca2 <_dtoa_r+0x52>
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4093      	lsls	r3, r2
 8004c92:	604a      	str	r2, [r1, #4]
 8004c94:	608b      	str	r3, [r1, #8]
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 fe30 	bl	80058fc <_Bfree>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	1e3b      	subs	r3, r7, #0
 8004ca4:	bfaf      	iteee	ge
 8004ca6:	2300      	movge	r3, #0
 8004ca8:	2201      	movlt	r2, #1
 8004caa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cae:	9305      	strlt	r3, [sp, #20]
 8004cb0:	bfa8      	it	ge
 8004cb2:	f8c8 3000 	strge.w	r3, [r8]
 8004cb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cba:	4b99      	ldr	r3, [pc, #612]	; (8004f20 <_dtoa_r+0x2d0>)
 8004cbc:	bfb8      	it	lt
 8004cbe:	f8c8 2000 	strlt.w	r2, [r8]
 8004cc2:	ea33 0309 	bics.w	r3, r3, r9
 8004cc6:	d119      	bne.n	8004cfc <_dtoa_r+0xac>
 8004cc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ccc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cd4:	4333      	orrs	r3, r6
 8004cd6:	f000 857f 	beq.w	80057d8 <_dtoa_r+0xb88>
 8004cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cdc:	b953      	cbnz	r3, 8004cf4 <_dtoa_r+0xa4>
 8004cde:	4b91      	ldr	r3, [pc, #580]	; (8004f24 <_dtoa_r+0x2d4>)
 8004ce0:	e022      	b.n	8004d28 <_dtoa_r+0xd8>
 8004ce2:	4b91      	ldr	r3, [pc, #580]	; (8004f28 <_dtoa_r+0x2d8>)
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	9803      	ldr	r0, [sp, #12]
 8004cee:	b019      	add	sp, #100	; 0x64
 8004cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf4:	4b8b      	ldr	r3, [pc, #556]	; (8004f24 <_dtoa_r+0x2d4>)
 8004cf6:	9303      	str	r3, [sp, #12]
 8004cf8:	3303      	adds	r3, #3
 8004cfa:	e7f5      	b.n	8004ce8 <_dtoa_r+0x98>
 8004cfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f7fb feb8 	bl	8000a80 <__aeabi_dcmpeq>
 8004d10:	4680      	mov	r8, r0
 8004d12:	b158      	cbz	r0, 8004d2c <_dtoa_r+0xdc>
 8004d14:	2301      	movs	r3, #1
 8004d16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8558 	beq.w	80057d2 <_dtoa_r+0xb82>
 8004d22:	4882      	ldr	r0, [pc, #520]	; (8004f2c <_dtoa_r+0x2dc>)
 8004d24:	6018      	str	r0, [r3, #0]
 8004d26:	1e43      	subs	r3, r0, #1
 8004d28:	9303      	str	r3, [sp, #12]
 8004d2a:	e7df      	b.n	8004cec <_dtoa_r+0x9c>
 8004d2c:	ab16      	add	r3, sp, #88	; 0x58
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	ab17      	add	r3, sp, #92	; 0x5c
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4628      	mov	r0, r5
 8004d36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d3a:	f001 f8c5 	bl	8005ec8 <__d2b>
 8004d3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d42:	4683      	mov	fp, r0
 8004d44:	2c00      	cmp	r4, #0
 8004d46:	d07f      	beq.n	8004e48 <_dtoa_r+0x1f8>
 8004d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d62:	2200      	movs	r2, #0
 8004d64:	4b72      	ldr	r3, [pc, #456]	; (8004f30 <_dtoa_r+0x2e0>)
 8004d66:	f7fb fa6b 	bl	8000240 <__aeabi_dsub>
 8004d6a:	a365      	add	r3, pc, #404	; (adr r3, 8004f00 <_dtoa_r+0x2b0>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb fc1e 	bl	80005b0 <__aeabi_dmul>
 8004d74:	a364      	add	r3, pc, #400	; (adr r3, 8004f08 <_dtoa_r+0x2b8>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fa63 	bl	8000244 <__adddf3>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	4620      	mov	r0, r4
 8004d82:	460f      	mov	r7, r1
 8004d84:	f7fb fbaa 	bl	80004dc <__aeabi_i2d>
 8004d88:	a361      	add	r3, pc, #388	; (adr r3, 8004f10 <_dtoa_r+0x2c0>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fc0f 	bl	80005b0 <__aeabi_dmul>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4630      	mov	r0, r6
 8004d98:	4639      	mov	r1, r7
 8004d9a:	f7fb fa53 	bl	8000244 <__adddf3>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	460f      	mov	r7, r1
 8004da2:	f7fb feb5 	bl	8000b10 <__aeabi_d2iz>
 8004da6:	2200      	movs	r2, #0
 8004da8:	4682      	mov	sl, r0
 8004daa:	2300      	movs	r3, #0
 8004dac:	4630      	mov	r0, r6
 8004dae:	4639      	mov	r1, r7
 8004db0:	f7fb fe70 	bl	8000a94 <__aeabi_dcmplt>
 8004db4:	b148      	cbz	r0, 8004dca <_dtoa_r+0x17a>
 8004db6:	4650      	mov	r0, sl
 8004db8:	f7fb fb90 	bl	80004dc <__aeabi_i2d>
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	f7fb fe5e 	bl	8000a80 <__aeabi_dcmpeq>
 8004dc4:	b908      	cbnz	r0, 8004dca <_dtoa_r+0x17a>
 8004dc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004dca:	f1ba 0f16 	cmp.w	sl, #22
 8004dce:	d858      	bhi.n	8004e82 <_dtoa_r+0x232>
 8004dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dd4:	4b57      	ldr	r3, [pc, #348]	; (8004f34 <_dtoa_r+0x2e4>)
 8004dd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f7fb fe59 	bl	8000a94 <__aeabi_dcmplt>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d04f      	beq.n	8004e86 <_dtoa_r+0x236>
 8004de6:	2300      	movs	r3, #0
 8004de8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004df0:	1b1c      	subs	r4, r3, r4
 8004df2:	1e63      	subs	r3, r4, #1
 8004df4:	9309      	str	r3, [sp, #36]	; 0x24
 8004df6:	bf49      	itett	mi
 8004df8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004dfc:	2300      	movpl	r3, #0
 8004dfe:	9306      	strmi	r3, [sp, #24]
 8004e00:	2300      	movmi	r3, #0
 8004e02:	bf54      	ite	pl
 8004e04:	9306      	strpl	r3, [sp, #24]
 8004e06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e08:	f1ba 0f00 	cmp.w	sl, #0
 8004e0c:	db3d      	blt.n	8004e8a <_dtoa_r+0x23a>
 8004e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e14:	4453      	add	r3, sl
 8004e16:	9309      	str	r3, [sp, #36]	; 0x24
 8004e18:	2300      	movs	r3, #0
 8004e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e1e:	2b09      	cmp	r3, #9
 8004e20:	f200 808c 	bhi.w	8004f3c <_dtoa_r+0x2ec>
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	bfc4      	itt	gt
 8004e28:	3b04      	subgt	r3, #4
 8004e2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e2e:	bfc8      	it	gt
 8004e30:	2400      	movgt	r4, #0
 8004e32:	f1a3 0302 	sub.w	r3, r3, #2
 8004e36:	bfd8      	it	le
 8004e38:	2401      	movle	r4, #1
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	f200 808a 	bhi.w	8004f54 <_dtoa_r+0x304>
 8004e40:	e8df f003 	tbb	[pc, r3]
 8004e44:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e4c:	441c      	add	r4, r3
 8004e4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	bfc3      	ittte	gt
 8004e56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e62:	f1c3 0320 	rsble	r3, r3, #32
 8004e66:	bfc6      	itte	gt
 8004e68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e6c:	4318      	orrgt	r0, r3
 8004e6e:	fa06 f003 	lslle.w	r0, r6, r3
 8004e72:	f7fb fb23 	bl	80004bc <__aeabi_ui2d>
 8004e76:	2301      	movs	r3, #1
 8004e78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e7c:	3c01      	subs	r4, #1
 8004e7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e80:	e76f      	b.n	8004d62 <_dtoa_r+0x112>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e7b2      	b.n	8004dec <_dtoa_r+0x19c>
 8004e86:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e88:	e7b1      	b.n	8004dee <_dtoa_r+0x19e>
 8004e8a:	9b06      	ldr	r3, [sp, #24]
 8004e8c:	eba3 030a 	sub.w	r3, r3, sl
 8004e90:	9306      	str	r3, [sp, #24]
 8004e92:	f1ca 0300 	rsb	r3, sl, #0
 8004e96:	930a      	str	r3, [sp, #40]	; 0x28
 8004e98:	2300      	movs	r3, #0
 8004e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8004e9c:	e7be      	b.n	8004e1c <_dtoa_r+0x1cc>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ea2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dc58      	bgt.n	8004f5a <_dtoa_r+0x30a>
 8004ea8:	f04f 0901 	mov.w	r9, #1
 8004eac:	464b      	mov	r3, r9
 8004eae:	f8cd 9020 	str.w	r9, [sp, #32]
 8004eb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004eba:	6042      	str	r2, [r0, #4]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	f102 0614 	add.w	r6, r2, #20
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	6841      	ldr	r1, [r0, #4]
 8004ec6:	d94e      	bls.n	8004f66 <_dtoa_r+0x316>
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f000 fcd7 	bl	800587c <_Balloc>
 8004ece:	9003      	str	r0, [sp, #12]
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d14c      	bne.n	8004f6e <_dtoa_r+0x31e>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004eda:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <_dtoa_r+0x2e8>)
 8004edc:	e6cc      	b.n	8004c78 <_dtoa_r+0x28>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e7de      	b.n	8004ea0 <_dtoa_r+0x250>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ee8:	eb0a 0903 	add.w	r9, sl, r3
 8004eec:	f109 0301 	add.w	r3, r9, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	9308      	str	r3, [sp, #32]
 8004ef4:	bfb8      	it	lt
 8004ef6:	2301      	movlt	r3, #1
 8004ef8:	e7dd      	b.n	8004eb6 <_dtoa_r+0x266>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e7f2      	b.n	8004ee4 <_dtoa_r+0x294>
 8004efe:	bf00      	nop
 8004f00:	636f4361 	.word	0x636f4361
 8004f04:	3fd287a7 	.word	0x3fd287a7
 8004f08:	8b60c8b3 	.word	0x8b60c8b3
 8004f0c:	3fc68a28 	.word	0x3fc68a28
 8004f10:	509f79fb 	.word	0x509f79fb
 8004f14:	3fd34413 	.word	0x3fd34413
 8004f18:	08007335 	.word	0x08007335
 8004f1c:	0800734c 	.word	0x0800734c
 8004f20:	7ff00000 	.word	0x7ff00000
 8004f24:	08007331 	.word	0x08007331
 8004f28:	08007328 	.word	0x08007328
 8004f2c:	08007305 	.word	0x08007305
 8004f30:	3ff80000 	.word	0x3ff80000
 8004f34:	08007440 	.word	0x08007440
 8004f38:	080073a7 	.word	0x080073a7
 8004f3c:	2401      	movs	r4, #1
 8004f3e:	2300      	movs	r3, #0
 8004f40:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f42:	9322      	str	r3, [sp, #136]	; 0x88
 8004f44:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2312      	movs	r3, #18
 8004f4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f50:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f52:	e7b0      	b.n	8004eb6 <_dtoa_r+0x266>
 8004f54:	2301      	movs	r3, #1
 8004f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f58:	e7f4      	b.n	8004f44 <_dtoa_r+0x2f4>
 8004f5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f5e:	464b      	mov	r3, r9
 8004f60:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f64:	e7a7      	b.n	8004eb6 <_dtoa_r+0x266>
 8004f66:	3101      	adds	r1, #1
 8004f68:	6041      	str	r1, [r0, #4]
 8004f6a:	0052      	lsls	r2, r2, #1
 8004f6c:	e7a7      	b.n	8004ebe <_dtoa_r+0x26e>
 8004f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f70:	9a03      	ldr	r2, [sp, #12]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	9b08      	ldr	r3, [sp, #32]
 8004f76:	2b0e      	cmp	r3, #14
 8004f78:	f200 80a8 	bhi.w	80050cc <_dtoa_r+0x47c>
 8004f7c:	2c00      	cmp	r4, #0
 8004f7e:	f000 80a5 	beq.w	80050cc <_dtoa_r+0x47c>
 8004f82:	f1ba 0f00 	cmp.w	sl, #0
 8004f86:	dd34      	ble.n	8004ff2 <_dtoa_r+0x3a2>
 8004f88:	4a9a      	ldr	r2, [pc, #616]	; (80051f4 <_dtoa_r+0x5a4>)
 8004f8a:	f00a 030f 	and.w	r3, sl, #15
 8004f8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004fa2:	d016      	beq.n	8004fd2 <_dtoa_r+0x382>
 8004fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fa8:	4b93      	ldr	r3, [pc, #588]	; (80051f8 <_dtoa_r+0x5a8>)
 8004faa:	2703      	movs	r7, #3
 8004fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fb0:	f7fb fc28 	bl	8000804 <__aeabi_ddiv>
 8004fb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fb8:	f004 040f 	and.w	r4, r4, #15
 8004fbc:	4e8e      	ldr	r6, [pc, #568]	; (80051f8 <_dtoa_r+0x5a8>)
 8004fbe:	b954      	cbnz	r4, 8004fd6 <_dtoa_r+0x386>
 8004fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fc8:	f7fb fc1c 	bl	8000804 <__aeabi_ddiv>
 8004fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd0:	e029      	b.n	8005026 <_dtoa_r+0x3d6>
 8004fd2:	2702      	movs	r7, #2
 8004fd4:	e7f2      	b.n	8004fbc <_dtoa_r+0x36c>
 8004fd6:	07e1      	lsls	r1, r4, #31
 8004fd8:	d508      	bpl.n	8004fec <_dtoa_r+0x39c>
 8004fda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fe2:	f7fb fae5 	bl	80005b0 <__aeabi_dmul>
 8004fe6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fea:	3701      	adds	r7, #1
 8004fec:	1064      	asrs	r4, r4, #1
 8004fee:	3608      	adds	r6, #8
 8004ff0:	e7e5      	b.n	8004fbe <_dtoa_r+0x36e>
 8004ff2:	f000 80a5 	beq.w	8005140 <_dtoa_r+0x4f0>
 8004ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ffa:	f1ca 0400 	rsb	r4, sl, #0
 8004ffe:	4b7d      	ldr	r3, [pc, #500]	; (80051f4 <_dtoa_r+0x5a4>)
 8005000:	f004 020f 	and.w	r2, r4, #15
 8005004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f7fb fad0 	bl	80005b0 <__aeabi_dmul>
 8005010:	2702      	movs	r7, #2
 8005012:	2300      	movs	r3, #0
 8005014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005018:	4e77      	ldr	r6, [pc, #476]	; (80051f8 <_dtoa_r+0x5a8>)
 800501a:	1124      	asrs	r4, r4, #4
 800501c:	2c00      	cmp	r4, #0
 800501e:	f040 8084 	bne.w	800512a <_dtoa_r+0x4da>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1d2      	bne.n	8004fcc <_dtoa_r+0x37c>
 8005026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 808b 	beq.w	8005144 <_dtoa_r+0x4f4>
 800502e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005032:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005036:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800503a:	2200      	movs	r2, #0
 800503c:	4b6f      	ldr	r3, [pc, #444]	; (80051fc <_dtoa_r+0x5ac>)
 800503e:	f7fb fd29 	bl	8000a94 <__aeabi_dcmplt>
 8005042:	2800      	cmp	r0, #0
 8005044:	d07e      	beq.n	8005144 <_dtoa_r+0x4f4>
 8005046:	9b08      	ldr	r3, [sp, #32]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d07b      	beq.n	8005144 <_dtoa_r+0x4f4>
 800504c:	f1b9 0f00 	cmp.w	r9, #0
 8005050:	dd38      	ble.n	80050c4 <_dtoa_r+0x474>
 8005052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005056:	2200      	movs	r2, #0
 8005058:	4b69      	ldr	r3, [pc, #420]	; (8005200 <_dtoa_r+0x5b0>)
 800505a:	f7fb faa9 	bl	80005b0 <__aeabi_dmul>
 800505e:	464c      	mov	r4, r9
 8005060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005064:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005068:	3701      	adds	r7, #1
 800506a:	4638      	mov	r0, r7
 800506c:	f7fb fa36 	bl	80004dc <__aeabi_i2d>
 8005070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005074:	f7fb fa9c 	bl	80005b0 <__aeabi_dmul>
 8005078:	2200      	movs	r2, #0
 800507a:	4b62      	ldr	r3, [pc, #392]	; (8005204 <_dtoa_r+0x5b4>)
 800507c:	f7fb f8e2 	bl	8000244 <__adddf3>
 8005080:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005084:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005088:	9611      	str	r6, [sp, #68]	; 0x44
 800508a:	2c00      	cmp	r4, #0
 800508c:	d15d      	bne.n	800514a <_dtoa_r+0x4fa>
 800508e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005092:	2200      	movs	r2, #0
 8005094:	4b5c      	ldr	r3, [pc, #368]	; (8005208 <_dtoa_r+0x5b8>)
 8005096:	f7fb f8d3 	bl	8000240 <__aeabi_dsub>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050a2:	4633      	mov	r3, r6
 80050a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050a6:	f7fb fd13 	bl	8000ad0 <__aeabi_dcmpgt>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	f040 829c 	bne.w	80055e8 <_dtoa_r+0x998>
 80050b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050ba:	f7fb fceb 	bl	8000a94 <__aeabi_dcmplt>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f040 8290 	bne.w	80055e4 <_dtoa_r+0x994>
 80050c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f2c0 8152 	blt.w	8005378 <_dtoa_r+0x728>
 80050d4:	f1ba 0f0e 	cmp.w	sl, #14
 80050d8:	f300 814e 	bgt.w	8005378 <_dtoa_r+0x728>
 80050dc:	4b45      	ldr	r3, [pc, #276]	; (80051f4 <_dtoa_r+0x5a4>)
 80050de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80050ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f280 80db 	bge.w	80052a8 <_dtoa_r+0x658>
 80050f2:	9b08      	ldr	r3, [sp, #32]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f300 80d7 	bgt.w	80052a8 <_dtoa_r+0x658>
 80050fa:	f040 8272 	bne.w	80055e2 <_dtoa_r+0x992>
 80050fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005102:	2200      	movs	r2, #0
 8005104:	4b40      	ldr	r3, [pc, #256]	; (8005208 <_dtoa_r+0x5b8>)
 8005106:	f7fb fa53 	bl	80005b0 <__aeabi_dmul>
 800510a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800510e:	f7fb fcd5 	bl	8000abc <__aeabi_dcmpge>
 8005112:	9c08      	ldr	r4, [sp, #32]
 8005114:	4626      	mov	r6, r4
 8005116:	2800      	cmp	r0, #0
 8005118:	f040 8248 	bne.w	80055ac <_dtoa_r+0x95c>
 800511c:	2331      	movs	r3, #49	; 0x31
 800511e:	9f03      	ldr	r7, [sp, #12]
 8005120:	f10a 0a01 	add.w	sl, sl, #1
 8005124:	f807 3b01 	strb.w	r3, [r7], #1
 8005128:	e244      	b.n	80055b4 <_dtoa_r+0x964>
 800512a:	07e2      	lsls	r2, r4, #31
 800512c:	d505      	bpl.n	800513a <_dtoa_r+0x4ea>
 800512e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005132:	f7fb fa3d 	bl	80005b0 <__aeabi_dmul>
 8005136:	2301      	movs	r3, #1
 8005138:	3701      	adds	r7, #1
 800513a:	1064      	asrs	r4, r4, #1
 800513c:	3608      	adds	r6, #8
 800513e:	e76d      	b.n	800501c <_dtoa_r+0x3cc>
 8005140:	2702      	movs	r7, #2
 8005142:	e770      	b.n	8005026 <_dtoa_r+0x3d6>
 8005144:	46d0      	mov	r8, sl
 8005146:	9c08      	ldr	r4, [sp, #32]
 8005148:	e78f      	b.n	800506a <_dtoa_r+0x41a>
 800514a:	9903      	ldr	r1, [sp, #12]
 800514c:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <_dtoa_r+0x5a4>)
 800514e:	4421      	add	r1, r4
 8005150:	9112      	str	r1, [sp, #72]	; 0x48
 8005152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005154:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005158:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800515c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005160:	2900      	cmp	r1, #0
 8005162:	d055      	beq.n	8005210 <_dtoa_r+0x5c0>
 8005164:	2000      	movs	r0, #0
 8005166:	4929      	ldr	r1, [pc, #164]	; (800520c <_dtoa_r+0x5bc>)
 8005168:	f7fb fb4c 	bl	8000804 <__aeabi_ddiv>
 800516c:	463b      	mov	r3, r7
 800516e:	4632      	mov	r2, r6
 8005170:	f7fb f866 	bl	8000240 <__aeabi_dsub>
 8005174:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005178:	9f03      	ldr	r7, [sp, #12]
 800517a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800517e:	f7fb fcc7 	bl	8000b10 <__aeabi_d2iz>
 8005182:	4604      	mov	r4, r0
 8005184:	f7fb f9aa 	bl	80004dc <__aeabi_i2d>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005190:	f7fb f856 	bl	8000240 <__aeabi_dsub>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	3430      	adds	r4, #48	; 0x30
 800519a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800519e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051a2:	f807 4b01 	strb.w	r4, [r7], #1
 80051a6:	f7fb fc75 	bl	8000a94 <__aeabi_dcmplt>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d174      	bne.n	8005298 <_dtoa_r+0x648>
 80051ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051b2:	2000      	movs	r0, #0
 80051b4:	4911      	ldr	r1, [pc, #68]	; (80051fc <_dtoa_r+0x5ac>)
 80051b6:	f7fb f843 	bl	8000240 <__aeabi_dsub>
 80051ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051be:	f7fb fc69 	bl	8000a94 <__aeabi_dcmplt>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f040 80b7 	bne.w	8005336 <_dtoa_r+0x6e6>
 80051c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051ca:	429f      	cmp	r7, r3
 80051cc:	f43f af7a 	beq.w	80050c4 <_dtoa_r+0x474>
 80051d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051d4:	2200      	movs	r2, #0
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <_dtoa_r+0x5b0>)
 80051d8:	f7fb f9ea 	bl	80005b0 <__aeabi_dmul>
 80051dc:	2200      	movs	r2, #0
 80051de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <_dtoa_r+0x5b0>)
 80051e8:	f7fb f9e2 	bl	80005b0 <__aeabi_dmul>
 80051ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f0:	e7c3      	b.n	800517a <_dtoa_r+0x52a>
 80051f2:	bf00      	nop
 80051f4:	08007440 	.word	0x08007440
 80051f8:	08007418 	.word	0x08007418
 80051fc:	3ff00000 	.word	0x3ff00000
 8005200:	40240000 	.word	0x40240000
 8005204:	401c0000 	.word	0x401c0000
 8005208:	40140000 	.word	0x40140000
 800520c:	3fe00000 	.word	0x3fe00000
 8005210:	4630      	mov	r0, r6
 8005212:	4639      	mov	r1, r7
 8005214:	f7fb f9cc 	bl	80005b0 <__aeabi_dmul>
 8005218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800521a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800521e:	9c03      	ldr	r4, [sp, #12]
 8005220:	9314      	str	r3, [sp, #80]	; 0x50
 8005222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005226:	f7fb fc73 	bl	8000b10 <__aeabi_d2iz>
 800522a:	9015      	str	r0, [sp, #84]	; 0x54
 800522c:	f7fb f956 	bl	80004dc <__aeabi_i2d>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005238:	f7fb f802 	bl	8000240 <__aeabi_dsub>
 800523c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800523e:	4606      	mov	r6, r0
 8005240:	3330      	adds	r3, #48	; 0x30
 8005242:	f804 3b01 	strb.w	r3, [r4], #1
 8005246:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005248:	460f      	mov	r7, r1
 800524a:	429c      	cmp	r4, r3
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	d124      	bne.n	800529c <_dtoa_r+0x64c>
 8005252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005256:	4bb0      	ldr	r3, [pc, #704]	; (8005518 <_dtoa_r+0x8c8>)
 8005258:	f7fa fff4 	bl	8000244 <__adddf3>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4630      	mov	r0, r6
 8005262:	4639      	mov	r1, r7
 8005264:	f7fb fc34 	bl	8000ad0 <__aeabi_dcmpgt>
 8005268:	2800      	cmp	r0, #0
 800526a:	d163      	bne.n	8005334 <_dtoa_r+0x6e4>
 800526c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005270:	2000      	movs	r0, #0
 8005272:	49a9      	ldr	r1, [pc, #676]	; (8005518 <_dtoa_r+0x8c8>)
 8005274:	f7fa ffe4 	bl	8000240 <__aeabi_dsub>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	f7fb fc08 	bl	8000a94 <__aeabi_dcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	f43f af1d 	beq.w	80050c4 <_dtoa_r+0x474>
 800528a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800528c:	1e7b      	subs	r3, r7, #1
 800528e:	9314      	str	r3, [sp, #80]	; 0x50
 8005290:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d0f8      	beq.n	800528a <_dtoa_r+0x63a>
 8005298:	46c2      	mov	sl, r8
 800529a:	e03b      	b.n	8005314 <_dtoa_r+0x6c4>
 800529c:	4b9f      	ldr	r3, [pc, #636]	; (800551c <_dtoa_r+0x8cc>)
 800529e:	f7fb f987 	bl	80005b0 <__aeabi_dmul>
 80052a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052a6:	e7bc      	b.n	8005222 <_dtoa_r+0x5d2>
 80052a8:	9f03      	ldr	r7, [sp, #12]
 80052aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052b2:	4640      	mov	r0, r8
 80052b4:	4649      	mov	r1, r9
 80052b6:	f7fb faa5 	bl	8000804 <__aeabi_ddiv>
 80052ba:	f7fb fc29 	bl	8000b10 <__aeabi_d2iz>
 80052be:	4604      	mov	r4, r0
 80052c0:	f7fb f90c 	bl	80004dc <__aeabi_i2d>
 80052c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052c8:	f7fb f972 	bl	80005b0 <__aeabi_dmul>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4640      	mov	r0, r8
 80052d2:	4649      	mov	r1, r9
 80052d4:	f7fa ffb4 	bl	8000240 <__aeabi_dsub>
 80052d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80052dc:	f807 6b01 	strb.w	r6, [r7], #1
 80052e0:	9e03      	ldr	r6, [sp, #12]
 80052e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80052e6:	1bbe      	subs	r6, r7, r6
 80052e8:	45b4      	cmp	ip, r6
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	d136      	bne.n	800535e <_dtoa_r+0x70e>
 80052f0:	f7fa ffa8 	bl	8000244 <__adddf3>
 80052f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052f8:	4680      	mov	r8, r0
 80052fa:	4689      	mov	r9, r1
 80052fc:	f7fb fbe8 	bl	8000ad0 <__aeabi_dcmpgt>
 8005300:	bb58      	cbnz	r0, 800535a <_dtoa_r+0x70a>
 8005302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005306:	4640      	mov	r0, r8
 8005308:	4649      	mov	r1, r9
 800530a:	f7fb fbb9 	bl	8000a80 <__aeabi_dcmpeq>
 800530e:	b108      	cbz	r0, 8005314 <_dtoa_r+0x6c4>
 8005310:	07e1      	lsls	r1, r4, #31
 8005312:	d422      	bmi.n	800535a <_dtoa_r+0x70a>
 8005314:	4628      	mov	r0, r5
 8005316:	4659      	mov	r1, fp
 8005318:	f000 faf0 	bl	80058fc <_Bfree>
 800531c:	2300      	movs	r3, #0
 800531e:	703b      	strb	r3, [r7, #0]
 8005320:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005322:	f10a 0001 	add.w	r0, sl, #1
 8005326:	6018      	str	r0, [r3, #0]
 8005328:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800532a:	2b00      	cmp	r3, #0
 800532c:	f43f acde 	beq.w	8004cec <_dtoa_r+0x9c>
 8005330:	601f      	str	r7, [r3, #0]
 8005332:	e4db      	b.n	8004cec <_dtoa_r+0x9c>
 8005334:	4627      	mov	r7, r4
 8005336:	463b      	mov	r3, r7
 8005338:	461f      	mov	r7, r3
 800533a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800533e:	2a39      	cmp	r2, #57	; 0x39
 8005340:	d107      	bne.n	8005352 <_dtoa_r+0x702>
 8005342:	9a03      	ldr	r2, [sp, #12]
 8005344:	429a      	cmp	r2, r3
 8005346:	d1f7      	bne.n	8005338 <_dtoa_r+0x6e8>
 8005348:	2230      	movs	r2, #48	; 0x30
 800534a:	9903      	ldr	r1, [sp, #12]
 800534c:	f108 0801 	add.w	r8, r8, #1
 8005350:	700a      	strb	r2, [r1, #0]
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	3201      	adds	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e79e      	b.n	8005298 <_dtoa_r+0x648>
 800535a:	46d0      	mov	r8, sl
 800535c:	e7eb      	b.n	8005336 <_dtoa_r+0x6e6>
 800535e:	2200      	movs	r2, #0
 8005360:	4b6e      	ldr	r3, [pc, #440]	; (800551c <_dtoa_r+0x8cc>)
 8005362:	f7fb f925 	bl	80005b0 <__aeabi_dmul>
 8005366:	2200      	movs	r2, #0
 8005368:	2300      	movs	r3, #0
 800536a:	4680      	mov	r8, r0
 800536c:	4689      	mov	r9, r1
 800536e:	f7fb fb87 	bl	8000a80 <__aeabi_dcmpeq>
 8005372:	2800      	cmp	r0, #0
 8005374:	d09b      	beq.n	80052ae <_dtoa_r+0x65e>
 8005376:	e7cd      	b.n	8005314 <_dtoa_r+0x6c4>
 8005378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800537a:	2a00      	cmp	r2, #0
 800537c:	f000 80d0 	beq.w	8005520 <_dtoa_r+0x8d0>
 8005380:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005382:	2a01      	cmp	r2, #1
 8005384:	f300 80ae 	bgt.w	80054e4 <_dtoa_r+0x894>
 8005388:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800538a:	2a00      	cmp	r2, #0
 800538c:	f000 80a6 	beq.w	80054dc <_dtoa_r+0x88c>
 8005390:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005394:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005396:	9f06      	ldr	r7, [sp, #24]
 8005398:	9a06      	ldr	r2, [sp, #24]
 800539a:	2101      	movs	r1, #1
 800539c:	441a      	add	r2, r3
 800539e:	9206      	str	r2, [sp, #24]
 80053a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053a2:	4628      	mov	r0, r5
 80053a4:	441a      	add	r2, r3
 80053a6:	9209      	str	r2, [sp, #36]	; 0x24
 80053a8:	f000 fb5e 	bl	8005a68 <__i2b>
 80053ac:	4606      	mov	r6, r0
 80053ae:	2f00      	cmp	r7, #0
 80053b0:	dd0c      	ble.n	80053cc <_dtoa_r+0x77c>
 80053b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dd09      	ble.n	80053cc <_dtoa_r+0x77c>
 80053b8:	42bb      	cmp	r3, r7
 80053ba:	bfa8      	it	ge
 80053bc:	463b      	movge	r3, r7
 80053be:	9a06      	ldr	r2, [sp, #24]
 80053c0:	1aff      	subs	r7, r7, r3
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	9206      	str	r2, [sp, #24]
 80053c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	9309      	str	r3, [sp, #36]	; 0x24
 80053cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ce:	b1f3      	cbz	r3, 800540e <_dtoa_r+0x7be>
 80053d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80a8 	beq.w	8005528 <_dtoa_r+0x8d8>
 80053d8:	2c00      	cmp	r4, #0
 80053da:	dd10      	ble.n	80053fe <_dtoa_r+0x7ae>
 80053dc:	4631      	mov	r1, r6
 80053de:	4622      	mov	r2, r4
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 fbff 	bl	8005be4 <__pow5mult>
 80053e6:	465a      	mov	r2, fp
 80053e8:	4601      	mov	r1, r0
 80053ea:	4606      	mov	r6, r0
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 fb51 	bl	8005a94 <__multiply>
 80053f2:	4680      	mov	r8, r0
 80053f4:	4659      	mov	r1, fp
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 fa80 	bl	80058fc <_Bfree>
 80053fc:	46c3      	mov	fp, r8
 80053fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005400:	1b1a      	subs	r2, r3, r4
 8005402:	d004      	beq.n	800540e <_dtoa_r+0x7be>
 8005404:	4659      	mov	r1, fp
 8005406:	4628      	mov	r0, r5
 8005408:	f000 fbec 	bl	8005be4 <__pow5mult>
 800540c:	4683      	mov	fp, r0
 800540e:	2101      	movs	r1, #1
 8005410:	4628      	mov	r0, r5
 8005412:	f000 fb29 	bl	8005a68 <__i2b>
 8005416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005418:	4604      	mov	r4, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	f340 8086 	ble.w	800552c <_dtoa_r+0x8dc>
 8005420:	461a      	mov	r2, r3
 8005422:	4601      	mov	r1, r0
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fbdd 	bl	8005be4 <__pow5mult>
 800542a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800542c:	4604      	mov	r4, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	dd7f      	ble.n	8005532 <_dtoa_r+0x8e2>
 8005432:	f04f 0800 	mov.w	r8, #0
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800543c:	6918      	ldr	r0, [r3, #16]
 800543e:	f000 fac5 	bl	80059cc <__hi0bits>
 8005442:	f1c0 0020 	rsb	r0, r0, #32
 8005446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005448:	4418      	add	r0, r3
 800544a:	f010 001f 	ands.w	r0, r0, #31
 800544e:	f000 8092 	beq.w	8005576 <_dtoa_r+0x926>
 8005452:	f1c0 0320 	rsb	r3, r0, #32
 8005456:	2b04      	cmp	r3, #4
 8005458:	f340 808a 	ble.w	8005570 <_dtoa_r+0x920>
 800545c:	f1c0 001c 	rsb	r0, r0, #28
 8005460:	9b06      	ldr	r3, [sp, #24]
 8005462:	4407      	add	r7, r0
 8005464:	4403      	add	r3, r0
 8005466:	9306      	str	r3, [sp, #24]
 8005468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546a:	4403      	add	r3, r0
 800546c:	9309      	str	r3, [sp, #36]	; 0x24
 800546e:	9b06      	ldr	r3, [sp, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	dd05      	ble.n	8005480 <_dtoa_r+0x830>
 8005474:	4659      	mov	r1, fp
 8005476:	461a      	mov	r2, r3
 8005478:	4628      	mov	r0, r5
 800547a:	f000 fc0d 	bl	8005c98 <__lshift>
 800547e:	4683      	mov	fp, r0
 8005480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	dd05      	ble.n	8005492 <_dtoa_r+0x842>
 8005486:	4621      	mov	r1, r4
 8005488:	461a      	mov	r2, r3
 800548a:	4628      	mov	r0, r5
 800548c:	f000 fc04 	bl	8005c98 <__lshift>
 8005490:	4604      	mov	r4, r0
 8005492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d070      	beq.n	800557a <_dtoa_r+0x92a>
 8005498:	4621      	mov	r1, r4
 800549a:	4658      	mov	r0, fp
 800549c:	f000 fc6c 	bl	8005d78 <__mcmp>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	da6a      	bge.n	800557a <_dtoa_r+0x92a>
 80054a4:	2300      	movs	r3, #0
 80054a6:	4659      	mov	r1, fp
 80054a8:	220a      	movs	r2, #10
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 fa48 	bl	8005940 <__multadd>
 80054b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b2:	4683      	mov	fp, r0
 80054b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8194 	beq.w	80057e6 <_dtoa_r+0xb96>
 80054be:	4631      	mov	r1, r6
 80054c0:	2300      	movs	r3, #0
 80054c2:	220a      	movs	r2, #10
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 fa3b 	bl	8005940 <__multadd>
 80054ca:	f1b9 0f00 	cmp.w	r9, #0
 80054ce:	4606      	mov	r6, r0
 80054d0:	f300 8093 	bgt.w	80055fa <_dtoa_r+0x9aa>
 80054d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	dc57      	bgt.n	800558a <_dtoa_r+0x93a>
 80054da:	e08e      	b.n	80055fa <_dtoa_r+0x9aa>
 80054dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054e2:	e757      	b.n	8005394 <_dtoa_r+0x744>
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	1e5c      	subs	r4, r3, #1
 80054e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	bfb7      	itett	lt
 80054ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054f0:	1b1c      	subge	r4, r3, r4
 80054f2:	1ae2      	sublt	r2, r4, r3
 80054f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054f6:	bfbe      	ittt	lt
 80054f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80054fa:	189b      	addlt	r3, r3, r2
 80054fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80054fe:	9b08      	ldr	r3, [sp, #32]
 8005500:	bfb8      	it	lt
 8005502:	2400      	movlt	r4, #0
 8005504:	2b00      	cmp	r3, #0
 8005506:	bfbb      	ittet	lt
 8005508:	9b06      	ldrlt	r3, [sp, #24]
 800550a:	9a08      	ldrlt	r2, [sp, #32]
 800550c:	9f06      	ldrge	r7, [sp, #24]
 800550e:	1a9f      	sublt	r7, r3, r2
 8005510:	bfac      	ite	ge
 8005512:	9b08      	ldrge	r3, [sp, #32]
 8005514:	2300      	movlt	r3, #0
 8005516:	e73f      	b.n	8005398 <_dtoa_r+0x748>
 8005518:	3fe00000 	.word	0x3fe00000
 800551c:	40240000 	.word	0x40240000
 8005520:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005522:	9f06      	ldr	r7, [sp, #24]
 8005524:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005526:	e742      	b.n	80053ae <_dtoa_r+0x75e>
 8005528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800552a:	e76b      	b.n	8005404 <_dtoa_r+0x7b4>
 800552c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800552e:	2b01      	cmp	r3, #1
 8005530:	dc19      	bgt.n	8005566 <_dtoa_r+0x916>
 8005532:	9b04      	ldr	r3, [sp, #16]
 8005534:	b9bb      	cbnz	r3, 8005566 <_dtoa_r+0x916>
 8005536:	9b05      	ldr	r3, [sp, #20]
 8005538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800553c:	b99b      	cbnz	r3, 8005566 <_dtoa_r+0x916>
 800553e:	9b05      	ldr	r3, [sp, #20]
 8005540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005544:	0d1b      	lsrs	r3, r3, #20
 8005546:	051b      	lsls	r3, r3, #20
 8005548:	b183      	cbz	r3, 800556c <_dtoa_r+0x91c>
 800554a:	f04f 0801 	mov.w	r8, #1
 800554e:	9b06      	ldr	r3, [sp, #24]
 8005550:	3301      	adds	r3, #1
 8005552:	9306      	str	r3, [sp, #24]
 8005554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005556:	3301      	adds	r3, #1
 8005558:	9309      	str	r3, [sp, #36]	; 0x24
 800555a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	f47f af6a 	bne.w	8005436 <_dtoa_r+0x7e6>
 8005562:	2001      	movs	r0, #1
 8005564:	e76f      	b.n	8005446 <_dtoa_r+0x7f6>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	e7f6      	b.n	800555a <_dtoa_r+0x90a>
 800556c:	4698      	mov	r8, r3
 800556e:	e7f4      	b.n	800555a <_dtoa_r+0x90a>
 8005570:	f43f af7d 	beq.w	800546e <_dtoa_r+0x81e>
 8005574:	4618      	mov	r0, r3
 8005576:	301c      	adds	r0, #28
 8005578:	e772      	b.n	8005460 <_dtoa_r+0x810>
 800557a:	9b08      	ldr	r3, [sp, #32]
 800557c:	2b00      	cmp	r3, #0
 800557e:	dc36      	bgt.n	80055ee <_dtoa_r+0x99e>
 8005580:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005582:	2b02      	cmp	r3, #2
 8005584:	dd33      	ble.n	80055ee <_dtoa_r+0x99e>
 8005586:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800558a:	f1b9 0f00 	cmp.w	r9, #0
 800558e:	d10d      	bne.n	80055ac <_dtoa_r+0x95c>
 8005590:	4621      	mov	r1, r4
 8005592:	464b      	mov	r3, r9
 8005594:	2205      	movs	r2, #5
 8005596:	4628      	mov	r0, r5
 8005598:	f000 f9d2 	bl	8005940 <__multadd>
 800559c:	4601      	mov	r1, r0
 800559e:	4604      	mov	r4, r0
 80055a0:	4658      	mov	r0, fp
 80055a2:	f000 fbe9 	bl	8005d78 <__mcmp>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f73f adb8 	bgt.w	800511c <_dtoa_r+0x4cc>
 80055ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ae:	9f03      	ldr	r7, [sp, #12]
 80055b0:	ea6f 0a03 	mvn.w	sl, r3
 80055b4:	f04f 0800 	mov.w	r8, #0
 80055b8:	4621      	mov	r1, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f99e 	bl	80058fc <_Bfree>
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	f43f aea7 	beq.w	8005314 <_dtoa_r+0x6c4>
 80055c6:	f1b8 0f00 	cmp.w	r8, #0
 80055ca:	d005      	beq.n	80055d8 <_dtoa_r+0x988>
 80055cc:	45b0      	cmp	r8, r6
 80055ce:	d003      	beq.n	80055d8 <_dtoa_r+0x988>
 80055d0:	4641      	mov	r1, r8
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f992 	bl	80058fc <_Bfree>
 80055d8:	4631      	mov	r1, r6
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f98e 	bl	80058fc <_Bfree>
 80055e0:	e698      	b.n	8005314 <_dtoa_r+0x6c4>
 80055e2:	2400      	movs	r4, #0
 80055e4:	4626      	mov	r6, r4
 80055e6:	e7e1      	b.n	80055ac <_dtoa_r+0x95c>
 80055e8:	46c2      	mov	sl, r8
 80055ea:	4626      	mov	r6, r4
 80055ec:	e596      	b.n	800511c <_dtoa_r+0x4cc>
 80055ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80fd 	beq.w	80057f4 <_dtoa_r+0xba4>
 80055fa:	2f00      	cmp	r7, #0
 80055fc:	dd05      	ble.n	800560a <_dtoa_r+0x9ba>
 80055fe:	4631      	mov	r1, r6
 8005600:	463a      	mov	r2, r7
 8005602:	4628      	mov	r0, r5
 8005604:	f000 fb48 	bl	8005c98 <__lshift>
 8005608:	4606      	mov	r6, r0
 800560a:	f1b8 0f00 	cmp.w	r8, #0
 800560e:	d05c      	beq.n	80056ca <_dtoa_r+0xa7a>
 8005610:	4628      	mov	r0, r5
 8005612:	6871      	ldr	r1, [r6, #4]
 8005614:	f000 f932 	bl	800587c <_Balloc>
 8005618:	4607      	mov	r7, r0
 800561a:	b928      	cbnz	r0, 8005628 <_dtoa_r+0x9d8>
 800561c:	4602      	mov	r2, r0
 800561e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005622:	4b7f      	ldr	r3, [pc, #508]	; (8005820 <_dtoa_r+0xbd0>)
 8005624:	f7ff bb28 	b.w	8004c78 <_dtoa_r+0x28>
 8005628:	6932      	ldr	r2, [r6, #16]
 800562a:	f106 010c 	add.w	r1, r6, #12
 800562e:	3202      	adds	r2, #2
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	300c      	adds	r0, #12
 8005634:	f000 f914 	bl	8005860 <memcpy>
 8005638:	2201      	movs	r2, #1
 800563a:	4639      	mov	r1, r7
 800563c:	4628      	mov	r0, r5
 800563e:	f000 fb2b 	bl	8005c98 <__lshift>
 8005642:	46b0      	mov	r8, r6
 8005644:	4606      	mov	r6, r0
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	9308      	str	r3, [sp, #32]
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	444b      	add	r3, r9
 8005650:	930a      	str	r3, [sp, #40]	; 0x28
 8005652:	9b04      	ldr	r3, [sp, #16]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	9309      	str	r3, [sp, #36]	; 0x24
 800565a:	9b08      	ldr	r3, [sp, #32]
 800565c:	4621      	mov	r1, r4
 800565e:	3b01      	subs	r3, #1
 8005660:	4658      	mov	r0, fp
 8005662:	9304      	str	r3, [sp, #16]
 8005664:	f7ff fa66 	bl	8004b34 <quorem>
 8005668:	4603      	mov	r3, r0
 800566a:	4641      	mov	r1, r8
 800566c:	3330      	adds	r3, #48	; 0x30
 800566e:	9006      	str	r0, [sp, #24]
 8005670:	4658      	mov	r0, fp
 8005672:	930b      	str	r3, [sp, #44]	; 0x2c
 8005674:	f000 fb80 	bl	8005d78 <__mcmp>
 8005678:	4632      	mov	r2, r6
 800567a:	4681      	mov	r9, r0
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 fb96 	bl	8005db0 <__mdiff>
 8005684:	68c2      	ldr	r2, [r0, #12]
 8005686:	4607      	mov	r7, r0
 8005688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800568a:	bb02      	cbnz	r2, 80056ce <_dtoa_r+0xa7e>
 800568c:	4601      	mov	r1, r0
 800568e:	4658      	mov	r0, fp
 8005690:	f000 fb72 	bl	8005d78 <__mcmp>
 8005694:	4602      	mov	r2, r0
 8005696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005698:	4639      	mov	r1, r7
 800569a:	4628      	mov	r0, r5
 800569c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056a0:	f000 f92c 	bl	80058fc <_Bfree>
 80056a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056a8:	9f08      	ldr	r7, [sp, #32]
 80056aa:	ea43 0102 	orr.w	r1, r3, r2
 80056ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b0:	430b      	orrs	r3, r1
 80056b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b4:	d10d      	bne.n	80056d2 <_dtoa_r+0xa82>
 80056b6:	2b39      	cmp	r3, #57	; 0x39
 80056b8:	d029      	beq.n	800570e <_dtoa_r+0xabe>
 80056ba:	f1b9 0f00 	cmp.w	r9, #0
 80056be:	dd01      	ble.n	80056c4 <_dtoa_r+0xa74>
 80056c0:	9b06      	ldr	r3, [sp, #24]
 80056c2:	3331      	adds	r3, #49	; 0x31
 80056c4:	9a04      	ldr	r2, [sp, #16]
 80056c6:	7013      	strb	r3, [r2, #0]
 80056c8:	e776      	b.n	80055b8 <_dtoa_r+0x968>
 80056ca:	4630      	mov	r0, r6
 80056cc:	e7b9      	b.n	8005642 <_dtoa_r+0x9f2>
 80056ce:	2201      	movs	r2, #1
 80056d0:	e7e2      	b.n	8005698 <_dtoa_r+0xa48>
 80056d2:	f1b9 0f00 	cmp.w	r9, #0
 80056d6:	db06      	blt.n	80056e6 <_dtoa_r+0xa96>
 80056d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80056da:	ea41 0909 	orr.w	r9, r1, r9
 80056de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056e0:	ea59 0101 	orrs.w	r1, r9, r1
 80056e4:	d120      	bne.n	8005728 <_dtoa_r+0xad8>
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	ddec      	ble.n	80056c4 <_dtoa_r+0xa74>
 80056ea:	4659      	mov	r1, fp
 80056ec:	2201      	movs	r2, #1
 80056ee:	4628      	mov	r0, r5
 80056f0:	9308      	str	r3, [sp, #32]
 80056f2:	f000 fad1 	bl	8005c98 <__lshift>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4683      	mov	fp, r0
 80056fa:	f000 fb3d 	bl	8005d78 <__mcmp>
 80056fe:	2800      	cmp	r0, #0
 8005700:	9b08      	ldr	r3, [sp, #32]
 8005702:	dc02      	bgt.n	800570a <_dtoa_r+0xaba>
 8005704:	d1de      	bne.n	80056c4 <_dtoa_r+0xa74>
 8005706:	07da      	lsls	r2, r3, #31
 8005708:	d5dc      	bpl.n	80056c4 <_dtoa_r+0xa74>
 800570a:	2b39      	cmp	r3, #57	; 0x39
 800570c:	d1d8      	bne.n	80056c0 <_dtoa_r+0xa70>
 800570e:	2339      	movs	r3, #57	; 0x39
 8005710:	9a04      	ldr	r2, [sp, #16]
 8005712:	7013      	strb	r3, [r2, #0]
 8005714:	463b      	mov	r3, r7
 8005716:	461f      	mov	r7, r3
 8005718:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800571c:	3b01      	subs	r3, #1
 800571e:	2a39      	cmp	r2, #57	; 0x39
 8005720:	d050      	beq.n	80057c4 <_dtoa_r+0xb74>
 8005722:	3201      	adds	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e747      	b.n	80055b8 <_dtoa_r+0x968>
 8005728:	2a00      	cmp	r2, #0
 800572a:	dd03      	ble.n	8005734 <_dtoa_r+0xae4>
 800572c:	2b39      	cmp	r3, #57	; 0x39
 800572e:	d0ee      	beq.n	800570e <_dtoa_r+0xabe>
 8005730:	3301      	adds	r3, #1
 8005732:	e7c7      	b.n	80056c4 <_dtoa_r+0xa74>
 8005734:	9a08      	ldr	r2, [sp, #32]
 8005736:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005738:	f802 3c01 	strb.w	r3, [r2, #-1]
 800573c:	428a      	cmp	r2, r1
 800573e:	d02a      	beq.n	8005796 <_dtoa_r+0xb46>
 8005740:	4659      	mov	r1, fp
 8005742:	2300      	movs	r3, #0
 8005744:	220a      	movs	r2, #10
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f8fa 	bl	8005940 <__multadd>
 800574c:	45b0      	cmp	r8, r6
 800574e:	4683      	mov	fp, r0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	f04f 020a 	mov.w	r2, #10
 8005758:	4641      	mov	r1, r8
 800575a:	4628      	mov	r0, r5
 800575c:	d107      	bne.n	800576e <_dtoa_r+0xb1e>
 800575e:	f000 f8ef 	bl	8005940 <__multadd>
 8005762:	4680      	mov	r8, r0
 8005764:	4606      	mov	r6, r0
 8005766:	9b08      	ldr	r3, [sp, #32]
 8005768:	3301      	adds	r3, #1
 800576a:	9308      	str	r3, [sp, #32]
 800576c:	e775      	b.n	800565a <_dtoa_r+0xa0a>
 800576e:	f000 f8e7 	bl	8005940 <__multadd>
 8005772:	4631      	mov	r1, r6
 8005774:	4680      	mov	r8, r0
 8005776:	2300      	movs	r3, #0
 8005778:	220a      	movs	r2, #10
 800577a:	4628      	mov	r0, r5
 800577c:	f000 f8e0 	bl	8005940 <__multadd>
 8005780:	4606      	mov	r6, r0
 8005782:	e7f0      	b.n	8005766 <_dtoa_r+0xb16>
 8005784:	f1b9 0f00 	cmp.w	r9, #0
 8005788:	bfcc      	ite	gt
 800578a:	464f      	movgt	r7, r9
 800578c:	2701      	movle	r7, #1
 800578e:	f04f 0800 	mov.w	r8, #0
 8005792:	9a03      	ldr	r2, [sp, #12]
 8005794:	4417      	add	r7, r2
 8005796:	4659      	mov	r1, fp
 8005798:	2201      	movs	r2, #1
 800579a:	4628      	mov	r0, r5
 800579c:	9308      	str	r3, [sp, #32]
 800579e:	f000 fa7b 	bl	8005c98 <__lshift>
 80057a2:	4621      	mov	r1, r4
 80057a4:	4683      	mov	fp, r0
 80057a6:	f000 fae7 	bl	8005d78 <__mcmp>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	dcb2      	bgt.n	8005714 <_dtoa_r+0xac4>
 80057ae:	d102      	bne.n	80057b6 <_dtoa_r+0xb66>
 80057b0:	9b08      	ldr	r3, [sp, #32]
 80057b2:	07db      	lsls	r3, r3, #31
 80057b4:	d4ae      	bmi.n	8005714 <_dtoa_r+0xac4>
 80057b6:	463b      	mov	r3, r7
 80057b8:	461f      	mov	r7, r3
 80057ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057be:	2a30      	cmp	r2, #48	; 0x30
 80057c0:	d0fa      	beq.n	80057b8 <_dtoa_r+0xb68>
 80057c2:	e6f9      	b.n	80055b8 <_dtoa_r+0x968>
 80057c4:	9a03      	ldr	r2, [sp, #12]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d1a5      	bne.n	8005716 <_dtoa_r+0xac6>
 80057ca:	2331      	movs	r3, #49	; 0x31
 80057cc:	f10a 0a01 	add.w	sl, sl, #1
 80057d0:	e779      	b.n	80056c6 <_dtoa_r+0xa76>
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <_dtoa_r+0xbd4>)
 80057d4:	f7ff baa8 	b.w	8004d28 <_dtoa_r+0xd8>
 80057d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f47f aa81 	bne.w	8004ce2 <_dtoa_r+0x92>
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <_dtoa_r+0xbd8>)
 80057e2:	f7ff baa1 	b.w	8004d28 <_dtoa_r+0xd8>
 80057e6:	f1b9 0f00 	cmp.w	r9, #0
 80057ea:	dc03      	bgt.n	80057f4 <_dtoa_r+0xba4>
 80057ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	f73f aecb 	bgt.w	800558a <_dtoa_r+0x93a>
 80057f4:	9f03      	ldr	r7, [sp, #12]
 80057f6:	4621      	mov	r1, r4
 80057f8:	4658      	mov	r0, fp
 80057fa:	f7ff f99b 	bl	8004b34 <quorem>
 80057fe:	9a03      	ldr	r2, [sp, #12]
 8005800:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005804:	f807 3b01 	strb.w	r3, [r7], #1
 8005808:	1aba      	subs	r2, r7, r2
 800580a:	4591      	cmp	r9, r2
 800580c:	ddba      	ble.n	8005784 <_dtoa_r+0xb34>
 800580e:	4659      	mov	r1, fp
 8005810:	2300      	movs	r3, #0
 8005812:	220a      	movs	r2, #10
 8005814:	4628      	mov	r0, r5
 8005816:	f000 f893 	bl	8005940 <__multadd>
 800581a:	4683      	mov	fp, r0
 800581c:	e7eb      	b.n	80057f6 <_dtoa_r+0xba6>
 800581e:	bf00      	nop
 8005820:	080073a7 	.word	0x080073a7
 8005824:	08007304 	.word	0x08007304
 8005828:	08007328 	.word	0x08007328

0800582c <_localeconv_r>:
 800582c:	4800      	ldr	r0, [pc, #0]	; (8005830 <_localeconv_r+0x4>)
 800582e:	4770      	bx	lr
 8005830:	20000160 	.word	0x20000160

08005834 <malloc>:
 8005834:	4b02      	ldr	r3, [pc, #8]	; (8005840 <malloc+0xc>)
 8005836:	4601      	mov	r1, r0
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f000 bc1d 	b.w	8006078 <_malloc_r>
 800583e:	bf00      	nop
 8005840:	2000000c 	.word	0x2000000c

08005844 <memchr>:
 8005844:	4603      	mov	r3, r0
 8005846:	b510      	push	{r4, lr}
 8005848:	b2c9      	uxtb	r1, r1
 800584a:	4402      	add	r2, r0
 800584c:	4293      	cmp	r3, r2
 800584e:	4618      	mov	r0, r3
 8005850:	d101      	bne.n	8005856 <memchr+0x12>
 8005852:	2000      	movs	r0, #0
 8005854:	e003      	b.n	800585e <memchr+0x1a>
 8005856:	7804      	ldrb	r4, [r0, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	428c      	cmp	r4, r1
 800585c:	d1f6      	bne.n	800584c <memchr+0x8>
 800585e:	bd10      	pop	{r4, pc}

08005860 <memcpy>:
 8005860:	440a      	add	r2, r1
 8005862:	4291      	cmp	r1, r2
 8005864:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005868:	d100      	bne.n	800586c <memcpy+0xc>
 800586a:	4770      	bx	lr
 800586c:	b510      	push	{r4, lr}
 800586e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005872:	4291      	cmp	r1, r2
 8005874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005878:	d1f9      	bne.n	800586e <memcpy+0xe>
 800587a:	bd10      	pop	{r4, pc}

0800587c <_Balloc>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005880:	4604      	mov	r4, r0
 8005882:	460d      	mov	r5, r1
 8005884:	b976      	cbnz	r6, 80058a4 <_Balloc+0x28>
 8005886:	2010      	movs	r0, #16
 8005888:	f7ff ffd4 	bl	8005834 <malloc>
 800588c:	4602      	mov	r2, r0
 800588e:	6260      	str	r0, [r4, #36]	; 0x24
 8005890:	b920      	cbnz	r0, 800589c <_Balloc+0x20>
 8005892:	2166      	movs	r1, #102	; 0x66
 8005894:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <_Balloc+0x78>)
 8005896:	4818      	ldr	r0, [pc, #96]	; (80058f8 <_Balloc+0x7c>)
 8005898:	f000 fc72 	bl	8006180 <__assert_func>
 800589c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058a0:	6006      	str	r6, [r0, #0]
 80058a2:	60c6      	str	r6, [r0, #12]
 80058a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058a6:	68f3      	ldr	r3, [r6, #12]
 80058a8:	b183      	cbz	r3, 80058cc <_Balloc+0x50>
 80058aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058b2:	b9b8      	cbnz	r0, 80058e4 <_Balloc+0x68>
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f605 	lsl.w	r6, r1, r5
 80058ba:	1d72      	adds	r2, r6, #5
 80058bc:	4620      	mov	r0, r4
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	f000 fb5e 	bl	8005f80 <_calloc_r>
 80058c4:	b160      	cbz	r0, 80058e0 <_Balloc+0x64>
 80058c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ca:	e00e      	b.n	80058ea <_Balloc+0x6e>
 80058cc:	2221      	movs	r2, #33	; 0x21
 80058ce:	2104      	movs	r1, #4
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fb55 	bl	8005f80 <_calloc_r>
 80058d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d8:	60f0      	str	r0, [r6, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e4      	bne.n	80058aa <_Balloc+0x2e>
 80058e0:	2000      	movs	r0, #0
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	6802      	ldr	r2, [r0, #0]
 80058e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058ea:	2300      	movs	r3, #0
 80058ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058f0:	e7f7      	b.n	80058e2 <_Balloc+0x66>
 80058f2:	bf00      	nop
 80058f4:	08007335 	.word	0x08007335
 80058f8:	080073b8 	.word	0x080073b8

080058fc <_Bfree>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b976      	cbnz	r6, 8005924 <_Bfree+0x28>
 8005906:	2010      	movs	r0, #16
 8005908:	f7ff ff94 	bl	8005834 <malloc>
 800590c:	4602      	mov	r2, r0
 800590e:	6268      	str	r0, [r5, #36]	; 0x24
 8005910:	b920      	cbnz	r0, 800591c <_Bfree+0x20>
 8005912:	218a      	movs	r1, #138	; 0x8a
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <_Bfree+0x3c>)
 8005916:	4809      	ldr	r0, [pc, #36]	; (800593c <_Bfree+0x40>)
 8005918:	f000 fc32 	bl	8006180 <__assert_func>
 800591c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005920:	6006      	str	r6, [r0, #0]
 8005922:	60c6      	str	r6, [r0, #12]
 8005924:	b13c      	cbz	r4, 8005936 <_Bfree+0x3a>
 8005926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005928:	6862      	ldr	r2, [r4, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005930:	6021      	str	r1, [r4, #0]
 8005932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	08007335 	.word	0x08007335
 800593c:	080073b8 	.word	0x080073b8

08005940 <__multadd>:
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	4607      	mov	r7, r0
 8005946:	460c      	mov	r4, r1
 8005948:	461e      	mov	r6, r3
 800594a:	2000      	movs	r0, #0
 800594c:	690d      	ldr	r5, [r1, #16]
 800594e:	f101 0c14 	add.w	ip, r1, #20
 8005952:	f8dc 3000 	ldr.w	r3, [ip]
 8005956:	3001      	adds	r0, #1
 8005958:	b299      	uxth	r1, r3
 800595a:	fb02 6101 	mla	r1, r2, r1, r6
 800595e:	0c1e      	lsrs	r6, r3, #16
 8005960:	0c0b      	lsrs	r3, r1, #16
 8005962:	fb02 3306 	mla	r3, r2, r6, r3
 8005966:	b289      	uxth	r1, r1
 8005968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800596c:	4285      	cmp	r5, r0
 800596e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005972:	f84c 1b04 	str.w	r1, [ip], #4
 8005976:	dcec      	bgt.n	8005952 <__multadd+0x12>
 8005978:	b30e      	cbz	r6, 80059be <__multadd+0x7e>
 800597a:	68a3      	ldr	r3, [r4, #8]
 800597c:	42ab      	cmp	r3, r5
 800597e:	dc19      	bgt.n	80059b4 <__multadd+0x74>
 8005980:	6861      	ldr	r1, [r4, #4]
 8005982:	4638      	mov	r0, r7
 8005984:	3101      	adds	r1, #1
 8005986:	f7ff ff79 	bl	800587c <_Balloc>
 800598a:	4680      	mov	r8, r0
 800598c:	b928      	cbnz	r0, 800599a <__multadd+0x5a>
 800598e:	4602      	mov	r2, r0
 8005990:	21b5      	movs	r1, #181	; 0xb5
 8005992:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <__multadd+0x84>)
 8005994:	480c      	ldr	r0, [pc, #48]	; (80059c8 <__multadd+0x88>)
 8005996:	f000 fbf3 	bl	8006180 <__assert_func>
 800599a:	6922      	ldr	r2, [r4, #16]
 800599c:	f104 010c 	add.w	r1, r4, #12
 80059a0:	3202      	adds	r2, #2
 80059a2:	0092      	lsls	r2, r2, #2
 80059a4:	300c      	adds	r0, #12
 80059a6:	f7ff ff5b 	bl	8005860 <memcpy>
 80059aa:	4621      	mov	r1, r4
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7ff ffa5 	bl	80058fc <_Bfree>
 80059b2:	4644      	mov	r4, r8
 80059b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059b8:	3501      	adds	r5, #1
 80059ba:	615e      	str	r6, [r3, #20]
 80059bc:	6125      	str	r5, [r4, #16]
 80059be:	4620      	mov	r0, r4
 80059c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c4:	080073a7 	.word	0x080073a7
 80059c8:	080073b8 	.word	0x080073b8

080059cc <__hi0bits>:
 80059cc:	0c02      	lsrs	r2, r0, #16
 80059ce:	0412      	lsls	r2, r2, #16
 80059d0:	4603      	mov	r3, r0
 80059d2:	b9ca      	cbnz	r2, 8005a08 <__hi0bits+0x3c>
 80059d4:	0403      	lsls	r3, r0, #16
 80059d6:	2010      	movs	r0, #16
 80059d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059dc:	bf04      	itt	eq
 80059de:	021b      	lsleq	r3, r3, #8
 80059e0:	3008      	addeq	r0, #8
 80059e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059e6:	bf04      	itt	eq
 80059e8:	011b      	lsleq	r3, r3, #4
 80059ea:	3004      	addeq	r0, #4
 80059ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059f0:	bf04      	itt	eq
 80059f2:	009b      	lsleq	r3, r3, #2
 80059f4:	3002      	addeq	r0, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	db05      	blt.n	8005a06 <__hi0bits+0x3a>
 80059fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80059fe:	f100 0001 	add.w	r0, r0, #1
 8005a02:	bf08      	it	eq
 8005a04:	2020      	moveq	r0, #32
 8005a06:	4770      	bx	lr
 8005a08:	2000      	movs	r0, #0
 8005a0a:	e7e5      	b.n	80059d8 <__hi0bits+0xc>

08005a0c <__lo0bits>:
 8005a0c:	6803      	ldr	r3, [r0, #0]
 8005a0e:	4602      	mov	r2, r0
 8005a10:	f013 0007 	ands.w	r0, r3, #7
 8005a14:	d00b      	beq.n	8005a2e <__lo0bits+0x22>
 8005a16:	07d9      	lsls	r1, r3, #31
 8005a18:	d421      	bmi.n	8005a5e <__lo0bits+0x52>
 8005a1a:	0798      	lsls	r0, r3, #30
 8005a1c:	bf49      	itett	mi
 8005a1e:	085b      	lsrmi	r3, r3, #1
 8005a20:	089b      	lsrpl	r3, r3, #2
 8005a22:	2001      	movmi	r0, #1
 8005a24:	6013      	strmi	r3, [r2, #0]
 8005a26:	bf5c      	itt	pl
 8005a28:	2002      	movpl	r0, #2
 8005a2a:	6013      	strpl	r3, [r2, #0]
 8005a2c:	4770      	bx	lr
 8005a2e:	b299      	uxth	r1, r3
 8005a30:	b909      	cbnz	r1, 8005a36 <__lo0bits+0x2a>
 8005a32:	2010      	movs	r0, #16
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	b2d9      	uxtb	r1, r3
 8005a38:	b909      	cbnz	r1, 8005a3e <__lo0bits+0x32>
 8005a3a:	3008      	adds	r0, #8
 8005a3c:	0a1b      	lsrs	r3, r3, #8
 8005a3e:	0719      	lsls	r1, r3, #28
 8005a40:	bf04      	itt	eq
 8005a42:	091b      	lsreq	r3, r3, #4
 8005a44:	3004      	addeq	r0, #4
 8005a46:	0799      	lsls	r1, r3, #30
 8005a48:	bf04      	itt	eq
 8005a4a:	089b      	lsreq	r3, r3, #2
 8005a4c:	3002      	addeq	r0, #2
 8005a4e:	07d9      	lsls	r1, r3, #31
 8005a50:	d403      	bmi.n	8005a5a <__lo0bits+0x4e>
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	f100 0001 	add.w	r0, r0, #1
 8005a58:	d003      	beq.n	8005a62 <__lo0bits+0x56>
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4770      	bx	lr
 8005a5e:	2000      	movs	r0, #0
 8005a60:	4770      	bx	lr
 8005a62:	2020      	movs	r0, #32
 8005a64:	4770      	bx	lr
	...

08005a68 <__i2b>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	f7ff ff05 	bl	800587c <_Balloc>
 8005a72:	4602      	mov	r2, r0
 8005a74:	b928      	cbnz	r0, 8005a82 <__i2b+0x1a>
 8005a76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a7a:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <__i2b+0x24>)
 8005a7c:	4804      	ldr	r0, [pc, #16]	; (8005a90 <__i2b+0x28>)
 8005a7e:	f000 fb7f 	bl	8006180 <__assert_func>
 8005a82:	2301      	movs	r3, #1
 8005a84:	6144      	str	r4, [r0, #20]
 8005a86:	6103      	str	r3, [r0, #16]
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	bf00      	nop
 8005a8c:	080073a7 	.word	0x080073a7
 8005a90:	080073b8 	.word	0x080073b8

08005a94 <__multiply>:
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	4691      	mov	r9, r2
 8005a9a:	690a      	ldr	r2, [r1, #16]
 8005a9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	bfbe      	ittt	lt
 8005aa6:	460b      	movlt	r3, r1
 8005aa8:	464c      	movlt	r4, r9
 8005aaa:	4699      	movlt	r9, r3
 8005aac:	6927      	ldr	r7, [r4, #16]
 8005aae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	6861      	ldr	r1, [r4, #4]
 8005ab6:	eb07 060a 	add.w	r6, r7, sl
 8005aba:	42b3      	cmp	r3, r6
 8005abc:	b085      	sub	sp, #20
 8005abe:	bfb8      	it	lt
 8005ac0:	3101      	addlt	r1, #1
 8005ac2:	f7ff fedb 	bl	800587c <_Balloc>
 8005ac6:	b930      	cbnz	r0, 8005ad6 <__multiply+0x42>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	f240 115d 	movw	r1, #349	; 0x15d
 8005ace:	4b43      	ldr	r3, [pc, #268]	; (8005bdc <__multiply+0x148>)
 8005ad0:	4843      	ldr	r0, [pc, #268]	; (8005be0 <__multiply+0x14c>)
 8005ad2:	f000 fb55 	bl	8006180 <__assert_func>
 8005ad6:	f100 0514 	add.w	r5, r0, #20
 8005ada:	462b      	mov	r3, r5
 8005adc:	2200      	movs	r2, #0
 8005ade:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ae2:	4543      	cmp	r3, r8
 8005ae4:	d321      	bcc.n	8005b2a <__multiply+0x96>
 8005ae6:	f104 0314 	add.w	r3, r4, #20
 8005aea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005aee:	f109 0314 	add.w	r3, r9, #20
 8005af2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005af6:	9202      	str	r2, [sp, #8]
 8005af8:	1b3a      	subs	r2, r7, r4
 8005afa:	3a15      	subs	r2, #21
 8005afc:	f022 0203 	bic.w	r2, r2, #3
 8005b00:	3204      	adds	r2, #4
 8005b02:	f104 0115 	add.w	r1, r4, #21
 8005b06:	428f      	cmp	r7, r1
 8005b08:	bf38      	it	cc
 8005b0a:	2204      	movcc	r2, #4
 8005b0c:	9201      	str	r2, [sp, #4]
 8005b0e:	9a02      	ldr	r2, [sp, #8]
 8005b10:	9303      	str	r3, [sp, #12]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d80c      	bhi.n	8005b30 <__multiply+0x9c>
 8005b16:	2e00      	cmp	r6, #0
 8005b18:	dd03      	ble.n	8005b22 <__multiply+0x8e>
 8005b1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d059      	beq.n	8005bd6 <__multiply+0x142>
 8005b22:	6106      	str	r6, [r0, #16]
 8005b24:	b005      	add	sp, #20
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	f843 2b04 	str.w	r2, [r3], #4
 8005b2e:	e7d8      	b.n	8005ae2 <__multiply+0x4e>
 8005b30:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b34:	f1ba 0f00 	cmp.w	sl, #0
 8005b38:	d023      	beq.n	8005b82 <__multiply+0xee>
 8005b3a:	46a9      	mov	r9, r5
 8005b3c:	f04f 0c00 	mov.w	ip, #0
 8005b40:	f104 0e14 	add.w	lr, r4, #20
 8005b44:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b48:	f8d9 1000 	ldr.w	r1, [r9]
 8005b4c:	fa1f fb82 	uxth.w	fp, r2
 8005b50:	b289      	uxth	r1, r1
 8005b52:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b56:	4461      	add	r1, ip
 8005b58:	f8d9 c000 	ldr.w	ip, [r9]
 8005b5c:	0c12      	lsrs	r2, r2, #16
 8005b5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b62:	fb0a c202 	mla	r2, sl, r2, ip
 8005b66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b6a:	b289      	uxth	r1, r1
 8005b6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b70:	4577      	cmp	r7, lr
 8005b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b76:	f849 1b04 	str.w	r1, [r9], #4
 8005b7a:	d8e3      	bhi.n	8005b44 <__multiply+0xb0>
 8005b7c:	9a01      	ldr	r2, [sp, #4]
 8005b7e:	f845 c002 	str.w	ip, [r5, r2]
 8005b82:	9a03      	ldr	r2, [sp, #12]
 8005b84:	3304      	adds	r3, #4
 8005b86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b8a:	f1b9 0f00 	cmp.w	r9, #0
 8005b8e:	d020      	beq.n	8005bd2 <__multiply+0x13e>
 8005b90:	46ae      	mov	lr, r5
 8005b92:	f04f 0a00 	mov.w	sl, #0
 8005b96:	6829      	ldr	r1, [r5, #0]
 8005b98:	f104 0c14 	add.w	ip, r4, #20
 8005b9c:	f8bc b000 	ldrh.w	fp, [ip]
 8005ba0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ba4:	b289      	uxth	r1, r1
 8005ba6:	fb09 220b 	mla	r2, r9, fp, r2
 8005baa:	4492      	add	sl, r2
 8005bac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005bb0:	f84e 1b04 	str.w	r1, [lr], #4
 8005bb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bb8:	f8be 1000 	ldrh.w	r1, [lr]
 8005bbc:	0c12      	lsrs	r2, r2, #16
 8005bbe:	fb09 1102 	mla	r1, r9, r2, r1
 8005bc2:	4567      	cmp	r7, ip
 8005bc4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005bc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bcc:	d8e6      	bhi.n	8005b9c <__multiply+0x108>
 8005bce:	9a01      	ldr	r2, [sp, #4]
 8005bd0:	50a9      	str	r1, [r5, r2]
 8005bd2:	3504      	adds	r5, #4
 8005bd4:	e79b      	b.n	8005b0e <__multiply+0x7a>
 8005bd6:	3e01      	subs	r6, #1
 8005bd8:	e79d      	b.n	8005b16 <__multiply+0x82>
 8005bda:	bf00      	nop
 8005bdc:	080073a7 	.word	0x080073a7
 8005be0:	080073b8 	.word	0x080073b8

08005be4 <__pow5mult>:
 8005be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be8:	4615      	mov	r5, r2
 8005bea:	f012 0203 	ands.w	r2, r2, #3
 8005bee:	4606      	mov	r6, r0
 8005bf0:	460f      	mov	r7, r1
 8005bf2:	d007      	beq.n	8005c04 <__pow5mult+0x20>
 8005bf4:	4c25      	ldr	r4, [pc, #148]	; (8005c8c <__pow5mult+0xa8>)
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bfe:	f7ff fe9f 	bl	8005940 <__multadd>
 8005c02:	4607      	mov	r7, r0
 8005c04:	10ad      	asrs	r5, r5, #2
 8005c06:	d03d      	beq.n	8005c84 <__pow5mult+0xa0>
 8005c08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c0a:	b97c      	cbnz	r4, 8005c2c <__pow5mult+0x48>
 8005c0c:	2010      	movs	r0, #16
 8005c0e:	f7ff fe11 	bl	8005834 <malloc>
 8005c12:	4602      	mov	r2, r0
 8005c14:	6270      	str	r0, [r6, #36]	; 0x24
 8005c16:	b928      	cbnz	r0, 8005c24 <__pow5mult+0x40>
 8005c18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c1c:	4b1c      	ldr	r3, [pc, #112]	; (8005c90 <__pow5mult+0xac>)
 8005c1e:	481d      	ldr	r0, [pc, #116]	; (8005c94 <__pow5mult+0xb0>)
 8005c20:	f000 faae 	bl	8006180 <__assert_func>
 8005c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c28:	6004      	str	r4, [r0, #0]
 8005c2a:	60c4      	str	r4, [r0, #12]
 8005c2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c34:	b94c      	cbnz	r4, 8005c4a <__pow5mult+0x66>
 8005c36:	f240 2171 	movw	r1, #625	; 0x271
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ff14 	bl	8005a68 <__i2b>
 8005c40:	2300      	movs	r3, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c48:	6003      	str	r3, [r0, #0]
 8005c4a:	f04f 0900 	mov.w	r9, #0
 8005c4e:	07eb      	lsls	r3, r5, #31
 8005c50:	d50a      	bpl.n	8005c68 <__pow5mult+0x84>
 8005c52:	4639      	mov	r1, r7
 8005c54:	4622      	mov	r2, r4
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff ff1c 	bl	8005a94 <__multiply>
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4639      	mov	r1, r7
 8005c60:	4630      	mov	r0, r6
 8005c62:	f7ff fe4b 	bl	80058fc <_Bfree>
 8005c66:	4647      	mov	r7, r8
 8005c68:	106d      	asrs	r5, r5, #1
 8005c6a:	d00b      	beq.n	8005c84 <__pow5mult+0xa0>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	b938      	cbnz	r0, 8005c80 <__pow5mult+0x9c>
 8005c70:	4622      	mov	r2, r4
 8005c72:	4621      	mov	r1, r4
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff ff0d 	bl	8005a94 <__multiply>
 8005c7a:	6020      	str	r0, [r4, #0]
 8005c7c:	f8c0 9000 	str.w	r9, [r0]
 8005c80:	4604      	mov	r4, r0
 8005c82:	e7e4      	b.n	8005c4e <__pow5mult+0x6a>
 8005c84:	4638      	mov	r0, r7
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08007508 	.word	0x08007508
 8005c90:	08007335 	.word	0x08007335
 8005c94:	080073b8 	.word	0x080073b8

08005c98 <__lshift>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	4691      	mov	r9, r2
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6849      	ldr	r1, [r1, #4]
 8005ca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005caa:	68a3      	ldr	r3, [r4, #8]
 8005cac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cb0:	f108 0601 	add.w	r6, r8, #1
 8005cb4:	42b3      	cmp	r3, r6
 8005cb6:	db0b      	blt.n	8005cd0 <__lshift+0x38>
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff fddf 	bl	800587c <_Balloc>
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	b948      	cbnz	r0, 8005cd6 <__lshift+0x3e>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cc8:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <__lshift+0xd8>)
 8005cca:	482a      	ldr	r0, [pc, #168]	; (8005d74 <__lshift+0xdc>)
 8005ccc:	f000 fa58 	bl	8006180 <__assert_func>
 8005cd0:	3101      	adds	r1, #1
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	e7ee      	b.n	8005cb4 <__lshift+0x1c>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f100 0114 	add.w	r1, r0, #20
 8005cdc:	f100 0210 	add.w	r2, r0, #16
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	4553      	cmp	r3, sl
 8005ce4:	db37      	blt.n	8005d56 <__lshift+0xbe>
 8005ce6:	6920      	ldr	r0, [r4, #16]
 8005ce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cec:	f104 0314 	add.w	r3, r4, #20
 8005cf0:	f019 091f 	ands.w	r9, r9, #31
 8005cf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cfc:	d02f      	beq.n	8005d5e <__lshift+0xc6>
 8005cfe:	468a      	mov	sl, r1
 8005d00:	f04f 0c00 	mov.w	ip, #0
 8005d04:	f1c9 0e20 	rsb	lr, r9, #32
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	fa02 f209 	lsl.w	r2, r2, r9
 8005d0e:	ea42 020c 	orr.w	r2, r2, ip
 8005d12:	f84a 2b04 	str.w	r2, [sl], #4
 8005d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1a:	4298      	cmp	r0, r3
 8005d1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d20:	d8f2      	bhi.n	8005d08 <__lshift+0x70>
 8005d22:	1b03      	subs	r3, r0, r4
 8005d24:	3b15      	subs	r3, #21
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	f104 0215 	add.w	r2, r4, #21
 8005d30:	4290      	cmp	r0, r2
 8005d32:	bf38      	it	cc
 8005d34:	2304      	movcc	r3, #4
 8005d36:	f841 c003 	str.w	ip, [r1, r3]
 8005d3a:	f1bc 0f00 	cmp.w	ip, #0
 8005d3e:	d001      	beq.n	8005d44 <__lshift+0xac>
 8005d40:	f108 0602 	add.w	r6, r8, #2
 8005d44:	3e01      	subs	r6, #1
 8005d46:	4638      	mov	r0, r7
 8005d48:	4621      	mov	r1, r4
 8005d4a:	612e      	str	r6, [r5, #16]
 8005d4c:	f7ff fdd6 	bl	80058fc <_Bfree>
 8005d50:	4628      	mov	r0, r5
 8005d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d56:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	e7c1      	b.n	8005ce2 <__lshift+0x4a>
 8005d5e:	3904      	subs	r1, #4
 8005d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d64:	4298      	cmp	r0, r3
 8005d66:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d6a:	d8f9      	bhi.n	8005d60 <__lshift+0xc8>
 8005d6c:	e7ea      	b.n	8005d44 <__lshift+0xac>
 8005d6e:	bf00      	nop
 8005d70:	080073a7 	.word	0x080073a7
 8005d74:	080073b8 	.word	0x080073b8

08005d78 <__mcmp>:
 8005d78:	4603      	mov	r3, r0
 8005d7a:	690a      	ldr	r2, [r1, #16]
 8005d7c:	6900      	ldr	r0, [r0, #16]
 8005d7e:	b530      	push	{r4, r5, lr}
 8005d80:	1a80      	subs	r0, r0, r2
 8005d82:	d10d      	bne.n	8005da0 <__mcmp+0x28>
 8005d84:	3314      	adds	r3, #20
 8005d86:	3114      	adds	r1, #20
 8005d88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d98:	4295      	cmp	r5, r2
 8005d9a:	d002      	beq.n	8005da2 <__mcmp+0x2a>
 8005d9c:	d304      	bcc.n	8005da8 <__mcmp+0x30>
 8005d9e:	2001      	movs	r0, #1
 8005da0:	bd30      	pop	{r4, r5, pc}
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	d3f4      	bcc.n	8005d90 <__mcmp+0x18>
 8005da6:	e7fb      	b.n	8005da0 <__mcmp+0x28>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dac:	e7f8      	b.n	8005da0 <__mcmp+0x28>
	...

08005db0 <__mdiff>:
 8005db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	460d      	mov	r5, r1
 8005db6:	4607      	mov	r7, r0
 8005db8:	4611      	mov	r1, r2
 8005dba:	4628      	mov	r0, r5
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	f7ff ffdb 	bl	8005d78 <__mcmp>
 8005dc2:	1e06      	subs	r6, r0, #0
 8005dc4:	d111      	bne.n	8005dea <__mdiff+0x3a>
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f7ff fd57 	bl	800587c <_Balloc>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	b928      	cbnz	r0, 8005dde <__mdiff+0x2e>
 8005dd2:	f240 2132 	movw	r1, #562	; 0x232
 8005dd6:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <__mdiff+0x110>)
 8005dd8:	483a      	ldr	r0, [pc, #232]	; (8005ec4 <__mdiff+0x114>)
 8005dda:	f000 f9d1 	bl	8006180 <__assert_func>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005de4:	4610      	mov	r0, r2
 8005de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	bfa4      	itt	ge
 8005dec:	4623      	movge	r3, r4
 8005dee:	462c      	movge	r4, r5
 8005df0:	4638      	mov	r0, r7
 8005df2:	6861      	ldr	r1, [r4, #4]
 8005df4:	bfa6      	itte	ge
 8005df6:	461d      	movge	r5, r3
 8005df8:	2600      	movge	r6, #0
 8005dfa:	2601      	movlt	r6, #1
 8005dfc:	f7ff fd3e 	bl	800587c <_Balloc>
 8005e00:	4602      	mov	r2, r0
 8005e02:	b918      	cbnz	r0, 8005e0c <__mdiff+0x5c>
 8005e04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e08:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <__mdiff+0x110>)
 8005e0a:	e7e5      	b.n	8005dd8 <__mdiff+0x28>
 8005e0c:	f102 0814 	add.w	r8, r2, #20
 8005e10:	46c2      	mov	sl, r8
 8005e12:	f04f 0c00 	mov.w	ip, #0
 8005e16:	6927      	ldr	r7, [r4, #16]
 8005e18:	60c6      	str	r6, [r0, #12]
 8005e1a:	692e      	ldr	r6, [r5, #16]
 8005e1c:	f104 0014 	add.w	r0, r4, #20
 8005e20:	f105 0914 	add.w	r9, r5, #20
 8005e24:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e2c:	3410      	adds	r4, #16
 8005e2e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e32:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e36:	fa1f f18b 	uxth.w	r1, fp
 8005e3a:	448c      	add	ip, r1
 8005e3c:	b299      	uxth	r1, r3
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	ebac 0101 	sub.w	r1, ip, r1
 8005e44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e48:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e4c:	b289      	uxth	r1, r1
 8005e4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e52:	454e      	cmp	r6, r9
 8005e54:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e58:	f84a 3b04 	str.w	r3, [sl], #4
 8005e5c:	d8e7      	bhi.n	8005e2e <__mdiff+0x7e>
 8005e5e:	1b73      	subs	r3, r6, r5
 8005e60:	3b15      	subs	r3, #21
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	3515      	adds	r5, #21
 8005e68:	3304      	adds	r3, #4
 8005e6a:	42ae      	cmp	r6, r5
 8005e6c:	bf38      	it	cc
 8005e6e:	2304      	movcc	r3, #4
 8005e70:	4418      	add	r0, r3
 8005e72:	4443      	add	r3, r8
 8005e74:	461e      	mov	r6, r3
 8005e76:	4605      	mov	r5, r0
 8005e78:	4575      	cmp	r5, lr
 8005e7a:	d30e      	bcc.n	8005e9a <__mdiff+0xea>
 8005e7c:	f10e 0103 	add.w	r1, lr, #3
 8005e80:	1a09      	subs	r1, r1, r0
 8005e82:	f021 0103 	bic.w	r1, r1, #3
 8005e86:	3803      	subs	r0, #3
 8005e88:	4586      	cmp	lr, r0
 8005e8a:	bf38      	it	cc
 8005e8c:	2100      	movcc	r1, #0
 8005e8e:	4419      	add	r1, r3
 8005e90:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e94:	b18b      	cbz	r3, 8005eba <__mdiff+0x10a>
 8005e96:	6117      	str	r7, [r2, #16]
 8005e98:	e7a4      	b.n	8005de4 <__mdiff+0x34>
 8005e9a:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e9e:	fa1f f188 	uxth.w	r1, r8
 8005ea2:	4461      	add	r1, ip
 8005ea4:	140c      	asrs	r4, r1, #16
 8005ea6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005eaa:	b289      	uxth	r1, r1
 8005eac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005eb0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005eb4:	f846 1b04 	str.w	r1, [r6], #4
 8005eb8:	e7de      	b.n	8005e78 <__mdiff+0xc8>
 8005eba:	3f01      	subs	r7, #1
 8005ebc:	e7e8      	b.n	8005e90 <__mdiff+0xe0>
 8005ebe:	bf00      	nop
 8005ec0:	080073a7 	.word	0x080073a7
 8005ec4:	080073b8 	.word	0x080073b8

08005ec8 <__d2b>:
 8005ec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ecc:	2101      	movs	r1, #1
 8005ece:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ed2:	4690      	mov	r8, r2
 8005ed4:	461d      	mov	r5, r3
 8005ed6:	f7ff fcd1 	bl	800587c <_Balloc>
 8005eda:	4604      	mov	r4, r0
 8005edc:	b930      	cbnz	r0, 8005eec <__d2b+0x24>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f240 310a 	movw	r1, #778	; 0x30a
 8005ee4:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <__d2b+0xb0>)
 8005ee6:	4825      	ldr	r0, [pc, #148]	; (8005f7c <__d2b+0xb4>)
 8005ee8:	f000 f94a 	bl	8006180 <__assert_func>
 8005eec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005ef0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005ef4:	bb2d      	cbnz	r5, 8005f42 <__d2b+0x7a>
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	f1b8 0300 	subs.w	r3, r8, #0
 8005efc:	d026      	beq.n	8005f4c <__d2b+0x84>
 8005efe:	4668      	mov	r0, sp
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	f7ff fd83 	bl	8005a0c <__lo0bits>
 8005f06:	9900      	ldr	r1, [sp, #0]
 8005f08:	b1f0      	cbz	r0, 8005f48 <__d2b+0x80>
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	f1c0 0320 	rsb	r3, r0, #32
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	430b      	orrs	r3, r1
 8005f16:	40c2      	lsrs	r2, r0
 8005f18:	6163      	str	r3, [r4, #20]
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9b01      	ldr	r3, [sp, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf14      	ite	ne
 8005f22:	2102      	movne	r1, #2
 8005f24:	2101      	moveq	r1, #1
 8005f26:	61a3      	str	r3, [r4, #24]
 8005f28:	6121      	str	r1, [r4, #16]
 8005f2a:	b1c5      	cbz	r5, 8005f5e <__d2b+0x96>
 8005f2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f30:	4405      	add	r5, r0
 8005f32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f36:	603d      	str	r5, [r7, #0]
 8005f38:	6030      	str	r0, [r6, #0]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	b002      	add	sp, #8
 8005f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f46:	e7d6      	b.n	8005ef6 <__d2b+0x2e>
 8005f48:	6161      	str	r1, [r4, #20]
 8005f4a:	e7e7      	b.n	8005f1c <__d2b+0x54>
 8005f4c:	a801      	add	r0, sp, #4
 8005f4e:	f7ff fd5d 	bl	8005a0c <__lo0bits>
 8005f52:	2101      	movs	r1, #1
 8005f54:	9b01      	ldr	r3, [sp, #4]
 8005f56:	6121      	str	r1, [r4, #16]
 8005f58:	6163      	str	r3, [r4, #20]
 8005f5a:	3020      	adds	r0, #32
 8005f5c:	e7e5      	b.n	8005f2a <__d2b+0x62>
 8005f5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005f62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f66:	6038      	str	r0, [r7, #0]
 8005f68:	6918      	ldr	r0, [r3, #16]
 8005f6a:	f7ff fd2f 	bl	80059cc <__hi0bits>
 8005f6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005f72:	6031      	str	r1, [r6, #0]
 8005f74:	e7e1      	b.n	8005f3a <__d2b+0x72>
 8005f76:	bf00      	nop
 8005f78:	080073a7 	.word	0x080073a7
 8005f7c:	080073b8 	.word	0x080073b8

08005f80 <_calloc_r>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	fba1 5402 	umull	r5, r4, r1, r2
 8005f86:	b934      	cbnz	r4, 8005f96 <_calloc_r+0x16>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f000 f875 	bl	8006078 <_malloc_r>
 8005f8e:	4606      	mov	r6, r0
 8005f90:	b928      	cbnz	r0, 8005f9e <_calloc_r+0x1e>
 8005f92:	4630      	mov	r0, r6
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
 8005f96:	220c      	movs	r2, #12
 8005f98:	2600      	movs	r6, #0
 8005f9a:	6002      	str	r2, [r0, #0]
 8005f9c:	e7f9      	b.n	8005f92 <_calloc_r+0x12>
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	f7fe f95f 	bl	8004264 <memset>
 8005fa6:	e7f4      	b.n	8005f92 <_calloc_r+0x12>

08005fa8 <_free_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4605      	mov	r5, r0
 8005fac:	2900      	cmp	r1, #0
 8005fae:	d040      	beq.n	8006032 <_free_r+0x8a>
 8005fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb4:	1f0c      	subs	r4, r1, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bfb8      	it	lt
 8005fba:	18e4      	addlt	r4, r4, r3
 8005fbc:	f000 f922 	bl	8006204 <__malloc_lock>
 8005fc0:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <_free_r+0x8c>)
 8005fc2:	6813      	ldr	r3, [r2, #0]
 8005fc4:	b933      	cbnz	r3, 8005fd4 <_free_r+0x2c>
 8005fc6:	6063      	str	r3, [r4, #4]
 8005fc8:	6014      	str	r4, [r2, #0]
 8005fca:	4628      	mov	r0, r5
 8005fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd0:	f000 b91e 	b.w	8006210 <__malloc_unlock>
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	d908      	bls.n	8005fea <_free_r+0x42>
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	1821      	adds	r1, r4, r0
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	bf01      	itttt	eq
 8005fe0:	6819      	ldreq	r1, [r3, #0]
 8005fe2:	685b      	ldreq	r3, [r3, #4]
 8005fe4:	1809      	addeq	r1, r1, r0
 8005fe6:	6021      	streq	r1, [r4, #0]
 8005fe8:	e7ed      	b.n	8005fc6 <_free_r+0x1e>
 8005fea:	461a      	mov	r2, r3
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	b10b      	cbz	r3, 8005ff4 <_free_r+0x4c>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d9fa      	bls.n	8005fea <_free_r+0x42>
 8005ff4:	6811      	ldr	r1, [r2, #0]
 8005ff6:	1850      	adds	r0, r2, r1
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d10b      	bne.n	8006014 <_free_r+0x6c>
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	4401      	add	r1, r0
 8006000:	1850      	adds	r0, r2, r1
 8006002:	4283      	cmp	r3, r0
 8006004:	6011      	str	r1, [r2, #0]
 8006006:	d1e0      	bne.n	8005fca <_free_r+0x22>
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	4401      	add	r1, r0
 800600e:	6011      	str	r1, [r2, #0]
 8006010:	6053      	str	r3, [r2, #4]
 8006012:	e7da      	b.n	8005fca <_free_r+0x22>
 8006014:	d902      	bls.n	800601c <_free_r+0x74>
 8006016:	230c      	movs	r3, #12
 8006018:	602b      	str	r3, [r5, #0]
 800601a:	e7d6      	b.n	8005fca <_free_r+0x22>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	1821      	adds	r1, r4, r0
 8006020:	428b      	cmp	r3, r1
 8006022:	bf01      	itttt	eq
 8006024:	6819      	ldreq	r1, [r3, #0]
 8006026:	685b      	ldreq	r3, [r3, #4]
 8006028:	1809      	addeq	r1, r1, r0
 800602a:	6021      	streq	r1, [r4, #0]
 800602c:	6063      	str	r3, [r4, #4]
 800602e:	6054      	str	r4, [r2, #4]
 8006030:	e7cb      	b.n	8005fca <_free_r+0x22>
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	20000378 	.word	0x20000378

08006038 <sbrk_aligned>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4e0e      	ldr	r6, [pc, #56]	; (8006074 <sbrk_aligned+0x3c>)
 800603c:	460c      	mov	r4, r1
 800603e:	6831      	ldr	r1, [r6, #0]
 8006040:	4605      	mov	r5, r0
 8006042:	b911      	cbnz	r1, 800604a <sbrk_aligned+0x12>
 8006044:	f000 f88c 	bl	8006160 <_sbrk_r>
 8006048:	6030      	str	r0, [r6, #0]
 800604a:	4621      	mov	r1, r4
 800604c:	4628      	mov	r0, r5
 800604e:	f000 f887 	bl	8006160 <_sbrk_r>
 8006052:	1c43      	adds	r3, r0, #1
 8006054:	d00a      	beq.n	800606c <sbrk_aligned+0x34>
 8006056:	1cc4      	adds	r4, r0, #3
 8006058:	f024 0403 	bic.w	r4, r4, #3
 800605c:	42a0      	cmp	r0, r4
 800605e:	d007      	beq.n	8006070 <sbrk_aligned+0x38>
 8006060:	1a21      	subs	r1, r4, r0
 8006062:	4628      	mov	r0, r5
 8006064:	f000 f87c 	bl	8006160 <_sbrk_r>
 8006068:	3001      	adds	r0, #1
 800606a:	d101      	bne.n	8006070 <sbrk_aligned+0x38>
 800606c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006070:	4620      	mov	r0, r4
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	2000037c 	.word	0x2000037c

08006078 <_malloc_r>:
 8006078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	1ccd      	adds	r5, r1, #3
 800607e:	f025 0503 	bic.w	r5, r5, #3
 8006082:	3508      	adds	r5, #8
 8006084:	2d0c      	cmp	r5, #12
 8006086:	bf38      	it	cc
 8006088:	250c      	movcc	r5, #12
 800608a:	2d00      	cmp	r5, #0
 800608c:	4607      	mov	r7, r0
 800608e:	db01      	blt.n	8006094 <_malloc_r+0x1c>
 8006090:	42a9      	cmp	r1, r5
 8006092:	d905      	bls.n	80060a0 <_malloc_r+0x28>
 8006094:	230c      	movs	r3, #12
 8006096:	2600      	movs	r6, #0
 8006098:	603b      	str	r3, [r7, #0]
 800609a:	4630      	mov	r0, r6
 800609c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a0:	4e2e      	ldr	r6, [pc, #184]	; (800615c <_malloc_r+0xe4>)
 80060a2:	f000 f8af 	bl	8006204 <__malloc_lock>
 80060a6:	6833      	ldr	r3, [r6, #0]
 80060a8:	461c      	mov	r4, r3
 80060aa:	bb34      	cbnz	r4, 80060fa <_malloc_r+0x82>
 80060ac:	4629      	mov	r1, r5
 80060ae:	4638      	mov	r0, r7
 80060b0:	f7ff ffc2 	bl	8006038 <sbrk_aligned>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	4604      	mov	r4, r0
 80060b8:	d14d      	bne.n	8006156 <_malloc_r+0xde>
 80060ba:	6834      	ldr	r4, [r6, #0]
 80060bc:	4626      	mov	r6, r4
 80060be:	2e00      	cmp	r6, #0
 80060c0:	d140      	bne.n	8006144 <_malloc_r+0xcc>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	4631      	mov	r1, r6
 80060c6:	4638      	mov	r0, r7
 80060c8:	eb04 0803 	add.w	r8, r4, r3
 80060cc:	f000 f848 	bl	8006160 <_sbrk_r>
 80060d0:	4580      	cmp	r8, r0
 80060d2:	d13a      	bne.n	800614a <_malloc_r+0xd2>
 80060d4:	6821      	ldr	r1, [r4, #0]
 80060d6:	3503      	adds	r5, #3
 80060d8:	1a6d      	subs	r5, r5, r1
 80060da:	f025 0503 	bic.w	r5, r5, #3
 80060de:	3508      	adds	r5, #8
 80060e0:	2d0c      	cmp	r5, #12
 80060e2:	bf38      	it	cc
 80060e4:	250c      	movcc	r5, #12
 80060e6:	4638      	mov	r0, r7
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7ff ffa5 	bl	8006038 <sbrk_aligned>
 80060ee:	3001      	adds	r0, #1
 80060f0:	d02b      	beq.n	800614a <_malloc_r+0xd2>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	442b      	add	r3, r5
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	e00e      	b.n	8006118 <_malloc_r+0xa0>
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	1b52      	subs	r2, r2, r5
 80060fe:	d41e      	bmi.n	800613e <_malloc_r+0xc6>
 8006100:	2a0b      	cmp	r2, #11
 8006102:	d916      	bls.n	8006132 <_malloc_r+0xba>
 8006104:	1961      	adds	r1, r4, r5
 8006106:	42a3      	cmp	r3, r4
 8006108:	6025      	str	r5, [r4, #0]
 800610a:	bf18      	it	ne
 800610c:	6059      	strne	r1, [r3, #4]
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	bf08      	it	eq
 8006112:	6031      	streq	r1, [r6, #0]
 8006114:	5162      	str	r2, [r4, r5]
 8006116:	604b      	str	r3, [r1, #4]
 8006118:	4638      	mov	r0, r7
 800611a:	f104 060b 	add.w	r6, r4, #11
 800611e:	f000 f877 	bl	8006210 <__malloc_unlock>
 8006122:	f026 0607 	bic.w	r6, r6, #7
 8006126:	1d23      	adds	r3, r4, #4
 8006128:	1af2      	subs	r2, r6, r3
 800612a:	d0b6      	beq.n	800609a <_malloc_r+0x22>
 800612c:	1b9b      	subs	r3, r3, r6
 800612e:	50a3      	str	r3, [r4, r2]
 8006130:	e7b3      	b.n	800609a <_malloc_r+0x22>
 8006132:	6862      	ldr	r2, [r4, #4]
 8006134:	42a3      	cmp	r3, r4
 8006136:	bf0c      	ite	eq
 8006138:	6032      	streq	r2, [r6, #0]
 800613a:	605a      	strne	r2, [r3, #4]
 800613c:	e7ec      	b.n	8006118 <_malloc_r+0xa0>
 800613e:	4623      	mov	r3, r4
 8006140:	6864      	ldr	r4, [r4, #4]
 8006142:	e7b2      	b.n	80060aa <_malloc_r+0x32>
 8006144:	4634      	mov	r4, r6
 8006146:	6876      	ldr	r6, [r6, #4]
 8006148:	e7b9      	b.n	80060be <_malloc_r+0x46>
 800614a:	230c      	movs	r3, #12
 800614c:	4638      	mov	r0, r7
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	f000 f85e 	bl	8006210 <__malloc_unlock>
 8006154:	e7a1      	b.n	800609a <_malloc_r+0x22>
 8006156:	6025      	str	r5, [r4, #0]
 8006158:	e7de      	b.n	8006118 <_malloc_r+0xa0>
 800615a:	bf00      	nop
 800615c:	20000378 	.word	0x20000378

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	2300      	movs	r3, #0
 8006164:	4d05      	ldr	r5, [pc, #20]	; (800617c <_sbrk_r+0x1c>)
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fb fe6a 	bl	8001e44 <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000380 	.word	0x20000380

08006180 <__assert_func>:
 8006180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006182:	4614      	mov	r4, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <__assert_func+0x2c>)
 8006188:	4605      	mov	r5, r0
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68d8      	ldr	r0, [r3, #12]
 800618e:	b14c      	cbz	r4, 80061a4 <__assert_func+0x24>
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <__assert_func+0x30>)
 8006192:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006196:	9100      	str	r1, [sp, #0]
 8006198:	462b      	mov	r3, r5
 800619a:	4906      	ldr	r1, [pc, #24]	; (80061b4 <__assert_func+0x34>)
 800619c:	f000 f80e 	bl	80061bc <fiprintf>
 80061a0:	f000 fa62 	bl	8006668 <abort>
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <__assert_func+0x38>)
 80061a6:	461c      	mov	r4, r3
 80061a8:	e7f3      	b.n	8006192 <__assert_func+0x12>
 80061aa:	bf00      	nop
 80061ac:	2000000c 	.word	0x2000000c
 80061b0:	08007514 	.word	0x08007514
 80061b4:	08007521 	.word	0x08007521
 80061b8:	0800754f 	.word	0x0800754f

080061bc <fiprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	b503      	push	{r0, r1, lr}
 80061c0:	4601      	mov	r1, r0
 80061c2:	ab03      	add	r3, sp, #12
 80061c4:	4805      	ldr	r0, [pc, #20]	; (80061dc <fiprintf+0x20>)
 80061c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	f000 f84d 	bl	800626c <_vfiprintf_r>
 80061d2:	b002      	add	sp, #8
 80061d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d8:	b003      	add	sp, #12
 80061da:	4770      	bx	lr
 80061dc:	2000000c 	.word	0x2000000c

080061e0 <__ascii_mbtowc>:
 80061e0:	b082      	sub	sp, #8
 80061e2:	b901      	cbnz	r1, 80061e6 <__ascii_mbtowc+0x6>
 80061e4:	a901      	add	r1, sp, #4
 80061e6:	b142      	cbz	r2, 80061fa <__ascii_mbtowc+0x1a>
 80061e8:	b14b      	cbz	r3, 80061fe <__ascii_mbtowc+0x1e>
 80061ea:	7813      	ldrb	r3, [r2, #0]
 80061ec:	600b      	str	r3, [r1, #0]
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	1e10      	subs	r0, r2, #0
 80061f2:	bf18      	it	ne
 80061f4:	2001      	movne	r0, #1
 80061f6:	b002      	add	sp, #8
 80061f8:	4770      	bx	lr
 80061fa:	4610      	mov	r0, r2
 80061fc:	e7fb      	b.n	80061f6 <__ascii_mbtowc+0x16>
 80061fe:	f06f 0001 	mvn.w	r0, #1
 8006202:	e7f8      	b.n	80061f6 <__ascii_mbtowc+0x16>

08006204 <__malloc_lock>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__malloc_lock+0x8>)
 8006206:	f000 bbeb 	b.w	80069e0 <__retarget_lock_acquire_recursive>
 800620a:	bf00      	nop
 800620c:	20000384 	.word	0x20000384

08006210 <__malloc_unlock>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__malloc_unlock+0x8>)
 8006212:	f000 bbe6 	b.w	80069e2 <__retarget_lock_release_recursive>
 8006216:	bf00      	nop
 8006218:	20000384 	.word	0x20000384

0800621c <__sfputc_r>:
 800621c:	6893      	ldr	r3, [r2, #8]
 800621e:	b410      	push	{r4}
 8006220:	3b01      	subs	r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	6093      	str	r3, [r2, #8]
 8006226:	da07      	bge.n	8006238 <__sfputc_r+0x1c>
 8006228:	6994      	ldr	r4, [r2, #24]
 800622a:	42a3      	cmp	r3, r4
 800622c:	db01      	blt.n	8006232 <__sfputc_r+0x16>
 800622e:	290a      	cmp	r1, #10
 8006230:	d102      	bne.n	8006238 <__sfputc_r+0x1c>
 8006232:	bc10      	pop	{r4}
 8006234:	f000 b94a 	b.w	80064cc <__swbuf_r>
 8006238:	6813      	ldr	r3, [r2, #0]
 800623a:	1c58      	adds	r0, r3, #1
 800623c:	6010      	str	r0, [r2, #0]
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	4608      	mov	r0, r1
 8006242:	bc10      	pop	{r4}
 8006244:	4770      	bx	lr

08006246 <__sfputs_r>:
 8006246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006248:	4606      	mov	r6, r0
 800624a:	460f      	mov	r7, r1
 800624c:	4614      	mov	r4, r2
 800624e:	18d5      	adds	r5, r2, r3
 8006250:	42ac      	cmp	r4, r5
 8006252:	d101      	bne.n	8006258 <__sfputs_r+0x12>
 8006254:	2000      	movs	r0, #0
 8006256:	e007      	b.n	8006268 <__sfputs_r+0x22>
 8006258:	463a      	mov	r2, r7
 800625a:	4630      	mov	r0, r6
 800625c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006260:	f7ff ffdc 	bl	800621c <__sfputc_r>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d1f3      	bne.n	8006250 <__sfputs_r+0xa>
 8006268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800626c <_vfiprintf_r>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	460d      	mov	r5, r1
 8006272:	4614      	mov	r4, r2
 8006274:	4698      	mov	r8, r3
 8006276:	4606      	mov	r6, r0
 8006278:	b09d      	sub	sp, #116	; 0x74
 800627a:	b118      	cbz	r0, 8006284 <_vfiprintf_r+0x18>
 800627c:	6983      	ldr	r3, [r0, #24]
 800627e:	b90b      	cbnz	r3, 8006284 <_vfiprintf_r+0x18>
 8006280:	f000 fb10 	bl	80068a4 <__sinit>
 8006284:	4b89      	ldr	r3, [pc, #548]	; (80064ac <_vfiprintf_r+0x240>)
 8006286:	429d      	cmp	r5, r3
 8006288:	d11b      	bne.n	80062c2 <_vfiprintf_r+0x56>
 800628a:	6875      	ldr	r5, [r6, #4]
 800628c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800628e:	07d9      	lsls	r1, r3, #31
 8006290:	d405      	bmi.n	800629e <_vfiprintf_r+0x32>
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	059a      	lsls	r2, r3, #22
 8006296:	d402      	bmi.n	800629e <_vfiprintf_r+0x32>
 8006298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800629a:	f000 fba1 	bl	80069e0 <__retarget_lock_acquire_recursive>
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	071b      	lsls	r3, r3, #28
 80062a2:	d501      	bpl.n	80062a8 <_vfiprintf_r+0x3c>
 80062a4:	692b      	ldr	r3, [r5, #16]
 80062a6:	b9eb      	cbnz	r3, 80062e4 <_vfiprintf_r+0x78>
 80062a8:	4629      	mov	r1, r5
 80062aa:	4630      	mov	r0, r6
 80062ac:	f000 f96e 	bl	800658c <__swsetup_r>
 80062b0:	b1c0      	cbz	r0, 80062e4 <_vfiprintf_r+0x78>
 80062b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062b4:	07dc      	lsls	r4, r3, #31
 80062b6:	d50e      	bpl.n	80062d6 <_vfiprintf_r+0x6a>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062bc:	b01d      	add	sp, #116	; 0x74
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	4b7b      	ldr	r3, [pc, #492]	; (80064b0 <_vfiprintf_r+0x244>)
 80062c4:	429d      	cmp	r5, r3
 80062c6:	d101      	bne.n	80062cc <_vfiprintf_r+0x60>
 80062c8:	68b5      	ldr	r5, [r6, #8]
 80062ca:	e7df      	b.n	800628c <_vfiprintf_r+0x20>
 80062cc:	4b79      	ldr	r3, [pc, #484]	; (80064b4 <_vfiprintf_r+0x248>)
 80062ce:	429d      	cmp	r5, r3
 80062d0:	bf08      	it	eq
 80062d2:	68f5      	ldreq	r5, [r6, #12]
 80062d4:	e7da      	b.n	800628c <_vfiprintf_r+0x20>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	0598      	lsls	r0, r3, #22
 80062da:	d4ed      	bmi.n	80062b8 <_vfiprintf_r+0x4c>
 80062dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062de:	f000 fb80 	bl	80069e2 <__retarget_lock_release_recursive>
 80062e2:	e7e9      	b.n	80062b8 <_vfiprintf_r+0x4c>
 80062e4:	2300      	movs	r3, #0
 80062e6:	9309      	str	r3, [sp, #36]	; 0x24
 80062e8:	2320      	movs	r3, #32
 80062ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062ee:	2330      	movs	r3, #48	; 0x30
 80062f0:	f04f 0901 	mov.w	r9, #1
 80062f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80064b8 <_vfiprintf_r+0x24c>
 80062fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006300:	4623      	mov	r3, r4
 8006302:	469a      	mov	sl, r3
 8006304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006308:	b10a      	cbz	r2, 800630e <_vfiprintf_r+0xa2>
 800630a:	2a25      	cmp	r2, #37	; 0x25
 800630c:	d1f9      	bne.n	8006302 <_vfiprintf_r+0x96>
 800630e:	ebba 0b04 	subs.w	fp, sl, r4
 8006312:	d00b      	beq.n	800632c <_vfiprintf_r+0xc0>
 8006314:	465b      	mov	r3, fp
 8006316:	4622      	mov	r2, r4
 8006318:	4629      	mov	r1, r5
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ff93 	bl	8006246 <__sfputs_r>
 8006320:	3001      	adds	r0, #1
 8006322:	f000 80aa 	beq.w	800647a <_vfiprintf_r+0x20e>
 8006326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006328:	445a      	add	r2, fp
 800632a:	9209      	str	r2, [sp, #36]	; 0x24
 800632c:	f89a 3000 	ldrb.w	r3, [sl]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80a2 	beq.w	800647a <_vfiprintf_r+0x20e>
 8006336:	2300      	movs	r3, #0
 8006338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800633c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006340:	f10a 0a01 	add.w	sl, sl, #1
 8006344:	9304      	str	r3, [sp, #16]
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800634c:	931a      	str	r3, [sp, #104]	; 0x68
 800634e:	4654      	mov	r4, sl
 8006350:	2205      	movs	r2, #5
 8006352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006356:	4858      	ldr	r0, [pc, #352]	; (80064b8 <_vfiprintf_r+0x24c>)
 8006358:	f7ff fa74 	bl	8005844 <memchr>
 800635c:	9a04      	ldr	r2, [sp, #16]
 800635e:	b9d8      	cbnz	r0, 8006398 <_vfiprintf_r+0x12c>
 8006360:	06d1      	lsls	r1, r2, #27
 8006362:	bf44      	itt	mi
 8006364:	2320      	movmi	r3, #32
 8006366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800636a:	0713      	lsls	r3, r2, #28
 800636c:	bf44      	itt	mi
 800636e:	232b      	movmi	r3, #43	; 0x2b
 8006370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006374:	f89a 3000 	ldrb.w	r3, [sl]
 8006378:	2b2a      	cmp	r3, #42	; 0x2a
 800637a:	d015      	beq.n	80063a8 <_vfiprintf_r+0x13c>
 800637c:	4654      	mov	r4, sl
 800637e:	2000      	movs	r0, #0
 8006380:	f04f 0c0a 	mov.w	ip, #10
 8006384:	9a07      	ldr	r2, [sp, #28]
 8006386:	4621      	mov	r1, r4
 8006388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800638c:	3b30      	subs	r3, #48	; 0x30
 800638e:	2b09      	cmp	r3, #9
 8006390:	d94e      	bls.n	8006430 <_vfiprintf_r+0x1c4>
 8006392:	b1b0      	cbz	r0, 80063c2 <_vfiprintf_r+0x156>
 8006394:	9207      	str	r2, [sp, #28]
 8006396:	e014      	b.n	80063c2 <_vfiprintf_r+0x156>
 8006398:	eba0 0308 	sub.w	r3, r0, r8
 800639c:	fa09 f303 	lsl.w	r3, r9, r3
 80063a0:	4313      	orrs	r3, r2
 80063a2:	46a2      	mov	sl, r4
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	e7d2      	b.n	800634e <_vfiprintf_r+0xe2>
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	1d19      	adds	r1, r3, #4
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	9103      	str	r1, [sp, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bfbb      	ittet	lt
 80063b4:	425b      	neglt	r3, r3
 80063b6:	f042 0202 	orrlt.w	r2, r2, #2
 80063ba:	9307      	strge	r3, [sp, #28]
 80063bc:	9307      	strlt	r3, [sp, #28]
 80063be:	bfb8      	it	lt
 80063c0:	9204      	strlt	r2, [sp, #16]
 80063c2:	7823      	ldrb	r3, [r4, #0]
 80063c4:	2b2e      	cmp	r3, #46	; 0x2e
 80063c6:	d10c      	bne.n	80063e2 <_vfiprintf_r+0x176>
 80063c8:	7863      	ldrb	r3, [r4, #1]
 80063ca:	2b2a      	cmp	r3, #42	; 0x2a
 80063cc:	d135      	bne.n	800643a <_vfiprintf_r+0x1ce>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	3402      	adds	r4, #2
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	9203      	str	r2, [sp, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfb8      	it	lt
 80063dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063e0:	9305      	str	r3, [sp, #20]
 80063e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80064bc <_vfiprintf_r+0x250>
 80063e6:	2203      	movs	r2, #3
 80063e8:	4650      	mov	r0, sl
 80063ea:	7821      	ldrb	r1, [r4, #0]
 80063ec:	f7ff fa2a 	bl	8005844 <memchr>
 80063f0:	b140      	cbz	r0, 8006404 <_vfiprintf_r+0x198>
 80063f2:	2340      	movs	r3, #64	; 0x40
 80063f4:	eba0 000a 	sub.w	r0, r0, sl
 80063f8:	fa03 f000 	lsl.w	r0, r3, r0
 80063fc:	9b04      	ldr	r3, [sp, #16]
 80063fe:	3401      	adds	r4, #1
 8006400:	4303      	orrs	r3, r0
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006408:	2206      	movs	r2, #6
 800640a:	482d      	ldr	r0, [pc, #180]	; (80064c0 <_vfiprintf_r+0x254>)
 800640c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006410:	f7ff fa18 	bl	8005844 <memchr>
 8006414:	2800      	cmp	r0, #0
 8006416:	d03f      	beq.n	8006498 <_vfiprintf_r+0x22c>
 8006418:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <_vfiprintf_r+0x258>)
 800641a:	bb1b      	cbnz	r3, 8006464 <_vfiprintf_r+0x1f8>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	3307      	adds	r3, #7
 8006420:	f023 0307 	bic.w	r3, r3, #7
 8006424:	3308      	adds	r3, #8
 8006426:	9303      	str	r3, [sp, #12]
 8006428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642a:	443b      	add	r3, r7
 800642c:	9309      	str	r3, [sp, #36]	; 0x24
 800642e:	e767      	b.n	8006300 <_vfiprintf_r+0x94>
 8006430:	460c      	mov	r4, r1
 8006432:	2001      	movs	r0, #1
 8006434:	fb0c 3202 	mla	r2, ip, r2, r3
 8006438:	e7a5      	b.n	8006386 <_vfiprintf_r+0x11a>
 800643a:	2300      	movs	r3, #0
 800643c:	f04f 0c0a 	mov.w	ip, #10
 8006440:	4619      	mov	r1, r3
 8006442:	3401      	adds	r4, #1
 8006444:	9305      	str	r3, [sp, #20]
 8006446:	4620      	mov	r0, r4
 8006448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800644c:	3a30      	subs	r2, #48	; 0x30
 800644e:	2a09      	cmp	r2, #9
 8006450:	d903      	bls.n	800645a <_vfiprintf_r+0x1ee>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0c5      	beq.n	80063e2 <_vfiprintf_r+0x176>
 8006456:	9105      	str	r1, [sp, #20]
 8006458:	e7c3      	b.n	80063e2 <_vfiprintf_r+0x176>
 800645a:	4604      	mov	r4, r0
 800645c:	2301      	movs	r3, #1
 800645e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006462:	e7f0      	b.n	8006446 <_vfiprintf_r+0x1da>
 8006464:	ab03      	add	r3, sp, #12
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	462a      	mov	r2, r5
 800646a:	4630      	mov	r0, r6
 800646c:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <_vfiprintf_r+0x25c>)
 800646e:	a904      	add	r1, sp, #16
 8006470:	f7fd ff9e 	bl	80043b0 <_printf_float>
 8006474:	4607      	mov	r7, r0
 8006476:	1c78      	adds	r0, r7, #1
 8006478:	d1d6      	bne.n	8006428 <_vfiprintf_r+0x1bc>
 800647a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800647c:	07d9      	lsls	r1, r3, #31
 800647e:	d405      	bmi.n	800648c <_vfiprintf_r+0x220>
 8006480:	89ab      	ldrh	r3, [r5, #12]
 8006482:	059a      	lsls	r2, r3, #22
 8006484:	d402      	bmi.n	800648c <_vfiprintf_r+0x220>
 8006486:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006488:	f000 faab 	bl	80069e2 <__retarget_lock_release_recursive>
 800648c:	89ab      	ldrh	r3, [r5, #12]
 800648e:	065b      	lsls	r3, r3, #25
 8006490:	f53f af12 	bmi.w	80062b8 <_vfiprintf_r+0x4c>
 8006494:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006496:	e711      	b.n	80062bc <_vfiprintf_r+0x50>
 8006498:	ab03      	add	r3, sp, #12
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	462a      	mov	r2, r5
 800649e:	4630      	mov	r0, r6
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <_vfiprintf_r+0x25c>)
 80064a2:	a904      	add	r1, sp, #16
 80064a4:	f7fe fa20 	bl	80048e8 <_printf_i>
 80064a8:	e7e4      	b.n	8006474 <_vfiprintf_r+0x208>
 80064aa:	bf00      	nop
 80064ac:	0800768c 	.word	0x0800768c
 80064b0:	080076ac 	.word	0x080076ac
 80064b4:	0800766c 	.word	0x0800766c
 80064b8:	0800755a 	.word	0x0800755a
 80064bc:	08007560 	.word	0x08007560
 80064c0:	08007564 	.word	0x08007564
 80064c4:	080043b1 	.word	0x080043b1
 80064c8:	08006247 	.word	0x08006247

080064cc <__swbuf_r>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	460e      	mov	r6, r1
 80064d0:	4614      	mov	r4, r2
 80064d2:	4605      	mov	r5, r0
 80064d4:	b118      	cbz	r0, 80064de <__swbuf_r+0x12>
 80064d6:	6983      	ldr	r3, [r0, #24]
 80064d8:	b90b      	cbnz	r3, 80064de <__swbuf_r+0x12>
 80064da:	f000 f9e3 	bl	80068a4 <__sinit>
 80064de:	4b21      	ldr	r3, [pc, #132]	; (8006564 <__swbuf_r+0x98>)
 80064e0:	429c      	cmp	r4, r3
 80064e2:	d12b      	bne.n	800653c <__swbuf_r+0x70>
 80064e4:	686c      	ldr	r4, [r5, #4]
 80064e6:	69a3      	ldr	r3, [r4, #24]
 80064e8:	60a3      	str	r3, [r4, #8]
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	071a      	lsls	r2, r3, #28
 80064ee:	d52f      	bpl.n	8006550 <__swbuf_r+0x84>
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	b36b      	cbz	r3, 8006550 <__swbuf_r+0x84>
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	6820      	ldr	r0, [r4, #0]
 80064f8:	b2f6      	uxtb	r6, r6
 80064fa:	1ac0      	subs	r0, r0, r3
 80064fc:	6963      	ldr	r3, [r4, #20]
 80064fe:	4637      	mov	r7, r6
 8006500:	4283      	cmp	r3, r0
 8006502:	dc04      	bgt.n	800650e <__swbuf_r+0x42>
 8006504:	4621      	mov	r1, r4
 8006506:	4628      	mov	r0, r5
 8006508:	f000 f938 	bl	800677c <_fflush_r>
 800650c:	bb30      	cbnz	r0, 800655c <__swbuf_r+0x90>
 800650e:	68a3      	ldr	r3, [r4, #8]
 8006510:	3001      	adds	r0, #1
 8006512:	3b01      	subs	r3, #1
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	6022      	str	r2, [r4, #0]
 800651c:	701e      	strb	r6, [r3, #0]
 800651e:	6963      	ldr	r3, [r4, #20]
 8006520:	4283      	cmp	r3, r0
 8006522:	d004      	beq.n	800652e <__swbuf_r+0x62>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	07db      	lsls	r3, r3, #31
 8006528:	d506      	bpl.n	8006538 <__swbuf_r+0x6c>
 800652a:	2e0a      	cmp	r6, #10
 800652c:	d104      	bne.n	8006538 <__swbuf_r+0x6c>
 800652e:	4621      	mov	r1, r4
 8006530:	4628      	mov	r0, r5
 8006532:	f000 f923 	bl	800677c <_fflush_r>
 8006536:	b988      	cbnz	r0, 800655c <__swbuf_r+0x90>
 8006538:	4638      	mov	r0, r7
 800653a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <__swbuf_r+0x9c>)
 800653e:	429c      	cmp	r4, r3
 8006540:	d101      	bne.n	8006546 <__swbuf_r+0x7a>
 8006542:	68ac      	ldr	r4, [r5, #8]
 8006544:	e7cf      	b.n	80064e6 <__swbuf_r+0x1a>
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <__swbuf_r+0xa0>)
 8006548:	429c      	cmp	r4, r3
 800654a:	bf08      	it	eq
 800654c:	68ec      	ldreq	r4, [r5, #12]
 800654e:	e7ca      	b.n	80064e6 <__swbuf_r+0x1a>
 8006550:	4621      	mov	r1, r4
 8006552:	4628      	mov	r0, r5
 8006554:	f000 f81a 	bl	800658c <__swsetup_r>
 8006558:	2800      	cmp	r0, #0
 800655a:	d0cb      	beq.n	80064f4 <__swbuf_r+0x28>
 800655c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006560:	e7ea      	b.n	8006538 <__swbuf_r+0x6c>
 8006562:	bf00      	nop
 8006564:	0800768c 	.word	0x0800768c
 8006568:	080076ac 	.word	0x080076ac
 800656c:	0800766c 	.word	0x0800766c

08006570 <__ascii_wctomb>:
 8006570:	4603      	mov	r3, r0
 8006572:	4608      	mov	r0, r1
 8006574:	b141      	cbz	r1, 8006588 <__ascii_wctomb+0x18>
 8006576:	2aff      	cmp	r2, #255	; 0xff
 8006578:	d904      	bls.n	8006584 <__ascii_wctomb+0x14>
 800657a:	228a      	movs	r2, #138	; 0x8a
 800657c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	4770      	bx	lr
 8006584:	2001      	movs	r0, #1
 8006586:	700a      	strb	r2, [r1, #0]
 8006588:	4770      	bx	lr
	...

0800658c <__swsetup_r>:
 800658c:	4b32      	ldr	r3, [pc, #200]	; (8006658 <__swsetup_r+0xcc>)
 800658e:	b570      	push	{r4, r5, r6, lr}
 8006590:	681d      	ldr	r5, [r3, #0]
 8006592:	4606      	mov	r6, r0
 8006594:	460c      	mov	r4, r1
 8006596:	b125      	cbz	r5, 80065a2 <__swsetup_r+0x16>
 8006598:	69ab      	ldr	r3, [r5, #24]
 800659a:	b913      	cbnz	r3, 80065a2 <__swsetup_r+0x16>
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f981 	bl	80068a4 <__sinit>
 80065a2:	4b2e      	ldr	r3, [pc, #184]	; (800665c <__swsetup_r+0xd0>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	d10f      	bne.n	80065c8 <__swsetup_r+0x3c>
 80065a8:	686c      	ldr	r4, [r5, #4]
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065b0:	0719      	lsls	r1, r3, #28
 80065b2:	d42c      	bmi.n	800660e <__swsetup_r+0x82>
 80065b4:	06dd      	lsls	r5, r3, #27
 80065b6:	d411      	bmi.n	80065dc <__swsetup_r+0x50>
 80065b8:	2309      	movs	r3, #9
 80065ba:	6033      	str	r3, [r6, #0]
 80065bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065c4:	81a3      	strh	r3, [r4, #12]
 80065c6:	e03e      	b.n	8006646 <__swsetup_r+0xba>
 80065c8:	4b25      	ldr	r3, [pc, #148]	; (8006660 <__swsetup_r+0xd4>)
 80065ca:	429c      	cmp	r4, r3
 80065cc:	d101      	bne.n	80065d2 <__swsetup_r+0x46>
 80065ce:	68ac      	ldr	r4, [r5, #8]
 80065d0:	e7eb      	b.n	80065aa <__swsetup_r+0x1e>
 80065d2:	4b24      	ldr	r3, [pc, #144]	; (8006664 <__swsetup_r+0xd8>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	bf08      	it	eq
 80065d8:	68ec      	ldreq	r4, [r5, #12]
 80065da:	e7e6      	b.n	80065aa <__swsetup_r+0x1e>
 80065dc:	0758      	lsls	r0, r3, #29
 80065de:	d512      	bpl.n	8006606 <__swsetup_r+0x7a>
 80065e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065e2:	b141      	cbz	r1, 80065f6 <__swsetup_r+0x6a>
 80065e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065e8:	4299      	cmp	r1, r3
 80065ea:	d002      	beq.n	80065f2 <__swsetup_r+0x66>
 80065ec:	4630      	mov	r0, r6
 80065ee:	f7ff fcdb 	bl	8005fa8 <_free_r>
 80065f2:	2300      	movs	r3, #0
 80065f4:	6363      	str	r3, [r4, #52]	; 0x34
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	2300      	movs	r3, #0
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f043 0308 	orr.w	r3, r3, #8
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	b94b      	cbnz	r3, 8006626 <__swsetup_r+0x9a>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661c:	d003      	beq.n	8006626 <__swsetup_r+0x9a>
 800661e:	4621      	mov	r1, r4
 8006620:	4630      	mov	r0, r6
 8006622:	f000 fa05 	bl	8006a30 <__smakebuf_r>
 8006626:	89a0      	ldrh	r0, [r4, #12]
 8006628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800662c:	f010 0301 	ands.w	r3, r0, #1
 8006630:	d00a      	beq.n	8006648 <__swsetup_r+0xbc>
 8006632:	2300      	movs	r3, #0
 8006634:	60a3      	str	r3, [r4, #8]
 8006636:	6963      	ldr	r3, [r4, #20]
 8006638:	425b      	negs	r3, r3
 800663a:	61a3      	str	r3, [r4, #24]
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	b943      	cbnz	r3, 8006652 <__swsetup_r+0xc6>
 8006640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006644:	d1ba      	bne.n	80065bc <__swsetup_r+0x30>
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	0781      	lsls	r1, r0, #30
 800664a:	bf58      	it	pl
 800664c:	6963      	ldrpl	r3, [r4, #20]
 800664e:	60a3      	str	r3, [r4, #8]
 8006650:	e7f4      	b.n	800663c <__swsetup_r+0xb0>
 8006652:	2000      	movs	r0, #0
 8006654:	e7f7      	b.n	8006646 <__swsetup_r+0xba>
 8006656:	bf00      	nop
 8006658:	2000000c 	.word	0x2000000c
 800665c:	0800768c 	.word	0x0800768c
 8006660:	080076ac 	.word	0x080076ac
 8006664:	0800766c 	.word	0x0800766c

08006668 <abort>:
 8006668:	2006      	movs	r0, #6
 800666a:	b508      	push	{r3, lr}
 800666c:	f000 fa48 	bl	8006b00 <raise>
 8006670:	2001      	movs	r0, #1
 8006672:	f7fb fb74 	bl	8001d5e <_exit>
	...

08006678 <__sflush_r>:
 8006678:	898a      	ldrh	r2, [r1, #12]
 800667a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667c:	4605      	mov	r5, r0
 800667e:	0710      	lsls	r0, r2, #28
 8006680:	460c      	mov	r4, r1
 8006682:	d457      	bmi.n	8006734 <__sflush_r+0xbc>
 8006684:	684b      	ldr	r3, [r1, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	dc04      	bgt.n	8006694 <__sflush_r+0x1c>
 800668a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	dc01      	bgt.n	8006694 <__sflush_r+0x1c>
 8006690:	2000      	movs	r0, #0
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006696:	2e00      	cmp	r6, #0
 8006698:	d0fa      	beq.n	8006690 <__sflush_r+0x18>
 800669a:	2300      	movs	r3, #0
 800669c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066a0:	682f      	ldr	r7, [r5, #0]
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	d032      	beq.n	800670c <__sflush_r+0x94>
 80066a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	075a      	lsls	r2, r3, #29
 80066ac:	d505      	bpl.n	80066ba <__sflush_r+0x42>
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	1ac0      	subs	r0, r0, r3
 80066b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066b4:	b10b      	cbz	r3, 80066ba <__sflush_r+0x42>
 80066b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066b8:	1ac0      	subs	r0, r0, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	4602      	mov	r2, r0
 80066be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066c0:	4628      	mov	r0, r5
 80066c2:	6a21      	ldr	r1, [r4, #32]
 80066c4:	47b0      	blx	r6
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	d106      	bne.n	80066da <__sflush_r+0x62>
 80066cc:	6829      	ldr	r1, [r5, #0]
 80066ce:	291d      	cmp	r1, #29
 80066d0:	d82c      	bhi.n	800672c <__sflush_r+0xb4>
 80066d2:	4a29      	ldr	r2, [pc, #164]	; (8006778 <__sflush_r+0x100>)
 80066d4:	40ca      	lsrs	r2, r1
 80066d6:	07d6      	lsls	r6, r2, #31
 80066d8:	d528      	bpl.n	800672c <__sflush_r+0xb4>
 80066da:	2200      	movs	r2, #0
 80066dc:	6062      	str	r2, [r4, #4]
 80066de:	6922      	ldr	r2, [r4, #16]
 80066e0:	04d9      	lsls	r1, r3, #19
 80066e2:	6022      	str	r2, [r4, #0]
 80066e4:	d504      	bpl.n	80066f0 <__sflush_r+0x78>
 80066e6:	1c42      	adds	r2, r0, #1
 80066e8:	d101      	bne.n	80066ee <__sflush_r+0x76>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	b903      	cbnz	r3, 80066f0 <__sflush_r+0x78>
 80066ee:	6560      	str	r0, [r4, #84]	; 0x54
 80066f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f2:	602f      	str	r7, [r5, #0]
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d0cb      	beq.n	8006690 <__sflush_r+0x18>
 80066f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d002      	beq.n	8006706 <__sflush_r+0x8e>
 8006700:	4628      	mov	r0, r5
 8006702:	f7ff fc51 	bl	8005fa8 <_free_r>
 8006706:	2000      	movs	r0, #0
 8006708:	6360      	str	r0, [r4, #52]	; 0x34
 800670a:	e7c2      	b.n	8006692 <__sflush_r+0x1a>
 800670c:	6a21      	ldr	r1, [r4, #32]
 800670e:	2301      	movs	r3, #1
 8006710:	4628      	mov	r0, r5
 8006712:	47b0      	blx	r6
 8006714:	1c41      	adds	r1, r0, #1
 8006716:	d1c7      	bne.n	80066a8 <__sflush_r+0x30>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0c4      	beq.n	80066a8 <__sflush_r+0x30>
 800671e:	2b1d      	cmp	r3, #29
 8006720:	d001      	beq.n	8006726 <__sflush_r+0xae>
 8006722:	2b16      	cmp	r3, #22
 8006724:	d101      	bne.n	800672a <__sflush_r+0xb2>
 8006726:	602f      	str	r7, [r5, #0]
 8006728:	e7b2      	b.n	8006690 <__sflush_r+0x18>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	e7ae      	b.n	8006692 <__sflush_r+0x1a>
 8006734:	690f      	ldr	r7, [r1, #16]
 8006736:	2f00      	cmp	r7, #0
 8006738:	d0aa      	beq.n	8006690 <__sflush_r+0x18>
 800673a:	0793      	lsls	r3, r2, #30
 800673c:	bf18      	it	ne
 800673e:	2300      	movne	r3, #0
 8006740:	680e      	ldr	r6, [r1, #0]
 8006742:	bf08      	it	eq
 8006744:	694b      	ldreq	r3, [r1, #20]
 8006746:	1bf6      	subs	r6, r6, r7
 8006748:	600f      	str	r7, [r1, #0]
 800674a:	608b      	str	r3, [r1, #8]
 800674c:	2e00      	cmp	r6, #0
 800674e:	dd9f      	ble.n	8006690 <__sflush_r+0x18>
 8006750:	4633      	mov	r3, r6
 8006752:	463a      	mov	r2, r7
 8006754:	4628      	mov	r0, r5
 8006756:	6a21      	ldr	r1, [r4, #32]
 8006758:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800675c:	47e0      	blx	ip
 800675e:	2800      	cmp	r0, #0
 8006760:	dc06      	bgt.n	8006770 <__sflush_r+0xf8>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676c:	81a3      	strh	r3, [r4, #12]
 800676e:	e790      	b.n	8006692 <__sflush_r+0x1a>
 8006770:	4407      	add	r7, r0
 8006772:	1a36      	subs	r6, r6, r0
 8006774:	e7ea      	b.n	800674c <__sflush_r+0xd4>
 8006776:	bf00      	nop
 8006778:	20400001 	.word	0x20400001

0800677c <_fflush_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	690b      	ldr	r3, [r1, #16]
 8006780:	4605      	mov	r5, r0
 8006782:	460c      	mov	r4, r1
 8006784:	b913      	cbnz	r3, 800678c <_fflush_r+0x10>
 8006786:	2500      	movs	r5, #0
 8006788:	4628      	mov	r0, r5
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	b118      	cbz	r0, 8006796 <_fflush_r+0x1a>
 800678e:	6983      	ldr	r3, [r0, #24]
 8006790:	b90b      	cbnz	r3, 8006796 <_fflush_r+0x1a>
 8006792:	f000 f887 	bl	80068a4 <__sinit>
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <_fflush_r+0x6c>)
 8006798:	429c      	cmp	r4, r3
 800679a:	d11b      	bne.n	80067d4 <_fflush_r+0x58>
 800679c:	686c      	ldr	r4, [r5, #4]
 800679e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0ef      	beq.n	8006786 <_fflush_r+0xa>
 80067a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067a8:	07d0      	lsls	r0, r2, #31
 80067aa:	d404      	bmi.n	80067b6 <_fflush_r+0x3a>
 80067ac:	0599      	lsls	r1, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_fflush_r+0x3a>
 80067b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b2:	f000 f915 	bl	80069e0 <__retarget_lock_acquire_recursive>
 80067b6:	4628      	mov	r0, r5
 80067b8:	4621      	mov	r1, r4
 80067ba:	f7ff ff5d 	bl	8006678 <__sflush_r>
 80067be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067c0:	4605      	mov	r5, r0
 80067c2:	07da      	lsls	r2, r3, #31
 80067c4:	d4e0      	bmi.n	8006788 <_fflush_r+0xc>
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	059b      	lsls	r3, r3, #22
 80067ca:	d4dd      	bmi.n	8006788 <_fflush_r+0xc>
 80067cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ce:	f000 f908 	bl	80069e2 <__retarget_lock_release_recursive>
 80067d2:	e7d9      	b.n	8006788 <_fflush_r+0xc>
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <_fflush_r+0x70>)
 80067d6:	429c      	cmp	r4, r3
 80067d8:	d101      	bne.n	80067de <_fflush_r+0x62>
 80067da:	68ac      	ldr	r4, [r5, #8]
 80067dc:	e7df      	b.n	800679e <_fflush_r+0x22>
 80067de:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <_fflush_r+0x74>)
 80067e0:	429c      	cmp	r4, r3
 80067e2:	bf08      	it	eq
 80067e4:	68ec      	ldreq	r4, [r5, #12]
 80067e6:	e7da      	b.n	800679e <_fflush_r+0x22>
 80067e8:	0800768c 	.word	0x0800768c
 80067ec:	080076ac 	.word	0x080076ac
 80067f0:	0800766c 	.word	0x0800766c

080067f4 <std>:
 80067f4:	2300      	movs	r3, #0
 80067f6:	b510      	push	{r4, lr}
 80067f8:	4604      	mov	r4, r0
 80067fa:	e9c0 3300 	strd	r3, r3, [r0]
 80067fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006802:	6083      	str	r3, [r0, #8]
 8006804:	8181      	strh	r1, [r0, #12]
 8006806:	6643      	str	r3, [r0, #100]	; 0x64
 8006808:	81c2      	strh	r2, [r0, #14]
 800680a:	6183      	str	r3, [r0, #24]
 800680c:	4619      	mov	r1, r3
 800680e:	2208      	movs	r2, #8
 8006810:	305c      	adds	r0, #92	; 0x5c
 8006812:	f7fd fd27 	bl	8004264 <memset>
 8006816:	4b05      	ldr	r3, [pc, #20]	; (800682c <std+0x38>)
 8006818:	6224      	str	r4, [r4, #32]
 800681a:	6263      	str	r3, [r4, #36]	; 0x24
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <std+0x3c>)
 800681e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <std+0x40>)
 8006822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <std+0x44>)
 8006826:	6323      	str	r3, [r4, #48]	; 0x30
 8006828:	bd10      	pop	{r4, pc}
 800682a:	bf00      	nop
 800682c:	08006b39 	.word	0x08006b39
 8006830:	08006b5b 	.word	0x08006b5b
 8006834:	08006b93 	.word	0x08006b93
 8006838:	08006bb7 	.word	0x08006bb7

0800683c <_cleanup_r>:
 800683c:	4901      	ldr	r1, [pc, #4]	; (8006844 <_cleanup_r+0x8>)
 800683e:	f000 b8af 	b.w	80069a0 <_fwalk_reent>
 8006842:	bf00      	nop
 8006844:	0800677d 	.word	0x0800677d

08006848 <__sfmoreglue>:
 8006848:	2268      	movs	r2, #104	; 0x68
 800684a:	b570      	push	{r4, r5, r6, lr}
 800684c:	1e4d      	subs	r5, r1, #1
 800684e:	4355      	muls	r5, r2
 8006850:	460e      	mov	r6, r1
 8006852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006856:	f7ff fc0f 	bl	8006078 <_malloc_r>
 800685a:	4604      	mov	r4, r0
 800685c:	b140      	cbz	r0, 8006870 <__sfmoreglue+0x28>
 800685e:	2100      	movs	r1, #0
 8006860:	e9c0 1600 	strd	r1, r6, [r0]
 8006864:	300c      	adds	r0, #12
 8006866:	60a0      	str	r0, [r4, #8]
 8006868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800686c:	f7fd fcfa 	bl	8004264 <memset>
 8006870:	4620      	mov	r0, r4
 8006872:	bd70      	pop	{r4, r5, r6, pc}

08006874 <__sfp_lock_acquire>:
 8006874:	4801      	ldr	r0, [pc, #4]	; (800687c <__sfp_lock_acquire+0x8>)
 8006876:	f000 b8b3 	b.w	80069e0 <__retarget_lock_acquire_recursive>
 800687a:	bf00      	nop
 800687c:	20000385 	.word	0x20000385

08006880 <__sfp_lock_release>:
 8006880:	4801      	ldr	r0, [pc, #4]	; (8006888 <__sfp_lock_release+0x8>)
 8006882:	f000 b8ae 	b.w	80069e2 <__retarget_lock_release_recursive>
 8006886:	bf00      	nop
 8006888:	20000385 	.word	0x20000385

0800688c <__sinit_lock_acquire>:
 800688c:	4801      	ldr	r0, [pc, #4]	; (8006894 <__sinit_lock_acquire+0x8>)
 800688e:	f000 b8a7 	b.w	80069e0 <__retarget_lock_acquire_recursive>
 8006892:	bf00      	nop
 8006894:	20000386 	.word	0x20000386

08006898 <__sinit_lock_release>:
 8006898:	4801      	ldr	r0, [pc, #4]	; (80068a0 <__sinit_lock_release+0x8>)
 800689a:	f000 b8a2 	b.w	80069e2 <__retarget_lock_release_recursive>
 800689e:	bf00      	nop
 80068a0:	20000386 	.word	0x20000386

080068a4 <__sinit>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	4604      	mov	r4, r0
 80068a8:	f7ff fff0 	bl	800688c <__sinit_lock_acquire>
 80068ac:	69a3      	ldr	r3, [r4, #24]
 80068ae:	b11b      	cbz	r3, 80068b8 <__sinit+0x14>
 80068b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b4:	f7ff bff0 	b.w	8006898 <__sinit_lock_release>
 80068b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068bc:	6523      	str	r3, [r4, #80]	; 0x50
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <__sinit+0x68>)
 80068c0:	4a13      	ldr	r2, [pc, #76]	; (8006910 <__sinit+0x6c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80068c6:	42a3      	cmp	r3, r4
 80068c8:	bf08      	it	eq
 80068ca:	2301      	moveq	r3, #1
 80068cc:	4620      	mov	r0, r4
 80068ce:	bf08      	it	eq
 80068d0:	61a3      	streq	r3, [r4, #24]
 80068d2:	f000 f81f 	bl	8006914 <__sfp>
 80068d6:	6060      	str	r0, [r4, #4]
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 f81b 	bl	8006914 <__sfp>
 80068de:	60a0      	str	r0, [r4, #8]
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 f817 	bl	8006914 <__sfp>
 80068e6:	2200      	movs	r2, #0
 80068e8:	2104      	movs	r1, #4
 80068ea:	60e0      	str	r0, [r4, #12]
 80068ec:	6860      	ldr	r0, [r4, #4]
 80068ee:	f7ff ff81 	bl	80067f4 <std>
 80068f2:	2201      	movs	r2, #1
 80068f4:	2109      	movs	r1, #9
 80068f6:	68a0      	ldr	r0, [r4, #8]
 80068f8:	f7ff ff7c 	bl	80067f4 <std>
 80068fc:	2202      	movs	r2, #2
 80068fe:	2112      	movs	r1, #18
 8006900:	68e0      	ldr	r0, [r4, #12]
 8006902:	f7ff ff77 	bl	80067f4 <std>
 8006906:	2301      	movs	r3, #1
 8006908:	61a3      	str	r3, [r4, #24]
 800690a:	e7d1      	b.n	80068b0 <__sinit+0xc>
 800690c:	080072f0 	.word	0x080072f0
 8006910:	0800683d 	.word	0x0800683d

08006914 <__sfp>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	4607      	mov	r7, r0
 8006918:	f7ff ffac 	bl	8006874 <__sfp_lock_acquire>
 800691c:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <__sfp+0x84>)
 800691e:	681e      	ldr	r6, [r3, #0]
 8006920:	69b3      	ldr	r3, [r6, #24]
 8006922:	b913      	cbnz	r3, 800692a <__sfp+0x16>
 8006924:	4630      	mov	r0, r6
 8006926:	f7ff ffbd 	bl	80068a4 <__sinit>
 800692a:	3648      	adds	r6, #72	; 0x48
 800692c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006930:	3b01      	subs	r3, #1
 8006932:	d503      	bpl.n	800693c <__sfp+0x28>
 8006934:	6833      	ldr	r3, [r6, #0]
 8006936:	b30b      	cbz	r3, 800697c <__sfp+0x68>
 8006938:	6836      	ldr	r6, [r6, #0]
 800693a:	e7f7      	b.n	800692c <__sfp+0x18>
 800693c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006940:	b9d5      	cbnz	r5, 8006978 <__sfp+0x64>
 8006942:	4b16      	ldr	r3, [pc, #88]	; (800699c <__sfp+0x88>)
 8006944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006948:	60e3      	str	r3, [r4, #12]
 800694a:	6665      	str	r5, [r4, #100]	; 0x64
 800694c:	f000 f847 	bl	80069de <__retarget_lock_init_recursive>
 8006950:	f7ff ff96 	bl	8006880 <__sfp_lock_release>
 8006954:	2208      	movs	r2, #8
 8006956:	4629      	mov	r1, r5
 8006958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800695c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006960:	6025      	str	r5, [r4, #0]
 8006962:	61a5      	str	r5, [r4, #24]
 8006964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006968:	f7fd fc7c 	bl	8004264 <memset>
 800696c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006974:	4620      	mov	r0, r4
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006978:	3468      	adds	r4, #104	; 0x68
 800697a:	e7d9      	b.n	8006930 <__sfp+0x1c>
 800697c:	2104      	movs	r1, #4
 800697e:	4638      	mov	r0, r7
 8006980:	f7ff ff62 	bl	8006848 <__sfmoreglue>
 8006984:	4604      	mov	r4, r0
 8006986:	6030      	str	r0, [r6, #0]
 8006988:	2800      	cmp	r0, #0
 800698a:	d1d5      	bne.n	8006938 <__sfp+0x24>
 800698c:	f7ff ff78 	bl	8006880 <__sfp_lock_release>
 8006990:	230c      	movs	r3, #12
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	e7ee      	b.n	8006974 <__sfp+0x60>
 8006996:	bf00      	nop
 8006998:	080072f0 	.word	0x080072f0
 800699c:	ffff0001 	.word	0xffff0001

080069a0 <_fwalk_reent>:
 80069a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a4:	4606      	mov	r6, r0
 80069a6:	4688      	mov	r8, r1
 80069a8:	2700      	movs	r7, #0
 80069aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069b2:	f1b9 0901 	subs.w	r9, r9, #1
 80069b6:	d505      	bpl.n	80069c4 <_fwalk_reent+0x24>
 80069b8:	6824      	ldr	r4, [r4, #0]
 80069ba:	2c00      	cmp	r4, #0
 80069bc:	d1f7      	bne.n	80069ae <_fwalk_reent+0xe>
 80069be:	4638      	mov	r0, r7
 80069c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c4:	89ab      	ldrh	r3, [r5, #12]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d907      	bls.n	80069da <_fwalk_reent+0x3a>
 80069ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069ce:	3301      	adds	r3, #1
 80069d0:	d003      	beq.n	80069da <_fwalk_reent+0x3a>
 80069d2:	4629      	mov	r1, r5
 80069d4:	4630      	mov	r0, r6
 80069d6:	47c0      	blx	r8
 80069d8:	4307      	orrs	r7, r0
 80069da:	3568      	adds	r5, #104	; 0x68
 80069dc:	e7e9      	b.n	80069b2 <_fwalk_reent+0x12>

080069de <__retarget_lock_init_recursive>:
 80069de:	4770      	bx	lr

080069e0 <__retarget_lock_acquire_recursive>:
 80069e0:	4770      	bx	lr

080069e2 <__retarget_lock_release_recursive>:
 80069e2:	4770      	bx	lr

080069e4 <__swhatbuf_r>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	460e      	mov	r6, r1
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	4614      	mov	r4, r2
 80069ee:	2900      	cmp	r1, #0
 80069f0:	461d      	mov	r5, r3
 80069f2:	b096      	sub	sp, #88	; 0x58
 80069f4:	da08      	bge.n	8006a08 <__swhatbuf_r+0x24>
 80069f6:	2200      	movs	r2, #0
 80069f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80069fc:	602a      	str	r2, [r5, #0]
 80069fe:	061a      	lsls	r2, r3, #24
 8006a00:	d410      	bmi.n	8006a24 <__swhatbuf_r+0x40>
 8006a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a06:	e00e      	b.n	8006a26 <__swhatbuf_r+0x42>
 8006a08:	466a      	mov	r2, sp
 8006a0a:	f000 f8fb 	bl	8006c04 <_fstat_r>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	dbf1      	blt.n	80069f6 <__swhatbuf_r+0x12>
 8006a12:	9a01      	ldr	r2, [sp, #4]
 8006a14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a1c:	425a      	negs	r2, r3
 8006a1e:	415a      	adcs	r2, r3
 8006a20:	602a      	str	r2, [r5, #0]
 8006a22:	e7ee      	b.n	8006a02 <__swhatbuf_r+0x1e>
 8006a24:	2340      	movs	r3, #64	; 0x40
 8006a26:	2000      	movs	r0, #0
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	b016      	add	sp, #88	; 0x58
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a30 <__smakebuf_r>:
 8006a30:	898b      	ldrh	r3, [r1, #12]
 8006a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a34:	079d      	lsls	r5, r3, #30
 8006a36:	4606      	mov	r6, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	d507      	bpl.n	8006a4c <__smakebuf_r+0x1c>
 8006a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	2301      	movs	r3, #1
 8006a46:	6163      	str	r3, [r4, #20]
 8006a48:	b002      	add	sp, #8
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	466a      	mov	r2, sp
 8006a4e:	ab01      	add	r3, sp, #4
 8006a50:	f7ff ffc8 	bl	80069e4 <__swhatbuf_r>
 8006a54:	9900      	ldr	r1, [sp, #0]
 8006a56:	4605      	mov	r5, r0
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff fb0d 	bl	8006078 <_malloc_r>
 8006a5e:	b948      	cbnz	r0, 8006a74 <__smakebuf_r+0x44>
 8006a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a64:	059a      	lsls	r2, r3, #22
 8006a66:	d4ef      	bmi.n	8006a48 <__smakebuf_r+0x18>
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	f043 0302 	orr.w	r3, r3, #2
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	e7e3      	b.n	8006a3c <__smakebuf_r+0xc>
 8006a74:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <__smakebuf_r+0x7c>)
 8006a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	6020      	str	r0, [r4, #0]
 8006a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	9b00      	ldr	r3, [sp, #0]
 8006a84:	6120      	str	r0, [r4, #16]
 8006a86:	6163      	str	r3, [r4, #20]
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	b15b      	cbz	r3, 8006aa4 <__smakebuf_r+0x74>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a92:	f000 f8c9 	bl	8006c28 <_isatty_r>
 8006a96:	b128      	cbz	r0, 8006aa4 <__smakebuf_r+0x74>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	89a0      	ldrh	r0, [r4, #12]
 8006aa6:	4305      	orrs	r5, r0
 8006aa8:	81a5      	strh	r5, [r4, #12]
 8006aaa:	e7cd      	b.n	8006a48 <__smakebuf_r+0x18>
 8006aac:	0800683d 	.word	0x0800683d

08006ab0 <_raise_r>:
 8006ab0:	291f      	cmp	r1, #31
 8006ab2:	b538      	push	{r3, r4, r5, lr}
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	d904      	bls.n	8006ac4 <_raise_r+0x14>
 8006aba:	2316      	movs	r3, #22
 8006abc:	6003      	str	r3, [r0, #0]
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ac6:	b112      	cbz	r2, 8006ace <_raise_r+0x1e>
 8006ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006acc:	b94b      	cbnz	r3, 8006ae2 <_raise_r+0x32>
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 f830 	bl	8006b34 <_getpid_r>
 8006ad4:	462a      	mov	r2, r5
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	4620      	mov	r0, r4
 8006ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ade:	f000 b817 	b.w	8006b10 <_kill_r>
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d00a      	beq.n	8006afc <_raise_r+0x4c>
 8006ae6:	1c59      	adds	r1, r3, #1
 8006ae8:	d103      	bne.n	8006af2 <_raise_r+0x42>
 8006aea:	2316      	movs	r3, #22
 8006aec:	6003      	str	r3, [r0, #0]
 8006aee:	2001      	movs	r0, #1
 8006af0:	e7e7      	b.n	8006ac2 <_raise_r+0x12>
 8006af2:	2400      	movs	r4, #0
 8006af4:	4628      	mov	r0, r5
 8006af6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006afa:	4798      	blx	r3
 8006afc:	2000      	movs	r0, #0
 8006afe:	e7e0      	b.n	8006ac2 <_raise_r+0x12>

08006b00 <raise>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <raise+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f7ff bfd3 	b.w	8006ab0 <_raise_r>
 8006b0a:	bf00      	nop
 8006b0c:	2000000c 	.word	0x2000000c

08006b10 <_kill_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	2300      	movs	r3, #0
 8006b14:	4d06      	ldr	r5, [pc, #24]	; (8006b30 <_kill_r+0x20>)
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fb f90e 	bl	8001d3e <_kill>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_kill_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_kill_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000380 	.word	0x20000380

08006b34 <_getpid_r>:
 8006b34:	f7fb b8fc 	b.w	8001d30 <_getpid>

08006b38 <__sread>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b40:	f000 f894 	bl	8006c6c <_read_r>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	bfab      	itete	ge
 8006b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b4c:	181b      	addge	r3, r3, r0
 8006b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b52:	bfac      	ite	ge
 8006b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b56:	81a3      	strhlt	r3, [r4, #12]
 8006b58:	bd10      	pop	{r4, pc}

08006b5a <__swrite>:
 8006b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5e:	461f      	mov	r7, r3
 8006b60:	898b      	ldrh	r3, [r1, #12]
 8006b62:	4605      	mov	r5, r0
 8006b64:	05db      	lsls	r3, r3, #23
 8006b66:	460c      	mov	r4, r1
 8006b68:	4616      	mov	r6, r2
 8006b6a:	d505      	bpl.n	8006b78 <__swrite+0x1e>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	f000 f868 	bl	8006c48 <_lseek_r>
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b80:	81a3      	strh	r3, [r4, #12]
 8006b82:	4628      	mov	r0, r5
 8006b84:	463b      	mov	r3, r7
 8006b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8e:	f000 b817 	b.w	8006bc0 <_write_r>

08006b92 <__sseek>:
 8006b92:	b510      	push	{r4, lr}
 8006b94:	460c      	mov	r4, r1
 8006b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9a:	f000 f855 	bl	8006c48 <_lseek_r>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	bf15      	itete	ne
 8006ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bae:	81a3      	strheq	r3, [r4, #12]
 8006bb0:	bf18      	it	ne
 8006bb2:	81a3      	strhne	r3, [r4, #12]
 8006bb4:	bd10      	pop	{r4, pc}

08006bb6 <__sclose>:
 8006bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bba:	f000 b813 	b.w	8006be4 <_close_r>
	...

08006bc0 <_write_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4d05      	ldr	r5, [pc, #20]	; (8006be0 <_write_r+0x20>)
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f7fb f8ec 	bl	8001dac <_write>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_write_r+0x1e>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_write_r+0x1e>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	20000380 	.word	0x20000380

08006be4 <_close_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	2300      	movs	r3, #0
 8006be8:	4d05      	ldr	r5, [pc, #20]	; (8006c00 <_close_r+0x1c>)
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fb f8f8 	bl	8001de4 <_close>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_close_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_close_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20000380 	.word	0x20000380

08006c04 <_fstat_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	2300      	movs	r3, #0
 8006c08:	4d06      	ldr	r5, [pc, #24]	; (8006c24 <_fstat_r+0x20>)
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	602b      	str	r3, [r5, #0]
 8006c12:	f7fb f8f2 	bl	8001dfa <_fstat>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d102      	bne.n	8006c20 <_fstat_r+0x1c>
 8006c1a:	682b      	ldr	r3, [r5, #0]
 8006c1c:	b103      	cbz	r3, 8006c20 <_fstat_r+0x1c>
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	bd38      	pop	{r3, r4, r5, pc}
 8006c22:	bf00      	nop
 8006c24:	20000380 	.word	0x20000380

08006c28 <_isatty_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4d05      	ldr	r5, [pc, #20]	; (8006c44 <_isatty_r+0x1c>)
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fb f8f0 	bl	8001e18 <_isatty>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_isatty_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_isatty_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	20000380 	.word	0x20000380

08006c48 <_lseek_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	4611      	mov	r1, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	4d05      	ldr	r5, [pc, #20]	; (8006c68 <_lseek_r+0x20>)
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7fb f8e8 	bl	8001e2c <_lseek>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_lseek_r+0x1e>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_lseek_r+0x1e>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20000380 	.word	0x20000380

08006c6c <_read_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	2200      	movs	r2, #0
 8006c76:	4d05      	ldr	r5, [pc, #20]	; (8006c8c <_read_r+0x20>)
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7fb f879 	bl	8001d72 <_read>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_read_r+0x1e>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_read_r+0x1e>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	20000380 	.word	0x20000380

08006c90 <_init>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr

08006c9c <_fini>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr
