
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  080063a0  080063a0  000163a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dcc  08006dcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006dcc  08006dcc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dcc  08006dcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001dc  08006fb0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08006fb0  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001137b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239d  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00033920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00034a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4e9  00000000  00000000  00035ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001340d  00000000  00000000  00050fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa97  00000000  00000000  000643b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103e4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b0  00000000  00000000  00103ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006388 	.word	0x08006388

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006388 	.word	0x08006388

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	e002      	b.n	8000b70 <Delay+0x10>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f9      	bne.n	8000b6a <Delay+0xa>
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f829 	bl	8000be0 <LCD_BackLed_Control>
	LCD_Rst();
 8000b8e:	f000 f80f 	bl	8000bb0 <LCD_Rst>
	LCD_REG_Config();
 8000b92:	f000 f85f 	bl	8000c54 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ba0:	22f0      	movs	r2, #240	; 0xf0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 f9e6 	bl	8000f76 <LCD_Clear>
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <LCD_Rst+0x28>)
 8000bba:	f001 fae1 	bl	8002180 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <LCD_Rst+0x2c>)
 8000bc0:	f7ff ffce 	bl	8000b60 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <LCD_Rst+0x28>)
 8000bca:	f001 fad9 	bl	8002180 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <LCD_Rst+0x2c>)
 8000bd0:	f7ff ffc6 	bl	8000b60 <Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40011800 	.word	0x40011800
 8000bdc:	0002bffc 	.word	0x0002bffc

08000be0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000bf8:	f001 fac2 	bl	8002180 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000bfc:	e005      	b.n	8000c0a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000c06:	f001 fabb 	bl	8002180 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40011400 	.word	0x40011400

08000c18 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c22:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	8013      	strh	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <LCD_Write_Data+0x1c>)
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	8013      	strh	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	60020000 	.word	0x60020000

08000c54 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c58:	20cf      	movs	r0, #207	; 0xcf
 8000c5a:	f7ff ffdd 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ffe8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000c64:	2081      	movs	r0, #129	; 0x81
 8000c66:	f7ff ffe5 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000c6a:	2030      	movs	r0, #48	; 0x30
 8000c6c:	f7ff ffe2 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000c70:	20ed      	movs	r0, #237	; 0xed
 8000c72:	f7ff ffd1 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f7ff ffdc 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f7ff ffd9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000c82:	2012      	movs	r0, #18
 8000c84:	f7ff ffd6 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000c88:	2081      	movs	r0, #129	; 0x81
 8000c8a:	f7ff ffd3 	bl	8000c34 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000c8e:	20e8      	movs	r0, #232	; 0xe8
 8000c90:	f7ff ffc2 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000c94:	2085      	movs	r0, #133	; 0x85
 8000c96:	f7ff ffcd 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c9a:	2010      	movs	r0, #16
 8000c9c:	f7ff ffca 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f7ff ffc7 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000ca6:	20cb      	movs	r0, #203	; 0xcb
 8000ca8:	f7ff ffb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000cac:	2039      	movs	r0, #57	; 0x39
 8000cae:	f7ff ffc1 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000cb2:	202c      	movs	r0, #44	; 0x2c
 8000cb4:	f7ff ffbe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ffbb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000cbe:	2034      	movs	r0, #52	; 0x34
 8000cc0:	f7ff ffb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff ffb5 	bl	8000c34 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000cca:	20f7      	movs	r0, #247	; 0xf7
 8000ccc:	f7ff ffa4 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000cd0:	2020      	movs	r0, #32
 8000cd2:	f7ff ffaf 	bl	8000c34 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000cd6:	20ea      	movs	r0, #234	; 0xea
 8000cd8:	f7ff ff9e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ffa9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffa6 	bl	8000c34 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000ce8:	20b1      	movs	r0, #177	; 0xb1
 8000cea:	f7ff ff95 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ffa0 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000cf4:	201b      	movs	r0, #27
 8000cf6:	f7ff ff9d 	bl	8000c34 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000cfa:	20b6      	movs	r0, #182	; 0xb6
 8000cfc:	f7ff ff8c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d00:	200a      	movs	r0, #10
 8000d02:	f7ff ff97 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d06:	20a2      	movs	r0, #162	; 0xa2
 8000d08:	f7ff ff94 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d0c:	20c0      	movs	r0, #192	; 0xc0
 8000d0e:	f7ff ff83 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d12:	2035      	movs	r0, #53	; 0x35
 8000d14:	f7ff ff8e 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d18:	20c1      	movs	r0, #193	; 0xc1
 8000d1a:	f7ff ff7d 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d1e:	2011      	movs	r0, #17
 8000d20:	f7ff ff88 	bl	8000c34 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d24:	20c5      	movs	r0, #197	; 0xc5
 8000d26:	f7ff ff77 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d2a:	2045      	movs	r0, #69	; 0x45
 8000d2c:	f7ff ff82 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d30:	2045      	movs	r0, #69	; 0x45
 8000d32:	f7ff ff7f 	bl	8000c34 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d36:	20c7      	movs	r0, #199	; 0xc7
 8000d38:	f7ff ff6e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000d3c:	20a2      	movs	r0, #162	; 0xa2
 8000d3e:	f7ff ff79 	bl	8000c34 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d42:	20f2      	movs	r0, #242	; 0xf2
 8000d44:	f7ff ff68 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ff73 	bl	8000c34 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d4e:	2026      	movs	r0, #38	; 0x26
 8000d50:	f7ff ff62 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff ff6d 	bl	8000c34 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d5a:	20e0      	movs	r0, #224	; 0xe0
 8000d5c:	f7ff ff5c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000d60:	200f      	movs	r0, #15
 8000d62:	f7ff ff67 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000d66:	2026      	movs	r0, #38	; 0x26
 8000d68:	f7ff ff64 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000d6c:	2024      	movs	r0, #36	; 0x24
 8000d6e:	f7ff ff61 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000d72:	200b      	movs	r0, #11
 8000d74:	f7ff ff5e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000d78:	200e      	movs	r0, #14
 8000d7a:	f7ff ff5b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d7e:	2009      	movs	r0, #9
 8000d80:	f7ff ff58 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000d84:	2054      	movs	r0, #84	; 0x54
 8000d86:	f7ff ff55 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000d8a:	20a8      	movs	r0, #168	; 0xa8
 8000d8c:	f7ff ff52 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000d90:	2046      	movs	r0, #70	; 0x46
 8000d92:	f7ff ff4f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000d96:	200c      	movs	r0, #12
 8000d98:	f7ff ff4c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f7ff ff49 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000da2:	2009      	movs	r0, #9
 8000da4:	f7ff ff46 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000da8:	200f      	movs	r0, #15
 8000daa:	f7ff ff43 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dae:	2007      	movs	r0, #7
 8000db0:	f7ff ff40 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff3d 	bl	8000c34 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000dba:	20e1      	movs	r0, #225	; 0xe1
 8000dbc:	f7ff ff2c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff37 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f7ff ff34 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000dcc:	201b      	movs	r0, #27
 8000dce:	f7ff ff31 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff ff2e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f7ff ff2b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dde:	2007      	movs	r0, #7
 8000de0:	f7ff ff28 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000de4:	202a      	movs	r0, #42	; 0x2a
 8000de6:	f7ff ff25 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000dea:	2047      	movs	r0, #71	; 0x47
 8000dec:	f7ff ff22 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000df0:	2039      	movs	r0, #57	; 0x39
 8000df2:	f7ff ff1f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ff1c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f7ff ff19 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e02:	2006      	movs	r0, #6
 8000e04:	f7ff ff16 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f7ff ff13 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e0e:	2038      	movs	r0, #56	; 0x38
 8000e10:	f7ff ff10 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e14:	200f      	movs	r0, #15
 8000e16:	f7ff ff0d 	bl	8000c34 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e1a:	2036      	movs	r0, #54	; 0x36
 8000e1c:	f7ff fefc 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000e20:	20c8      	movs	r0, #200	; 0xc8
 8000e22:	f7ff ff07 	bl	8000c34 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e26:	202a      	movs	r0, #42	; 0x2a
 8000e28:	f7ff fef6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff01 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fefe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fefb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000e3e:	20ef      	movs	r0, #239	; 0xef
 8000e40:	f7ff fef8 	bl	8000c34 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e44:	202b      	movs	r0, #43	; 0x2b
 8000e46:	f7ff fee7 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fef2 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff feef 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff feec 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e5c:	203f      	movs	r0, #63	; 0x3f
 8000e5e:	f7ff fee9 	bl	8000c34 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000e62:	203a      	movs	r0, #58	; 0x3a
 8000e64:	f7ff fed8 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000e68:	2055      	movs	r0, #85	; 0x55
 8000e6a:	f7ff fee3 	bl	8000c34 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000e6e:	2011      	movs	r0, #17
 8000e70:	f7ff fed2 	bl	8000c18 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <LCD_REG_Config+0x230>)
 8000e76:	f7ff fe73 	bl	8000b60 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000e7a:	2029      	movs	r0, #41	; 0x29
 8000e7c:	f7ff fecc 	bl	8000c18 <LCD_Write_Cmd>
	
	
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0002bffc 	.word	0x0002bffc

08000e88 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000ea6:	202a      	movs	r0, #42	; 0x2a
 8000ea8:	f7ff feb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff febe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff feb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff feaf 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fea4 	bl	8000c34 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000eec:	202b      	movs	r0, #43	; 0x2b
 8000eee:	f7ff fe93 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe9b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe95 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	883b      	ldrh	r3, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b01      	subs	r3, #1
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe8c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f1c:	88ba      	ldrh	r2, [r7, #4]
 8000f1e:	883b      	ldrh	r3, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe81 	bl	8000c34 <LCD_Write_Data>
	
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}

08000f3a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f4a:	202c      	movs	r0, #44	; 0x2c
 8000f4c:	f7ff fe64 	bl	8000c18 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e006      	b.n	8000f64 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe6b 	bl	8000c34 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d3f4      	bcc.n	8000f56 <LCD_FillColor+0x1c>
		
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000f76:	b590      	push	{r4, r7, lr}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4608      	mov	r0, r1
 8000f80:	4611      	mov	r1, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	80bb      	strh	r3, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ff74 	bl	8000e88 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	883a      	ldrh	r2, [r7, #0]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	8b3b      	ldrh	r3, [r7, #24]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f7ff ffc3 	bl	8000f3a <LCD_FillColor>
	
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000fd4:	88b9      	ldrh	r1, [r7, #4]
 8000fd6:	88f8      	ldrh	r0, [r7, #6]
 8000fd8:	2310      	movs	r3, #16
 8000fda:	2208      	movs	r2, #8
 8000fdc:	f7ff ff54 	bl	8000e88 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fe0:	202c      	movs	r0, #44	; 0x2c
 8000fe2:	f7ff fe19 	bl	8000c18 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
 8000fea:	e023      	b.n	8001034 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <LCD_DrawChar+0x88>)
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	440a      	add	r2, r1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
 8001000:	e012      	b.n	8001028 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800100c:	201f      	movs	r0, #31
 800100e:	f7ff fe11 	bl	8000c34 <LCD_Write_Data>
 8001012:	e003      	b.n	800101c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001018:	f7ff fe0c 	bl	8000c34 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	3301      	adds	r3, #1
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9e9      	bls.n	8001002 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d9d8      	bls.n	8000fec <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	080063d4 	.word	0x080063d4

08001048 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	603a      	str	r2, [r7, #0]
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	460b      	mov	r3, r1
 8001056:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001058:	e01c      	b.n	8001094 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2be8      	cmp	r3, #232	; 0xe8
 800105e:	d904      	bls.n	800106a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001060:	2300      	movs	r3, #0
 8001062:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	3310      	adds	r3, #16
 8001068:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001070:	d903      	bls.n	800107a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001072:	2300      	movs	r3, #0
 8001074:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001076:	2300      	movs	r3, #0
 8001078:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	88b9      	ldrh	r1, [r7, #4]
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9a 	bl	8000fbc <LCD_DrawChar>
		
		pStr ++;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	3308      	adds	r3, #8
 8001092:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1de      	bne.n	800105a <LCD_DrawString+0x12>
		
	}
	
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// printf() function
int __io_putchar(int ch)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 80010b6:	f107 010f 	add.w	r1, r7, #15
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010be:	2201      	movs	r2, #1
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <__io_putchar+0x28>)
 80010c2:	f002 f97f 	bl	80033c4 <HAL_UART_Transmit>
  return ch;
 80010c6:	687b      	ldr	r3, [r7, #4]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000294 	.word	0x20000294

080010d4 <microDelay>:
void dec_to_str(uint32_t adcVal, char *buffer) {
    sprintf(buffer, "%4lu", adcVal);
}

void microDelay (uint16_t delay)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <microDelay+0x2c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80010e6:	bf00      	nop
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <microDelay+0x2c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3f9      	bcc.n	80010e8 <microDelay+0x14>
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	2000024c 	.word	0x2000024c

08001104 <stepMotor>:

void stepMotor(int steps, uint16_t delay, int clockwise) {
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	460b      	mov	r3, r1
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	817b      	strh	r3, [r7, #10]
    const GPIO_PinState state[8][4] = {
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <stepMotor+0xc4>)
 8001114:	f107 0414 	add.w	r4, r7, #20
 8001118:	461d      	mov	r5, r3
 800111a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET},
        {GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET}
    };

    for (int x = 0; x < steps; ++x) {
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800112a:	e044      	b.n	80011b6 <stepMotor+0xb2>
        for (int i = 0; i < 8; ++i) {
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001130:	e03b      	b.n	80011aa <stepMotor+0xa6>
            int index = clockwise ? 7 - i : i;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <stepMotor+0x3c>
 8001138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	e000      	b.n	8001142 <stepMotor+0x3e>
 8001140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
            HAL_GPIO_WritePin(GPIOA, STP_1_Pin, state[index][0]);
 8001144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	3340      	adds	r3, #64	; 0x40
 800114a:	443b      	add	r3, r7
 800114c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001150:	461a      	mov	r2, r3
 8001152:	2110      	movs	r1, #16
 8001154:	481d      	ldr	r0, [pc, #116]	; (80011cc <stepMotor+0xc8>)
 8001156:	f001 f813 	bl	8002180 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, STP_2_Pin, state[index][1]);
 800115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	3340      	adds	r3, #64	; 0x40
 8001160:	443b      	add	r3, r7
 8001162:	f813 3c2b 	ldrb.w	r3, [r3, #-43]
 8001166:	461a      	mov	r2, r3
 8001168:	2120      	movs	r1, #32
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <stepMotor+0xc8>)
 800116c:	f001 f808 	bl	8002180 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, STP_3_Pin, state[index][2]);
 8001170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	3340      	adds	r3, #64	; 0x40
 8001176:	443b      	add	r3, r7
 8001178:	f813 3c2a 	ldrb.w	r3, [r3, #-42]
 800117c:	461a      	mov	r2, r3
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	4812      	ldr	r0, [pc, #72]	; (80011cc <stepMotor+0xc8>)
 8001182:	f000 fffd 	bl	8002180 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, STP_4_Pin, state[index][3]);
 8001186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	3340      	adds	r3, #64	; 0x40
 800118c:	443b      	add	r3, r7
 800118e:	f813 3c29 	ldrb.w	r3, [r3, #-41]
 8001192:	461a      	mov	r2, r3
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <stepMotor+0xc8>)
 8001198:	f000 fff2 	bl	8002180 <HAL_GPIO_WritePin>
            microDelay(delay);
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff98 	bl	80010d4 <microDelay>
        for (int i = 0; i < 8; ++i) {
 80011a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a6:	3301      	adds	r3, #1
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80011aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	ddc0      	ble.n	8001132 <stepMotor+0x2e>
    for (int x = 0; x < steps; ++x) {
 80011b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b2:	3301      	adds	r3, #1
 80011b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbb6      	blt.n	800112c <stepMotor+0x28>
        }
    }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3740      	adds	r7, #64	; 0x40
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bdb0      	pop	{r4, r5, r7, pc}
 80011c8:	080063a8 	.word	0x080063a8
 80011cc:	40010800 	.word	0x40010800

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fcab 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f835 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 f921 	bl	8001424 <MX_GPIO_Init>
  MX_FSMC_Init();
 80011e2:	f000 f9db 	bl	800159c <MX_FSMC_Init>
  MX_I2C2_Init();
 80011e6:	f000 f875 	bl	80012d4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80011ea:	f000 f8f1 	bl	80013d0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80011ee:	f000 f89f 	bl	8001330 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80011f2:	f7ff fcc6 	bl	8000b82 <LCD_INIT>

  char name[] = "DAS, Ujaan";
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <main+0x70>)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fc:	c303      	stmia	r3!, {r0, r1}
 80011fe:	801a      	strh	r2, [r3, #0]
 8001200:	3302      	adds	r3, #2
 8001202:	0c12      	lsrs	r2, r2, #16
 8001204:	701a      	strb	r2, [r3, #0]
  LCD_DrawString(0, 0, name);
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	461a      	mov	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ff1b 	bl	8001048 <LCD_DrawString>

  HAL_TIM_Base_Start(&htim1);
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <main+0x74>)
 8001214:	f001 fdde 	bl	8002dd4 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  stepMotor(256, 1000, 1);  // 256 half revolution
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800121e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001222:	f7ff ff6f 	bl	8001104 <stepMotor>
	  HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f000 fce4 	bl	8001bf4 <HAL_Delay>
	  stepMotor(128, 1000, 0); // 128 quarter revolution
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001232:	2080      	movs	r0, #128	; 0x80
 8001234:	f7ff ff66 	bl	8001104 <stepMotor>
	  HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f000 fcdb 	bl	8001bf4 <HAL_Delay>
	  stepMotor(256, 1000, 1);  // 256 half revolution
 800123e:	e7eb      	b.n	8001218 <main+0x48>
 8001240:	080063c8 	.word	0x080063c8
 8001244:	2000024c 	.word	0x2000024c

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	; 0x40
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f002 fb82 	bl	8003960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127c:	2302      	movs	r3, #2
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4618      	mov	r0, r3
 8001292:	f001 f8f3 	bl	800247c <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800129c:	f000 f9e2 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2302      	movs	r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2102      	movs	r1, #2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fb60 	bl	8002980 <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012c6:	f000 f9cd 	bl	8001664 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3740      	adds	r7, #64	; 0x40
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C2_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_I2C2_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C2_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_I2C2_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C2_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_I2C2_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_I2C2_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_I2C2_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_I2C2_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_I2C2_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_I2C2_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_I2C2_Init+0x50>)
 8001312:	f000 ff6f 	bl	80021f4 <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 f9a2 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200001f8 	.word	0x200001f8
 8001328:	40005800 	.word	0x40005800
 800132c:	000186a0 	.word	0x000186a0

08001330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_TIM1_Init+0x98>)
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <MX_TIM1_Init+0x9c>)
 8001350:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_TIM1_Init+0x98>)
 8001354:	2247      	movs	r2, #71	; 0x47
 8001356:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_TIM1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM1_Init+0x98>)
 8001360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001364:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_TIM1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_TIM1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_TIM1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001378:	4813      	ldr	r0, [pc, #76]	; (80013c8 <MX_TIM1_Init+0x98>)
 800137a:	f001 fcdc 	bl	8002d36 <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001384:	f000 f96e 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM1_Init+0x98>)
 8001396:	f001 fd75 	bl	8002e84 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013a0:	f000 f960 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_TIM1_Init+0x98>)
 80013b2:	f001 ff4b 	bl	800324c <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013bc:	f000 f952 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000024c 	.word	0x2000024c
 80013cc:	40012c00 	.word	0x40012c00

080013d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_USART1_UART_Init+0x50>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART1_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART1_UART_Init+0x4c>)
 8001408:	f001 ff8c 	bl	8003324 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001412:	f000 f927 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000294 	.word	0x20000294
 8001420:	40013800 	.word	0x40013800

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0318 	add.w	r3, r7, #24
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <MX_GPIO_Init+0x15c>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a50      	ldr	r2, [pc, #320]	; (8001580 <MX_GPIO_Init+0x15c>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <MX_GPIO_Init+0x15c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <MX_GPIO_Init+0x15c>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <MX_GPIO_Init+0x15c>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <MX_GPIO_Init+0x15c>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001468:	4b45      	ldr	r3, [pc, #276]	; (8001580 <MX_GPIO_Init+0x15c>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a44      	ldr	r2, [pc, #272]	; (8001580 <MX_GPIO_Init+0x15c>)
 800146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <MX_GPIO_Init+0x15c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <MX_GPIO_Init+0x15c>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <MX_GPIO_Init+0x15c>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <MX_GPIO_Init+0x15c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <MX_GPIO_Init+0x15c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a38      	ldr	r2, [pc, #224]	; (8001580 <MX_GPIO_Init+0x15c>)
 800149e:	f043 0320 	orr.w	r3, r3, #32
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <MX_GPIO_Init+0x15c>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STP_1_Pin|STP_2_Pin|STP_3_Pin|STP_4_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	21f0      	movs	r1, #240	; 0xf0
 80014b4:	4833      	ldr	r0, [pc, #204]	; (8001584 <MX_GPIO_Init+0x160>)
 80014b6:	f000 fe63 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c0:	4831      	ldr	r0, [pc, #196]	; (8001588 <MX_GPIO_Init+0x164>)
 80014c2:	f000 fe5d 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2102      	movs	r1, #2
 80014ca:	4830      	ldr	r0, [pc, #192]	; (800158c <MX_GPIO_Init+0x168>)
 80014cc:	f000 fe58 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : K2_Btn_Pin */
  GPIO_InitStruct.Pin = K2_Btn_Pin;
 80014d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_GPIO_Init+0x16c>)
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_Btn_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4619      	mov	r1, r3
 80014e4:	482b      	ldr	r0, [pc, #172]	; (8001594 <MX_GPIO_Init+0x170>)
 80014e6:	f000 fcb7 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ea:	2308      	movs	r3, #8
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_GPIO_Init+0x174>)
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4821      	ldr	r0, [pc, #132]	; (8001584 <MX_GPIO_Init+0x160>)
 80014fe:	f000 fcab 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : STP_1_Pin STP_2_Pin STP_3_Pin STP_4_Pin */
  GPIO_InitStruct.Pin = STP_1_Pin|STP_2_Pin|STP_3_Pin|STP_4_Pin;
 8001502:	23f0      	movs	r3, #240	; 0xf0
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2302      	movs	r3, #2
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	4619      	mov	r1, r3
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <MX_GPIO_Init+0x160>)
 800151a:	f000 fc9d 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4619      	mov	r1, r3
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <MX_GPIO_Init+0x164>)
 8001538:	f000 fc8e 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4619      	mov	r1, r3
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <MX_GPIO_Init+0x168>)
 8001554:	f000 fc80 	bl	8001e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2009      	movs	r0, #9
 800155e:	f000 fc44 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001562:	2009      	movs	r0, #9
 8001564:	f000 fc5d 	bl	8001e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2028      	movs	r0, #40	; 0x28
 800156e:	f000 fc3c 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001572:	2028      	movs	r0, #40	; 0x28
 8001574:	f000 fc55 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	40010800 	.word	0x40010800
 8001588:	40011400 	.word	0x40011400
 800158c:	40011800 	.word	0x40011800
 8001590:	10110000 	.word	0x10110000
 8001594:	40011000 	.word	0x40011000
 8001598:	10310000 	.word	0x10310000

0800159c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015ba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015be:	4a27      	ldr	r2, [pc, #156]	; (800165c <MX_FSMC_Init+0xc0>)
 80015c0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015d6:	2210      	movs	r2, #16
 80015d8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_FSMC_Init+0xbc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_FSMC_Init+0xbc>)
 8001602:	2200      	movs	r2, #0
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_FSMC_Init+0xbc>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_FSMC_Init+0xbc>)
 800160e:	2200      	movs	r2, #0
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001612:	230f      	movs	r3, #15
 8001614:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001616:	230f      	movs	r3, #15
 8001618:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800161a:	23ff      	movs	r3, #255	; 0xff
 800161c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800161e:	230f      	movs	r3, #15
 8001620:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001622:	2310      	movs	r3, #16
 8001624:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001626:	2311      	movs	r3, #17
 8001628:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	4619      	mov	r1, r3
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <MX_FSMC_Init+0xbc>)
 8001636:	f001 fb31 	bl	8002c9c <HAL_SRAM_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001640:	f000 f810 	bl	8001664 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_FSMC_Init+0xc4>)
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <MX_FSMC_Init+0xc4>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200002dc 	.word	0x200002dc
 800165c:	a0000104 	.word	0xa0000104
 8001660:	40010000 	.word	0x40010000

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_MspInit+0x5c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x5c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_MspInit+0x60>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_MspInit+0x60>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_I2C_MspInit+0x74>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d124      	bne.n	800173e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_I2C_MspInit+0x78>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_I2C_MspInit+0x78>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_I2C_MspInit+0x78>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800170c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001712:	2312      	movs	r3, #18
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4619      	mov	r1, r3
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <HAL_I2C_MspInit+0x7c>)
 8001722:	f000 fb99 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_I2C_MspInit+0x78>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_I2C_MspInit+0x78>)
 800172c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_I2C_MspInit+0x78>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005800 	.word	0x40005800
 800174c:	40021000 	.word	0x40021000
 8001750:	40010c00 	.word	0x40010c00

08001754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_TIM_Base_MspInit+0x34>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10b      	bne.n	800177e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 800176c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001770:	6193      	str	r3, [r2, #24]
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_UART_MspInit+0x8c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d131      	bne.n	8001814 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_UART_MspInit+0x90>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_UART_MspInit+0x90>)
 80017b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_UART_MspInit+0x90>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_UART_MspInit+0x90>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_UART_MspInit+0x90>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_UART_MspInit+0x90>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	4619      	mov	r1, r3
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <HAL_UART_MspInit+0x94>)
 80017f6:	f000 fb2f 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_UART_MspInit+0x94>)
 8001810:	f000 fb22 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40013800 	.word	0x40013800
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800

08001828 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_FSMC_MspInit+0x78>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d129      	bne.n	8001898 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_FSMC_MspInit+0x78>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_FSMC_MspInit+0x7c>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_FSMC_MspInit+0x7c>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6153      	str	r3, [r2, #20]
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_FSMC_MspInit+0x7c>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001862:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001866:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4619      	mov	r1, r3
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <HAL_FSMC_MspInit+0x80>)
 8001878:	f000 faee 	bl	8001e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800187c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001880:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	4806      	ldr	r0, [pc, #24]	; (80018ac <HAL_FSMC_MspInit+0x84>)
 8001892:	f000 fae1 	bl	8001e58 <HAL_GPIO_Init>
 8001896:	e000      	b.n	800189a <HAL_FSMC_MspInit+0x72>
    return;
 8001898:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000324 	.word	0x20000324
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40011800 	.word	0x40011800
 80018ac:	40011400 	.word	0x40011400

080018b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80018b8:	f7ff ffb6 	bl	8001828 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190a:	f000 f957 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	int status = __HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <EXTI3_IRQHandler+0x30>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	607b      	str	r3, [r7, #4]
	if (status != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <EXTI3_IRQHandler+0x22>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <EXTI3_IRQHandler+0x30>)
 800192c:	2208      	movs	r2, #8
 800192e:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001930:	2008      	movs	r0, #8
 8001932:	f000 fc55 	bl	80021e0 <HAL_GPIO_EXTI_Callback>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001936:	2008      	movs	r0, #8
 8001938:	f000 fc3a 	bl	80021b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40010400 	.word	0x40010400

08001948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K2_Btn_Pin);
 800194c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001950:	f000 fc2e 	bl	80021b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <_kill>:

int _kill(int pid, int sig)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001970:	f001 ffcc 	bl	800390c <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	2216      	movs	r2, #22
 8001978:	601a      	str	r2, [r3, #0]
	return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_exit>:

void _exit (int status)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800198e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffe7 	bl	8001966 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001998:	e7fe      	b.n	8001998 <_exit+0x12>

0800199a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e00a      	b.n	80019c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ac:	f3af 8000 	nop.w
 80019b0:	4601      	mov	r1, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	60ba      	str	r2, [r7, #8]
 80019b8:	b2ca      	uxtb	r2, r1
 80019ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dbf0      	blt.n	80019ac <_read+0x12>
	}

return len;
 80019ca:	687b      	ldr	r3, [r7, #4]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e009      	b.n	80019fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	60ba      	str	r2, [r7, #8]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb5a 	bl	80010a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf1      	blt.n	80019e6 <_write+0x12>
	}
	return len;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_close>:

int _close(int file)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a32:	605a      	str	r2, [r3, #4]
	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <_isatty>:

int _isatty(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f001 ff36 	bl	800390c <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20010000 	.word	0x20010000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000328 	.word	0x20000328
 8001ad4:	20000340 	.word	0x20000340

08001ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae4:	f7ff fff8 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aea:	490c      	ldr	r1, [pc, #48]	; (8001b1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b00:	4c09      	ldr	r4, [pc, #36]	; (8001b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f001 ff03 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b12:	f7ff fb5d 	bl	80011d0 <main>
  bx lr
 8001b16:	4770      	bx	lr
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b20:	08006dd4 	.word	0x08006dd4
  ldr r2, =_sbss
 8001b24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b28:	20000340 	.word	0x20000340

08001b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC1_2_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x28>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x28>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f947 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fd90 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f95f 	bl	8001e3e <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b98:	f000 f927 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_IncTick+0x20>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	2000032c 	.word	0x2000032c

08001be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <HAL_GetTick+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	2000032c 	.word	0x2000032c

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffe0 	bl	8001be0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000008 	.word	0x20000008

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4906      	ldr	r1, [pc, #24]	; (8001cd4 <__NVIC_EnableIRQ+0x34>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff90 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff2d 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff42 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff90 	bl	8001d2c <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5f 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff35 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b08b      	sub	sp, #44	; 0x2c
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6a:	e179      	b.n	8002160 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8168 	bne.w	800215a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a96      	ldr	r2, [pc, #600]	; (80020e8 <HAL_GPIO_Init+0x290>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d05e      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001e94:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_GPIO_Init+0x290>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d875      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001e9a:	4a94      	ldr	r2, [pc, #592]	; (80020ec <HAL_GPIO_Init+0x294>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d058      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001ea0:	4a92      	ldr	r2, [pc, #584]	; (80020ec <HAL_GPIO_Init+0x294>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d86f      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001ea6:	4a92      	ldr	r2, [pc, #584]	; (80020f0 <HAL_GPIO_Init+0x298>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d052      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001eac:	4a90      	ldr	r2, [pc, #576]	; (80020f0 <HAL_GPIO_Init+0x298>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d869      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001eb2:	4a90      	ldr	r2, [pc, #576]	; (80020f4 <HAL_GPIO_Init+0x29c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d04c      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a8e      	ldr	r2, [pc, #568]	; (80020f4 <HAL_GPIO_Init+0x29c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d863      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001ebe:	4a8e      	ldr	r2, [pc, #568]	; (80020f8 <HAL_GPIO_Init+0x2a0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d046      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a8c      	ldr	r2, [pc, #560]	; (80020f8 <HAL_GPIO_Init+0x2a0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d85d      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001eca:	2b12      	cmp	r3, #18
 8001ecc:	d82a      	bhi.n	8001f24 <HAL_GPIO_Init+0xcc>
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d859      	bhi.n	8001f86 <HAL_GPIO_Init+0x12e>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <HAL_GPIO_Init+0x80>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001f53 	.word	0x08001f53
 8001edc:	08001f2d 	.word	0x08001f2d
 8001ee0:	08001f3f 	.word	0x08001f3f
 8001ee4:	08001f81 	.word	0x08001f81
 8001ee8:	08001f87 	.word	0x08001f87
 8001eec:	08001f87 	.word	0x08001f87
 8001ef0:	08001f87 	.word	0x08001f87
 8001ef4:	08001f87 	.word	0x08001f87
 8001ef8:	08001f87 	.word	0x08001f87
 8001efc:	08001f87 	.word	0x08001f87
 8001f00:	08001f87 	.word	0x08001f87
 8001f04:	08001f87 	.word	0x08001f87
 8001f08:	08001f87 	.word	0x08001f87
 8001f0c:	08001f87 	.word	0x08001f87
 8001f10:	08001f87 	.word	0x08001f87
 8001f14:	08001f87 	.word	0x08001f87
 8001f18:	08001f87 	.word	0x08001f87
 8001f1c:	08001f35 	.word	0x08001f35
 8001f20:	08001f49 	.word	0x08001f49
 8001f24:	4a75      	ldr	r2, [pc, #468]	; (80020fc <HAL_GPIO_Init+0x2a4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f2a:	e02c      	b.n	8001f86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	623b      	str	r3, [r7, #32]
          break;
 8001f32:	e029      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	623b      	str	r3, [r7, #32]
          break;
 8001f3c:	e024      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	3308      	adds	r3, #8
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e01f      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	623b      	str	r3, [r7, #32]
          break;
 8001f50:	e01a      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e013      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	611a      	str	r2, [r3, #16]
          break;
 8001f72:	e009      	b.n	8001f88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f74:	2308      	movs	r3, #8
 8001f76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	615a      	str	r2, [r3, #20]
          break;
 8001f7e:	e003      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x130>
          break;
 8001f86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d801      	bhi.n	8001f92 <HAL_GPIO_Init+0x13a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	e001      	b.n	8001f96 <HAL_GPIO_Init+0x13e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d802      	bhi.n	8001fa4 <HAL_GPIO_Init+0x14c>
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x152>
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	3b08      	subs	r3, #8
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	6a39      	ldr	r1, [r7, #32]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80c1 	beq.w	800215a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_GPIO_Init+0x2a8>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a48      	ldr	r2, [pc, #288]	; (8002100 <HAL_GPIO_Init+0x2a8>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_GPIO_Init+0x2a8>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff0:	4a44      	ldr	r2, [pc, #272]	; (8002104 <HAL_GPIO_Init+0x2ac>)
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	220f      	movs	r2, #15
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <HAL_GPIO_Init+0x2b0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d01f      	beq.n	800205c <HAL_GPIO_Init+0x204>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <HAL_GPIO_Init+0x2b4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d019      	beq.n	8002058 <HAL_GPIO_Init+0x200>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <HAL_GPIO_Init+0x2b8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_GPIO_Init+0x1fc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a39      	ldr	r2, [pc, #228]	; (8002114 <HAL_GPIO_Init+0x2bc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00d      	beq.n	8002050 <HAL_GPIO_Init+0x1f8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a38      	ldr	r2, [pc, #224]	; (8002118 <HAL_GPIO_Init+0x2c0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x1f4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a37      	ldr	r2, [pc, #220]	; (800211c <HAL_GPIO_Init+0x2c4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_GPIO_Init+0x1f0>
 8002044:	2305      	movs	r3, #5
 8002046:	e00a      	b.n	800205e <HAL_GPIO_Init+0x206>
 8002048:	2306      	movs	r3, #6
 800204a:	e008      	b.n	800205e <HAL_GPIO_Init+0x206>
 800204c:	2304      	movs	r3, #4
 800204e:	e006      	b.n	800205e <HAL_GPIO_Init+0x206>
 8002050:	2303      	movs	r3, #3
 8002052:	e004      	b.n	800205e <HAL_GPIO_Init+0x206>
 8002054:	2302      	movs	r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x206>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_Init+0x206>
 800205c:	2300      	movs	r3, #0
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206e:	4925      	ldr	r1, [pc, #148]	; (8002104 <HAL_GPIO_Init+0x2ac>)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4924      	ldr	r1, [pc, #144]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4920      	ldr	r1, [pc, #128]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	491a      	ldr	r1, [pc, #104]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4916      	ldr	r1, [pc, #88]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d025      	beq.n	8002124 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4910      	ldr	r1, [pc, #64]	; (8002120 <HAL_GPIO_Init+0x2c8>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e025      	b.n	8002132 <HAL_GPIO_Init+0x2da>
 80020e6:	bf00      	nop
 80020e8:	10320000 	.word	0x10320000
 80020ec:	10310000 	.word	0x10310000
 80020f0:	10220000 	.word	0x10220000
 80020f4:	10210000 	.word	0x10210000
 80020f8:	10120000 	.word	0x10120000
 80020fc:	10110000 	.word	0x10110000
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	40010800 	.word	0x40010800
 800210c:	40010c00 	.word	0x40010c00
 8002110:	40011000 	.word	0x40011000
 8002114:	40011400 	.word	0x40011400
 8002118:	40011800 	.word	0x40011800
 800211c:	40011c00 	.word	0x40011c00
 8002120:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_GPIO_Init+0x324>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	43db      	mvns	r3, r3
 800212c:	4913      	ldr	r1, [pc, #76]	; (800217c <HAL_GPIO_Init+0x324>)
 800212e:	4013      	ands	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_GPIO_Init+0x324>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	490e      	ldr	r1, [pc, #56]	; (800217c <HAL_GPIO_Init+0x324>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
 800214a:	e006      	b.n	800215a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_GPIO_Init+0x324>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	43db      	mvns	r3, r3
 8002154:	4909      	ldr	r1, [pc, #36]	; (800217c <HAL_GPIO_Init+0x324>)
 8002156:	4013      	ands	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	3301      	adds	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	f47f ae7e 	bne.w	8001e6c <HAL_GPIO_Init+0x14>
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	372c      	adds	r7, #44	; 0x2c
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40010400 	.word	0x40010400

08002180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800219c:	e003      	b.n	80021a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	611a      	str	r2, [r3, #16]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f806 	bl	80021e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e12b      	b.n	800245e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fa5a 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	; 0x24
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002258:	f000 fcda 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a81      	ldr	r2, [pc, #516]	; (8002468 <HAL_I2C_Init+0x274>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d807      	bhi.n	8002278 <HAL_I2C_Init+0x84>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a80      	ldr	r2, [pc, #512]	; (800246c <HAL_I2C_Init+0x278>)
 800226c:	4293      	cmp	r3, r2
 800226e:	bf94      	ite	ls
 8002270:	2301      	movls	r3, #1
 8002272:	2300      	movhi	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e006      	b.n	8002286 <HAL_I2C_Init+0x92>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a7d      	ldr	r2, [pc, #500]	; (8002470 <HAL_I2C_Init+0x27c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	bf94      	ite	ls
 8002280:	2301      	movls	r3, #1
 8002282:	2300      	movhi	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0e7      	b.n	800245e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a78      	ldr	r2, [pc, #480]	; (8002474 <HAL_I2C_Init+0x280>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9b      	lsrs	r3, r3, #18
 8002298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a6a      	ldr	r2, [pc, #424]	; (8002468 <HAL_I2C_Init+0x274>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d802      	bhi.n	80022c8 <HAL_I2C_Init+0xd4>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3301      	adds	r3, #1
 80022c6:	e009      	b.n	80022dc <HAL_I2C_Init+0xe8>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a69      	ldr	r2, [pc, #420]	; (8002478 <HAL_I2C_Init+0x284>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	3301      	adds	r3, #1
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	495c      	ldr	r1, [pc, #368]	; (8002468 <HAL_I2C_Init+0x274>)
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d819      	bhi.n	8002330 <HAL_I2C_Init+0x13c>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e59      	subs	r1, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fbb1 f3f3 	udiv	r3, r1, r3
 800230a:	1c59      	adds	r1, r3, #1
 800230c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002310:	400b      	ands	r3, r1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_I2C_Init+0x138>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e59      	subs	r1, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fbb1 f3f3 	udiv	r3, r1, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232a:	e051      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 800232c:	2304      	movs	r3, #4
 800232e:	e04f      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <HAL_I2C_Init+0x168>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e58      	subs	r0, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	440b      	add	r3, r1
 8002346:	fbb0 f3f3 	udiv	r3, r0, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e012      	b.n	8002382 <HAL_I2C_Init+0x18e>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	0099      	lsls	r1, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Init+0x196>
 8002386:	2301      	movs	r3, #1
 8002388:	e022      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10e      	bne.n	80023b0 <HAL_I2C_Init+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e58      	subs	r0, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	440b      	add	r3, r1
 80023a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ae:	e00f      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	0099      	lsls	r1, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	6809      	ldr	r1, [r1, #0]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6911      	ldr	r1, [r2, #16]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68d2      	ldr	r2, [r2, #12]
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	000186a0 	.word	0x000186a0
 800246c:	001e847f 	.word	0x001e847f
 8002470:	003d08ff 	.word	0x003d08ff
 8002474:	431bde83 	.word	0x431bde83
 8002478:	10624dd3 	.word	0x10624dd3

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e272      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8087 	beq.w	80025aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249c:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d112      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
 80024b4:	4b8c      	ldr	r3, [pc, #560]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x12c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d168      	bne.n	80025a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e24c      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x76>
 80024e4:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a7f      	ldr	r2, [pc, #508]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e02e      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7a      	ldr	r2, [pc, #488]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b78      	ldr	r3, [pc, #480]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a77      	ldr	r2, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0xbc>
 800251e:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a71      	ldr	r2, [pc, #452]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002538:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fb42 	bl	8001be0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fb3e 	bl	8001be0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e200      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xe4>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fb2e 	bl	8001be0 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fb2a 	bl	8001be0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1ec      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x10c>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b6:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c2:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
 80025ce:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1c0      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4939      	ldr	r1, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fae3 	bl	8001be0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff fadf 	bl	8001be0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1a1      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4927      	ldr	r1, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff fac2 	bl	8001be0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7ff fabe 	bl	8001be0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e180      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03a      	beq.n	8002700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff faa2 	bl	8001be0 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff fa9e 	bl	8001be0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e160      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f000 face 	bl	8002c60 <RCC_Delay>
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7ff fa88 	bl	8001be0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7ff fa84 	bl	8001be0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d908      	bls.n	80026f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e146      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	42420000 	.word	0x42420000
 80026f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e9      	bne.n	80026d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a6 	beq.w	800285a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b8b      	ldr	r3, [pc, #556]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a87      	ldr	r2, [pc, #540]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7e      	ldr	r2, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7ff fa45 	bl	8001be0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7ff fa41 	bl	8001be0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e103      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b75      	ldr	r3, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x4c8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x312>
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	e02d      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x334>
 8002796:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a69      	ldr	r2, [pc, #420]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a66      	ldr	r2, [pc, #408]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	e01c      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x356>
 80027b8:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a60      	ldr	r2, [pc, #384]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	4b58      	ldr	r3, [pc, #352]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a57      	ldr	r2, [pc, #348]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7ff f9f5 	bl	8001be0 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff f9f1 	bl	8001be0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0b1      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RCC_OscConfig+0x37e>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff f9df 	bl	8001be0 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7ff f9db 	bl	8001be0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e09b      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	4b40      	ldr	r3, [pc, #256]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ee      	bne.n	8002826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b3c      	ldr	r3, [pc, #240]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d061      	beq.n	8002934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d146      	bne.n	8002906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff f9af 	bl	8001be0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7ff f9ab 	bl	8001be0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e06d      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4921      	ldr	r1, [pc, #132]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a19      	ldr	r1, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	430b      	orrs	r3, r1
 80028d2:	491b      	ldr	r1, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7ff f97f 	bl	8001be0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7ff f97b 	bl	8001be0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e03d      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46a>
 8002904:	e035      	b.n	8002972 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff f968 	bl	8001be0 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff f964 	bl	8001be0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e026      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x498>
 8002932:	e01e      	b.n	8002972 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e019      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_OscConfig+0x500>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	429a      	cmp	r2, r3
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0d0      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d910      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4965      	ldr	r1, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d040      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d115      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e073      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06b      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4936      	ldr	r1, [pc, #216]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7ff f8b6 	bl	8001be0 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7ff f8b2 	bl	8001be0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e053      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d210      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	4922      	ldr	r1, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1cc>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1d0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f814 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	080069c4 	.word	0x080069c4
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x30>
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x36>
 8002b82:	e027      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002b86:	613b      	str	r3, [r7, #16]
      break;
 8002b88:	e027      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0c9b      	lsrs	r3, r3, #18
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0c5b      	lsrs	r3, r3, #17
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002bb6:	fb03 f202 	mul.w	r2, r3, r2
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e004      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	613b      	str	r3, [r7, #16]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd6:	613b      	str	r3, [r7, #16]
      break;
 8002bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bda:	693b      	ldr	r3, [r7, #16]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	007a1200 	.word	0x007a1200
 8002bf0:	080069dc 	.word	0x080069dc
 8002bf4:	080069ec 	.word	0x080069ec
 8002bf8:	003d0900 	.word	0x003d0900

08002bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff2 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	080069d4 	.word	0x080069d4

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c3c:	f7ff ffde 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0adb      	lsrs	r3, r3, #11
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	080069d4 	.word	0x080069d4

08002c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <RCC_Delay+0x34>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <RCC_Delay+0x38>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a5b      	lsrs	r3, r3, #9
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c7c:	bf00      	nop
  }
  while (Delay --);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	60fa      	str	r2, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f9      	bne.n	8002c7c <RCC_Delay+0x1c>
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	20000000 	.word	0x20000000
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_SRAM_Init+0x1c>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb6:	d101      	bne.n	8002cbc <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e038      	b.n	8002d2e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7fe fded 	bl	80018b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3308      	adds	r3, #8
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 fd43 	bl	800376c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	f000 fda5 	bl	8003840 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6858      	ldr	r0, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f000 fdca 	bl	800389c <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	f041 0101 	orr.w	r1, r1, #1
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e041      	b.n	8002dcc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7fe fcf9 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f000 f94d 	bl	8003014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d001      	beq.n	8002dec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e03c      	b.n	8002e66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <HAL_TIM_Base_Start+0x9c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_TIM_Base_Start+0x5c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_TIM_Base_Start+0xa0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_TIM_Base_Start+0x5c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d00e      	beq.n	8002e30 <HAL_TIM_Base_Start+0x5c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_TIM_Base_Start+0xa4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_TIM_Base_Start+0x5c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_TIM_Base_Start+0xa8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_Base_Start+0x5c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_TIM_Base_Start+0xac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d111      	bne.n	8002e54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d010      	beq.n	8002e64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	e007      	b.n	8002e64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40013400 	.word	0x40013400
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	40000c00 	.word	0x40000c00

08002e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e0b4      	b.n	800300a <HAL_TIM_ConfigClockSource+0x186>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed8:	d03e      	beq.n	8002f58 <HAL_TIM_ConfigClockSource+0xd4>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	f200 8087 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee6:	f000 8086 	beq.w	8002ff6 <HAL_TIM_ConfigClockSource+0x172>
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	d87f      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b70      	cmp	r3, #112	; 0x70
 8002ef2:	d01a      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0xa6>
 8002ef4:	2b70      	cmp	r3, #112	; 0x70
 8002ef6:	d87b      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b60      	cmp	r3, #96	; 0x60
 8002efa:	d050      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x11a>
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d877      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b50      	cmp	r3, #80	; 0x50
 8002f02:	d03c      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0xfa>
 8002f04:	2b50      	cmp	r3, #80	; 0x50
 8002f06:	d873      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d058      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x13a>
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d86f      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b30      	cmp	r3, #48	; 0x30
 8002f12:	d064      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	2b30      	cmp	r3, #48	; 0x30
 8002f16:	d86b      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d060      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d867      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d05c      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d05a      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x15a>
 8002f28:	e062      	b.n	8002ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6899      	ldr	r1, [r3, #8]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f000 f968 	bl	800320e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
      break;
 8002f56:	e04f      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6899      	ldr	r1, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f000 f951 	bl	800320e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f7a:	609a      	str	r2, [r3, #8]
      break;
 8002f7c:	e03c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 f8c8 	bl	8003120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2150      	movs	r1, #80	; 0x50
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f91f 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e02c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 f8e6 	bl	800317c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2160      	movs	r1, #96	; 0x60
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f90f 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e01c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 f8a8 	bl	8003120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2140      	movs	r1, #64	; 0x40
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f8ff 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e00c      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 f8f6 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002fee:	e003      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a39      	ldr	r2, [pc, #228]	; (800310c <TIM_Base_SetConfig+0xf8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a38      	ldr	r2, [pc, #224]	; (8003110 <TIM_Base_SetConfig+0xfc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00f      	beq.n	8003054 <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d00b      	beq.n	8003054 <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a35      	ldr	r2, [pc, #212]	; (8003114 <TIM_Base_SetConfig+0x100>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a34      	ldr	r2, [pc, #208]	; (8003118 <TIM_Base_SetConfig+0x104>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a33      	ldr	r2, [pc, #204]	; (800311c <TIM_Base_SetConfig+0x108>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d108      	bne.n	8003066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a28      	ldr	r2, [pc, #160]	; (800310c <TIM_Base_SetConfig+0xf8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a27      	ldr	r2, [pc, #156]	; (8003110 <TIM_Base_SetConfig+0xfc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00f      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a24      	ldr	r2, [pc, #144]	; (8003114 <TIM_Base_SetConfig+0x100>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a23      	ldr	r2, [pc, #140]	; (8003118 <TIM_Base_SetConfig+0x104>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x82>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <TIM_Base_SetConfig+0x108>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <TIM_Base_SetConfig+0xf8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_Base_SetConfig+0xc8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <TIM_Base_SetConfig+0xfc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]
  }
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40013400 	.word	0x40013400
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00

08003120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0201 	bic.w	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800314a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f023 030a 	bic.w	r3, r3, #10
 800315c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0210 	bic.w	r2, r3, #16
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	031b      	lsls	r3, r3, #12
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f043 0307 	orr.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800320e:	b480      	push	{r7}
 8003210:	b087      	sub	sp, #28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003228:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	021a      	lsls	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	431a      	orrs	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4313      	orrs	r3, r2
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	609a      	str	r2, [r3, #8]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003260:	2302      	movs	r3, #2
 8003262:	e050      	b.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ba:	d00e      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a12      	ldr	r2, [pc, #72]	; (8003320 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10c      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40013400 	.word	0x40013400
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00

08003324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e042      	b.n	80033bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fa20 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	; 0x24
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f971 	bl	8003650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800337c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800338c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800339c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d175      	bne.n	80034d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Transmit+0x2c>
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e06e      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2221      	movs	r2, #33	; 0x21
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003402:	f7fe fbed 	bl	8001be0 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341c:	d108      	bne.n	8003430 <HAL_UART_Transmit+0x6c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e003      	b.n	8003438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003438:	e02e      	b.n	8003498 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f848 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e03a      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	3302      	adds	r3, #2
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	e007      	b.n	800348a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	3301      	adds	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1cb      	bne.n	800343a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f814 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e006      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ea:	e03b      	b.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f2:	d037      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f4:	f7fe fb74 	bl	8001be0 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	429a      	cmp	r2, r3
 8003502:	d302      	bcc.n	800350a <UART_WaitOnFlagUntilTimeout+0x30>
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e03a      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d023      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d020      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d01d      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	d116      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f81d 	bl	800358c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2208      	movs	r2, #8
 8003556:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e00f      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	429a      	cmp	r2, r3
 8003580:	d0b4      	beq.n	80034ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b095      	sub	sp, #84	; 0x54
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b4:	643a      	str	r2, [r7, #64]	; 0x40
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e5      	bne.n	8003594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3314      	adds	r3, #20
 80035ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3314      	adds	r3, #20
 80035e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	2b01      	cmp	r3, #1
 8003602:	d119      	bne.n	8003638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	60bb      	str	r3, [r7, #8]
   return(result);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f023 0310 	bic.w	r3, r3, #16
 800361a:	647b      	str	r3, [r7, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003624:	61ba      	str	r2, [r7, #24]
 8003626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	613b      	str	r3, [r7, #16]
   return(result);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003646:	bf00      	nop
 8003648:	3754      	adds	r7, #84	; 0x54
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800368a:	f023 030c 	bic.w	r3, r3, #12
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	430b      	orrs	r3, r1
 8003696:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <UART_SetConfig+0x114>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d103      	bne.n	80036c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036b8:	f7ff fabe 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	e002      	b.n	80036c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7ff faa6 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 80036c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009a      	lsls	r2, r3, #2
 80036d0:	441a      	add	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	4a22      	ldr	r2, [pc, #136]	; (8003768 <UART_SetConfig+0x118>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	0119      	lsls	r1, r3, #4
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009a      	lsls	r2, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <UART_SetConfig+0x118>)
 80036fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2064      	movs	r0, #100	; 0x64
 8003706:	fb00 f303 	mul.w	r3, r0, r3
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	3332      	adds	r3, #50	; 0x32
 8003710:	4a15      	ldr	r2, [pc, #84]	; (8003768 <UART_SetConfig+0x118>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371c:	4419      	add	r1, r3
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009a      	lsls	r2, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fbb2 f2f3 	udiv	r2, r2, r3
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <UART_SetConfig+0x118>)
 8003736:	fba3 0302 	umull	r0, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2064      	movs	r0, #100	; 0x64
 800373e:	fb00 f303 	mul.w	r3, r0, r3
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	3332      	adds	r3, #50	; 0x32
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <UART_SetConfig+0x118>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	f003 020f 	and.w	r2, r3, #15
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	440a      	add	r2, r1
 800375a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40013800 	.word	0x40013800
 8003768:	51eb851f 	.word	0x51eb851f

0800376c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	f023 0101 	bic.w	r1, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b08      	cmp	r3, #8
 8003794:	d102      	bne.n	800379c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003796:	2340      	movs	r3, #64	; 0x40
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e001      	b.n	80037a0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80037ac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80037b2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80037b8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80037be:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80037c4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80037ca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80037d0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80037d6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80037dc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <FSMC_NORSRAM_Init+0xd0>)
 80037fc:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003804:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800380c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43db      	mvns	r3, r3
 800381c:	ea02 0103 	and.w	r1, r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4319      	orrs	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	0008fb7f 	.word	0x0008fb7f

08003840 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8003856:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 800385e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8003866:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	3b01      	subs	r3, #1
 800386e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8003870:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	3b02      	subs	r3, #2
 8003878:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 800387a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8003886:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
	...

0800389c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b0:	d11d      	bne.n	80038ee <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80038bc:	4013      	ands	r3, r2
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	6852      	ldr	r2, [r2, #4]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	4311      	orrs	r1, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	6892      	ldr	r2, [r2, #8]
 80038ce:	0212      	lsls	r2, r2, #8
 80038d0:	4311      	orrs	r1, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	6992      	ldr	r2, [r2, #24]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	68d2      	ldr	r2, [r2, #12]
 80038dc:	0412      	lsls	r2, r2, #16
 80038de:	430a      	orrs	r2, r1
 80038e0:	ea43 0102 	orr.w	r1, r3, r2
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80038ec:	e005      	b.n	80038fa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80038f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	cff00000 	.word	0xcff00000

0800390c <__errno>:
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <__errno+0x8>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	2000000c 	.word	0x2000000c

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	2600      	movs	r6, #0
 800391c:	4d0c      	ldr	r5, [pc, #48]	; (8003950 <__libc_init_array+0x38>)
 800391e:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	f002 fd2e 	bl	8006388 <_init>
 800392c:	2600      	movs	r6, #0
 800392e:	4d0a      	ldr	r5, [pc, #40]	; (8003958 <__libc_init_array+0x40>)
 8003930:	4c0a      	ldr	r4, [pc, #40]	; (800395c <__libc_init_array+0x44>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	f855 3b04 	ldr.w	r3, [r5], #4
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	08006dcc 	.word	0x08006dcc
 8003954:	08006dcc 	.word	0x08006dcc
 8003958:	08006dcc 	.word	0x08006dcc
 800395c:	08006dd0 	.word	0x08006dd0

08003960 <memset>:
 8003960:	4603      	mov	r3, r0
 8003962:	4402      	add	r2, r0
 8003964:	4293      	cmp	r3, r2
 8003966:	d100      	bne.n	800396a <memset+0xa>
 8003968:	4770      	bx	lr
 800396a:	f803 1b01 	strb.w	r1, [r3], #1
 800396e:	e7f9      	b.n	8003964 <memset+0x4>

08003970 <__cvt>:
 8003970:	2b00      	cmp	r3, #0
 8003972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003976:	461f      	mov	r7, r3
 8003978:	bfbb      	ittet	lt
 800397a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800397e:	461f      	movlt	r7, r3
 8003980:	2300      	movge	r3, #0
 8003982:	232d      	movlt	r3, #45	; 0x2d
 8003984:	b088      	sub	sp, #32
 8003986:	4614      	mov	r4, r2
 8003988:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800398a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800398c:	7013      	strb	r3, [r2, #0]
 800398e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003990:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003994:	f023 0820 	bic.w	r8, r3, #32
 8003998:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800399c:	d005      	beq.n	80039aa <__cvt+0x3a>
 800399e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80039a2:	d100      	bne.n	80039a6 <__cvt+0x36>
 80039a4:	3501      	adds	r5, #1
 80039a6:	2302      	movs	r3, #2
 80039a8:	e000      	b.n	80039ac <__cvt+0x3c>
 80039aa:	2303      	movs	r3, #3
 80039ac:	aa07      	add	r2, sp, #28
 80039ae:	9204      	str	r2, [sp, #16]
 80039b0:	aa06      	add	r2, sp, #24
 80039b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80039b6:	e9cd 3500 	strd	r3, r5, [sp]
 80039ba:	4622      	mov	r2, r4
 80039bc:	463b      	mov	r3, r7
 80039be:	f000 fcc3 	bl	8004348 <_dtoa_r>
 80039c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039c6:	4606      	mov	r6, r0
 80039c8:	d102      	bne.n	80039d0 <__cvt+0x60>
 80039ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039cc:	07db      	lsls	r3, r3, #31
 80039ce:	d522      	bpl.n	8003a16 <__cvt+0xa6>
 80039d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039d4:	eb06 0905 	add.w	r9, r6, r5
 80039d8:	d110      	bne.n	80039fc <__cvt+0x8c>
 80039da:	7833      	ldrb	r3, [r6, #0]
 80039dc:	2b30      	cmp	r3, #48	; 0x30
 80039de:	d10a      	bne.n	80039f6 <__cvt+0x86>
 80039e0:	2200      	movs	r2, #0
 80039e2:	2300      	movs	r3, #0
 80039e4:	4620      	mov	r0, r4
 80039e6:	4639      	mov	r1, r7
 80039e8:	f7fd f84a 	bl	8000a80 <__aeabi_dcmpeq>
 80039ec:	b918      	cbnz	r0, 80039f6 <__cvt+0x86>
 80039ee:	f1c5 0501 	rsb	r5, r5, #1
 80039f2:	f8ca 5000 	str.w	r5, [sl]
 80039f6:	f8da 3000 	ldr.w	r3, [sl]
 80039fa:	4499      	add	r9, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	4620      	mov	r0, r4
 8003a02:	4639      	mov	r1, r7
 8003a04:	f7fd f83c 	bl	8000a80 <__aeabi_dcmpeq>
 8003a08:	b108      	cbz	r0, 8003a0e <__cvt+0x9e>
 8003a0a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003a0e:	2230      	movs	r2, #48	; 0x30
 8003a10:	9b07      	ldr	r3, [sp, #28]
 8003a12:	454b      	cmp	r3, r9
 8003a14:	d307      	bcc.n	8003a26 <__cvt+0xb6>
 8003a16:	4630      	mov	r0, r6
 8003a18:	9b07      	ldr	r3, [sp, #28]
 8003a1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a1c:	1b9b      	subs	r3, r3, r6
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	b008      	add	sp, #32
 8003a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	9107      	str	r1, [sp, #28]
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	e7f0      	b.n	8003a10 <__cvt+0xa0>

08003a2e <__exponent>:
 8003a2e:	4603      	mov	r3, r0
 8003a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a32:	2900      	cmp	r1, #0
 8003a34:	f803 2b02 	strb.w	r2, [r3], #2
 8003a38:	bfb6      	itet	lt
 8003a3a:	222d      	movlt	r2, #45	; 0x2d
 8003a3c:	222b      	movge	r2, #43	; 0x2b
 8003a3e:	4249      	neglt	r1, r1
 8003a40:	2909      	cmp	r1, #9
 8003a42:	7042      	strb	r2, [r0, #1]
 8003a44:	dd2b      	ble.n	8003a9e <__exponent+0x70>
 8003a46:	f10d 0407 	add.w	r4, sp, #7
 8003a4a:	46a4      	mov	ip, r4
 8003a4c:	270a      	movs	r7, #10
 8003a4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a52:	460a      	mov	r2, r1
 8003a54:	46a6      	mov	lr, r4
 8003a56:	fb07 1516 	mls	r5, r7, r6, r1
 8003a5a:	2a63      	cmp	r2, #99	; 0x63
 8003a5c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003a60:	4631      	mov	r1, r6
 8003a62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003a66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a6a:	dcf0      	bgt.n	8003a4e <__exponent+0x20>
 8003a6c:	3130      	adds	r1, #48	; 0x30
 8003a6e:	f1ae 0502 	sub.w	r5, lr, #2
 8003a72:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a76:	4629      	mov	r1, r5
 8003a78:	1c44      	adds	r4, r0, #1
 8003a7a:	4561      	cmp	r1, ip
 8003a7c:	d30a      	bcc.n	8003a94 <__exponent+0x66>
 8003a7e:	f10d 0209 	add.w	r2, sp, #9
 8003a82:	eba2 020e 	sub.w	r2, r2, lr
 8003a86:	4565      	cmp	r5, ip
 8003a88:	bf88      	it	hi
 8003a8a:	2200      	movhi	r2, #0
 8003a8c:	4413      	add	r3, r2
 8003a8e:	1a18      	subs	r0, r3, r0
 8003a90:	b003      	add	sp, #12
 8003a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a98:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a9c:	e7ed      	b.n	8003a7a <__exponent+0x4c>
 8003a9e:	2330      	movs	r3, #48	; 0x30
 8003aa0:	3130      	adds	r1, #48	; 0x30
 8003aa2:	7083      	strb	r3, [r0, #2]
 8003aa4:	70c1      	strb	r1, [r0, #3]
 8003aa6:	1d03      	adds	r3, r0, #4
 8003aa8:	e7f1      	b.n	8003a8e <__exponent+0x60>
	...

08003aac <_printf_float>:
 8003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	b091      	sub	sp, #68	; 0x44
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ab8:	4616      	mov	r6, r2
 8003aba:	461f      	mov	r7, r3
 8003abc:	4605      	mov	r5, r0
 8003abe:	f001 fa31 	bl	8004f24 <_localeconv_r>
 8003ac2:	6803      	ldr	r3, [r0, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac8:	f7fc fbae 	bl	8000228 <strlen>
 8003acc:	2300      	movs	r3, #0
 8003ace:	930e      	str	r3, [sp, #56]	; 0x38
 8003ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad4:	900a      	str	r0, [sp, #40]	; 0x28
 8003ad6:	3307      	adds	r3, #7
 8003ad8:	f023 0307 	bic.w	r3, r3, #7
 8003adc:	f103 0208 	add.w	r2, r3, #8
 8003ae0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ae4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ae8:	f8c8 2000 	str.w	r2, [r8]
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003af4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003af8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003afc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b02:	4640      	mov	r0, r8
 8003b04:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <_printf_float+0x2cc>)
 8003b06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b08:	f7fc ffec 	bl	8000ae4 <__aeabi_dcmpun>
 8003b0c:	bb70      	cbnz	r0, 8003b6c <_printf_float+0xc0>
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b12:	4640      	mov	r0, r8
 8003b14:	4b98      	ldr	r3, [pc, #608]	; (8003d78 <_printf_float+0x2cc>)
 8003b16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b18:	f7fc ffc6 	bl	8000aa8 <__aeabi_dcmple>
 8003b1c:	bb30      	cbnz	r0, 8003b6c <_printf_float+0xc0>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2300      	movs	r3, #0
 8003b22:	4640      	mov	r0, r8
 8003b24:	4651      	mov	r1, sl
 8003b26:	f7fc ffb5 	bl	8000a94 <__aeabi_dcmplt>
 8003b2a:	b110      	cbz	r0, 8003b32 <_printf_float+0x86>
 8003b2c:	232d      	movs	r3, #45	; 0x2d
 8003b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b32:	4b92      	ldr	r3, [pc, #584]	; (8003d7c <_printf_float+0x2d0>)
 8003b34:	4892      	ldr	r0, [pc, #584]	; (8003d80 <_printf_float+0x2d4>)
 8003b36:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b3a:	bf94      	ite	ls
 8003b3c:	4698      	movls	r8, r3
 8003b3e:	4680      	movhi	r8, r0
 8003b40:	2303      	movs	r3, #3
 8003b42:	f04f 0a00 	mov.w	sl, #0
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	f02b 0304 	bic.w	r3, fp, #4
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	4633      	mov	r3, r6
 8003b50:	4621      	mov	r1, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	9700      	str	r7, [sp, #0]
 8003b56:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b58:	f000 f9d4 	bl	8003f04 <_printf_common>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	f040 8090 	bne.w	8003c82 <_printf_float+0x1d6>
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b66:	b011      	add	sp, #68	; 0x44
 8003b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	4653      	mov	r3, sl
 8003b70:	4640      	mov	r0, r8
 8003b72:	4651      	mov	r1, sl
 8003b74:	f7fc ffb6 	bl	8000ae4 <__aeabi_dcmpun>
 8003b78:	b148      	cbz	r0, 8003b8e <_printf_float+0xe2>
 8003b7a:	f1ba 0f00 	cmp.w	sl, #0
 8003b7e:	bfb8      	it	lt
 8003b80:	232d      	movlt	r3, #45	; 0x2d
 8003b82:	4880      	ldr	r0, [pc, #512]	; (8003d84 <_printf_float+0x2d8>)
 8003b84:	bfb8      	it	lt
 8003b86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <_printf_float+0x2dc>)
 8003b8c:	e7d3      	b.n	8003b36 <_printf_float+0x8a>
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	d142      	bne.n	8003c1e <_printf_float+0x172>
 8003b98:	2306      	movs	r3, #6
 8003b9a:	6063      	str	r3, [r4, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	9206      	str	r2, [sp, #24]
 8003ba0:	aa0e      	add	r2, sp, #56	; 0x38
 8003ba2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003ba6:	aa0d      	add	r2, sp, #52	; 0x34
 8003ba8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003bac:	9203      	str	r2, [sp, #12]
 8003bae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003bb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	4642      	mov	r2, r8
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	4653      	mov	r3, sl
 8003bc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8003bc4:	f7ff fed4 	bl	8003970 <__cvt>
 8003bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bca:	4680      	mov	r8, r0
 8003bcc:	2947      	cmp	r1, #71	; 0x47
 8003bce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bd0:	d108      	bne.n	8003be4 <_printf_float+0x138>
 8003bd2:	1cc8      	adds	r0, r1, #3
 8003bd4:	db02      	blt.n	8003bdc <_printf_float+0x130>
 8003bd6:	6863      	ldr	r3, [r4, #4]
 8003bd8:	4299      	cmp	r1, r3
 8003bda:	dd40      	ble.n	8003c5e <_printf_float+0x1b2>
 8003bdc:	f1a9 0902 	sub.w	r9, r9, #2
 8003be0:	fa5f f989 	uxtb.w	r9, r9
 8003be4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003be8:	d81f      	bhi.n	8003c2a <_printf_float+0x17e>
 8003bea:	464a      	mov	r2, r9
 8003bec:	3901      	subs	r1, #1
 8003bee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bf2:	910d      	str	r1, [sp, #52]	; 0x34
 8003bf4:	f7ff ff1b 	bl	8003a2e <__exponent>
 8003bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bfa:	4682      	mov	sl, r0
 8003bfc:	1813      	adds	r3, r2, r0
 8003bfe:	2a01      	cmp	r2, #1
 8003c00:	6123      	str	r3, [r4, #16]
 8003c02:	dc02      	bgt.n	8003c0a <_printf_float+0x15e>
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	07d2      	lsls	r2, r2, #31
 8003c08:	d501      	bpl.n	8003c0e <_printf_float+0x162>
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	6123      	str	r3, [r4, #16]
 8003c0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d09b      	beq.n	8003b4e <_printf_float+0xa2>
 8003c16:	232d      	movs	r3, #45	; 0x2d
 8003c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c1c:	e797      	b.n	8003b4e <_printf_float+0xa2>
 8003c1e:	2947      	cmp	r1, #71	; 0x47
 8003c20:	d1bc      	bne.n	8003b9c <_printf_float+0xf0>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ba      	bne.n	8003b9c <_printf_float+0xf0>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e7b7      	b.n	8003b9a <_printf_float+0xee>
 8003c2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003c2e:	d118      	bne.n	8003c62 <_printf_float+0x1b6>
 8003c30:	2900      	cmp	r1, #0
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	dd0b      	ble.n	8003c4e <_printf_float+0x1a2>
 8003c36:	6121      	str	r1, [r4, #16]
 8003c38:	b913      	cbnz	r3, 8003c40 <_printf_float+0x194>
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	07d0      	lsls	r0, r2, #31
 8003c3e:	d502      	bpl.n	8003c46 <_printf_float+0x19a>
 8003c40:	3301      	adds	r3, #1
 8003c42:	440b      	add	r3, r1
 8003c44:	6123      	str	r3, [r4, #16]
 8003c46:	f04f 0a00 	mov.w	sl, #0
 8003c4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c4c:	e7df      	b.n	8003c0e <_printf_float+0x162>
 8003c4e:	b913      	cbnz	r3, 8003c56 <_printf_float+0x1aa>
 8003c50:	6822      	ldr	r2, [r4, #0]
 8003c52:	07d2      	lsls	r2, r2, #31
 8003c54:	d501      	bpl.n	8003c5a <_printf_float+0x1ae>
 8003c56:	3302      	adds	r3, #2
 8003c58:	e7f4      	b.n	8003c44 <_printf_float+0x198>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e7f2      	b.n	8003c44 <_printf_float+0x198>
 8003c5e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c64:	4299      	cmp	r1, r3
 8003c66:	db05      	blt.n	8003c74 <_printf_float+0x1c8>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	6121      	str	r1, [r4, #16]
 8003c6c:	07d8      	lsls	r0, r3, #31
 8003c6e:	d5ea      	bpl.n	8003c46 <_printf_float+0x19a>
 8003c70:	1c4b      	adds	r3, r1, #1
 8003c72:	e7e7      	b.n	8003c44 <_printf_float+0x198>
 8003c74:	2900      	cmp	r1, #0
 8003c76:	bfcc      	ite	gt
 8003c78:	2201      	movgt	r2, #1
 8003c7a:	f1c1 0202 	rsble	r2, r1, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	e7e0      	b.n	8003c44 <_printf_float+0x198>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	055a      	lsls	r2, r3, #21
 8003c86:	d407      	bmi.n	8003c98 <_printf_float+0x1ec>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	4642      	mov	r2, r8
 8003c8c:	4631      	mov	r1, r6
 8003c8e:	4628      	mov	r0, r5
 8003c90:	47b8      	blx	r7
 8003c92:	3001      	adds	r0, #1
 8003c94:	d12b      	bne.n	8003cee <_printf_float+0x242>
 8003c96:	e764      	b.n	8003b62 <_printf_float+0xb6>
 8003c98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c9c:	f240 80dd 	bls.w	8003e5a <_printf_float+0x3ae>
 8003ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f7fc feea 	bl	8000a80 <__aeabi_dcmpeq>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d033      	beq.n	8003d18 <_printf_float+0x26c>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <_printf_float+0x2e0>)
 8003cb8:	47b8      	blx	r7
 8003cba:	3001      	adds	r0, #1
 8003cbc:	f43f af51 	beq.w	8003b62 <_printf_float+0xb6>
 8003cc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	db02      	blt.n	8003cce <_printf_float+0x222>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	07d8      	lsls	r0, r3, #31
 8003ccc:	d50f      	bpl.n	8003cee <_printf_float+0x242>
 8003cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	47b8      	blx	r7
 8003cd8:	3001      	adds	r0, #1
 8003cda:	f43f af42 	beq.w	8003b62 <_printf_float+0xb6>
 8003cde:	f04f 0800 	mov.w	r8, #0
 8003ce2:	f104 091a 	add.w	r9, r4, #26
 8003ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	4543      	cmp	r3, r8
 8003cec:	dc09      	bgt.n	8003d02 <_printf_float+0x256>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	079b      	lsls	r3, r3, #30
 8003cf2:	f100 8102 	bmi.w	8003efa <_printf_float+0x44e>
 8003cf6:	68e0      	ldr	r0, [r4, #12]
 8003cf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cfa:	4298      	cmp	r0, r3
 8003cfc:	bfb8      	it	lt
 8003cfe:	4618      	movlt	r0, r3
 8003d00:	e731      	b.n	8003b66 <_printf_float+0xba>
 8003d02:	2301      	movs	r3, #1
 8003d04:	464a      	mov	r2, r9
 8003d06:	4631      	mov	r1, r6
 8003d08:	4628      	mov	r0, r5
 8003d0a:	47b8      	blx	r7
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	f43f af28 	beq.w	8003b62 <_printf_float+0xb6>
 8003d12:	f108 0801 	add.w	r8, r8, #1
 8003d16:	e7e6      	b.n	8003ce6 <_printf_float+0x23a>
 8003d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	dc38      	bgt.n	8003d90 <_printf_float+0x2e4>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	4631      	mov	r1, r6
 8003d22:	4628      	mov	r0, r5
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <_printf_float+0x2e0>)
 8003d26:	47b8      	blx	r7
 8003d28:	3001      	adds	r0, #1
 8003d2a:	f43f af1a 	beq.w	8003b62 <_printf_float+0xb6>
 8003d2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d32:	4313      	orrs	r3, r2
 8003d34:	d102      	bne.n	8003d3c <_printf_float+0x290>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	07d9      	lsls	r1, r3, #31
 8003d3a:	d5d8      	bpl.n	8003cee <_printf_float+0x242>
 8003d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d40:	4631      	mov	r1, r6
 8003d42:	4628      	mov	r0, r5
 8003d44:	47b8      	blx	r7
 8003d46:	3001      	adds	r0, #1
 8003d48:	f43f af0b 	beq.w	8003b62 <_printf_float+0xb6>
 8003d4c:	f04f 0900 	mov.w	r9, #0
 8003d50:	f104 0a1a 	add.w	sl, r4, #26
 8003d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d56:	425b      	negs	r3, r3
 8003d58:	454b      	cmp	r3, r9
 8003d5a:	dc01      	bgt.n	8003d60 <_printf_float+0x2b4>
 8003d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d5e:	e794      	b.n	8003c8a <_printf_float+0x1de>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4652      	mov	r2, sl
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	f43f aef9 	beq.w	8003b62 <_printf_float+0xb6>
 8003d70:	f109 0901 	add.w	r9, r9, #1
 8003d74:	e7ee      	b.n	8003d54 <_printf_float+0x2a8>
 8003d76:	bf00      	nop
 8003d78:	7fefffff 	.word	0x7fefffff
 8003d7c:	080069f4 	.word	0x080069f4
 8003d80:	080069f8 	.word	0x080069f8
 8003d84:	08006a00 	.word	0x08006a00
 8003d88:	080069fc 	.word	0x080069fc
 8003d8c:	08006a04 	.word	0x08006a04
 8003d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bfa8      	it	ge
 8003d98:	461a      	movge	r2, r3
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	4691      	mov	r9, r2
 8003d9e:	dc37      	bgt.n	8003e10 <_printf_float+0x364>
 8003da0:	f04f 0b00 	mov.w	fp, #0
 8003da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003da8:	f104 021a 	add.w	r2, r4, #26
 8003dac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003db0:	ebaa 0309 	sub.w	r3, sl, r9
 8003db4:	455b      	cmp	r3, fp
 8003db6:	dc33      	bgt.n	8003e20 <_printf_float+0x374>
 8003db8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	db3b      	blt.n	8003e38 <_printf_float+0x38c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	07da      	lsls	r2, r3, #31
 8003dc4:	d438      	bmi.n	8003e38 <_printf_float+0x38c>
 8003dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003dca:	eba3 020a 	sub.w	r2, r3, sl
 8003dce:	eba3 0901 	sub.w	r9, r3, r1
 8003dd2:	4591      	cmp	r9, r2
 8003dd4:	bfa8      	it	ge
 8003dd6:	4691      	movge	r9, r2
 8003dd8:	f1b9 0f00 	cmp.w	r9, #0
 8003ddc:	dc34      	bgt.n	8003e48 <_printf_float+0x39c>
 8003dde:	f04f 0800 	mov.w	r8, #0
 8003de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003de6:	f104 0a1a 	add.w	sl, r4, #26
 8003dea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	eba3 0309 	sub.w	r3, r3, r9
 8003df4:	4543      	cmp	r3, r8
 8003df6:	f77f af7a 	ble.w	8003cee <_printf_float+0x242>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f aeac 	beq.w	8003b62 <_printf_float+0xb6>
 8003e0a:	f108 0801 	add.w	r8, r8, #1
 8003e0e:	e7ec      	b.n	8003dea <_printf_float+0x33e>
 8003e10:	4613      	mov	r3, r2
 8003e12:	4631      	mov	r1, r6
 8003e14:	4642      	mov	r2, r8
 8003e16:	4628      	mov	r0, r5
 8003e18:	47b8      	blx	r7
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d1c0      	bne.n	8003da0 <_printf_float+0x2f4>
 8003e1e:	e6a0      	b.n	8003b62 <_printf_float+0xb6>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f ae99 	beq.w	8003b62 <_printf_float+0xb6>
 8003e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e32:	f10b 0b01 	add.w	fp, fp, #1
 8003e36:	e7b9      	b.n	8003dac <_printf_float+0x300>
 8003e38:	4631      	mov	r1, r6
 8003e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e3e:	4628      	mov	r0, r5
 8003e40:	47b8      	blx	r7
 8003e42:	3001      	adds	r0, #1
 8003e44:	d1bf      	bne.n	8003dc6 <_printf_float+0x31a>
 8003e46:	e68c      	b.n	8003b62 <_printf_float+0xb6>
 8003e48:	464b      	mov	r3, r9
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	eb08 020a 	add.w	r2, r8, sl
 8003e52:	47b8      	blx	r7
 8003e54:	3001      	adds	r0, #1
 8003e56:	d1c2      	bne.n	8003dde <_printf_float+0x332>
 8003e58:	e683      	b.n	8003b62 <_printf_float+0xb6>
 8003e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e5c:	2a01      	cmp	r2, #1
 8003e5e:	dc01      	bgt.n	8003e64 <_printf_float+0x3b8>
 8003e60:	07db      	lsls	r3, r3, #31
 8003e62:	d537      	bpl.n	8003ed4 <_printf_float+0x428>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4642      	mov	r2, r8
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f ae77 	beq.w	8003b62 <_printf_float+0xb6>
 8003e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f ae6f 	beq.w	8003b62 <_printf_float+0xb6>
 8003e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f7fc fdf8 	bl	8000a80 <__aeabi_dcmpeq>
 8003e90:	b9d8      	cbnz	r0, 8003eca <_printf_float+0x41e>
 8003e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e94:	f108 0201 	add.w	r2, r8, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d10e      	bne.n	8003ec2 <_printf_float+0x416>
 8003ea4:	e65d      	b.n	8003b62 <_printf_float+0xb6>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	464a      	mov	r2, r9
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f ae56 	beq.w	8003b62 <_printf_float+0xb6>
 8003eb6:	f108 0801 	add.w	r8, r8, #1
 8003eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	4543      	cmp	r3, r8
 8003ec0:	dcf1      	bgt.n	8003ea6 <_printf_float+0x3fa>
 8003ec2:	4653      	mov	r3, sl
 8003ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ec8:	e6e0      	b.n	8003c8c <_printf_float+0x1e0>
 8003eca:	f04f 0800 	mov.w	r8, #0
 8003ece:	f104 091a 	add.w	r9, r4, #26
 8003ed2:	e7f2      	b.n	8003eba <_printf_float+0x40e>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	e7df      	b.n	8003e9a <_printf_float+0x3ee>
 8003eda:	2301      	movs	r3, #1
 8003edc:	464a      	mov	r2, r9
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	47b8      	blx	r7
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f43f ae3c 	beq.w	8003b62 <_printf_float+0xb6>
 8003eea:	f108 0801 	add.w	r8, r8, #1
 8003eee:	68e3      	ldr	r3, [r4, #12]
 8003ef0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ef2:	1a5b      	subs	r3, r3, r1
 8003ef4:	4543      	cmp	r3, r8
 8003ef6:	dcf0      	bgt.n	8003eda <_printf_float+0x42e>
 8003ef8:	e6fd      	b.n	8003cf6 <_printf_float+0x24a>
 8003efa:	f04f 0800 	mov.w	r8, #0
 8003efe:	f104 0919 	add.w	r9, r4, #25
 8003f02:	e7f4      	b.n	8003eee <_printf_float+0x442>

08003f04 <_printf_common>:
 8003f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	4616      	mov	r6, r2
 8003f0a:	4699      	mov	r9, r3
 8003f0c:	688a      	ldr	r2, [r1, #8]
 8003f0e:	690b      	ldr	r3, [r1, #16]
 8003f10:	4607      	mov	r7, r0
 8003f12:	4293      	cmp	r3, r2
 8003f14:	bfb8      	it	lt
 8003f16:	4613      	movlt	r3, r2
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f1e:	460c      	mov	r4, r1
 8003f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f24:	b10a      	cbz	r2, 8003f2a <_printf_common+0x26>
 8003f26:	3301      	adds	r3, #1
 8003f28:	6033      	str	r3, [r6, #0]
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	0699      	lsls	r1, r3, #26
 8003f2e:	bf42      	ittt	mi
 8003f30:	6833      	ldrmi	r3, [r6, #0]
 8003f32:	3302      	addmi	r3, #2
 8003f34:	6033      	strmi	r3, [r6, #0]
 8003f36:	6825      	ldr	r5, [r4, #0]
 8003f38:	f015 0506 	ands.w	r5, r5, #6
 8003f3c:	d106      	bne.n	8003f4c <_printf_common+0x48>
 8003f3e:	f104 0a19 	add.w	sl, r4, #25
 8003f42:	68e3      	ldr	r3, [r4, #12]
 8003f44:	6832      	ldr	r2, [r6, #0]
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	42ab      	cmp	r3, r5
 8003f4a:	dc28      	bgt.n	8003f9e <_printf_common+0x9a>
 8003f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f50:	1e13      	subs	r3, r2, #0
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	bf18      	it	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	0692      	lsls	r2, r2, #26
 8003f5a:	d42d      	bmi.n	8003fb8 <_printf_common+0xb4>
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	4638      	mov	r0, r7
 8003f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f64:	47c0      	blx	r8
 8003f66:	3001      	adds	r0, #1
 8003f68:	d020      	beq.n	8003fac <_printf_common+0xa8>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	68e5      	ldr	r5, [r4, #12]
 8003f6e:	f003 0306 	and.w	r3, r3, #6
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	bf18      	it	ne
 8003f76:	2500      	movne	r5, #0
 8003f78:	6832      	ldr	r2, [r6, #0]
 8003f7a:	f04f 0600 	mov.w	r6, #0
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	bf08      	it	eq
 8003f82:	1aad      	subeq	r5, r5, r2
 8003f84:	6922      	ldr	r2, [r4, #16]
 8003f86:	bf08      	it	eq
 8003f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bfc4      	itt	gt
 8003f90:	1a9b      	subgt	r3, r3, r2
 8003f92:	18ed      	addgt	r5, r5, r3
 8003f94:	341a      	adds	r4, #26
 8003f96:	42b5      	cmp	r5, r6
 8003f98:	d11a      	bne.n	8003fd0 <_printf_common+0xcc>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e008      	b.n	8003fb0 <_printf_common+0xac>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	47c0      	blx	r8
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d103      	bne.n	8003fb4 <_printf_common+0xb0>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7c4      	b.n	8003f42 <_printf_common+0x3e>
 8003fb8:	2030      	movs	r0, #48	; 0x30
 8003fba:	18e1      	adds	r1, r4, r3
 8003fbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc6:	4422      	add	r2, r4
 8003fc8:	3302      	adds	r3, #2
 8003fca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fce:	e7c5      	b.n	8003f5c <_printf_common+0x58>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	47c0      	blx	r8
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0e6      	beq.n	8003fac <_printf_common+0xa8>
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7d9      	b.n	8003f96 <_printf_common+0x92>
	...

08003fe4 <_printf_i>:
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	7e0f      	ldrb	r7, [r1, #24]
 8003fea:	4691      	mov	r9, r2
 8003fec:	2f78      	cmp	r7, #120	; 0x78
 8003fee:	4680      	mov	r8, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	469a      	mov	sl, r3
 8003ff4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ffa:	d807      	bhi.n	800400c <_printf_i+0x28>
 8003ffc:	2f62      	cmp	r7, #98	; 0x62
 8003ffe:	d80a      	bhi.n	8004016 <_printf_i+0x32>
 8004000:	2f00      	cmp	r7, #0
 8004002:	f000 80d9 	beq.w	80041b8 <_printf_i+0x1d4>
 8004006:	2f58      	cmp	r7, #88	; 0x58
 8004008:	f000 80a4 	beq.w	8004154 <_printf_i+0x170>
 800400c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004014:	e03a      	b.n	800408c <_printf_i+0xa8>
 8004016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401a:	2b15      	cmp	r3, #21
 800401c:	d8f6      	bhi.n	800400c <_printf_i+0x28>
 800401e:	a101      	add	r1, pc, #4	; (adr r1, 8004024 <_printf_i+0x40>)
 8004020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004024:	0800407d 	.word	0x0800407d
 8004028:	08004091 	.word	0x08004091
 800402c:	0800400d 	.word	0x0800400d
 8004030:	0800400d 	.word	0x0800400d
 8004034:	0800400d 	.word	0x0800400d
 8004038:	0800400d 	.word	0x0800400d
 800403c:	08004091 	.word	0x08004091
 8004040:	0800400d 	.word	0x0800400d
 8004044:	0800400d 	.word	0x0800400d
 8004048:	0800400d 	.word	0x0800400d
 800404c:	0800400d 	.word	0x0800400d
 8004050:	0800419f 	.word	0x0800419f
 8004054:	080040c1 	.word	0x080040c1
 8004058:	08004181 	.word	0x08004181
 800405c:	0800400d 	.word	0x0800400d
 8004060:	0800400d 	.word	0x0800400d
 8004064:	080041c1 	.word	0x080041c1
 8004068:	0800400d 	.word	0x0800400d
 800406c:	080040c1 	.word	0x080040c1
 8004070:	0800400d 	.word	0x0800400d
 8004074:	0800400d 	.word	0x0800400d
 8004078:	08004189 	.word	0x08004189
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	602a      	str	r2, [r5, #0]
 8004084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e0a4      	b.n	80041da <_printf_i+0x1f6>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	6829      	ldr	r1, [r5, #0]
 8004094:	0606      	lsls	r6, r0, #24
 8004096:	f101 0304 	add.w	r3, r1, #4
 800409a:	d50a      	bpl.n	80040b2 <_printf_i+0xce>
 800409c:	680e      	ldr	r6, [r1, #0]
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	2e00      	cmp	r6, #0
 80040a2:	da03      	bge.n	80040ac <_printf_i+0xc8>
 80040a4:	232d      	movs	r3, #45	; 0x2d
 80040a6:	4276      	negs	r6, r6
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ac:	230a      	movs	r3, #10
 80040ae:	485e      	ldr	r0, [pc, #376]	; (8004228 <_printf_i+0x244>)
 80040b0:	e019      	b.n	80040e6 <_printf_i+0x102>
 80040b2:	680e      	ldr	r6, [r1, #0]
 80040b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040b8:	602b      	str	r3, [r5, #0]
 80040ba:	bf18      	it	ne
 80040bc:	b236      	sxthne	r6, r6
 80040be:	e7ef      	b.n	80040a0 <_printf_i+0xbc>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	6029      	str	r1, [r5, #0]
 80040c8:	0601      	lsls	r1, r0, #24
 80040ca:	d501      	bpl.n	80040d0 <_printf_i+0xec>
 80040cc:	681e      	ldr	r6, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <_printf_i+0xf2>
 80040d0:	0646      	lsls	r6, r0, #25
 80040d2:	d5fb      	bpl.n	80040cc <_printf_i+0xe8>
 80040d4:	881e      	ldrh	r6, [r3, #0]
 80040d6:	2f6f      	cmp	r7, #111	; 0x6f
 80040d8:	bf0c      	ite	eq
 80040da:	2308      	moveq	r3, #8
 80040dc:	230a      	movne	r3, #10
 80040de:	4852      	ldr	r0, [pc, #328]	; (8004228 <_printf_i+0x244>)
 80040e0:	2100      	movs	r1, #0
 80040e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040e6:	6865      	ldr	r5, [r4, #4]
 80040e8:	2d00      	cmp	r5, #0
 80040ea:	bfa8      	it	ge
 80040ec:	6821      	ldrge	r1, [r4, #0]
 80040ee:	60a5      	str	r5, [r4, #8]
 80040f0:	bfa4      	itt	ge
 80040f2:	f021 0104 	bicge.w	r1, r1, #4
 80040f6:	6021      	strge	r1, [r4, #0]
 80040f8:	b90e      	cbnz	r6, 80040fe <_printf_i+0x11a>
 80040fa:	2d00      	cmp	r5, #0
 80040fc:	d04d      	beq.n	800419a <_printf_i+0x1b6>
 80040fe:	4615      	mov	r5, r2
 8004100:	fbb6 f1f3 	udiv	r1, r6, r3
 8004104:	fb03 6711 	mls	r7, r3, r1, r6
 8004108:	5dc7      	ldrb	r7, [r0, r7]
 800410a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800410e:	4637      	mov	r7, r6
 8004110:	42bb      	cmp	r3, r7
 8004112:	460e      	mov	r6, r1
 8004114:	d9f4      	bls.n	8004100 <_printf_i+0x11c>
 8004116:	2b08      	cmp	r3, #8
 8004118:	d10b      	bne.n	8004132 <_printf_i+0x14e>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	07de      	lsls	r6, r3, #31
 800411e:	d508      	bpl.n	8004132 <_printf_i+0x14e>
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	6861      	ldr	r1, [r4, #4]
 8004124:	4299      	cmp	r1, r3
 8004126:	bfde      	ittt	le
 8004128:	2330      	movle	r3, #48	; 0x30
 800412a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800412e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004132:	1b52      	subs	r2, r2, r5
 8004134:	6122      	str	r2, [r4, #16]
 8004136:	464b      	mov	r3, r9
 8004138:	4621      	mov	r1, r4
 800413a:	4640      	mov	r0, r8
 800413c:	f8cd a000 	str.w	sl, [sp]
 8004140:	aa03      	add	r2, sp, #12
 8004142:	f7ff fedf 	bl	8003f04 <_printf_common>
 8004146:	3001      	adds	r0, #1
 8004148:	d14c      	bne.n	80041e4 <_printf_i+0x200>
 800414a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414e:	b004      	add	sp, #16
 8004150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004154:	4834      	ldr	r0, [pc, #208]	; (8004228 <_printf_i+0x244>)
 8004156:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800415a:	6829      	ldr	r1, [r5, #0]
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004162:	6029      	str	r1, [r5, #0]
 8004164:	061d      	lsls	r5, r3, #24
 8004166:	d514      	bpl.n	8004192 <_printf_i+0x1ae>
 8004168:	07df      	lsls	r7, r3, #31
 800416a:	bf44      	itt	mi
 800416c:	f043 0320 	orrmi.w	r3, r3, #32
 8004170:	6023      	strmi	r3, [r4, #0]
 8004172:	b91e      	cbnz	r6, 800417c <_printf_i+0x198>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	f023 0320 	bic.w	r3, r3, #32
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	2310      	movs	r3, #16
 800417e:	e7af      	b.n	80040e0 <_printf_i+0xfc>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f043 0320 	orr.w	r3, r3, #32
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	2378      	movs	r3, #120	; 0x78
 800418a:	4828      	ldr	r0, [pc, #160]	; (800422c <_printf_i+0x248>)
 800418c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004190:	e7e3      	b.n	800415a <_printf_i+0x176>
 8004192:	0659      	lsls	r1, r3, #25
 8004194:	bf48      	it	mi
 8004196:	b2b6      	uxthmi	r6, r6
 8004198:	e7e6      	b.n	8004168 <_printf_i+0x184>
 800419a:	4615      	mov	r5, r2
 800419c:	e7bb      	b.n	8004116 <_printf_i+0x132>
 800419e:	682b      	ldr	r3, [r5, #0]
 80041a0:	6826      	ldr	r6, [r4, #0]
 80041a2:	1d18      	adds	r0, r3, #4
 80041a4:	6961      	ldr	r1, [r4, #20]
 80041a6:	6028      	str	r0, [r5, #0]
 80041a8:	0635      	lsls	r5, r6, #24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	d501      	bpl.n	80041b2 <_printf_i+0x1ce>
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	e002      	b.n	80041b8 <_printf_i+0x1d4>
 80041b2:	0670      	lsls	r0, r6, #25
 80041b4:	d5fb      	bpl.n	80041ae <_printf_i+0x1ca>
 80041b6:	8019      	strh	r1, [r3, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	4615      	mov	r5, r2
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	e7ba      	b.n	8004136 <_printf_i+0x152>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	2100      	movs	r1, #0
 80041c4:	1d1a      	adds	r2, r3, #4
 80041c6:	602a      	str	r2, [r5, #0]
 80041c8:	681d      	ldr	r5, [r3, #0]
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	4628      	mov	r0, r5
 80041ce:	f000 feb5 	bl	8004f3c <memchr>
 80041d2:	b108      	cbz	r0, 80041d8 <_printf_i+0x1f4>
 80041d4:	1b40      	subs	r0, r0, r5
 80041d6:	6060      	str	r0, [r4, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	2300      	movs	r3, #0
 80041de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e2:	e7a8      	b.n	8004136 <_printf_i+0x152>
 80041e4:	462a      	mov	r2, r5
 80041e6:	4649      	mov	r1, r9
 80041e8:	4640      	mov	r0, r8
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	47d0      	blx	sl
 80041ee:	3001      	adds	r0, #1
 80041f0:	d0ab      	beq.n	800414a <_printf_i+0x166>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	079b      	lsls	r3, r3, #30
 80041f6:	d413      	bmi.n	8004220 <_printf_i+0x23c>
 80041f8:	68e0      	ldr	r0, [r4, #12]
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	4298      	cmp	r0, r3
 80041fe:	bfb8      	it	lt
 8004200:	4618      	movlt	r0, r3
 8004202:	e7a4      	b.n	800414e <_printf_i+0x16a>
 8004204:	2301      	movs	r3, #1
 8004206:	4632      	mov	r2, r6
 8004208:	4649      	mov	r1, r9
 800420a:	4640      	mov	r0, r8
 800420c:	47d0      	blx	sl
 800420e:	3001      	adds	r0, #1
 8004210:	d09b      	beq.n	800414a <_printf_i+0x166>
 8004212:	3501      	adds	r5, #1
 8004214:	68e3      	ldr	r3, [r4, #12]
 8004216:	9903      	ldr	r1, [sp, #12]
 8004218:	1a5b      	subs	r3, r3, r1
 800421a:	42ab      	cmp	r3, r5
 800421c:	dcf2      	bgt.n	8004204 <_printf_i+0x220>
 800421e:	e7eb      	b.n	80041f8 <_printf_i+0x214>
 8004220:	2500      	movs	r5, #0
 8004222:	f104 0619 	add.w	r6, r4, #25
 8004226:	e7f5      	b.n	8004214 <_printf_i+0x230>
 8004228:	08006a06 	.word	0x08006a06
 800422c:	08006a17 	.word	0x08006a17

08004230 <quorem>:
 8004230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	6903      	ldr	r3, [r0, #16]
 8004236:	690c      	ldr	r4, [r1, #16]
 8004238:	4607      	mov	r7, r0
 800423a:	42a3      	cmp	r3, r4
 800423c:	f2c0 8082 	blt.w	8004344 <quorem+0x114>
 8004240:	3c01      	subs	r4, #1
 8004242:	f100 0514 	add.w	r5, r0, #20
 8004246:	f101 0814 	add.w	r8, r1, #20
 800424a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004258:	3301      	adds	r3, #1
 800425a:	429a      	cmp	r2, r3
 800425c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004268:	d331      	bcc.n	80042ce <quorem+0x9e>
 800426a:	f04f 0e00 	mov.w	lr, #0
 800426e:	4640      	mov	r0, r8
 8004270:	46ac      	mov	ip, r5
 8004272:	46f2      	mov	sl, lr
 8004274:	f850 2b04 	ldr.w	r2, [r0], #4
 8004278:	b293      	uxth	r3, r2
 800427a:	fb06 e303 	mla	r3, r6, r3, lr
 800427e:	0c12      	lsrs	r2, r2, #16
 8004280:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004284:	b29b      	uxth	r3, r3
 8004286:	fb06 e202 	mla	r2, r6, r2, lr
 800428a:	ebaa 0303 	sub.w	r3, sl, r3
 800428e:	f8dc a000 	ldr.w	sl, [ip]
 8004292:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004296:	fa1f fa8a 	uxth.w	sl, sl
 800429a:	4453      	add	r3, sl
 800429c:	f8dc a000 	ldr.w	sl, [ip]
 80042a0:	b292      	uxth	r2, r2
 80042a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80042a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042b0:	4581      	cmp	r9, r0
 80042b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80042b6:	f84c 3b04 	str.w	r3, [ip], #4
 80042ba:	d2db      	bcs.n	8004274 <quorem+0x44>
 80042bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80042c0:	b92b      	cbnz	r3, 80042ce <quorem+0x9e>
 80042c2:	9b01      	ldr	r3, [sp, #4]
 80042c4:	3b04      	subs	r3, #4
 80042c6:	429d      	cmp	r5, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	d32f      	bcc.n	800432c <quorem+0xfc>
 80042cc:	613c      	str	r4, [r7, #16]
 80042ce:	4638      	mov	r0, r7
 80042d0:	f001 f8ce 	bl	8005470 <__mcmp>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	db25      	blt.n	8004324 <quorem+0xf4>
 80042d8:	4628      	mov	r0, r5
 80042da:	f04f 0c00 	mov.w	ip, #0
 80042de:	3601      	adds	r6, #1
 80042e0:	f858 1b04 	ldr.w	r1, [r8], #4
 80042e4:	f8d0 e000 	ldr.w	lr, [r0]
 80042e8:	b28b      	uxth	r3, r1
 80042ea:	ebac 0303 	sub.w	r3, ip, r3
 80042ee:	fa1f f28e 	uxth.w	r2, lr
 80042f2:	4413      	add	r3, r2
 80042f4:	0c0a      	lsrs	r2, r1, #16
 80042f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80042fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042fe:	b29b      	uxth	r3, r3
 8004300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004304:	45c1      	cmp	r9, r8
 8004306:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800430a:	f840 3b04 	str.w	r3, [r0], #4
 800430e:	d2e7      	bcs.n	80042e0 <quorem+0xb0>
 8004310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004318:	b922      	cbnz	r2, 8004324 <quorem+0xf4>
 800431a:	3b04      	subs	r3, #4
 800431c:	429d      	cmp	r5, r3
 800431e:	461a      	mov	r2, r3
 8004320:	d30a      	bcc.n	8004338 <quorem+0x108>
 8004322:	613c      	str	r4, [r7, #16]
 8004324:	4630      	mov	r0, r6
 8004326:	b003      	add	sp, #12
 8004328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	3b04      	subs	r3, #4
 8004330:	2a00      	cmp	r2, #0
 8004332:	d1cb      	bne.n	80042cc <quorem+0x9c>
 8004334:	3c01      	subs	r4, #1
 8004336:	e7c6      	b.n	80042c6 <quorem+0x96>
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	3b04      	subs	r3, #4
 800433c:	2a00      	cmp	r2, #0
 800433e:	d1f0      	bne.n	8004322 <quorem+0xf2>
 8004340:	3c01      	subs	r4, #1
 8004342:	e7eb      	b.n	800431c <quorem+0xec>
 8004344:	2000      	movs	r0, #0
 8004346:	e7ee      	b.n	8004326 <quorem+0xf6>

08004348 <_dtoa_r>:
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	4616      	mov	r6, r2
 800434e:	461f      	mov	r7, r3
 8004350:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004352:	b099      	sub	sp, #100	; 0x64
 8004354:	4605      	mov	r5, r0
 8004356:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800435a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800435e:	b974      	cbnz	r4, 800437e <_dtoa_r+0x36>
 8004360:	2010      	movs	r0, #16
 8004362:	f000 fde3 	bl	8004f2c <malloc>
 8004366:	4602      	mov	r2, r0
 8004368:	6268      	str	r0, [r5, #36]	; 0x24
 800436a:	b920      	cbnz	r0, 8004376 <_dtoa_r+0x2e>
 800436c:	21ea      	movs	r1, #234	; 0xea
 800436e:	4ba8      	ldr	r3, [pc, #672]	; (8004610 <_dtoa_r+0x2c8>)
 8004370:	48a8      	ldr	r0, [pc, #672]	; (8004614 <_dtoa_r+0x2cc>)
 8004372:	f001 fa81 	bl	8005878 <__assert_func>
 8004376:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800437a:	6004      	str	r4, [r0, #0]
 800437c:	60c4      	str	r4, [r0, #12]
 800437e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004380:	6819      	ldr	r1, [r3, #0]
 8004382:	b151      	cbz	r1, 800439a <_dtoa_r+0x52>
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	2301      	movs	r3, #1
 8004388:	4093      	lsls	r3, r2
 800438a:	604a      	str	r2, [r1, #4]
 800438c:	608b      	str	r3, [r1, #8]
 800438e:	4628      	mov	r0, r5
 8004390:	f000 fe30 	bl	8004ff4 <_Bfree>
 8004394:	2200      	movs	r2, #0
 8004396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	1e3b      	subs	r3, r7, #0
 800439c:	bfaf      	iteee	ge
 800439e:	2300      	movge	r3, #0
 80043a0:	2201      	movlt	r2, #1
 80043a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043a6:	9305      	strlt	r3, [sp, #20]
 80043a8:	bfa8      	it	ge
 80043aa:	f8c8 3000 	strge.w	r3, [r8]
 80043ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80043b2:	4b99      	ldr	r3, [pc, #612]	; (8004618 <_dtoa_r+0x2d0>)
 80043b4:	bfb8      	it	lt
 80043b6:	f8c8 2000 	strlt.w	r2, [r8]
 80043ba:	ea33 0309 	bics.w	r3, r3, r9
 80043be:	d119      	bne.n	80043f4 <_dtoa_r+0xac>
 80043c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80043c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043cc:	4333      	orrs	r3, r6
 80043ce:	f000 857f 	beq.w	8004ed0 <_dtoa_r+0xb88>
 80043d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043d4:	b953      	cbnz	r3, 80043ec <_dtoa_r+0xa4>
 80043d6:	4b91      	ldr	r3, [pc, #580]	; (800461c <_dtoa_r+0x2d4>)
 80043d8:	e022      	b.n	8004420 <_dtoa_r+0xd8>
 80043da:	4b91      	ldr	r3, [pc, #580]	; (8004620 <_dtoa_r+0x2d8>)
 80043dc:	9303      	str	r3, [sp, #12]
 80043de:	3308      	adds	r3, #8
 80043e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	9803      	ldr	r0, [sp, #12]
 80043e6:	b019      	add	sp, #100	; 0x64
 80043e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ec:	4b8b      	ldr	r3, [pc, #556]	; (800461c <_dtoa_r+0x2d4>)
 80043ee:	9303      	str	r3, [sp, #12]
 80043f0:	3303      	adds	r3, #3
 80043f2:	e7f5      	b.n	80043e0 <_dtoa_r+0x98>
 80043f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80043fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004400:	2200      	movs	r2, #0
 8004402:	2300      	movs	r3, #0
 8004404:	f7fc fb3c 	bl	8000a80 <__aeabi_dcmpeq>
 8004408:	4680      	mov	r8, r0
 800440a:	b158      	cbz	r0, 8004424 <_dtoa_r+0xdc>
 800440c:	2301      	movs	r3, #1
 800440e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8558 	beq.w	8004eca <_dtoa_r+0xb82>
 800441a:	4882      	ldr	r0, [pc, #520]	; (8004624 <_dtoa_r+0x2dc>)
 800441c:	6018      	str	r0, [r3, #0]
 800441e:	1e43      	subs	r3, r0, #1
 8004420:	9303      	str	r3, [sp, #12]
 8004422:	e7df      	b.n	80043e4 <_dtoa_r+0x9c>
 8004424:	ab16      	add	r3, sp, #88	; 0x58
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	ab17      	add	r3, sp, #92	; 0x5c
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4628      	mov	r0, r5
 800442e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004432:	f001 f8c5 	bl	80055c0 <__d2b>
 8004436:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800443a:	4683      	mov	fp, r0
 800443c:	2c00      	cmp	r4, #0
 800443e:	d07f      	beq.n	8004540 <_dtoa_r+0x1f8>
 8004440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004446:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800444a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800444e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004452:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004456:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800445a:	2200      	movs	r2, #0
 800445c:	4b72      	ldr	r3, [pc, #456]	; (8004628 <_dtoa_r+0x2e0>)
 800445e:	f7fb feef 	bl	8000240 <__aeabi_dsub>
 8004462:	a365      	add	r3, pc, #404	; (adr r3, 80045f8 <_dtoa_r+0x2b0>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fc f8a2 	bl	80005b0 <__aeabi_dmul>
 800446c:	a364      	add	r3, pc, #400	; (adr r3, 8004600 <_dtoa_r+0x2b8>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fb fee7 	bl	8000244 <__adddf3>
 8004476:	4606      	mov	r6, r0
 8004478:	4620      	mov	r0, r4
 800447a:	460f      	mov	r7, r1
 800447c:	f7fc f82e 	bl	80004dc <__aeabi_i2d>
 8004480:	a361      	add	r3, pc, #388	; (adr r3, 8004608 <_dtoa_r+0x2c0>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fc f893 	bl	80005b0 <__aeabi_dmul>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	f7fb fed7 	bl	8000244 <__adddf3>
 8004496:	4606      	mov	r6, r0
 8004498:	460f      	mov	r7, r1
 800449a:	f7fc fb39 	bl	8000b10 <__aeabi_d2iz>
 800449e:	2200      	movs	r2, #0
 80044a0:	4682      	mov	sl, r0
 80044a2:	2300      	movs	r3, #0
 80044a4:	4630      	mov	r0, r6
 80044a6:	4639      	mov	r1, r7
 80044a8:	f7fc faf4 	bl	8000a94 <__aeabi_dcmplt>
 80044ac:	b148      	cbz	r0, 80044c2 <_dtoa_r+0x17a>
 80044ae:	4650      	mov	r0, sl
 80044b0:	f7fc f814 	bl	80004dc <__aeabi_i2d>
 80044b4:	4632      	mov	r2, r6
 80044b6:	463b      	mov	r3, r7
 80044b8:	f7fc fae2 	bl	8000a80 <__aeabi_dcmpeq>
 80044bc:	b908      	cbnz	r0, 80044c2 <_dtoa_r+0x17a>
 80044be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044c2:	f1ba 0f16 	cmp.w	sl, #22
 80044c6:	d858      	bhi.n	800457a <_dtoa_r+0x232>
 80044c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044cc:	4b57      	ldr	r3, [pc, #348]	; (800462c <_dtoa_r+0x2e4>)
 80044ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc fadd 	bl	8000a94 <__aeabi_dcmplt>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d04f      	beq.n	800457e <_dtoa_r+0x236>
 80044de:	2300      	movs	r3, #0
 80044e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80044e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044e8:	1b1c      	subs	r4, r3, r4
 80044ea:	1e63      	subs	r3, r4, #1
 80044ec:	9309      	str	r3, [sp, #36]	; 0x24
 80044ee:	bf49      	itett	mi
 80044f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80044f4:	2300      	movpl	r3, #0
 80044f6:	9306      	strmi	r3, [sp, #24]
 80044f8:	2300      	movmi	r3, #0
 80044fa:	bf54      	ite	pl
 80044fc:	9306      	strpl	r3, [sp, #24]
 80044fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004500:	f1ba 0f00 	cmp.w	sl, #0
 8004504:	db3d      	blt.n	8004582 <_dtoa_r+0x23a>
 8004506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004508:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800450c:	4453      	add	r3, sl
 800450e:	9309      	str	r3, [sp, #36]	; 0x24
 8004510:	2300      	movs	r3, #0
 8004512:	930a      	str	r3, [sp, #40]	; 0x28
 8004514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004516:	2b09      	cmp	r3, #9
 8004518:	f200 808c 	bhi.w	8004634 <_dtoa_r+0x2ec>
 800451c:	2b05      	cmp	r3, #5
 800451e:	bfc4      	itt	gt
 8004520:	3b04      	subgt	r3, #4
 8004522:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004526:	bfc8      	it	gt
 8004528:	2400      	movgt	r4, #0
 800452a:	f1a3 0302 	sub.w	r3, r3, #2
 800452e:	bfd8      	it	le
 8004530:	2401      	movle	r4, #1
 8004532:	2b03      	cmp	r3, #3
 8004534:	f200 808a 	bhi.w	800464c <_dtoa_r+0x304>
 8004538:	e8df f003 	tbb	[pc, r3]
 800453c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004540:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004544:	441c      	add	r4, r3
 8004546:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800454a:	2b20      	cmp	r3, #32
 800454c:	bfc3      	ittte	gt
 800454e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004552:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004556:	fa09 f303 	lslgt.w	r3, r9, r3
 800455a:	f1c3 0320 	rsble	r3, r3, #32
 800455e:	bfc6      	itte	gt
 8004560:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004564:	4318      	orrgt	r0, r3
 8004566:	fa06 f003 	lslle.w	r0, r6, r3
 800456a:	f7fb ffa7 	bl	80004bc <__aeabi_ui2d>
 800456e:	2301      	movs	r3, #1
 8004570:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004574:	3c01      	subs	r4, #1
 8004576:	9313      	str	r3, [sp, #76]	; 0x4c
 8004578:	e76f      	b.n	800445a <_dtoa_r+0x112>
 800457a:	2301      	movs	r3, #1
 800457c:	e7b2      	b.n	80044e4 <_dtoa_r+0x19c>
 800457e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004580:	e7b1      	b.n	80044e6 <_dtoa_r+0x19e>
 8004582:	9b06      	ldr	r3, [sp, #24]
 8004584:	eba3 030a 	sub.w	r3, r3, sl
 8004588:	9306      	str	r3, [sp, #24]
 800458a:	f1ca 0300 	rsb	r3, sl, #0
 800458e:	930a      	str	r3, [sp, #40]	; 0x28
 8004590:	2300      	movs	r3, #0
 8004592:	930e      	str	r3, [sp, #56]	; 0x38
 8004594:	e7be      	b.n	8004514 <_dtoa_r+0x1cc>
 8004596:	2300      	movs	r3, #0
 8004598:	930b      	str	r3, [sp, #44]	; 0x2c
 800459a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800459c:	2b00      	cmp	r3, #0
 800459e:	dc58      	bgt.n	8004652 <_dtoa_r+0x30a>
 80045a0:	f04f 0901 	mov.w	r9, #1
 80045a4:	464b      	mov	r3, r9
 80045a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80045aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80045ae:	2200      	movs	r2, #0
 80045b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80045b2:	6042      	str	r2, [r0, #4]
 80045b4:	2204      	movs	r2, #4
 80045b6:	f102 0614 	add.w	r6, r2, #20
 80045ba:	429e      	cmp	r6, r3
 80045bc:	6841      	ldr	r1, [r0, #4]
 80045be:	d94e      	bls.n	800465e <_dtoa_r+0x316>
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 fcd7 	bl	8004f74 <_Balloc>
 80045c6:	9003      	str	r0, [sp, #12]
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d14c      	bne.n	8004666 <_dtoa_r+0x31e>
 80045cc:	4602      	mov	r2, r0
 80045ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <_dtoa_r+0x2e8>)
 80045d4:	e6cc      	b.n	8004370 <_dtoa_r+0x28>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e7de      	b.n	8004598 <_dtoa_r+0x250>
 80045da:	2300      	movs	r3, #0
 80045dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80045de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045e0:	eb0a 0903 	add.w	r9, sl, r3
 80045e4:	f109 0301 	add.w	r3, r9, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	9308      	str	r3, [sp, #32]
 80045ec:	bfb8      	it	lt
 80045ee:	2301      	movlt	r3, #1
 80045f0:	e7dd      	b.n	80045ae <_dtoa_r+0x266>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e7f2      	b.n	80045dc <_dtoa_r+0x294>
 80045f6:	bf00      	nop
 80045f8:	636f4361 	.word	0x636f4361
 80045fc:	3fd287a7 	.word	0x3fd287a7
 8004600:	8b60c8b3 	.word	0x8b60c8b3
 8004604:	3fc68a28 	.word	0x3fc68a28
 8004608:	509f79fb 	.word	0x509f79fb
 800460c:	3fd34413 	.word	0x3fd34413
 8004610:	08006a35 	.word	0x08006a35
 8004614:	08006a4c 	.word	0x08006a4c
 8004618:	7ff00000 	.word	0x7ff00000
 800461c:	08006a31 	.word	0x08006a31
 8004620:	08006a28 	.word	0x08006a28
 8004624:	08006a05 	.word	0x08006a05
 8004628:	3ff80000 	.word	0x3ff80000
 800462c:	08006b40 	.word	0x08006b40
 8004630:	08006aa7 	.word	0x08006aa7
 8004634:	2401      	movs	r4, #1
 8004636:	2300      	movs	r3, #0
 8004638:	940b      	str	r4, [sp, #44]	; 0x2c
 800463a:	9322      	str	r3, [sp, #136]	; 0x88
 800463c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004640:	2200      	movs	r2, #0
 8004642:	2312      	movs	r3, #18
 8004644:	f8cd 9020 	str.w	r9, [sp, #32]
 8004648:	9223      	str	r2, [sp, #140]	; 0x8c
 800464a:	e7b0      	b.n	80045ae <_dtoa_r+0x266>
 800464c:	2301      	movs	r3, #1
 800464e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004650:	e7f4      	b.n	800463c <_dtoa_r+0x2f4>
 8004652:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004656:	464b      	mov	r3, r9
 8004658:	f8cd 9020 	str.w	r9, [sp, #32]
 800465c:	e7a7      	b.n	80045ae <_dtoa_r+0x266>
 800465e:	3101      	adds	r1, #1
 8004660:	6041      	str	r1, [r0, #4]
 8004662:	0052      	lsls	r2, r2, #1
 8004664:	e7a7      	b.n	80045b6 <_dtoa_r+0x26e>
 8004666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004668:	9a03      	ldr	r2, [sp, #12]
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	9b08      	ldr	r3, [sp, #32]
 800466e:	2b0e      	cmp	r3, #14
 8004670:	f200 80a8 	bhi.w	80047c4 <_dtoa_r+0x47c>
 8004674:	2c00      	cmp	r4, #0
 8004676:	f000 80a5 	beq.w	80047c4 <_dtoa_r+0x47c>
 800467a:	f1ba 0f00 	cmp.w	sl, #0
 800467e:	dd34      	ble.n	80046ea <_dtoa_r+0x3a2>
 8004680:	4a9a      	ldr	r2, [pc, #616]	; (80048ec <_dtoa_r+0x5a4>)
 8004682:	f00a 030f 	and.w	r3, sl, #15
 8004686:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800468a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800468e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004692:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004696:	ea4f 142a 	mov.w	r4, sl, asr #4
 800469a:	d016      	beq.n	80046ca <_dtoa_r+0x382>
 800469c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046a0:	4b93      	ldr	r3, [pc, #588]	; (80048f0 <_dtoa_r+0x5a8>)
 80046a2:	2703      	movs	r7, #3
 80046a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046a8:	f7fc f8ac 	bl	8000804 <__aeabi_ddiv>
 80046ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046b0:	f004 040f 	and.w	r4, r4, #15
 80046b4:	4e8e      	ldr	r6, [pc, #568]	; (80048f0 <_dtoa_r+0x5a8>)
 80046b6:	b954      	cbnz	r4, 80046ce <_dtoa_r+0x386>
 80046b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046c0:	f7fc f8a0 	bl	8000804 <__aeabi_ddiv>
 80046c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046c8:	e029      	b.n	800471e <_dtoa_r+0x3d6>
 80046ca:	2702      	movs	r7, #2
 80046cc:	e7f2      	b.n	80046b4 <_dtoa_r+0x36c>
 80046ce:	07e1      	lsls	r1, r4, #31
 80046d0:	d508      	bpl.n	80046e4 <_dtoa_r+0x39c>
 80046d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046da:	f7fb ff69 	bl	80005b0 <__aeabi_dmul>
 80046de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046e2:	3701      	adds	r7, #1
 80046e4:	1064      	asrs	r4, r4, #1
 80046e6:	3608      	adds	r6, #8
 80046e8:	e7e5      	b.n	80046b6 <_dtoa_r+0x36e>
 80046ea:	f000 80a5 	beq.w	8004838 <_dtoa_r+0x4f0>
 80046ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046f2:	f1ca 0400 	rsb	r4, sl, #0
 80046f6:	4b7d      	ldr	r3, [pc, #500]	; (80048ec <_dtoa_r+0x5a4>)
 80046f8:	f004 020f 	and.w	r2, r4, #15
 80046fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f7fb ff54 	bl	80005b0 <__aeabi_dmul>
 8004708:	2702      	movs	r7, #2
 800470a:	2300      	movs	r3, #0
 800470c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004710:	4e77      	ldr	r6, [pc, #476]	; (80048f0 <_dtoa_r+0x5a8>)
 8004712:	1124      	asrs	r4, r4, #4
 8004714:	2c00      	cmp	r4, #0
 8004716:	f040 8084 	bne.w	8004822 <_dtoa_r+0x4da>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1d2      	bne.n	80046c4 <_dtoa_r+0x37c>
 800471e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 808b 	beq.w	800483c <_dtoa_r+0x4f4>
 8004726:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800472a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800472e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004732:	2200      	movs	r2, #0
 8004734:	4b6f      	ldr	r3, [pc, #444]	; (80048f4 <_dtoa_r+0x5ac>)
 8004736:	f7fc f9ad 	bl	8000a94 <__aeabi_dcmplt>
 800473a:	2800      	cmp	r0, #0
 800473c:	d07e      	beq.n	800483c <_dtoa_r+0x4f4>
 800473e:	9b08      	ldr	r3, [sp, #32]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d07b      	beq.n	800483c <_dtoa_r+0x4f4>
 8004744:	f1b9 0f00 	cmp.w	r9, #0
 8004748:	dd38      	ble.n	80047bc <_dtoa_r+0x474>
 800474a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800474e:	2200      	movs	r2, #0
 8004750:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <_dtoa_r+0x5b0>)
 8004752:	f7fb ff2d 	bl	80005b0 <__aeabi_dmul>
 8004756:	464c      	mov	r4, r9
 8004758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800475c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004760:	3701      	adds	r7, #1
 8004762:	4638      	mov	r0, r7
 8004764:	f7fb feba 	bl	80004dc <__aeabi_i2d>
 8004768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800476c:	f7fb ff20 	bl	80005b0 <__aeabi_dmul>
 8004770:	2200      	movs	r2, #0
 8004772:	4b62      	ldr	r3, [pc, #392]	; (80048fc <_dtoa_r+0x5b4>)
 8004774:	f7fb fd66 	bl	8000244 <__adddf3>
 8004778:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800477c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004780:	9611      	str	r6, [sp, #68]	; 0x44
 8004782:	2c00      	cmp	r4, #0
 8004784:	d15d      	bne.n	8004842 <_dtoa_r+0x4fa>
 8004786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800478a:	2200      	movs	r2, #0
 800478c:	4b5c      	ldr	r3, [pc, #368]	; (8004900 <_dtoa_r+0x5b8>)
 800478e:	f7fb fd57 	bl	8000240 <__aeabi_dsub>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800479a:	4633      	mov	r3, r6
 800479c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800479e:	f7fc f997 	bl	8000ad0 <__aeabi_dcmpgt>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	f040 829c 	bne.w	8004ce0 <_dtoa_r+0x998>
 80047a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80047b2:	f7fc f96f 	bl	8000a94 <__aeabi_dcmplt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f040 8290 	bne.w	8004cdc <_dtoa_r+0x994>
 80047bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80047c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f2c0 8152 	blt.w	8004a70 <_dtoa_r+0x728>
 80047cc:	f1ba 0f0e 	cmp.w	sl, #14
 80047d0:	f300 814e 	bgt.w	8004a70 <_dtoa_r+0x728>
 80047d4:	4b45      	ldr	r3, [pc, #276]	; (80048ec <_dtoa_r+0x5a4>)
 80047d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80047e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f280 80db 	bge.w	80049a0 <_dtoa_r+0x658>
 80047ea:	9b08      	ldr	r3, [sp, #32]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f300 80d7 	bgt.w	80049a0 <_dtoa_r+0x658>
 80047f2:	f040 8272 	bne.w	8004cda <_dtoa_r+0x992>
 80047f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047fa:	2200      	movs	r2, #0
 80047fc:	4b40      	ldr	r3, [pc, #256]	; (8004900 <_dtoa_r+0x5b8>)
 80047fe:	f7fb fed7 	bl	80005b0 <__aeabi_dmul>
 8004802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004806:	f7fc f959 	bl	8000abc <__aeabi_dcmpge>
 800480a:	9c08      	ldr	r4, [sp, #32]
 800480c:	4626      	mov	r6, r4
 800480e:	2800      	cmp	r0, #0
 8004810:	f040 8248 	bne.w	8004ca4 <_dtoa_r+0x95c>
 8004814:	2331      	movs	r3, #49	; 0x31
 8004816:	9f03      	ldr	r7, [sp, #12]
 8004818:	f10a 0a01 	add.w	sl, sl, #1
 800481c:	f807 3b01 	strb.w	r3, [r7], #1
 8004820:	e244      	b.n	8004cac <_dtoa_r+0x964>
 8004822:	07e2      	lsls	r2, r4, #31
 8004824:	d505      	bpl.n	8004832 <_dtoa_r+0x4ea>
 8004826:	e9d6 2300 	ldrd	r2, r3, [r6]
 800482a:	f7fb fec1 	bl	80005b0 <__aeabi_dmul>
 800482e:	2301      	movs	r3, #1
 8004830:	3701      	adds	r7, #1
 8004832:	1064      	asrs	r4, r4, #1
 8004834:	3608      	adds	r6, #8
 8004836:	e76d      	b.n	8004714 <_dtoa_r+0x3cc>
 8004838:	2702      	movs	r7, #2
 800483a:	e770      	b.n	800471e <_dtoa_r+0x3d6>
 800483c:	46d0      	mov	r8, sl
 800483e:	9c08      	ldr	r4, [sp, #32]
 8004840:	e78f      	b.n	8004762 <_dtoa_r+0x41a>
 8004842:	9903      	ldr	r1, [sp, #12]
 8004844:	4b29      	ldr	r3, [pc, #164]	; (80048ec <_dtoa_r+0x5a4>)
 8004846:	4421      	add	r1, r4
 8004848:	9112      	str	r1, [sp, #72]	; 0x48
 800484a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800484c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004850:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004854:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004858:	2900      	cmp	r1, #0
 800485a:	d055      	beq.n	8004908 <_dtoa_r+0x5c0>
 800485c:	2000      	movs	r0, #0
 800485e:	4929      	ldr	r1, [pc, #164]	; (8004904 <_dtoa_r+0x5bc>)
 8004860:	f7fb ffd0 	bl	8000804 <__aeabi_ddiv>
 8004864:	463b      	mov	r3, r7
 8004866:	4632      	mov	r2, r6
 8004868:	f7fb fcea 	bl	8000240 <__aeabi_dsub>
 800486c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004870:	9f03      	ldr	r7, [sp, #12]
 8004872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004876:	f7fc f94b 	bl	8000b10 <__aeabi_d2iz>
 800487a:	4604      	mov	r4, r0
 800487c:	f7fb fe2e 	bl	80004dc <__aeabi_i2d>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004888:	f7fb fcda 	bl	8000240 <__aeabi_dsub>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	3430      	adds	r4, #48	; 0x30
 8004892:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004896:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800489a:	f807 4b01 	strb.w	r4, [r7], #1
 800489e:	f7fc f8f9 	bl	8000a94 <__aeabi_dcmplt>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d174      	bne.n	8004990 <_dtoa_r+0x648>
 80048a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048aa:	2000      	movs	r0, #0
 80048ac:	4911      	ldr	r1, [pc, #68]	; (80048f4 <_dtoa_r+0x5ac>)
 80048ae:	f7fb fcc7 	bl	8000240 <__aeabi_dsub>
 80048b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048b6:	f7fc f8ed 	bl	8000a94 <__aeabi_dcmplt>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	f040 80b7 	bne.w	8004a2e <_dtoa_r+0x6e6>
 80048c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048c2:	429f      	cmp	r7, r3
 80048c4:	f43f af7a 	beq.w	80047bc <_dtoa_r+0x474>
 80048c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048cc:	2200      	movs	r2, #0
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <_dtoa_r+0x5b0>)
 80048d0:	f7fb fe6e 	bl	80005b0 <__aeabi_dmul>
 80048d4:	2200      	movs	r2, #0
 80048d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <_dtoa_r+0x5b0>)
 80048e0:	f7fb fe66 	bl	80005b0 <__aeabi_dmul>
 80048e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048e8:	e7c3      	b.n	8004872 <_dtoa_r+0x52a>
 80048ea:	bf00      	nop
 80048ec:	08006b40 	.word	0x08006b40
 80048f0:	08006b18 	.word	0x08006b18
 80048f4:	3ff00000 	.word	0x3ff00000
 80048f8:	40240000 	.word	0x40240000
 80048fc:	401c0000 	.word	0x401c0000
 8004900:	40140000 	.word	0x40140000
 8004904:	3fe00000 	.word	0x3fe00000
 8004908:	4630      	mov	r0, r6
 800490a:	4639      	mov	r1, r7
 800490c:	f7fb fe50 	bl	80005b0 <__aeabi_dmul>
 8004910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004912:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004916:	9c03      	ldr	r4, [sp, #12]
 8004918:	9314      	str	r3, [sp, #80]	; 0x50
 800491a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800491e:	f7fc f8f7 	bl	8000b10 <__aeabi_d2iz>
 8004922:	9015      	str	r0, [sp, #84]	; 0x54
 8004924:	f7fb fdda 	bl	80004dc <__aeabi_i2d>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004930:	f7fb fc86 	bl	8000240 <__aeabi_dsub>
 8004934:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004936:	4606      	mov	r6, r0
 8004938:	3330      	adds	r3, #48	; 0x30
 800493a:	f804 3b01 	strb.w	r3, [r4], #1
 800493e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004940:	460f      	mov	r7, r1
 8004942:	429c      	cmp	r4, r3
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	d124      	bne.n	8004994 <_dtoa_r+0x64c>
 800494a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800494e:	4bb0      	ldr	r3, [pc, #704]	; (8004c10 <_dtoa_r+0x8c8>)
 8004950:	f7fb fc78 	bl	8000244 <__adddf3>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	f7fc f8b8 	bl	8000ad0 <__aeabi_dcmpgt>
 8004960:	2800      	cmp	r0, #0
 8004962:	d163      	bne.n	8004a2c <_dtoa_r+0x6e4>
 8004964:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004968:	2000      	movs	r0, #0
 800496a:	49a9      	ldr	r1, [pc, #676]	; (8004c10 <_dtoa_r+0x8c8>)
 800496c:	f7fb fc68 	bl	8000240 <__aeabi_dsub>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4630      	mov	r0, r6
 8004976:	4639      	mov	r1, r7
 8004978:	f7fc f88c 	bl	8000a94 <__aeabi_dcmplt>
 800497c:	2800      	cmp	r0, #0
 800497e:	f43f af1d 	beq.w	80047bc <_dtoa_r+0x474>
 8004982:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004984:	1e7b      	subs	r3, r7, #1
 8004986:	9314      	str	r3, [sp, #80]	; 0x50
 8004988:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d0f8      	beq.n	8004982 <_dtoa_r+0x63a>
 8004990:	46c2      	mov	sl, r8
 8004992:	e03b      	b.n	8004a0c <_dtoa_r+0x6c4>
 8004994:	4b9f      	ldr	r3, [pc, #636]	; (8004c14 <_dtoa_r+0x8cc>)
 8004996:	f7fb fe0b 	bl	80005b0 <__aeabi_dmul>
 800499a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800499e:	e7bc      	b.n	800491a <_dtoa_r+0x5d2>
 80049a0:	9f03      	ldr	r7, [sp, #12]
 80049a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80049a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049aa:	4640      	mov	r0, r8
 80049ac:	4649      	mov	r1, r9
 80049ae:	f7fb ff29 	bl	8000804 <__aeabi_ddiv>
 80049b2:	f7fc f8ad 	bl	8000b10 <__aeabi_d2iz>
 80049b6:	4604      	mov	r4, r0
 80049b8:	f7fb fd90 	bl	80004dc <__aeabi_i2d>
 80049bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049c0:	f7fb fdf6 	bl	80005b0 <__aeabi_dmul>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4640      	mov	r0, r8
 80049ca:	4649      	mov	r1, r9
 80049cc:	f7fb fc38 	bl	8000240 <__aeabi_dsub>
 80049d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80049d4:	f807 6b01 	strb.w	r6, [r7], #1
 80049d8:	9e03      	ldr	r6, [sp, #12]
 80049da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80049de:	1bbe      	subs	r6, r7, r6
 80049e0:	45b4      	cmp	ip, r6
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	d136      	bne.n	8004a56 <_dtoa_r+0x70e>
 80049e8:	f7fb fc2c 	bl	8000244 <__adddf3>
 80049ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049f0:	4680      	mov	r8, r0
 80049f2:	4689      	mov	r9, r1
 80049f4:	f7fc f86c 	bl	8000ad0 <__aeabi_dcmpgt>
 80049f8:	bb58      	cbnz	r0, 8004a52 <_dtoa_r+0x70a>
 80049fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049fe:	4640      	mov	r0, r8
 8004a00:	4649      	mov	r1, r9
 8004a02:	f7fc f83d 	bl	8000a80 <__aeabi_dcmpeq>
 8004a06:	b108      	cbz	r0, 8004a0c <_dtoa_r+0x6c4>
 8004a08:	07e1      	lsls	r1, r4, #31
 8004a0a:	d422      	bmi.n	8004a52 <_dtoa_r+0x70a>
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	4659      	mov	r1, fp
 8004a10:	f000 faf0 	bl	8004ff4 <_Bfree>
 8004a14:	2300      	movs	r3, #0
 8004a16:	703b      	strb	r3, [r7, #0]
 8004a18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004a1a:	f10a 0001 	add.w	r0, sl, #1
 8004a1e:	6018      	str	r0, [r3, #0]
 8004a20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f43f acde 	beq.w	80043e4 <_dtoa_r+0x9c>
 8004a28:	601f      	str	r7, [r3, #0]
 8004a2a:	e4db      	b.n	80043e4 <_dtoa_r+0x9c>
 8004a2c:	4627      	mov	r7, r4
 8004a2e:	463b      	mov	r3, r7
 8004a30:	461f      	mov	r7, r3
 8004a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a36:	2a39      	cmp	r2, #57	; 0x39
 8004a38:	d107      	bne.n	8004a4a <_dtoa_r+0x702>
 8004a3a:	9a03      	ldr	r2, [sp, #12]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1f7      	bne.n	8004a30 <_dtoa_r+0x6e8>
 8004a40:	2230      	movs	r2, #48	; 0x30
 8004a42:	9903      	ldr	r1, [sp, #12]
 8004a44:	f108 0801 	add.w	r8, r8, #1
 8004a48:	700a      	strb	r2, [r1, #0]
 8004a4a:	781a      	ldrb	r2, [r3, #0]
 8004a4c:	3201      	adds	r2, #1
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e79e      	b.n	8004990 <_dtoa_r+0x648>
 8004a52:	46d0      	mov	r8, sl
 8004a54:	e7eb      	b.n	8004a2e <_dtoa_r+0x6e6>
 8004a56:	2200      	movs	r2, #0
 8004a58:	4b6e      	ldr	r3, [pc, #440]	; (8004c14 <_dtoa_r+0x8cc>)
 8004a5a:	f7fb fda9 	bl	80005b0 <__aeabi_dmul>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2300      	movs	r3, #0
 8004a62:	4680      	mov	r8, r0
 8004a64:	4689      	mov	r9, r1
 8004a66:	f7fc f80b 	bl	8000a80 <__aeabi_dcmpeq>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d09b      	beq.n	80049a6 <_dtoa_r+0x65e>
 8004a6e:	e7cd      	b.n	8004a0c <_dtoa_r+0x6c4>
 8004a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	f000 80d0 	beq.w	8004c18 <_dtoa_r+0x8d0>
 8004a78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a7a:	2a01      	cmp	r2, #1
 8004a7c:	f300 80ae 	bgt.w	8004bdc <_dtoa_r+0x894>
 8004a80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	f000 80a6 	beq.w	8004bd4 <_dtoa_r+0x88c>
 8004a88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a8e:	9f06      	ldr	r7, [sp, #24]
 8004a90:	9a06      	ldr	r2, [sp, #24]
 8004a92:	2101      	movs	r1, #1
 8004a94:	441a      	add	r2, r3
 8004a96:	9206      	str	r2, [sp, #24]
 8004a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	441a      	add	r2, r3
 8004a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8004aa0:	f000 fb5e 	bl	8005160 <__i2b>
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	2f00      	cmp	r7, #0
 8004aa8:	dd0c      	ble.n	8004ac4 <_dtoa_r+0x77c>
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	dd09      	ble.n	8004ac4 <_dtoa_r+0x77c>
 8004ab0:	42bb      	cmp	r3, r7
 8004ab2:	bfa8      	it	ge
 8004ab4:	463b      	movge	r3, r7
 8004ab6:	9a06      	ldr	r2, [sp, #24]
 8004ab8:	1aff      	subs	r7, r7, r3
 8004aba:	1ad2      	subs	r2, r2, r3
 8004abc:	9206      	str	r2, [sp, #24]
 8004abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac6:	b1f3      	cbz	r3, 8004b06 <_dtoa_r+0x7be>
 8004ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80a8 	beq.w	8004c20 <_dtoa_r+0x8d8>
 8004ad0:	2c00      	cmp	r4, #0
 8004ad2:	dd10      	ble.n	8004af6 <_dtoa_r+0x7ae>
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f000 fbff 	bl	80052dc <__pow5mult>
 8004ade:	465a      	mov	r2, fp
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f000 fb51 	bl	800518c <__multiply>
 8004aea:	4680      	mov	r8, r0
 8004aec:	4659      	mov	r1, fp
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 fa80 	bl	8004ff4 <_Bfree>
 8004af4:	46c3      	mov	fp, r8
 8004af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af8:	1b1a      	subs	r2, r3, r4
 8004afa:	d004      	beq.n	8004b06 <_dtoa_r+0x7be>
 8004afc:	4659      	mov	r1, fp
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 fbec 	bl	80052dc <__pow5mult>
 8004b04:	4683      	mov	fp, r0
 8004b06:	2101      	movs	r1, #1
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 fb29 	bl	8005160 <__i2b>
 8004b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b10:	4604      	mov	r4, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f340 8086 	ble.w	8004c24 <_dtoa_r+0x8dc>
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f000 fbdd 	bl	80052dc <__pow5mult>
 8004b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b24:	4604      	mov	r4, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	dd7f      	ble.n	8004c2a <_dtoa_r+0x8e2>
 8004b2a:	f04f 0800 	mov.w	r8, #0
 8004b2e:	6923      	ldr	r3, [r4, #16]
 8004b30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b34:	6918      	ldr	r0, [r3, #16]
 8004b36:	f000 fac5 	bl	80050c4 <__hi0bits>
 8004b3a:	f1c0 0020 	rsb	r0, r0, #32
 8004b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b40:	4418      	add	r0, r3
 8004b42:	f010 001f 	ands.w	r0, r0, #31
 8004b46:	f000 8092 	beq.w	8004c6e <_dtoa_r+0x926>
 8004b4a:	f1c0 0320 	rsb	r3, r0, #32
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	f340 808a 	ble.w	8004c68 <_dtoa_r+0x920>
 8004b54:	f1c0 001c 	rsb	r0, r0, #28
 8004b58:	9b06      	ldr	r3, [sp, #24]
 8004b5a:	4407      	add	r7, r0
 8004b5c:	4403      	add	r3, r0
 8004b5e:	9306      	str	r3, [sp, #24]
 8004b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b62:	4403      	add	r3, r0
 8004b64:	9309      	str	r3, [sp, #36]	; 0x24
 8004b66:	9b06      	ldr	r3, [sp, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dd05      	ble.n	8004b78 <_dtoa_r+0x830>
 8004b6c:	4659      	mov	r1, fp
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 fc0d 	bl	8005390 <__lshift>
 8004b76:	4683      	mov	fp, r0
 8004b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	dd05      	ble.n	8004b8a <_dtoa_r+0x842>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	461a      	mov	r2, r3
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 fc04 	bl	8005390 <__lshift>
 8004b88:	4604      	mov	r4, r0
 8004b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d070      	beq.n	8004c72 <_dtoa_r+0x92a>
 8004b90:	4621      	mov	r1, r4
 8004b92:	4658      	mov	r0, fp
 8004b94:	f000 fc6c 	bl	8005470 <__mcmp>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	da6a      	bge.n	8004c72 <_dtoa_r+0x92a>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4659      	mov	r1, fp
 8004ba0:	220a      	movs	r2, #10
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 fa48 	bl	8005038 <__multadd>
 8004ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004baa:	4683      	mov	fp, r0
 8004bac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8194 	beq.w	8004ede <_dtoa_r+0xb96>
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	2300      	movs	r3, #0
 8004bba:	220a      	movs	r2, #10
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f000 fa3b 	bl	8005038 <__multadd>
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	f300 8093 	bgt.w	8004cf2 <_dtoa_r+0x9aa>
 8004bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	dc57      	bgt.n	8004c82 <_dtoa_r+0x93a>
 8004bd2:	e08e      	b.n	8004cf2 <_dtoa_r+0x9aa>
 8004bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004bda:	e757      	b.n	8004a8c <_dtoa_r+0x744>
 8004bdc:	9b08      	ldr	r3, [sp, #32]
 8004bde:	1e5c      	subs	r4, r3, #1
 8004be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	bfb7      	itett	lt
 8004be6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004be8:	1b1c      	subge	r4, r3, r4
 8004bea:	1ae2      	sublt	r2, r4, r3
 8004bec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004bee:	bfbe      	ittt	lt
 8004bf0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004bf2:	189b      	addlt	r3, r3, r2
 8004bf4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004bf6:	9b08      	ldr	r3, [sp, #32]
 8004bf8:	bfb8      	it	lt
 8004bfa:	2400      	movlt	r4, #0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bfbb      	ittet	lt
 8004c00:	9b06      	ldrlt	r3, [sp, #24]
 8004c02:	9a08      	ldrlt	r2, [sp, #32]
 8004c04:	9f06      	ldrge	r7, [sp, #24]
 8004c06:	1a9f      	sublt	r7, r3, r2
 8004c08:	bfac      	ite	ge
 8004c0a:	9b08      	ldrge	r3, [sp, #32]
 8004c0c:	2300      	movlt	r3, #0
 8004c0e:	e73f      	b.n	8004a90 <_dtoa_r+0x748>
 8004c10:	3fe00000 	.word	0x3fe00000
 8004c14:	40240000 	.word	0x40240000
 8004c18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c1a:	9f06      	ldr	r7, [sp, #24]
 8004c1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004c1e:	e742      	b.n	8004aa6 <_dtoa_r+0x75e>
 8004c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c22:	e76b      	b.n	8004afc <_dtoa_r+0x7b4>
 8004c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	dc19      	bgt.n	8004c5e <_dtoa_r+0x916>
 8004c2a:	9b04      	ldr	r3, [sp, #16]
 8004c2c:	b9bb      	cbnz	r3, 8004c5e <_dtoa_r+0x916>
 8004c2e:	9b05      	ldr	r3, [sp, #20]
 8004c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c34:	b99b      	cbnz	r3, 8004c5e <_dtoa_r+0x916>
 8004c36:	9b05      	ldr	r3, [sp, #20]
 8004c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c3c:	0d1b      	lsrs	r3, r3, #20
 8004c3e:	051b      	lsls	r3, r3, #20
 8004c40:	b183      	cbz	r3, 8004c64 <_dtoa_r+0x91c>
 8004c42:	f04f 0801 	mov.w	r8, #1
 8004c46:	9b06      	ldr	r3, [sp, #24]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	9306      	str	r3, [sp, #24]
 8004c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4e:	3301      	adds	r3, #1
 8004c50:	9309      	str	r3, [sp, #36]	; 0x24
 8004c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af6a 	bne.w	8004b2e <_dtoa_r+0x7e6>
 8004c5a:	2001      	movs	r0, #1
 8004c5c:	e76f      	b.n	8004b3e <_dtoa_r+0x7f6>
 8004c5e:	f04f 0800 	mov.w	r8, #0
 8004c62:	e7f6      	b.n	8004c52 <_dtoa_r+0x90a>
 8004c64:	4698      	mov	r8, r3
 8004c66:	e7f4      	b.n	8004c52 <_dtoa_r+0x90a>
 8004c68:	f43f af7d 	beq.w	8004b66 <_dtoa_r+0x81e>
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	301c      	adds	r0, #28
 8004c70:	e772      	b.n	8004b58 <_dtoa_r+0x810>
 8004c72:	9b08      	ldr	r3, [sp, #32]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dc36      	bgt.n	8004ce6 <_dtoa_r+0x99e>
 8004c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	dd33      	ble.n	8004ce6 <_dtoa_r+0x99e>
 8004c7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c82:	f1b9 0f00 	cmp.w	r9, #0
 8004c86:	d10d      	bne.n	8004ca4 <_dtoa_r+0x95c>
 8004c88:	4621      	mov	r1, r4
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f000 f9d2 	bl	8005038 <__multadd>
 8004c94:	4601      	mov	r1, r0
 8004c96:	4604      	mov	r4, r0
 8004c98:	4658      	mov	r0, fp
 8004c9a:	f000 fbe9 	bl	8005470 <__mcmp>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	f73f adb8 	bgt.w	8004814 <_dtoa_r+0x4cc>
 8004ca4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ca6:	9f03      	ldr	r7, [sp, #12]
 8004ca8:	ea6f 0a03 	mvn.w	sl, r3
 8004cac:	f04f 0800 	mov.w	r8, #0
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f000 f99e 	bl	8004ff4 <_Bfree>
 8004cb8:	2e00      	cmp	r6, #0
 8004cba:	f43f aea7 	beq.w	8004a0c <_dtoa_r+0x6c4>
 8004cbe:	f1b8 0f00 	cmp.w	r8, #0
 8004cc2:	d005      	beq.n	8004cd0 <_dtoa_r+0x988>
 8004cc4:	45b0      	cmp	r8, r6
 8004cc6:	d003      	beq.n	8004cd0 <_dtoa_r+0x988>
 8004cc8:	4641      	mov	r1, r8
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 f992 	bl	8004ff4 <_Bfree>
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f98e 	bl	8004ff4 <_Bfree>
 8004cd8:	e698      	b.n	8004a0c <_dtoa_r+0x6c4>
 8004cda:	2400      	movs	r4, #0
 8004cdc:	4626      	mov	r6, r4
 8004cde:	e7e1      	b.n	8004ca4 <_dtoa_r+0x95c>
 8004ce0:	46c2      	mov	sl, r8
 8004ce2:	4626      	mov	r6, r4
 8004ce4:	e596      	b.n	8004814 <_dtoa_r+0x4cc>
 8004ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80fd 	beq.w	8004eec <_dtoa_r+0xba4>
 8004cf2:	2f00      	cmp	r7, #0
 8004cf4:	dd05      	ble.n	8004d02 <_dtoa_r+0x9ba>
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 fb48 	bl	8005390 <__lshift>
 8004d00:	4606      	mov	r6, r0
 8004d02:	f1b8 0f00 	cmp.w	r8, #0
 8004d06:	d05c      	beq.n	8004dc2 <_dtoa_r+0xa7a>
 8004d08:	4628      	mov	r0, r5
 8004d0a:	6871      	ldr	r1, [r6, #4]
 8004d0c:	f000 f932 	bl	8004f74 <_Balloc>
 8004d10:	4607      	mov	r7, r0
 8004d12:	b928      	cbnz	r0, 8004d20 <_dtoa_r+0x9d8>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	; (8004f18 <_dtoa_r+0xbd0>)
 8004d1c:	f7ff bb28 	b.w	8004370 <_dtoa_r+0x28>
 8004d20:	6932      	ldr	r2, [r6, #16]
 8004d22:	f106 010c 	add.w	r1, r6, #12
 8004d26:	3202      	adds	r2, #2
 8004d28:	0092      	lsls	r2, r2, #2
 8004d2a:	300c      	adds	r0, #12
 8004d2c:	f000 f914 	bl	8004f58 <memcpy>
 8004d30:	2201      	movs	r2, #1
 8004d32:	4639      	mov	r1, r7
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 fb2b 	bl	8005390 <__lshift>
 8004d3a:	46b0      	mov	r8, r6
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	9308      	str	r3, [sp, #32]
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	444b      	add	r3, r9
 8004d48:	930a      	str	r3, [sp, #40]	; 0x28
 8004d4a:	9b04      	ldr	r3, [sp, #16]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	9309      	str	r3, [sp, #36]	; 0x24
 8004d52:	9b08      	ldr	r3, [sp, #32]
 8004d54:	4621      	mov	r1, r4
 8004d56:	3b01      	subs	r3, #1
 8004d58:	4658      	mov	r0, fp
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	f7ff fa68 	bl	8004230 <quorem>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4641      	mov	r1, r8
 8004d64:	3330      	adds	r3, #48	; 0x30
 8004d66:	9006      	str	r0, [sp, #24]
 8004d68:	4658      	mov	r0, fp
 8004d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d6c:	f000 fb80 	bl	8005470 <__mcmp>
 8004d70:	4632      	mov	r2, r6
 8004d72:	4681      	mov	r9, r0
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 fb96 	bl	80054a8 <__mdiff>
 8004d7c:	68c2      	ldr	r2, [r0, #12]
 8004d7e:	4607      	mov	r7, r0
 8004d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d82:	bb02      	cbnz	r2, 8004dc6 <_dtoa_r+0xa7e>
 8004d84:	4601      	mov	r1, r0
 8004d86:	4658      	mov	r0, fp
 8004d88:	f000 fb72 	bl	8005470 <__mcmp>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d90:	4639      	mov	r1, r7
 8004d92:	4628      	mov	r0, r5
 8004d94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004d98:	f000 f92c 	bl	8004ff4 <_Bfree>
 8004d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004da0:	9f08      	ldr	r7, [sp, #32]
 8004da2:	ea43 0102 	orr.w	r1, r3, r2
 8004da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da8:	430b      	orrs	r3, r1
 8004daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dac:	d10d      	bne.n	8004dca <_dtoa_r+0xa82>
 8004dae:	2b39      	cmp	r3, #57	; 0x39
 8004db0:	d029      	beq.n	8004e06 <_dtoa_r+0xabe>
 8004db2:	f1b9 0f00 	cmp.w	r9, #0
 8004db6:	dd01      	ble.n	8004dbc <_dtoa_r+0xa74>
 8004db8:	9b06      	ldr	r3, [sp, #24]
 8004dba:	3331      	adds	r3, #49	; 0x31
 8004dbc:	9a04      	ldr	r2, [sp, #16]
 8004dbe:	7013      	strb	r3, [r2, #0]
 8004dc0:	e776      	b.n	8004cb0 <_dtoa_r+0x968>
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	e7b9      	b.n	8004d3a <_dtoa_r+0x9f2>
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	e7e2      	b.n	8004d90 <_dtoa_r+0xa48>
 8004dca:	f1b9 0f00 	cmp.w	r9, #0
 8004dce:	db06      	blt.n	8004dde <_dtoa_r+0xa96>
 8004dd0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004dd2:	ea41 0909 	orr.w	r9, r1, r9
 8004dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dd8:	ea59 0101 	orrs.w	r1, r9, r1
 8004ddc:	d120      	bne.n	8004e20 <_dtoa_r+0xad8>
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	ddec      	ble.n	8004dbc <_dtoa_r+0xa74>
 8004de2:	4659      	mov	r1, fp
 8004de4:	2201      	movs	r2, #1
 8004de6:	4628      	mov	r0, r5
 8004de8:	9308      	str	r3, [sp, #32]
 8004dea:	f000 fad1 	bl	8005390 <__lshift>
 8004dee:	4621      	mov	r1, r4
 8004df0:	4683      	mov	fp, r0
 8004df2:	f000 fb3d 	bl	8005470 <__mcmp>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	9b08      	ldr	r3, [sp, #32]
 8004dfa:	dc02      	bgt.n	8004e02 <_dtoa_r+0xaba>
 8004dfc:	d1de      	bne.n	8004dbc <_dtoa_r+0xa74>
 8004dfe:	07da      	lsls	r2, r3, #31
 8004e00:	d5dc      	bpl.n	8004dbc <_dtoa_r+0xa74>
 8004e02:	2b39      	cmp	r3, #57	; 0x39
 8004e04:	d1d8      	bne.n	8004db8 <_dtoa_r+0xa70>
 8004e06:	2339      	movs	r3, #57	; 0x39
 8004e08:	9a04      	ldr	r2, [sp, #16]
 8004e0a:	7013      	strb	r3, [r2, #0]
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	461f      	mov	r7, r3
 8004e10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	2a39      	cmp	r2, #57	; 0x39
 8004e18:	d050      	beq.n	8004ebc <_dtoa_r+0xb74>
 8004e1a:	3201      	adds	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e747      	b.n	8004cb0 <_dtoa_r+0x968>
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	dd03      	ble.n	8004e2c <_dtoa_r+0xae4>
 8004e24:	2b39      	cmp	r3, #57	; 0x39
 8004e26:	d0ee      	beq.n	8004e06 <_dtoa_r+0xabe>
 8004e28:	3301      	adds	r3, #1
 8004e2a:	e7c7      	b.n	8004dbc <_dtoa_r+0xa74>
 8004e2c:	9a08      	ldr	r2, [sp, #32]
 8004e2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e34:	428a      	cmp	r2, r1
 8004e36:	d02a      	beq.n	8004e8e <_dtoa_r+0xb46>
 8004e38:	4659      	mov	r1, fp
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	220a      	movs	r2, #10
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 f8fa 	bl	8005038 <__multadd>
 8004e44:	45b0      	cmp	r8, r6
 8004e46:	4683      	mov	fp, r0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	f04f 020a 	mov.w	r2, #10
 8004e50:	4641      	mov	r1, r8
 8004e52:	4628      	mov	r0, r5
 8004e54:	d107      	bne.n	8004e66 <_dtoa_r+0xb1e>
 8004e56:	f000 f8ef 	bl	8005038 <__multadd>
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	9b08      	ldr	r3, [sp, #32]
 8004e60:	3301      	adds	r3, #1
 8004e62:	9308      	str	r3, [sp, #32]
 8004e64:	e775      	b.n	8004d52 <_dtoa_r+0xa0a>
 8004e66:	f000 f8e7 	bl	8005038 <__multadd>
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	2300      	movs	r3, #0
 8004e70:	220a      	movs	r2, #10
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 f8e0 	bl	8005038 <__multadd>
 8004e78:	4606      	mov	r6, r0
 8004e7a:	e7f0      	b.n	8004e5e <_dtoa_r+0xb16>
 8004e7c:	f1b9 0f00 	cmp.w	r9, #0
 8004e80:	bfcc      	ite	gt
 8004e82:	464f      	movgt	r7, r9
 8004e84:	2701      	movle	r7, #1
 8004e86:	f04f 0800 	mov.w	r8, #0
 8004e8a:	9a03      	ldr	r2, [sp, #12]
 8004e8c:	4417      	add	r7, r2
 8004e8e:	4659      	mov	r1, fp
 8004e90:	2201      	movs	r2, #1
 8004e92:	4628      	mov	r0, r5
 8004e94:	9308      	str	r3, [sp, #32]
 8004e96:	f000 fa7b 	bl	8005390 <__lshift>
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4683      	mov	fp, r0
 8004e9e:	f000 fae7 	bl	8005470 <__mcmp>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	dcb2      	bgt.n	8004e0c <_dtoa_r+0xac4>
 8004ea6:	d102      	bne.n	8004eae <_dtoa_r+0xb66>
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	07db      	lsls	r3, r3, #31
 8004eac:	d4ae      	bmi.n	8004e0c <_dtoa_r+0xac4>
 8004eae:	463b      	mov	r3, r7
 8004eb0:	461f      	mov	r7, r3
 8004eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eb6:	2a30      	cmp	r2, #48	; 0x30
 8004eb8:	d0fa      	beq.n	8004eb0 <_dtoa_r+0xb68>
 8004eba:	e6f9      	b.n	8004cb0 <_dtoa_r+0x968>
 8004ebc:	9a03      	ldr	r2, [sp, #12]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d1a5      	bne.n	8004e0e <_dtoa_r+0xac6>
 8004ec2:	2331      	movs	r3, #49	; 0x31
 8004ec4:	f10a 0a01 	add.w	sl, sl, #1
 8004ec8:	e779      	b.n	8004dbe <_dtoa_r+0xa76>
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <_dtoa_r+0xbd4>)
 8004ecc:	f7ff baa8 	b.w	8004420 <_dtoa_r+0xd8>
 8004ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f47f aa81 	bne.w	80043da <_dtoa_r+0x92>
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <_dtoa_r+0xbd8>)
 8004eda:	f7ff baa1 	b.w	8004420 <_dtoa_r+0xd8>
 8004ede:	f1b9 0f00 	cmp.w	r9, #0
 8004ee2:	dc03      	bgt.n	8004eec <_dtoa_r+0xba4>
 8004ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	f73f aecb 	bgt.w	8004c82 <_dtoa_r+0x93a>
 8004eec:	9f03      	ldr	r7, [sp, #12]
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4658      	mov	r0, fp
 8004ef2:	f7ff f99d 	bl	8004230 <quorem>
 8004ef6:	9a03      	ldr	r2, [sp, #12]
 8004ef8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004efc:	f807 3b01 	strb.w	r3, [r7], #1
 8004f00:	1aba      	subs	r2, r7, r2
 8004f02:	4591      	cmp	r9, r2
 8004f04:	ddba      	ble.n	8004e7c <_dtoa_r+0xb34>
 8004f06:	4659      	mov	r1, fp
 8004f08:	2300      	movs	r3, #0
 8004f0a:	220a      	movs	r2, #10
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 f893 	bl	8005038 <__multadd>
 8004f12:	4683      	mov	fp, r0
 8004f14:	e7eb      	b.n	8004eee <_dtoa_r+0xba6>
 8004f16:	bf00      	nop
 8004f18:	08006aa7 	.word	0x08006aa7
 8004f1c:	08006a04 	.word	0x08006a04
 8004f20:	08006a28 	.word	0x08006a28

08004f24 <_localeconv_r>:
 8004f24:	4800      	ldr	r0, [pc, #0]	; (8004f28 <_localeconv_r+0x4>)
 8004f26:	4770      	bx	lr
 8004f28:	20000160 	.word	0x20000160

08004f2c <malloc>:
 8004f2c:	4b02      	ldr	r3, [pc, #8]	; (8004f38 <malloc+0xc>)
 8004f2e:	4601      	mov	r1, r0
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	f000 bc1d 	b.w	8005770 <_malloc_r>
 8004f36:	bf00      	nop
 8004f38:	2000000c 	.word	0x2000000c

08004f3c <memchr>:
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	b2c9      	uxtb	r1, r1
 8004f42:	4402      	add	r2, r0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	d101      	bne.n	8004f4e <memchr+0x12>
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	e003      	b.n	8004f56 <memchr+0x1a>
 8004f4e:	7804      	ldrb	r4, [r0, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	428c      	cmp	r4, r1
 8004f54:	d1f6      	bne.n	8004f44 <memchr+0x8>
 8004f56:	bd10      	pop	{r4, pc}

08004f58 <memcpy>:
 8004f58:	440a      	add	r2, r1
 8004f5a:	4291      	cmp	r1, r2
 8004f5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f60:	d100      	bne.n	8004f64 <memcpy+0xc>
 8004f62:	4770      	bx	lr
 8004f64:	b510      	push	{r4, lr}
 8004f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f6a:	4291      	cmp	r1, r2
 8004f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f70:	d1f9      	bne.n	8004f66 <memcpy+0xe>
 8004f72:	bd10      	pop	{r4, pc}

08004f74 <_Balloc>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f78:	4604      	mov	r4, r0
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	b976      	cbnz	r6, 8004f9c <_Balloc+0x28>
 8004f7e:	2010      	movs	r0, #16
 8004f80:	f7ff ffd4 	bl	8004f2c <malloc>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6260      	str	r0, [r4, #36]	; 0x24
 8004f88:	b920      	cbnz	r0, 8004f94 <_Balloc+0x20>
 8004f8a:	2166      	movs	r1, #102	; 0x66
 8004f8c:	4b17      	ldr	r3, [pc, #92]	; (8004fec <_Balloc+0x78>)
 8004f8e:	4818      	ldr	r0, [pc, #96]	; (8004ff0 <_Balloc+0x7c>)
 8004f90:	f000 fc72 	bl	8005878 <__assert_func>
 8004f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f98:	6006      	str	r6, [r0, #0]
 8004f9a:	60c6      	str	r6, [r0, #12]
 8004f9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f9e:	68f3      	ldr	r3, [r6, #12]
 8004fa0:	b183      	cbz	r3, 8004fc4 <_Balloc+0x50>
 8004fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004faa:	b9b8      	cbnz	r0, 8004fdc <_Balloc+0x68>
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f605 	lsl.w	r6, r1, r5
 8004fb2:	1d72      	adds	r2, r6, #5
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	0092      	lsls	r2, r2, #2
 8004fb8:	f000 fb5e 	bl	8005678 <_calloc_r>
 8004fbc:	b160      	cbz	r0, 8004fd8 <_Balloc+0x64>
 8004fbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fc2:	e00e      	b.n	8004fe2 <_Balloc+0x6e>
 8004fc4:	2221      	movs	r2, #33	; 0x21
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 fb55 	bl	8005678 <_calloc_r>
 8004fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd0:	60f0      	str	r0, [r6, #12]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e4      	bne.n	8004fa2 <_Balloc+0x2e>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	6802      	ldr	r2, [r0, #0]
 8004fde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fe8:	e7f7      	b.n	8004fda <_Balloc+0x66>
 8004fea:	bf00      	nop
 8004fec:	08006a35 	.word	0x08006a35
 8004ff0:	08006ab8 	.word	0x08006ab8

08004ff4 <_Bfree>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	b976      	cbnz	r6, 800501c <_Bfree+0x28>
 8004ffe:	2010      	movs	r0, #16
 8005000:	f7ff ff94 	bl	8004f2c <malloc>
 8005004:	4602      	mov	r2, r0
 8005006:	6268      	str	r0, [r5, #36]	; 0x24
 8005008:	b920      	cbnz	r0, 8005014 <_Bfree+0x20>
 800500a:	218a      	movs	r1, #138	; 0x8a
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <_Bfree+0x3c>)
 800500e:	4809      	ldr	r0, [pc, #36]	; (8005034 <_Bfree+0x40>)
 8005010:	f000 fc32 	bl	8005878 <__assert_func>
 8005014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005018:	6006      	str	r6, [r0, #0]
 800501a:	60c6      	str	r6, [r0, #12]
 800501c:	b13c      	cbz	r4, 800502e <_Bfree+0x3a>
 800501e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005020:	6862      	ldr	r2, [r4, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005028:	6021      	str	r1, [r4, #0]
 800502a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	08006a35 	.word	0x08006a35
 8005034:	08006ab8 	.word	0x08006ab8

08005038 <__multadd>:
 8005038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503c:	4607      	mov	r7, r0
 800503e:	460c      	mov	r4, r1
 8005040:	461e      	mov	r6, r3
 8005042:	2000      	movs	r0, #0
 8005044:	690d      	ldr	r5, [r1, #16]
 8005046:	f101 0c14 	add.w	ip, r1, #20
 800504a:	f8dc 3000 	ldr.w	r3, [ip]
 800504e:	3001      	adds	r0, #1
 8005050:	b299      	uxth	r1, r3
 8005052:	fb02 6101 	mla	r1, r2, r1, r6
 8005056:	0c1e      	lsrs	r6, r3, #16
 8005058:	0c0b      	lsrs	r3, r1, #16
 800505a:	fb02 3306 	mla	r3, r2, r6, r3
 800505e:	b289      	uxth	r1, r1
 8005060:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005064:	4285      	cmp	r5, r0
 8005066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800506a:	f84c 1b04 	str.w	r1, [ip], #4
 800506e:	dcec      	bgt.n	800504a <__multadd+0x12>
 8005070:	b30e      	cbz	r6, 80050b6 <__multadd+0x7e>
 8005072:	68a3      	ldr	r3, [r4, #8]
 8005074:	42ab      	cmp	r3, r5
 8005076:	dc19      	bgt.n	80050ac <__multadd+0x74>
 8005078:	6861      	ldr	r1, [r4, #4]
 800507a:	4638      	mov	r0, r7
 800507c:	3101      	adds	r1, #1
 800507e:	f7ff ff79 	bl	8004f74 <_Balloc>
 8005082:	4680      	mov	r8, r0
 8005084:	b928      	cbnz	r0, 8005092 <__multadd+0x5a>
 8005086:	4602      	mov	r2, r0
 8005088:	21b5      	movs	r1, #181	; 0xb5
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <__multadd+0x84>)
 800508c:	480c      	ldr	r0, [pc, #48]	; (80050c0 <__multadd+0x88>)
 800508e:	f000 fbf3 	bl	8005878 <__assert_func>
 8005092:	6922      	ldr	r2, [r4, #16]
 8005094:	f104 010c 	add.w	r1, r4, #12
 8005098:	3202      	adds	r2, #2
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	300c      	adds	r0, #12
 800509e:	f7ff ff5b 	bl	8004f58 <memcpy>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ffa5 	bl	8004ff4 <_Bfree>
 80050aa:	4644      	mov	r4, r8
 80050ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050b0:	3501      	adds	r5, #1
 80050b2:	615e      	str	r6, [r3, #20]
 80050b4:	6125      	str	r5, [r4, #16]
 80050b6:	4620      	mov	r0, r4
 80050b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050bc:	08006aa7 	.word	0x08006aa7
 80050c0:	08006ab8 	.word	0x08006ab8

080050c4 <__hi0bits>:
 80050c4:	0c02      	lsrs	r2, r0, #16
 80050c6:	0412      	lsls	r2, r2, #16
 80050c8:	4603      	mov	r3, r0
 80050ca:	b9ca      	cbnz	r2, 8005100 <__hi0bits+0x3c>
 80050cc:	0403      	lsls	r3, r0, #16
 80050ce:	2010      	movs	r0, #16
 80050d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80050d4:	bf04      	itt	eq
 80050d6:	021b      	lsleq	r3, r3, #8
 80050d8:	3008      	addeq	r0, #8
 80050da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80050de:	bf04      	itt	eq
 80050e0:	011b      	lsleq	r3, r3, #4
 80050e2:	3004      	addeq	r0, #4
 80050e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80050e8:	bf04      	itt	eq
 80050ea:	009b      	lsleq	r3, r3, #2
 80050ec:	3002      	addeq	r0, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	db05      	blt.n	80050fe <__hi0bits+0x3a>
 80050f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80050f6:	f100 0001 	add.w	r0, r0, #1
 80050fa:	bf08      	it	eq
 80050fc:	2020      	moveq	r0, #32
 80050fe:	4770      	bx	lr
 8005100:	2000      	movs	r0, #0
 8005102:	e7e5      	b.n	80050d0 <__hi0bits+0xc>

08005104 <__lo0bits>:
 8005104:	6803      	ldr	r3, [r0, #0]
 8005106:	4602      	mov	r2, r0
 8005108:	f013 0007 	ands.w	r0, r3, #7
 800510c:	d00b      	beq.n	8005126 <__lo0bits+0x22>
 800510e:	07d9      	lsls	r1, r3, #31
 8005110:	d421      	bmi.n	8005156 <__lo0bits+0x52>
 8005112:	0798      	lsls	r0, r3, #30
 8005114:	bf49      	itett	mi
 8005116:	085b      	lsrmi	r3, r3, #1
 8005118:	089b      	lsrpl	r3, r3, #2
 800511a:	2001      	movmi	r0, #1
 800511c:	6013      	strmi	r3, [r2, #0]
 800511e:	bf5c      	itt	pl
 8005120:	2002      	movpl	r0, #2
 8005122:	6013      	strpl	r3, [r2, #0]
 8005124:	4770      	bx	lr
 8005126:	b299      	uxth	r1, r3
 8005128:	b909      	cbnz	r1, 800512e <__lo0bits+0x2a>
 800512a:	2010      	movs	r0, #16
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	b2d9      	uxtb	r1, r3
 8005130:	b909      	cbnz	r1, 8005136 <__lo0bits+0x32>
 8005132:	3008      	adds	r0, #8
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	0719      	lsls	r1, r3, #28
 8005138:	bf04      	itt	eq
 800513a:	091b      	lsreq	r3, r3, #4
 800513c:	3004      	addeq	r0, #4
 800513e:	0799      	lsls	r1, r3, #30
 8005140:	bf04      	itt	eq
 8005142:	089b      	lsreq	r3, r3, #2
 8005144:	3002      	addeq	r0, #2
 8005146:	07d9      	lsls	r1, r3, #31
 8005148:	d403      	bmi.n	8005152 <__lo0bits+0x4e>
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	f100 0001 	add.w	r0, r0, #1
 8005150:	d003      	beq.n	800515a <__lo0bits+0x56>
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4770      	bx	lr
 8005156:	2000      	movs	r0, #0
 8005158:	4770      	bx	lr
 800515a:	2020      	movs	r0, #32
 800515c:	4770      	bx	lr
	...

08005160 <__i2b>:
 8005160:	b510      	push	{r4, lr}
 8005162:	460c      	mov	r4, r1
 8005164:	2101      	movs	r1, #1
 8005166:	f7ff ff05 	bl	8004f74 <_Balloc>
 800516a:	4602      	mov	r2, r0
 800516c:	b928      	cbnz	r0, 800517a <__i2b+0x1a>
 800516e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <__i2b+0x24>)
 8005174:	4804      	ldr	r0, [pc, #16]	; (8005188 <__i2b+0x28>)
 8005176:	f000 fb7f 	bl	8005878 <__assert_func>
 800517a:	2301      	movs	r3, #1
 800517c:	6144      	str	r4, [r0, #20]
 800517e:	6103      	str	r3, [r0, #16]
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	08006aa7 	.word	0x08006aa7
 8005188:	08006ab8 	.word	0x08006ab8

0800518c <__multiply>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	4691      	mov	r9, r2
 8005192:	690a      	ldr	r2, [r1, #16]
 8005194:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005198:	460c      	mov	r4, r1
 800519a:	429a      	cmp	r2, r3
 800519c:	bfbe      	ittt	lt
 800519e:	460b      	movlt	r3, r1
 80051a0:	464c      	movlt	r4, r9
 80051a2:	4699      	movlt	r9, r3
 80051a4:	6927      	ldr	r7, [r4, #16]
 80051a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	6861      	ldr	r1, [r4, #4]
 80051ae:	eb07 060a 	add.w	r6, r7, sl
 80051b2:	42b3      	cmp	r3, r6
 80051b4:	b085      	sub	sp, #20
 80051b6:	bfb8      	it	lt
 80051b8:	3101      	addlt	r1, #1
 80051ba:	f7ff fedb 	bl	8004f74 <_Balloc>
 80051be:	b930      	cbnz	r0, 80051ce <__multiply+0x42>
 80051c0:	4602      	mov	r2, r0
 80051c2:	f240 115d 	movw	r1, #349	; 0x15d
 80051c6:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <__multiply+0x148>)
 80051c8:	4843      	ldr	r0, [pc, #268]	; (80052d8 <__multiply+0x14c>)
 80051ca:	f000 fb55 	bl	8005878 <__assert_func>
 80051ce:	f100 0514 	add.w	r5, r0, #20
 80051d2:	462b      	mov	r3, r5
 80051d4:	2200      	movs	r2, #0
 80051d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80051da:	4543      	cmp	r3, r8
 80051dc:	d321      	bcc.n	8005222 <__multiply+0x96>
 80051de:	f104 0314 	add.w	r3, r4, #20
 80051e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80051e6:	f109 0314 	add.w	r3, r9, #20
 80051ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80051ee:	9202      	str	r2, [sp, #8]
 80051f0:	1b3a      	subs	r2, r7, r4
 80051f2:	3a15      	subs	r2, #21
 80051f4:	f022 0203 	bic.w	r2, r2, #3
 80051f8:	3204      	adds	r2, #4
 80051fa:	f104 0115 	add.w	r1, r4, #21
 80051fe:	428f      	cmp	r7, r1
 8005200:	bf38      	it	cc
 8005202:	2204      	movcc	r2, #4
 8005204:	9201      	str	r2, [sp, #4]
 8005206:	9a02      	ldr	r2, [sp, #8]
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	429a      	cmp	r2, r3
 800520c:	d80c      	bhi.n	8005228 <__multiply+0x9c>
 800520e:	2e00      	cmp	r6, #0
 8005210:	dd03      	ble.n	800521a <__multiply+0x8e>
 8005212:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005216:	2b00      	cmp	r3, #0
 8005218:	d059      	beq.n	80052ce <__multiply+0x142>
 800521a:	6106      	str	r6, [r0, #16]
 800521c:	b005      	add	sp, #20
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	f843 2b04 	str.w	r2, [r3], #4
 8005226:	e7d8      	b.n	80051da <__multiply+0x4e>
 8005228:	f8b3 a000 	ldrh.w	sl, [r3]
 800522c:	f1ba 0f00 	cmp.w	sl, #0
 8005230:	d023      	beq.n	800527a <__multiply+0xee>
 8005232:	46a9      	mov	r9, r5
 8005234:	f04f 0c00 	mov.w	ip, #0
 8005238:	f104 0e14 	add.w	lr, r4, #20
 800523c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005240:	f8d9 1000 	ldr.w	r1, [r9]
 8005244:	fa1f fb82 	uxth.w	fp, r2
 8005248:	b289      	uxth	r1, r1
 800524a:	fb0a 110b 	mla	r1, sl, fp, r1
 800524e:	4461      	add	r1, ip
 8005250:	f8d9 c000 	ldr.w	ip, [r9]
 8005254:	0c12      	lsrs	r2, r2, #16
 8005256:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800525a:	fb0a c202 	mla	r2, sl, r2, ip
 800525e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005262:	b289      	uxth	r1, r1
 8005264:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005268:	4577      	cmp	r7, lr
 800526a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800526e:	f849 1b04 	str.w	r1, [r9], #4
 8005272:	d8e3      	bhi.n	800523c <__multiply+0xb0>
 8005274:	9a01      	ldr	r2, [sp, #4]
 8005276:	f845 c002 	str.w	ip, [r5, r2]
 800527a:	9a03      	ldr	r2, [sp, #12]
 800527c:	3304      	adds	r3, #4
 800527e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005282:	f1b9 0f00 	cmp.w	r9, #0
 8005286:	d020      	beq.n	80052ca <__multiply+0x13e>
 8005288:	46ae      	mov	lr, r5
 800528a:	f04f 0a00 	mov.w	sl, #0
 800528e:	6829      	ldr	r1, [r5, #0]
 8005290:	f104 0c14 	add.w	ip, r4, #20
 8005294:	f8bc b000 	ldrh.w	fp, [ip]
 8005298:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800529c:	b289      	uxth	r1, r1
 800529e:	fb09 220b 	mla	r2, r9, fp, r2
 80052a2:	4492      	add	sl, r2
 80052a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80052a8:	f84e 1b04 	str.w	r1, [lr], #4
 80052ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80052b0:	f8be 1000 	ldrh.w	r1, [lr]
 80052b4:	0c12      	lsrs	r2, r2, #16
 80052b6:	fb09 1102 	mla	r1, r9, r2, r1
 80052ba:	4567      	cmp	r7, ip
 80052bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80052c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80052c4:	d8e6      	bhi.n	8005294 <__multiply+0x108>
 80052c6:	9a01      	ldr	r2, [sp, #4]
 80052c8:	50a9      	str	r1, [r5, r2]
 80052ca:	3504      	adds	r5, #4
 80052cc:	e79b      	b.n	8005206 <__multiply+0x7a>
 80052ce:	3e01      	subs	r6, #1
 80052d0:	e79d      	b.n	800520e <__multiply+0x82>
 80052d2:	bf00      	nop
 80052d4:	08006aa7 	.word	0x08006aa7
 80052d8:	08006ab8 	.word	0x08006ab8

080052dc <__pow5mult>:
 80052dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e0:	4615      	mov	r5, r2
 80052e2:	f012 0203 	ands.w	r2, r2, #3
 80052e6:	4606      	mov	r6, r0
 80052e8:	460f      	mov	r7, r1
 80052ea:	d007      	beq.n	80052fc <__pow5mult+0x20>
 80052ec:	4c25      	ldr	r4, [pc, #148]	; (8005384 <__pow5mult+0xa8>)
 80052ee:	3a01      	subs	r2, #1
 80052f0:	2300      	movs	r3, #0
 80052f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052f6:	f7ff fe9f 	bl	8005038 <__multadd>
 80052fa:	4607      	mov	r7, r0
 80052fc:	10ad      	asrs	r5, r5, #2
 80052fe:	d03d      	beq.n	800537c <__pow5mult+0xa0>
 8005300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005302:	b97c      	cbnz	r4, 8005324 <__pow5mult+0x48>
 8005304:	2010      	movs	r0, #16
 8005306:	f7ff fe11 	bl	8004f2c <malloc>
 800530a:	4602      	mov	r2, r0
 800530c:	6270      	str	r0, [r6, #36]	; 0x24
 800530e:	b928      	cbnz	r0, 800531c <__pow5mult+0x40>
 8005310:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <__pow5mult+0xac>)
 8005316:	481d      	ldr	r0, [pc, #116]	; (800538c <__pow5mult+0xb0>)
 8005318:	f000 faae 	bl	8005878 <__assert_func>
 800531c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005320:	6004      	str	r4, [r0, #0]
 8005322:	60c4      	str	r4, [r0, #12]
 8005324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800532c:	b94c      	cbnz	r4, 8005342 <__pow5mult+0x66>
 800532e:	f240 2171 	movw	r1, #625	; 0x271
 8005332:	4630      	mov	r0, r6
 8005334:	f7ff ff14 	bl	8005160 <__i2b>
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005340:	6003      	str	r3, [r0, #0]
 8005342:	f04f 0900 	mov.w	r9, #0
 8005346:	07eb      	lsls	r3, r5, #31
 8005348:	d50a      	bpl.n	8005360 <__pow5mult+0x84>
 800534a:	4639      	mov	r1, r7
 800534c:	4622      	mov	r2, r4
 800534e:	4630      	mov	r0, r6
 8005350:	f7ff ff1c 	bl	800518c <__multiply>
 8005354:	4680      	mov	r8, r0
 8005356:	4639      	mov	r1, r7
 8005358:	4630      	mov	r0, r6
 800535a:	f7ff fe4b 	bl	8004ff4 <_Bfree>
 800535e:	4647      	mov	r7, r8
 8005360:	106d      	asrs	r5, r5, #1
 8005362:	d00b      	beq.n	800537c <__pow5mult+0xa0>
 8005364:	6820      	ldr	r0, [r4, #0]
 8005366:	b938      	cbnz	r0, 8005378 <__pow5mult+0x9c>
 8005368:	4622      	mov	r2, r4
 800536a:	4621      	mov	r1, r4
 800536c:	4630      	mov	r0, r6
 800536e:	f7ff ff0d 	bl	800518c <__multiply>
 8005372:	6020      	str	r0, [r4, #0]
 8005374:	f8c0 9000 	str.w	r9, [r0]
 8005378:	4604      	mov	r4, r0
 800537a:	e7e4      	b.n	8005346 <__pow5mult+0x6a>
 800537c:	4638      	mov	r0, r7
 800537e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005382:	bf00      	nop
 8005384:	08006c08 	.word	0x08006c08
 8005388:	08006a35 	.word	0x08006a35
 800538c:	08006ab8 	.word	0x08006ab8

08005390 <__lshift>:
 8005390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005394:	460c      	mov	r4, r1
 8005396:	4607      	mov	r7, r0
 8005398:	4691      	mov	r9, r2
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	6849      	ldr	r1, [r1, #4]
 800539e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053a2:	68a3      	ldr	r3, [r4, #8]
 80053a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053a8:	f108 0601 	add.w	r6, r8, #1
 80053ac:	42b3      	cmp	r3, r6
 80053ae:	db0b      	blt.n	80053c8 <__lshift+0x38>
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff fddf 	bl	8004f74 <_Balloc>
 80053b6:	4605      	mov	r5, r0
 80053b8:	b948      	cbnz	r0, 80053ce <__lshift+0x3e>
 80053ba:	4602      	mov	r2, r0
 80053bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <__lshift+0xd8>)
 80053c2:	482a      	ldr	r0, [pc, #168]	; (800546c <__lshift+0xdc>)
 80053c4:	f000 fa58 	bl	8005878 <__assert_func>
 80053c8:	3101      	adds	r1, #1
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	e7ee      	b.n	80053ac <__lshift+0x1c>
 80053ce:	2300      	movs	r3, #0
 80053d0:	f100 0114 	add.w	r1, r0, #20
 80053d4:	f100 0210 	add.w	r2, r0, #16
 80053d8:	4618      	mov	r0, r3
 80053da:	4553      	cmp	r3, sl
 80053dc:	db37      	blt.n	800544e <__lshift+0xbe>
 80053de:	6920      	ldr	r0, [r4, #16]
 80053e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053e4:	f104 0314 	add.w	r3, r4, #20
 80053e8:	f019 091f 	ands.w	r9, r9, #31
 80053ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80053f4:	d02f      	beq.n	8005456 <__lshift+0xc6>
 80053f6:	468a      	mov	sl, r1
 80053f8:	f04f 0c00 	mov.w	ip, #0
 80053fc:	f1c9 0e20 	rsb	lr, r9, #32
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	fa02 f209 	lsl.w	r2, r2, r9
 8005406:	ea42 020c 	orr.w	r2, r2, ip
 800540a:	f84a 2b04 	str.w	r2, [sl], #4
 800540e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005412:	4298      	cmp	r0, r3
 8005414:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005418:	d8f2      	bhi.n	8005400 <__lshift+0x70>
 800541a:	1b03      	subs	r3, r0, r4
 800541c:	3b15      	subs	r3, #21
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	3304      	adds	r3, #4
 8005424:	f104 0215 	add.w	r2, r4, #21
 8005428:	4290      	cmp	r0, r2
 800542a:	bf38      	it	cc
 800542c:	2304      	movcc	r3, #4
 800542e:	f841 c003 	str.w	ip, [r1, r3]
 8005432:	f1bc 0f00 	cmp.w	ip, #0
 8005436:	d001      	beq.n	800543c <__lshift+0xac>
 8005438:	f108 0602 	add.w	r6, r8, #2
 800543c:	3e01      	subs	r6, #1
 800543e:	4638      	mov	r0, r7
 8005440:	4621      	mov	r1, r4
 8005442:	612e      	str	r6, [r5, #16]
 8005444:	f7ff fdd6 	bl	8004ff4 <_Bfree>
 8005448:	4628      	mov	r0, r5
 800544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005452:	3301      	adds	r3, #1
 8005454:	e7c1      	b.n	80053da <__lshift+0x4a>
 8005456:	3904      	subs	r1, #4
 8005458:	f853 2b04 	ldr.w	r2, [r3], #4
 800545c:	4298      	cmp	r0, r3
 800545e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005462:	d8f9      	bhi.n	8005458 <__lshift+0xc8>
 8005464:	e7ea      	b.n	800543c <__lshift+0xac>
 8005466:	bf00      	nop
 8005468:	08006aa7 	.word	0x08006aa7
 800546c:	08006ab8 	.word	0x08006ab8

08005470 <__mcmp>:
 8005470:	4603      	mov	r3, r0
 8005472:	690a      	ldr	r2, [r1, #16]
 8005474:	6900      	ldr	r0, [r0, #16]
 8005476:	b530      	push	{r4, r5, lr}
 8005478:	1a80      	subs	r0, r0, r2
 800547a:	d10d      	bne.n	8005498 <__mcmp+0x28>
 800547c:	3314      	adds	r3, #20
 800547e:	3114      	adds	r1, #20
 8005480:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005484:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800548c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005490:	4295      	cmp	r5, r2
 8005492:	d002      	beq.n	800549a <__mcmp+0x2a>
 8005494:	d304      	bcc.n	80054a0 <__mcmp+0x30>
 8005496:	2001      	movs	r0, #1
 8005498:	bd30      	pop	{r4, r5, pc}
 800549a:	42a3      	cmp	r3, r4
 800549c:	d3f4      	bcc.n	8005488 <__mcmp+0x18>
 800549e:	e7fb      	b.n	8005498 <__mcmp+0x28>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a4:	e7f8      	b.n	8005498 <__mcmp+0x28>
	...

080054a8 <__mdiff>:
 80054a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	460d      	mov	r5, r1
 80054ae:	4607      	mov	r7, r0
 80054b0:	4611      	mov	r1, r2
 80054b2:	4628      	mov	r0, r5
 80054b4:	4614      	mov	r4, r2
 80054b6:	f7ff ffdb 	bl	8005470 <__mcmp>
 80054ba:	1e06      	subs	r6, r0, #0
 80054bc:	d111      	bne.n	80054e2 <__mdiff+0x3a>
 80054be:	4631      	mov	r1, r6
 80054c0:	4638      	mov	r0, r7
 80054c2:	f7ff fd57 	bl	8004f74 <_Balloc>
 80054c6:	4602      	mov	r2, r0
 80054c8:	b928      	cbnz	r0, 80054d6 <__mdiff+0x2e>
 80054ca:	f240 2132 	movw	r1, #562	; 0x232
 80054ce:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <__mdiff+0x110>)
 80054d0:	483a      	ldr	r0, [pc, #232]	; (80055bc <__mdiff+0x114>)
 80054d2:	f000 f9d1 	bl	8005878 <__assert_func>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80054dc:	4610      	mov	r0, r2
 80054de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e2:	bfa4      	itt	ge
 80054e4:	4623      	movge	r3, r4
 80054e6:	462c      	movge	r4, r5
 80054e8:	4638      	mov	r0, r7
 80054ea:	6861      	ldr	r1, [r4, #4]
 80054ec:	bfa6      	itte	ge
 80054ee:	461d      	movge	r5, r3
 80054f0:	2600      	movge	r6, #0
 80054f2:	2601      	movlt	r6, #1
 80054f4:	f7ff fd3e 	bl	8004f74 <_Balloc>
 80054f8:	4602      	mov	r2, r0
 80054fa:	b918      	cbnz	r0, 8005504 <__mdiff+0x5c>
 80054fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <__mdiff+0x110>)
 8005502:	e7e5      	b.n	80054d0 <__mdiff+0x28>
 8005504:	f102 0814 	add.w	r8, r2, #20
 8005508:	46c2      	mov	sl, r8
 800550a:	f04f 0c00 	mov.w	ip, #0
 800550e:	6927      	ldr	r7, [r4, #16]
 8005510:	60c6      	str	r6, [r0, #12]
 8005512:	692e      	ldr	r6, [r5, #16]
 8005514:	f104 0014 	add.w	r0, r4, #20
 8005518:	f105 0914 	add.w	r9, r5, #20
 800551c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005520:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005524:	3410      	adds	r4, #16
 8005526:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800552a:	f859 3b04 	ldr.w	r3, [r9], #4
 800552e:	fa1f f18b 	uxth.w	r1, fp
 8005532:	448c      	add	ip, r1
 8005534:	b299      	uxth	r1, r3
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	ebac 0101 	sub.w	r1, ip, r1
 800553c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005540:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005544:	b289      	uxth	r1, r1
 8005546:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800554a:	454e      	cmp	r6, r9
 800554c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005550:	f84a 3b04 	str.w	r3, [sl], #4
 8005554:	d8e7      	bhi.n	8005526 <__mdiff+0x7e>
 8005556:	1b73      	subs	r3, r6, r5
 8005558:	3b15      	subs	r3, #21
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	3515      	adds	r5, #21
 8005560:	3304      	adds	r3, #4
 8005562:	42ae      	cmp	r6, r5
 8005564:	bf38      	it	cc
 8005566:	2304      	movcc	r3, #4
 8005568:	4418      	add	r0, r3
 800556a:	4443      	add	r3, r8
 800556c:	461e      	mov	r6, r3
 800556e:	4605      	mov	r5, r0
 8005570:	4575      	cmp	r5, lr
 8005572:	d30e      	bcc.n	8005592 <__mdiff+0xea>
 8005574:	f10e 0103 	add.w	r1, lr, #3
 8005578:	1a09      	subs	r1, r1, r0
 800557a:	f021 0103 	bic.w	r1, r1, #3
 800557e:	3803      	subs	r0, #3
 8005580:	4586      	cmp	lr, r0
 8005582:	bf38      	it	cc
 8005584:	2100      	movcc	r1, #0
 8005586:	4419      	add	r1, r3
 8005588:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800558c:	b18b      	cbz	r3, 80055b2 <__mdiff+0x10a>
 800558e:	6117      	str	r7, [r2, #16]
 8005590:	e7a4      	b.n	80054dc <__mdiff+0x34>
 8005592:	f855 8b04 	ldr.w	r8, [r5], #4
 8005596:	fa1f f188 	uxth.w	r1, r8
 800559a:	4461      	add	r1, ip
 800559c:	140c      	asrs	r4, r1, #16
 800559e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80055a2:	b289      	uxth	r1, r1
 80055a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80055a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80055ac:	f846 1b04 	str.w	r1, [r6], #4
 80055b0:	e7de      	b.n	8005570 <__mdiff+0xc8>
 80055b2:	3f01      	subs	r7, #1
 80055b4:	e7e8      	b.n	8005588 <__mdiff+0xe0>
 80055b6:	bf00      	nop
 80055b8:	08006aa7 	.word	0x08006aa7
 80055bc:	08006ab8 	.word	0x08006ab8

080055c0 <__d2b>:
 80055c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055c4:	2101      	movs	r1, #1
 80055c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80055ca:	4690      	mov	r8, r2
 80055cc:	461d      	mov	r5, r3
 80055ce:	f7ff fcd1 	bl	8004f74 <_Balloc>
 80055d2:	4604      	mov	r4, r0
 80055d4:	b930      	cbnz	r0, 80055e4 <__d2b+0x24>
 80055d6:	4602      	mov	r2, r0
 80055d8:	f240 310a 	movw	r1, #778	; 0x30a
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <__d2b+0xb0>)
 80055de:	4825      	ldr	r0, [pc, #148]	; (8005674 <__d2b+0xb4>)
 80055e0:	f000 f94a 	bl	8005878 <__assert_func>
 80055e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80055e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80055ec:	bb2d      	cbnz	r5, 800563a <__d2b+0x7a>
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f1b8 0300 	subs.w	r3, r8, #0
 80055f4:	d026      	beq.n	8005644 <__d2b+0x84>
 80055f6:	4668      	mov	r0, sp
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	f7ff fd83 	bl	8005104 <__lo0bits>
 80055fe:	9900      	ldr	r1, [sp, #0]
 8005600:	b1f0      	cbz	r0, 8005640 <__d2b+0x80>
 8005602:	9a01      	ldr	r2, [sp, #4]
 8005604:	f1c0 0320 	rsb	r3, r0, #32
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	430b      	orrs	r3, r1
 800560e:	40c2      	lsrs	r2, r0
 8005610:	6163      	str	r3, [r4, #20]
 8005612:	9201      	str	r2, [sp, #4]
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf14      	ite	ne
 800561a:	2102      	movne	r1, #2
 800561c:	2101      	moveq	r1, #1
 800561e:	61a3      	str	r3, [r4, #24]
 8005620:	6121      	str	r1, [r4, #16]
 8005622:	b1c5      	cbz	r5, 8005656 <__d2b+0x96>
 8005624:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005628:	4405      	add	r5, r0
 800562a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800562e:	603d      	str	r5, [r7, #0]
 8005630:	6030      	str	r0, [r6, #0]
 8005632:	4620      	mov	r0, r4
 8005634:	b002      	add	sp, #8
 8005636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800563a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800563e:	e7d6      	b.n	80055ee <__d2b+0x2e>
 8005640:	6161      	str	r1, [r4, #20]
 8005642:	e7e7      	b.n	8005614 <__d2b+0x54>
 8005644:	a801      	add	r0, sp, #4
 8005646:	f7ff fd5d 	bl	8005104 <__lo0bits>
 800564a:	2101      	movs	r1, #1
 800564c:	9b01      	ldr	r3, [sp, #4]
 800564e:	6121      	str	r1, [r4, #16]
 8005650:	6163      	str	r3, [r4, #20]
 8005652:	3020      	adds	r0, #32
 8005654:	e7e5      	b.n	8005622 <__d2b+0x62>
 8005656:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800565a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800565e:	6038      	str	r0, [r7, #0]
 8005660:	6918      	ldr	r0, [r3, #16]
 8005662:	f7ff fd2f 	bl	80050c4 <__hi0bits>
 8005666:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800566a:	6031      	str	r1, [r6, #0]
 800566c:	e7e1      	b.n	8005632 <__d2b+0x72>
 800566e:	bf00      	nop
 8005670:	08006aa7 	.word	0x08006aa7
 8005674:	08006ab8 	.word	0x08006ab8

08005678 <_calloc_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	fba1 5402 	umull	r5, r4, r1, r2
 800567e:	b934      	cbnz	r4, 800568e <_calloc_r+0x16>
 8005680:	4629      	mov	r1, r5
 8005682:	f000 f875 	bl	8005770 <_malloc_r>
 8005686:	4606      	mov	r6, r0
 8005688:	b928      	cbnz	r0, 8005696 <_calloc_r+0x1e>
 800568a:	4630      	mov	r0, r6
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	220c      	movs	r2, #12
 8005690:	2600      	movs	r6, #0
 8005692:	6002      	str	r2, [r0, #0]
 8005694:	e7f9      	b.n	800568a <_calloc_r+0x12>
 8005696:	462a      	mov	r2, r5
 8005698:	4621      	mov	r1, r4
 800569a:	f7fe f961 	bl	8003960 <memset>
 800569e:	e7f4      	b.n	800568a <_calloc_r+0x12>

080056a0 <_free_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4605      	mov	r5, r0
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d040      	beq.n	800572a <_free_r+0x8a>
 80056a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ac:	1f0c      	subs	r4, r1, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bfb8      	it	lt
 80056b2:	18e4      	addlt	r4, r4, r3
 80056b4:	f000 f922 	bl	80058fc <__malloc_lock>
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <_free_r+0x8c>)
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	b933      	cbnz	r3, 80056cc <_free_r+0x2c>
 80056be:	6063      	str	r3, [r4, #4]
 80056c0:	6014      	str	r4, [r2, #0]
 80056c2:	4628      	mov	r0, r5
 80056c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056c8:	f000 b91e 	b.w	8005908 <__malloc_unlock>
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d908      	bls.n	80056e2 <_free_r+0x42>
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	1821      	adds	r1, r4, r0
 80056d4:	428b      	cmp	r3, r1
 80056d6:	bf01      	itttt	eq
 80056d8:	6819      	ldreq	r1, [r3, #0]
 80056da:	685b      	ldreq	r3, [r3, #4]
 80056dc:	1809      	addeq	r1, r1, r0
 80056de:	6021      	streq	r1, [r4, #0]
 80056e0:	e7ed      	b.n	80056be <_free_r+0x1e>
 80056e2:	461a      	mov	r2, r3
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	b10b      	cbz	r3, 80056ec <_free_r+0x4c>
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	d9fa      	bls.n	80056e2 <_free_r+0x42>
 80056ec:	6811      	ldr	r1, [r2, #0]
 80056ee:	1850      	adds	r0, r2, r1
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d10b      	bne.n	800570c <_free_r+0x6c>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	4401      	add	r1, r0
 80056f8:	1850      	adds	r0, r2, r1
 80056fa:	4283      	cmp	r3, r0
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	d1e0      	bne.n	80056c2 <_free_r+0x22>
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	4401      	add	r1, r0
 8005706:	6011      	str	r1, [r2, #0]
 8005708:	6053      	str	r3, [r2, #4]
 800570a:	e7da      	b.n	80056c2 <_free_r+0x22>
 800570c:	d902      	bls.n	8005714 <_free_r+0x74>
 800570e:	230c      	movs	r3, #12
 8005710:	602b      	str	r3, [r5, #0]
 8005712:	e7d6      	b.n	80056c2 <_free_r+0x22>
 8005714:	6820      	ldr	r0, [r4, #0]
 8005716:	1821      	adds	r1, r4, r0
 8005718:	428b      	cmp	r3, r1
 800571a:	bf01      	itttt	eq
 800571c:	6819      	ldreq	r1, [r3, #0]
 800571e:	685b      	ldreq	r3, [r3, #4]
 8005720:	1809      	addeq	r1, r1, r0
 8005722:	6021      	streq	r1, [r4, #0]
 8005724:	6063      	str	r3, [r4, #4]
 8005726:	6054      	str	r4, [r2, #4]
 8005728:	e7cb      	b.n	80056c2 <_free_r+0x22>
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	20000330 	.word	0x20000330

08005730 <sbrk_aligned>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4e0e      	ldr	r6, [pc, #56]	; (800576c <sbrk_aligned+0x3c>)
 8005734:	460c      	mov	r4, r1
 8005736:	6831      	ldr	r1, [r6, #0]
 8005738:	4605      	mov	r5, r0
 800573a:	b911      	cbnz	r1, 8005742 <sbrk_aligned+0x12>
 800573c:	f000 f88c 	bl	8005858 <_sbrk_r>
 8005740:	6030      	str	r0, [r6, #0]
 8005742:	4621      	mov	r1, r4
 8005744:	4628      	mov	r0, r5
 8005746:	f000 f887 	bl	8005858 <_sbrk_r>
 800574a:	1c43      	adds	r3, r0, #1
 800574c:	d00a      	beq.n	8005764 <sbrk_aligned+0x34>
 800574e:	1cc4      	adds	r4, r0, #3
 8005750:	f024 0403 	bic.w	r4, r4, #3
 8005754:	42a0      	cmp	r0, r4
 8005756:	d007      	beq.n	8005768 <sbrk_aligned+0x38>
 8005758:	1a21      	subs	r1, r4, r0
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f87c 	bl	8005858 <_sbrk_r>
 8005760:	3001      	adds	r0, #1
 8005762:	d101      	bne.n	8005768 <sbrk_aligned+0x38>
 8005764:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005768:	4620      	mov	r0, r4
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	20000334 	.word	0x20000334

08005770 <_malloc_r>:
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	1ccd      	adds	r5, r1, #3
 8005776:	f025 0503 	bic.w	r5, r5, #3
 800577a:	3508      	adds	r5, #8
 800577c:	2d0c      	cmp	r5, #12
 800577e:	bf38      	it	cc
 8005780:	250c      	movcc	r5, #12
 8005782:	2d00      	cmp	r5, #0
 8005784:	4607      	mov	r7, r0
 8005786:	db01      	blt.n	800578c <_malloc_r+0x1c>
 8005788:	42a9      	cmp	r1, r5
 800578a:	d905      	bls.n	8005798 <_malloc_r+0x28>
 800578c:	230c      	movs	r3, #12
 800578e:	2600      	movs	r6, #0
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	4630      	mov	r0, r6
 8005794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005798:	4e2e      	ldr	r6, [pc, #184]	; (8005854 <_malloc_r+0xe4>)
 800579a:	f000 f8af 	bl	80058fc <__malloc_lock>
 800579e:	6833      	ldr	r3, [r6, #0]
 80057a0:	461c      	mov	r4, r3
 80057a2:	bb34      	cbnz	r4, 80057f2 <_malloc_r+0x82>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4638      	mov	r0, r7
 80057a8:	f7ff ffc2 	bl	8005730 <sbrk_aligned>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	4604      	mov	r4, r0
 80057b0:	d14d      	bne.n	800584e <_malloc_r+0xde>
 80057b2:	6834      	ldr	r4, [r6, #0]
 80057b4:	4626      	mov	r6, r4
 80057b6:	2e00      	cmp	r6, #0
 80057b8:	d140      	bne.n	800583c <_malloc_r+0xcc>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	4631      	mov	r1, r6
 80057be:	4638      	mov	r0, r7
 80057c0:	eb04 0803 	add.w	r8, r4, r3
 80057c4:	f000 f848 	bl	8005858 <_sbrk_r>
 80057c8:	4580      	cmp	r8, r0
 80057ca:	d13a      	bne.n	8005842 <_malloc_r+0xd2>
 80057cc:	6821      	ldr	r1, [r4, #0]
 80057ce:	3503      	adds	r5, #3
 80057d0:	1a6d      	subs	r5, r5, r1
 80057d2:	f025 0503 	bic.w	r5, r5, #3
 80057d6:	3508      	adds	r5, #8
 80057d8:	2d0c      	cmp	r5, #12
 80057da:	bf38      	it	cc
 80057dc:	250c      	movcc	r5, #12
 80057de:	4638      	mov	r0, r7
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7ff ffa5 	bl	8005730 <sbrk_aligned>
 80057e6:	3001      	adds	r0, #1
 80057e8:	d02b      	beq.n	8005842 <_malloc_r+0xd2>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	442b      	add	r3, r5
 80057ee:	6023      	str	r3, [r4, #0]
 80057f0:	e00e      	b.n	8005810 <_malloc_r+0xa0>
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	1b52      	subs	r2, r2, r5
 80057f6:	d41e      	bmi.n	8005836 <_malloc_r+0xc6>
 80057f8:	2a0b      	cmp	r2, #11
 80057fa:	d916      	bls.n	800582a <_malloc_r+0xba>
 80057fc:	1961      	adds	r1, r4, r5
 80057fe:	42a3      	cmp	r3, r4
 8005800:	6025      	str	r5, [r4, #0]
 8005802:	bf18      	it	ne
 8005804:	6059      	strne	r1, [r3, #4]
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	bf08      	it	eq
 800580a:	6031      	streq	r1, [r6, #0]
 800580c:	5162      	str	r2, [r4, r5]
 800580e:	604b      	str	r3, [r1, #4]
 8005810:	4638      	mov	r0, r7
 8005812:	f104 060b 	add.w	r6, r4, #11
 8005816:	f000 f877 	bl	8005908 <__malloc_unlock>
 800581a:	f026 0607 	bic.w	r6, r6, #7
 800581e:	1d23      	adds	r3, r4, #4
 8005820:	1af2      	subs	r2, r6, r3
 8005822:	d0b6      	beq.n	8005792 <_malloc_r+0x22>
 8005824:	1b9b      	subs	r3, r3, r6
 8005826:	50a3      	str	r3, [r4, r2]
 8005828:	e7b3      	b.n	8005792 <_malloc_r+0x22>
 800582a:	6862      	ldr	r2, [r4, #4]
 800582c:	42a3      	cmp	r3, r4
 800582e:	bf0c      	ite	eq
 8005830:	6032      	streq	r2, [r6, #0]
 8005832:	605a      	strne	r2, [r3, #4]
 8005834:	e7ec      	b.n	8005810 <_malloc_r+0xa0>
 8005836:	4623      	mov	r3, r4
 8005838:	6864      	ldr	r4, [r4, #4]
 800583a:	e7b2      	b.n	80057a2 <_malloc_r+0x32>
 800583c:	4634      	mov	r4, r6
 800583e:	6876      	ldr	r6, [r6, #4]
 8005840:	e7b9      	b.n	80057b6 <_malloc_r+0x46>
 8005842:	230c      	movs	r3, #12
 8005844:	4638      	mov	r0, r7
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	f000 f85e 	bl	8005908 <__malloc_unlock>
 800584c:	e7a1      	b.n	8005792 <_malloc_r+0x22>
 800584e:	6025      	str	r5, [r4, #0]
 8005850:	e7de      	b.n	8005810 <_malloc_r+0xa0>
 8005852:	bf00      	nop
 8005854:	20000330 	.word	0x20000330

08005858 <_sbrk_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	2300      	movs	r3, #0
 800585c:	4d05      	ldr	r5, [pc, #20]	; (8005874 <_sbrk_r+0x1c>)
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	f7fc f902 	bl	8001a6c <_sbrk>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_sbrk_r+0x1a>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_sbrk_r+0x1a>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	20000338 	.word	0x20000338

08005878 <__assert_func>:
 8005878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800587a:	4614      	mov	r4, r2
 800587c:	461a      	mov	r2, r3
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <__assert_func+0x2c>)
 8005880:	4605      	mov	r5, r0
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68d8      	ldr	r0, [r3, #12]
 8005886:	b14c      	cbz	r4, 800589c <__assert_func+0x24>
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <__assert_func+0x30>)
 800588a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800588e:	9100      	str	r1, [sp, #0]
 8005890:	462b      	mov	r3, r5
 8005892:	4906      	ldr	r1, [pc, #24]	; (80058ac <__assert_func+0x34>)
 8005894:	f000 f80e 	bl	80058b4 <fiprintf>
 8005898:	f000 fa62 	bl	8005d60 <abort>
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <__assert_func+0x38>)
 800589e:	461c      	mov	r4, r3
 80058a0:	e7f3      	b.n	800588a <__assert_func+0x12>
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c
 80058a8:	08006c14 	.word	0x08006c14
 80058ac:	08006c21 	.word	0x08006c21
 80058b0:	08006c4f 	.word	0x08006c4f

080058b4 <fiprintf>:
 80058b4:	b40e      	push	{r1, r2, r3}
 80058b6:	b503      	push	{r0, r1, lr}
 80058b8:	4601      	mov	r1, r0
 80058ba:	ab03      	add	r3, sp, #12
 80058bc:	4805      	ldr	r0, [pc, #20]	; (80058d4 <fiprintf+0x20>)
 80058be:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	f000 f84d 	bl	8005964 <_vfiprintf_r>
 80058ca:	b002      	add	sp, #8
 80058cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d0:	b003      	add	sp, #12
 80058d2:	4770      	bx	lr
 80058d4:	2000000c 	.word	0x2000000c

080058d8 <__ascii_mbtowc>:
 80058d8:	b082      	sub	sp, #8
 80058da:	b901      	cbnz	r1, 80058de <__ascii_mbtowc+0x6>
 80058dc:	a901      	add	r1, sp, #4
 80058de:	b142      	cbz	r2, 80058f2 <__ascii_mbtowc+0x1a>
 80058e0:	b14b      	cbz	r3, 80058f6 <__ascii_mbtowc+0x1e>
 80058e2:	7813      	ldrb	r3, [r2, #0]
 80058e4:	600b      	str	r3, [r1, #0]
 80058e6:	7812      	ldrb	r2, [r2, #0]
 80058e8:	1e10      	subs	r0, r2, #0
 80058ea:	bf18      	it	ne
 80058ec:	2001      	movne	r0, #1
 80058ee:	b002      	add	sp, #8
 80058f0:	4770      	bx	lr
 80058f2:	4610      	mov	r0, r2
 80058f4:	e7fb      	b.n	80058ee <__ascii_mbtowc+0x16>
 80058f6:	f06f 0001 	mvn.w	r0, #1
 80058fa:	e7f8      	b.n	80058ee <__ascii_mbtowc+0x16>

080058fc <__malloc_lock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	; (8005904 <__malloc_lock+0x8>)
 80058fe:	f000 bbeb 	b.w	80060d8 <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	2000033c 	.word	0x2000033c

08005908 <__malloc_unlock>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__malloc_unlock+0x8>)
 800590a:	f000 bbe6 	b.w	80060da <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	2000033c 	.word	0x2000033c

08005914 <__sfputc_r>:
 8005914:	6893      	ldr	r3, [r2, #8]
 8005916:	b410      	push	{r4}
 8005918:	3b01      	subs	r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	6093      	str	r3, [r2, #8]
 800591e:	da07      	bge.n	8005930 <__sfputc_r+0x1c>
 8005920:	6994      	ldr	r4, [r2, #24]
 8005922:	42a3      	cmp	r3, r4
 8005924:	db01      	blt.n	800592a <__sfputc_r+0x16>
 8005926:	290a      	cmp	r1, #10
 8005928:	d102      	bne.n	8005930 <__sfputc_r+0x1c>
 800592a:	bc10      	pop	{r4}
 800592c:	f000 b94a 	b.w	8005bc4 <__swbuf_r>
 8005930:	6813      	ldr	r3, [r2, #0]
 8005932:	1c58      	adds	r0, r3, #1
 8005934:	6010      	str	r0, [r2, #0]
 8005936:	7019      	strb	r1, [r3, #0]
 8005938:	4608      	mov	r0, r1
 800593a:	bc10      	pop	{r4}
 800593c:	4770      	bx	lr

0800593e <__sfputs_r>:
 800593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005940:	4606      	mov	r6, r0
 8005942:	460f      	mov	r7, r1
 8005944:	4614      	mov	r4, r2
 8005946:	18d5      	adds	r5, r2, r3
 8005948:	42ac      	cmp	r4, r5
 800594a:	d101      	bne.n	8005950 <__sfputs_r+0x12>
 800594c:	2000      	movs	r0, #0
 800594e:	e007      	b.n	8005960 <__sfputs_r+0x22>
 8005950:	463a      	mov	r2, r7
 8005952:	4630      	mov	r0, r6
 8005954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005958:	f7ff ffdc 	bl	8005914 <__sfputc_r>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d1f3      	bne.n	8005948 <__sfputs_r+0xa>
 8005960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005964 <_vfiprintf_r>:
 8005964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	460d      	mov	r5, r1
 800596a:	4614      	mov	r4, r2
 800596c:	4698      	mov	r8, r3
 800596e:	4606      	mov	r6, r0
 8005970:	b09d      	sub	sp, #116	; 0x74
 8005972:	b118      	cbz	r0, 800597c <_vfiprintf_r+0x18>
 8005974:	6983      	ldr	r3, [r0, #24]
 8005976:	b90b      	cbnz	r3, 800597c <_vfiprintf_r+0x18>
 8005978:	f000 fb10 	bl	8005f9c <__sinit>
 800597c:	4b89      	ldr	r3, [pc, #548]	; (8005ba4 <_vfiprintf_r+0x240>)
 800597e:	429d      	cmp	r5, r3
 8005980:	d11b      	bne.n	80059ba <_vfiprintf_r+0x56>
 8005982:	6875      	ldr	r5, [r6, #4]
 8005984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005986:	07d9      	lsls	r1, r3, #31
 8005988:	d405      	bmi.n	8005996 <_vfiprintf_r+0x32>
 800598a:	89ab      	ldrh	r3, [r5, #12]
 800598c:	059a      	lsls	r2, r3, #22
 800598e:	d402      	bmi.n	8005996 <_vfiprintf_r+0x32>
 8005990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005992:	f000 fba1 	bl	80060d8 <__retarget_lock_acquire_recursive>
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	071b      	lsls	r3, r3, #28
 800599a:	d501      	bpl.n	80059a0 <_vfiprintf_r+0x3c>
 800599c:	692b      	ldr	r3, [r5, #16]
 800599e:	b9eb      	cbnz	r3, 80059dc <_vfiprintf_r+0x78>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 f96e 	bl	8005c84 <__swsetup_r>
 80059a8:	b1c0      	cbz	r0, 80059dc <_vfiprintf_r+0x78>
 80059aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059ac:	07dc      	lsls	r4, r3, #31
 80059ae:	d50e      	bpl.n	80059ce <_vfiprintf_r+0x6a>
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059b4:	b01d      	add	sp, #116	; 0x74
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	4b7b      	ldr	r3, [pc, #492]	; (8005ba8 <_vfiprintf_r+0x244>)
 80059bc:	429d      	cmp	r5, r3
 80059be:	d101      	bne.n	80059c4 <_vfiprintf_r+0x60>
 80059c0:	68b5      	ldr	r5, [r6, #8]
 80059c2:	e7df      	b.n	8005984 <_vfiprintf_r+0x20>
 80059c4:	4b79      	ldr	r3, [pc, #484]	; (8005bac <_vfiprintf_r+0x248>)
 80059c6:	429d      	cmp	r5, r3
 80059c8:	bf08      	it	eq
 80059ca:	68f5      	ldreq	r5, [r6, #12]
 80059cc:	e7da      	b.n	8005984 <_vfiprintf_r+0x20>
 80059ce:	89ab      	ldrh	r3, [r5, #12]
 80059d0:	0598      	lsls	r0, r3, #22
 80059d2:	d4ed      	bmi.n	80059b0 <_vfiprintf_r+0x4c>
 80059d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059d6:	f000 fb80 	bl	80060da <__retarget_lock_release_recursive>
 80059da:	e7e9      	b.n	80059b0 <_vfiprintf_r+0x4c>
 80059dc:	2300      	movs	r3, #0
 80059de:	9309      	str	r3, [sp, #36]	; 0x24
 80059e0:	2320      	movs	r3, #32
 80059e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059e6:	2330      	movs	r3, #48	; 0x30
 80059e8:	f04f 0901 	mov.w	r9, #1
 80059ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005bb0 <_vfiprintf_r+0x24c>
 80059f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059f8:	4623      	mov	r3, r4
 80059fa:	469a      	mov	sl, r3
 80059fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a00:	b10a      	cbz	r2, 8005a06 <_vfiprintf_r+0xa2>
 8005a02:	2a25      	cmp	r2, #37	; 0x25
 8005a04:	d1f9      	bne.n	80059fa <_vfiprintf_r+0x96>
 8005a06:	ebba 0b04 	subs.w	fp, sl, r4
 8005a0a:	d00b      	beq.n	8005a24 <_vfiprintf_r+0xc0>
 8005a0c:	465b      	mov	r3, fp
 8005a0e:	4622      	mov	r2, r4
 8005a10:	4629      	mov	r1, r5
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff ff93 	bl	800593e <__sfputs_r>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f000 80aa 	beq.w	8005b72 <_vfiprintf_r+0x20e>
 8005a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a20:	445a      	add	r2, fp
 8005a22:	9209      	str	r2, [sp, #36]	; 0x24
 8005a24:	f89a 3000 	ldrb.w	r3, [sl]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80a2 	beq.w	8005b72 <_vfiprintf_r+0x20e>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a38:	f10a 0a01 	add.w	sl, sl, #1
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a44:	931a      	str	r3, [sp, #104]	; 0x68
 8005a46:	4654      	mov	r4, sl
 8005a48:	2205      	movs	r2, #5
 8005a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a4e:	4858      	ldr	r0, [pc, #352]	; (8005bb0 <_vfiprintf_r+0x24c>)
 8005a50:	f7ff fa74 	bl	8004f3c <memchr>
 8005a54:	9a04      	ldr	r2, [sp, #16]
 8005a56:	b9d8      	cbnz	r0, 8005a90 <_vfiprintf_r+0x12c>
 8005a58:	06d1      	lsls	r1, r2, #27
 8005a5a:	bf44      	itt	mi
 8005a5c:	2320      	movmi	r3, #32
 8005a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a62:	0713      	lsls	r3, r2, #28
 8005a64:	bf44      	itt	mi
 8005a66:	232b      	movmi	r3, #43	; 0x2b
 8005a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a70:	2b2a      	cmp	r3, #42	; 0x2a
 8005a72:	d015      	beq.n	8005aa0 <_vfiprintf_r+0x13c>
 8005a74:	4654      	mov	r4, sl
 8005a76:	2000      	movs	r0, #0
 8005a78:	f04f 0c0a 	mov.w	ip, #10
 8005a7c:	9a07      	ldr	r2, [sp, #28]
 8005a7e:	4621      	mov	r1, r4
 8005a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a84:	3b30      	subs	r3, #48	; 0x30
 8005a86:	2b09      	cmp	r3, #9
 8005a88:	d94e      	bls.n	8005b28 <_vfiprintf_r+0x1c4>
 8005a8a:	b1b0      	cbz	r0, 8005aba <_vfiprintf_r+0x156>
 8005a8c:	9207      	str	r2, [sp, #28]
 8005a8e:	e014      	b.n	8005aba <_vfiprintf_r+0x156>
 8005a90:	eba0 0308 	sub.w	r3, r0, r8
 8005a94:	fa09 f303 	lsl.w	r3, r9, r3
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	46a2      	mov	sl, r4
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	e7d2      	b.n	8005a46 <_vfiprintf_r+0xe2>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	1d19      	adds	r1, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	9103      	str	r1, [sp, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bfbb      	ittet	lt
 8005aac:	425b      	neglt	r3, r3
 8005aae:	f042 0202 	orrlt.w	r2, r2, #2
 8005ab2:	9307      	strge	r3, [sp, #28]
 8005ab4:	9307      	strlt	r3, [sp, #28]
 8005ab6:	bfb8      	it	lt
 8005ab8:	9204      	strlt	r2, [sp, #16]
 8005aba:	7823      	ldrb	r3, [r4, #0]
 8005abc:	2b2e      	cmp	r3, #46	; 0x2e
 8005abe:	d10c      	bne.n	8005ada <_vfiprintf_r+0x176>
 8005ac0:	7863      	ldrb	r3, [r4, #1]
 8005ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac4:	d135      	bne.n	8005b32 <_vfiprintf_r+0x1ce>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	3402      	adds	r4, #2
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	9203      	str	r2, [sp, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bfb8      	it	lt
 8005ad4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ad8:	9305      	str	r3, [sp, #20]
 8005ada:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005bb4 <_vfiprintf_r+0x250>
 8005ade:	2203      	movs	r2, #3
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	7821      	ldrb	r1, [r4, #0]
 8005ae4:	f7ff fa2a 	bl	8004f3c <memchr>
 8005ae8:	b140      	cbz	r0, 8005afc <_vfiprintf_r+0x198>
 8005aea:	2340      	movs	r3, #64	; 0x40
 8005aec:	eba0 000a 	sub.w	r0, r0, sl
 8005af0:	fa03 f000 	lsl.w	r0, r3, r0
 8005af4:	9b04      	ldr	r3, [sp, #16]
 8005af6:	3401      	adds	r4, #1
 8005af8:	4303      	orrs	r3, r0
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b00:	2206      	movs	r2, #6
 8005b02:	482d      	ldr	r0, [pc, #180]	; (8005bb8 <_vfiprintf_r+0x254>)
 8005b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b08:	f7ff fa18 	bl	8004f3c <memchr>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d03f      	beq.n	8005b90 <_vfiprintf_r+0x22c>
 8005b10:	4b2a      	ldr	r3, [pc, #168]	; (8005bbc <_vfiprintf_r+0x258>)
 8005b12:	bb1b      	cbnz	r3, 8005b5c <_vfiprintf_r+0x1f8>
 8005b14:	9b03      	ldr	r3, [sp, #12]
 8005b16:	3307      	adds	r3, #7
 8005b18:	f023 0307 	bic.w	r3, r3, #7
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	9303      	str	r3, [sp, #12]
 8005b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b22:	443b      	add	r3, r7
 8005b24:	9309      	str	r3, [sp, #36]	; 0x24
 8005b26:	e767      	b.n	80059f8 <_vfiprintf_r+0x94>
 8005b28:	460c      	mov	r4, r1
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b30:	e7a5      	b.n	8005a7e <_vfiprintf_r+0x11a>
 8005b32:	2300      	movs	r3, #0
 8005b34:	f04f 0c0a 	mov.w	ip, #10
 8005b38:	4619      	mov	r1, r3
 8005b3a:	3401      	adds	r4, #1
 8005b3c:	9305      	str	r3, [sp, #20]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b44:	3a30      	subs	r2, #48	; 0x30
 8005b46:	2a09      	cmp	r2, #9
 8005b48:	d903      	bls.n	8005b52 <_vfiprintf_r+0x1ee>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0c5      	beq.n	8005ada <_vfiprintf_r+0x176>
 8005b4e:	9105      	str	r1, [sp, #20]
 8005b50:	e7c3      	b.n	8005ada <_vfiprintf_r+0x176>
 8005b52:	4604      	mov	r4, r0
 8005b54:	2301      	movs	r3, #1
 8005b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b5a:	e7f0      	b.n	8005b3e <_vfiprintf_r+0x1da>
 8005b5c:	ab03      	add	r3, sp, #12
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	462a      	mov	r2, r5
 8005b62:	4630      	mov	r0, r6
 8005b64:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <_vfiprintf_r+0x25c>)
 8005b66:	a904      	add	r1, sp, #16
 8005b68:	f7fd ffa0 	bl	8003aac <_printf_float>
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	1c78      	adds	r0, r7, #1
 8005b70:	d1d6      	bne.n	8005b20 <_vfiprintf_r+0x1bc>
 8005b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b74:	07d9      	lsls	r1, r3, #31
 8005b76:	d405      	bmi.n	8005b84 <_vfiprintf_r+0x220>
 8005b78:	89ab      	ldrh	r3, [r5, #12]
 8005b7a:	059a      	lsls	r2, r3, #22
 8005b7c:	d402      	bmi.n	8005b84 <_vfiprintf_r+0x220>
 8005b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b80:	f000 faab 	bl	80060da <__retarget_lock_release_recursive>
 8005b84:	89ab      	ldrh	r3, [r5, #12]
 8005b86:	065b      	lsls	r3, r3, #25
 8005b88:	f53f af12 	bmi.w	80059b0 <_vfiprintf_r+0x4c>
 8005b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b8e:	e711      	b.n	80059b4 <_vfiprintf_r+0x50>
 8005b90:	ab03      	add	r3, sp, #12
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	462a      	mov	r2, r5
 8005b96:	4630      	mov	r0, r6
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <_vfiprintf_r+0x25c>)
 8005b9a:	a904      	add	r1, sp, #16
 8005b9c:	f7fe fa22 	bl	8003fe4 <_printf_i>
 8005ba0:	e7e4      	b.n	8005b6c <_vfiprintf_r+0x208>
 8005ba2:	bf00      	nop
 8005ba4:	08006d8c 	.word	0x08006d8c
 8005ba8:	08006dac 	.word	0x08006dac
 8005bac:	08006d6c 	.word	0x08006d6c
 8005bb0:	08006c5a 	.word	0x08006c5a
 8005bb4:	08006c60 	.word	0x08006c60
 8005bb8:	08006c64 	.word	0x08006c64
 8005bbc:	08003aad 	.word	0x08003aad
 8005bc0:	0800593f 	.word	0x0800593f

08005bc4 <__swbuf_r>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	4605      	mov	r5, r0
 8005bcc:	b118      	cbz	r0, 8005bd6 <__swbuf_r+0x12>
 8005bce:	6983      	ldr	r3, [r0, #24]
 8005bd0:	b90b      	cbnz	r3, 8005bd6 <__swbuf_r+0x12>
 8005bd2:	f000 f9e3 	bl	8005f9c <__sinit>
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <__swbuf_r+0x98>)
 8005bd8:	429c      	cmp	r4, r3
 8005bda:	d12b      	bne.n	8005c34 <__swbuf_r+0x70>
 8005bdc:	686c      	ldr	r4, [r5, #4]
 8005bde:	69a3      	ldr	r3, [r4, #24]
 8005be0:	60a3      	str	r3, [r4, #8]
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	071a      	lsls	r2, r3, #28
 8005be6:	d52f      	bpl.n	8005c48 <__swbuf_r+0x84>
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	b36b      	cbz	r3, 8005c48 <__swbuf_r+0x84>
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	b2f6      	uxtb	r6, r6
 8005bf2:	1ac0      	subs	r0, r0, r3
 8005bf4:	6963      	ldr	r3, [r4, #20]
 8005bf6:	4637      	mov	r7, r6
 8005bf8:	4283      	cmp	r3, r0
 8005bfa:	dc04      	bgt.n	8005c06 <__swbuf_r+0x42>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f938 	bl	8005e74 <_fflush_r>
 8005c04:	bb30      	cbnz	r0, 8005c54 <__swbuf_r+0x90>
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	3001      	adds	r0, #1
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	60a3      	str	r3, [r4, #8]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	701e      	strb	r6, [r3, #0]
 8005c16:	6963      	ldr	r3, [r4, #20]
 8005c18:	4283      	cmp	r3, r0
 8005c1a:	d004      	beq.n	8005c26 <__swbuf_r+0x62>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d506      	bpl.n	8005c30 <__swbuf_r+0x6c>
 8005c22:	2e0a      	cmp	r6, #10
 8005c24:	d104      	bne.n	8005c30 <__swbuf_r+0x6c>
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 f923 	bl	8005e74 <_fflush_r>
 8005c2e:	b988      	cbnz	r0, 8005c54 <__swbuf_r+0x90>
 8005c30:	4638      	mov	r0, r7
 8005c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <__swbuf_r+0x9c>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <__swbuf_r+0x7a>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7cf      	b.n	8005bde <__swbuf_r+0x1a>
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <__swbuf_r+0xa0>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68ec      	ldreq	r4, [r5, #12]
 8005c46:	e7ca      	b.n	8005bde <__swbuf_r+0x1a>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f81a 	bl	8005c84 <__swsetup_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0cb      	beq.n	8005bec <__swbuf_r+0x28>
 8005c54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c58:	e7ea      	b.n	8005c30 <__swbuf_r+0x6c>
 8005c5a:	bf00      	nop
 8005c5c:	08006d8c 	.word	0x08006d8c
 8005c60:	08006dac 	.word	0x08006dac
 8005c64:	08006d6c 	.word	0x08006d6c

08005c68 <__ascii_wctomb>:
 8005c68:	4603      	mov	r3, r0
 8005c6a:	4608      	mov	r0, r1
 8005c6c:	b141      	cbz	r1, 8005c80 <__ascii_wctomb+0x18>
 8005c6e:	2aff      	cmp	r2, #255	; 0xff
 8005c70:	d904      	bls.n	8005c7c <__ascii_wctomb+0x14>
 8005c72:	228a      	movs	r2, #138	; 0x8a
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	4770      	bx	lr
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	700a      	strb	r2, [r1, #0]
 8005c80:	4770      	bx	lr
	...

08005c84 <__swsetup_r>:
 8005c84:	4b32      	ldr	r3, [pc, #200]	; (8005d50 <__swsetup_r+0xcc>)
 8005c86:	b570      	push	{r4, r5, r6, lr}
 8005c88:	681d      	ldr	r5, [r3, #0]
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	b125      	cbz	r5, 8005c9a <__swsetup_r+0x16>
 8005c90:	69ab      	ldr	r3, [r5, #24]
 8005c92:	b913      	cbnz	r3, 8005c9a <__swsetup_r+0x16>
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 f981 	bl	8005f9c <__sinit>
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	; (8005d54 <__swsetup_r+0xd0>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	d10f      	bne.n	8005cc0 <__swsetup_r+0x3c>
 8005ca0:	686c      	ldr	r4, [r5, #4]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ca8:	0719      	lsls	r1, r3, #28
 8005caa:	d42c      	bmi.n	8005d06 <__swsetup_r+0x82>
 8005cac:	06dd      	lsls	r5, r3, #27
 8005cae:	d411      	bmi.n	8005cd4 <__swsetup_r+0x50>
 8005cb0:	2309      	movs	r3, #9
 8005cb2:	6033      	str	r3, [r6, #0]
 8005cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	e03e      	b.n	8005d3e <__swsetup_r+0xba>
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <__swsetup_r+0xd4>)
 8005cc2:	429c      	cmp	r4, r3
 8005cc4:	d101      	bne.n	8005cca <__swsetup_r+0x46>
 8005cc6:	68ac      	ldr	r4, [r5, #8]
 8005cc8:	e7eb      	b.n	8005ca2 <__swsetup_r+0x1e>
 8005cca:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <__swsetup_r+0xd8>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	bf08      	it	eq
 8005cd0:	68ec      	ldreq	r4, [r5, #12]
 8005cd2:	e7e6      	b.n	8005ca2 <__swsetup_r+0x1e>
 8005cd4:	0758      	lsls	r0, r3, #29
 8005cd6:	d512      	bpl.n	8005cfe <__swsetup_r+0x7a>
 8005cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cda:	b141      	cbz	r1, 8005cee <__swsetup_r+0x6a>
 8005cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	d002      	beq.n	8005cea <__swsetup_r+0x66>
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f7ff fcdb 	bl	80056a0 <_free_r>
 8005cea:	2300      	movs	r3, #0
 8005cec:	6363      	str	r3, [r4, #52]	; 0x34
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cf4:	81a3      	strh	r3, [r4, #12]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f043 0308 	orr.w	r3, r3, #8
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	b94b      	cbnz	r3, 8005d1e <__swsetup_r+0x9a>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d14:	d003      	beq.n	8005d1e <__swsetup_r+0x9a>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 fa05 	bl	8006128 <__smakebuf_r>
 8005d1e:	89a0      	ldrh	r0, [r4, #12]
 8005d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d24:	f010 0301 	ands.w	r3, r0, #1
 8005d28:	d00a      	beq.n	8005d40 <__swsetup_r+0xbc>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60a3      	str	r3, [r4, #8]
 8005d2e:	6963      	ldr	r3, [r4, #20]
 8005d30:	425b      	negs	r3, r3
 8005d32:	61a3      	str	r3, [r4, #24]
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	b943      	cbnz	r3, 8005d4a <__swsetup_r+0xc6>
 8005d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d3c:	d1ba      	bne.n	8005cb4 <__swsetup_r+0x30>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	0781      	lsls	r1, r0, #30
 8005d42:	bf58      	it	pl
 8005d44:	6963      	ldrpl	r3, [r4, #20]
 8005d46:	60a3      	str	r3, [r4, #8]
 8005d48:	e7f4      	b.n	8005d34 <__swsetup_r+0xb0>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	e7f7      	b.n	8005d3e <__swsetup_r+0xba>
 8005d4e:	bf00      	nop
 8005d50:	2000000c 	.word	0x2000000c
 8005d54:	08006d8c 	.word	0x08006d8c
 8005d58:	08006dac 	.word	0x08006dac
 8005d5c:	08006d6c 	.word	0x08006d6c

08005d60 <abort>:
 8005d60:	2006      	movs	r0, #6
 8005d62:	b508      	push	{r3, lr}
 8005d64:	f000 fa48 	bl	80061f8 <raise>
 8005d68:	2001      	movs	r0, #1
 8005d6a:	f7fb fe0c 	bl	8001986 <_exit>
	...

08005d70 <__sflush_r>:
 8005d70:	898a      	ldrh	r2, [r1, #12]
 8005d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d74:	4605      	mov	r5, r0
 8005d76:	0710      	lsls	r0, r2, #28
 8005d78:	460c      	mov	r4, r1
 8005d7a:	d457      	bmi.n	8005e2c <__sflush_r+0xbc>
 8005d7c:	684b      	ldr	r3, [r1, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dc04      	bgt.n	8005d8c <__sflush_r+0x1c>
 8005d82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dc01      	bgt.n	8005d8c <__sflush_r+0x1c>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d8e:	2e00      	cmp	r6, #0
 8005d90:	d0fa      	beq.n	8005d88 <__sflush_r+0x18>
 8005d92:	2300      	movs	r3, #0
 8005d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d98:	682f      	ldr	r7, [r5, #0]
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	d032      	beq.n	8005e04 <__sflush_r+0x94>
 8005d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	075a      	lsls	r2, r3, #29
 8005da4:	d505      	bpl.n	8005db2 <__sflush_r+0x42>
 8005da6:	6863      	ldr	r3, [r4, #4]
 8005da8:	1ac0      	subs	r0, r0, r3
 8005daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dac:	b10b      	cbz	r3, 8005db2 <__sflush_r+0x42>
 8005dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005db0:	1ac0      	subs	r0, r0, r3
 8005db2:	2300      	movs	r3, #0
 8005db4:	4602      	mov	r2, r0
 8005db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005db8:	4628      	mov	r0, r5
 8005dba:	6a21      	ldr	r1, [r4, #32]
 8005dbc:	47b0      	blx	r6
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	d106      	bne.n	8005dd2 <__sflush_r+0x62>
 8005dc4:	6829      	ldr	r1, [r5, #0]
 8005dc6:	291d      	cmp	r1, #29
 8005dc8:	d82c      	bhi.n	8005e24 <__sflush_r+0xb4>
 8005dca:	4a29      	ldr	r2, [pc, #164]	; (8005e70 <__sflush_r+0x100>)
 8005dcc:	40ca      	lsrs	r2, r1
 8005dce:	07d6      	lsls	r6, r2, #31
 8005dd0:	d528      	bpl.n	8005e24 <__sflush_r+0xb4>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	6062      	str	r2, [r4, #4]
 8005dd6:	6922      	ldr	r2, [r4, #16]
 8005dd8:	04d9      	lsls	r1, r3, #19
 8005dda:	6022      	str	r2, [r4, #0]
 8005ddc:	d504      	bpl.n	8005de8 <__sflush_r+0x78>
 8005dde:	1c42      	adds	r2, r0, #1
 8005de0:	d101      	bne.n	8005de6 <__sflush_r+0x76>
 8005de2:	682b      	ldr	r3, [r5, #0]
 8005de4:	b903      	cbnz	r3, 8005de8 <__sflush_r+0x78>
 8005de6:	6560      	str	r0, [r4, #84]	; 0x54
 8005de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dea:	602f      	str	r7, [r5, #0]
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d0cb      	beq.n	8005d88 <__sflush_r+0x18>
 8005df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005df4:	4299      	cmp	r1, r3
 8005df6:	d002      	beq.n	8005dfe <__sflush_r+0x8e>
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7ff fc51 	bl	80056a0 <_free_r>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	6360      	str	r0, [r4, #52]	; 0x34
 8005e02:	e7c2      	b.n	8005d8a <__sflush_r+0x1a>
 8005e04:	6a21      	ldr	r1, [r4, #32]
 8005e06:	2301      	movs	r3, #1
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b0      	blx	r6
 8005e0c:	1c41      	adds	r1, r0, #1
 8005e0e:	d1c7      	bne.n	8005da0 <__sflush_r+0x30>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0c4      	beq.n	8005da0 <__sflush_r+0x30>
 8005e16:	2b1d      	cmp	r3, #29
 8005e18:	d001      	beq.n	8005e1e <__sflush_r+0xae>
 8005e1a:	2b16      	cmp	r3, #22
 8005e1c:	d101      	bne.n	8005e22 <__sflush_r+0xb2>
 8005e1e:	602f      	str	r7, [r5, #0]
 8005e20:	e7b2      	b.n	8005d88 <__sflush_r+0x18>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	e7ae      	b.n	8005d8a <__sflush_r+0x1a>
 8005e2c:	690f      	ldr	r7, [r1, #16]
 8005e2e:	2f00      	cmp	r7, #0
 8005e30:	d0aa      	beq.n	8005d88 <__sflush_r+0x18>
 8005e32:	0793      	lsls	r3, r2, #30
 8005e34:	bf18      	it	ne
 8005e36:	2300      	movne	r3, #0
 8005e38:	680e      	ldr	r6, [r1, #0]
 8005e3a:	bf08      	it	eq
 8005e3c:	694b      	ldreq	r3, [r1, #20]
 8005e3e:	1bf6      	subs	r6, r6, r7
 8005e40:	600f      	str	r7, [r1, #0]
 8005e42:	608b      	str	r3, [r1, #8]
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	dd9f      	ble.n	8005d88 <__sflush_r+0x18>
 8005e48:	4633      	mov	r3, r6
 8005e4a:	463a      	mov	r2, r7
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	6a21      	ldr	r1, [r4, #32]
 8005e50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005e54:	47e0      	blx	ip
 8005e56:	2800      	cmp	r0, #0
 8005e58:	dc06      	bgt.n	8005e68 <__sflush_r+0xf8>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	e790      	b.n	8005d8a <__sflush_r+0x1a>
 8005e68:	4407      	add	r7, r0
 8005e6a:	1a36      	subs	r6, r6, r0
 8005e6c:	e7ea      	b.n	8005e44 <__sflush_r+0xd4>
 8005e6e:	bf00      	nop
 8005e70:	20400001 	.word	0x20400001

08005e74 <_fflush_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	690b      	ldr	r3, [r1, #16]
 8005e78:	4605      	mov	r5, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	b913      	cbnz	r3, 8005e84 <_fflush_r+0x10>
 8005e7e:	2500      	movs	r5, #0
 8005e80:	4628      	mov	r0, r5
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	b118      	cbz	r0, 8005e8e <_fflush_r+0x1a>
 8005e86:	6983      	ldr	r3, [r0, #24]
 8005e88:	b90b      	cbnz	r3, 8005e8e <_fflush_r+0x1a>
 8005e8a:	f000 f887 	bl	8005f9c <__sinit>
 8005e8e:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <_fflush_r+0x6c>)
 8005e90:	429c      	cmp	r4, r3
 8005e92:	d11b      	bne.n	8005ecc <_fflush_r+0x58>
 8005e94:	686c      	ldr	r4, [r5, #4]
 8005e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ef      	beq.n	8005e7e <_fflush_r+0xa>
 8005e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ea0:	07d0      	lsls	r0, r2, #31
 8005ea2:	d404      	bmi.n	8005eae <_fflush_r+0x3a>
 8005ea4:	0599      	lsls	r1, r3, #22
 8005ea6:	d402      	bmi.n	8005eae <_fflush_r+0x3a>
 8005ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eaa:	f000 f915 	bl	80060d8 <__retarget_lock_acquire_recursive>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	f7ff ff5d 	bl	8005d70 <__sflush_r>
 8005eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eb8:	4605      	mov	r5, r0
 8005eba:	07da      	lsls	r2, r3, #31
 8005ebc:	d4e0      	bmi.n	8005e80 <_fflush_r+0xc>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	059b      	lsls	r3, r3, #22
 8005ec2:	d4dd      	bmi.n	8005e80 <_fflush_r+0xc>
 8005ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec6:	f000 f908 	bl	80060da <__retarget_lock_release_recursive>
 8005eca:	e7d9      	b.n	8005e80 <_fflush_r+0xc>
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <_fflush_r+0x70>)
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d101      	bne.n	8005ed6 <_fflush_r+0x62>
 8005ed2:	68ac      	ldr	r4, [r5, #8]
 8005ed4:	e7df      	b.n	8005e96 <_fflush_r+0x22>
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <_fflush_r+0x74>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	bf08      	it	eq
 8005edc:	68ec      	ldreq	r4, [r5, #12]
 8005ede:	e7da      	b.n	8005e96 <_fflush_r+0x22>
 8005ee0:	08006d8c 	.word	0x08006d8c
 8005ee4:	08006dac 	.word	0x08006dac
 8005ee8:	08006d6c 	.word	0x08006d6c

08005eec <std>:
 8005eec:	2300      	movs	r3, #0
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005efa:	6083      	str	r3, [r0, #8]
 8005efc:	8181      	strh	r1, [r0, #12]
 8005efe:	6643      	str	r3, [r0, #100]	; 0x64
 8005f00:	81c2      	strh	r2, [r0, #14]
 8005f02:	6183      	str	r3, [r0, #24]
 8005f04:	4619      	mov	r1, r3
 8005f06:	2208      	movs	r2, #8
 8005f08:	305c      	adds	r0, #92	; 0x5c
 8005f0a:	f7fd fd29 	bl	8003960 <memset>
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <std+0x38>)
 8005f10:	6224      	str	r4, [r4, #32]
 8005f12:	6263      	str	r3, [r4, #36]	; 0x24
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <std+0x3c>)
 8005f16:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <std+0x40>)
 8005f1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <std+0x44>)
 8005f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	bf00      	nop
 8005f24:	08006231 	.word	0x08006231
 8005f28:	08006253 	.word	0x08006253
 8005f2c:	0800628b 	.word	0x0800628b
 8005f30:	080062af 	.word	0x080062af

08005f34 <_cleanup_r>:
 8005f34:	4901      	ldr	r1, [pc, #4]	; (8005f3c <_cleanup_r+0x8>)
 8005f36:	f000 b8af 	b.w	8006098 <_fwalk_reent>
 8005f3a:	bf00      	nop
 8005f3c:	08005e75 	.word	0x08005e75

08005f40 <__sfmoreglue>:
 8005f40:	2268      	movs	r2, #104	; 0x68
 8005f42:	b570      	push	{r4, r5, r6, lr}
 8005f44:	1e4d      	subs	r5, r1, #1
 8005f46:	4355      	muls	r5, r2
 8005f48:	460e      	mov	r6, r1
 8005f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f4e:	f7ff fc0f 	bl	8005770 <_malloc_r>
 8005f52:	4604      	mov	r4, r0
 8005f54:	b140      	cbz	r0, 8005f68 <__sfmoreglue+0x28>
 8005f56:	2100      	movs	r1, #0
 8005f58:	e9c0 1600 	strd	r1, r6, [r0]
 8005f5c:	300c      	adds	r0, #12
 8005f5e:	60a0      	str	r0, [r4, #8]
 8005f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f64:	f7fd fcfc 	bl	8003960 <memset>
 8005f68:	4620      	mov	r0, r4
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}

08005f6c <__sfp_lock_acquire>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	; (8005f74 <__sfp_lock_acquire+0x8>)
 8005f6e:	f000 b8b3 	b.w	80060d8 <__retarget_lock_acquire_recursive>
 8005f72:	bf00      	nop
 8005f74:	2000033d 	.word	0x2000033d

08005f78 <__sfp_lock_release>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__sfp_lock_release+0x8>)
 8005f7a:	f000 b8ae 	b.w	80060da <__retarget_lock_release_recursive>
 8005f7e:	bf00      	nop
 8005f80:	2000033d 	.word	0x2000033d

08005f84 <__sinit_lock_acquire>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__sinit_lock_acquire+0x8>)
 8005f86:	f000 b8a7 	b.w	80060d8 <__retarget_lock_acquire_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	2000033e 	.word	0x2000033e

08005f90 <__sinit_lock_release>:
 8005f90:	4801      	ldr	r0, [pc, #4]	; (8005f98 <__sinit_lock_release+0x8>)
 8005f92:	f000 b8a2 	b.w	80060da <__retarget_lock_release_recursive>
 8005f96:	bf00      	nop
 8005f98:	2000033e 	.word	0x2000033e

08005f9c <__sinit>:
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	f7ff fff0 	bl	8005f84 <__sinit_lock_acquire>
 8005fa4:	69a3      	ldr	r3, [r4, #24]
 8005fa6:	b11b      	cbz	r3, 8005fb0 <__sinit+0x14>
 8005fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fac:	f7ff bff0 	b.w	8005f90 <__sinit_lock_release>
 8005fb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <__sinit+0x68>)
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <__sinit+0x6c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	bf08      	it	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	bf08      	it	eq
 8005fc8:	61a3      	streq	r3, [r4, #24]
 8005fca:	f000 f81f 	bl	800600c <__sfp>
 8005fce:	6060      	str	r0, [r4, #4]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f81b 	bl	800600c <__sfp>
 8005fd6:	60a0      	str	r0, [r4, #8]
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 f817 	bl	800600c <__sfp>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2104      	movs	r1, #4
 8005fe2:	60e0      	str	r0, [r4, #12]
 8005fe4:	6860      	ldr	r0, [r4, #4]
 8005fe6:	f7ff ff81 	bl	8005eec <std>
 8005fea:	2201      	movs	r2, #1
 8005fec:	2109      	movs	r1, #9
 8005fee:	68a0      	ldr	r0, [r4, #8]
 8005ff0:	f7ff ff7c 	bl	8005eec <std>
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	2112      	movs	r1, #18
 8005ff8:	68e0      	ldr	r0, [r4, #12]
 8005ffa:	f7ff ff77 	bl	8005eec <std>
 8005ffe:	2301      	movs	r3, #1
 8006000:	61a3      	str	r3, [r4, #24]
 8006002:	e7d1      	b.n	8005fa8 <__sinit+0xc>
 8006004:	080069f0 	.word	0x080069f0
 8006008:	08005f35 	.word	0x08005f35

0800600c <__sfp>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	4607      	mov	r7, r0
 8006010:	f7ff ffac 	bl	8005f6c <__sfp_lock_acquire>
 8006014:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <__sfp+0x84>)
 8006016:	681e      	ldr	r6, [r3, #0]
 8006018:	69b3      	ldr	r3, [r6, #24]
 800601a:	b913      	cbnz	r3, 8006022 <__sfp+0x16>
 800601c:	4630      	mov	r0, r6
 800601e:	f7ff ffbd 	bl	8005f9c <__sinit>
 8006022:	3648      	adds	r6, #72	; 0x48
 8006024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006028:	3b01      	subs	r3, #1
 800602a:	d503      	bpl.n	8006034 <__sfp+0x28>
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	b30b      	cbz	r3, 8006074 <__sfp+0x68>
 8006030:	6836      	ldr	r6, [r6, #0]
 8006032:	e7f7      	b.n	8006024 <__sfp+0x18>
 8006034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006038:	b9d5      	cbnz	r5, 8006070 <__sfp+0x64>
 800603a:	4b16      	ldr	r3, [pc, #88]	; (8006094 <__sfp+0x88>)
 800603c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006040:	60e3      	str	r3, [r4, #12]
 8006042:	6665      	str	r5, [r4, #100]	; 0x64
 8006044:	f000 f847 	bl	80060d6 <__retarget_lock_init_recursive>
 8006048:	f7ff ff96 	bl	8005f78 <__sfp_lock_release>
 800604c:	2208      	movs	r2, #8
 800604e:	4629      	mov	r1, r5
 8006050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006058:	6025      	str	r5, [r4, #0]
 800605a:	61a5      	str	r5, [r4, #24]
 800605c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006060:	f7fd fc7e 	bl	8003960 <memset>
 8006064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800606c:	4620      	mov	r0, r4
 800606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006070:	3468      	adds	r4, #104	; 0x68
 8006072:	e7d9      	b.n	8006028 <__sfp+0x1c>
 8006074:	2104      	movs	r1, #4
 8006076:	4638      	mov	r0, r7
 8006078:	f7ff ff62 	bl	8005f40 <__sfmoreglue>
 800607c:	4604      	mov	r4, r0
 800607e:	6030      	str	r0, [r6, #0]
 8006080:	2800      	cmp	r0, #0
 8006082:	d1d5      	bne.n	8006030 <__sfp+0x24>
 8006084:	f7ff ff78 	bl	8005f78 <__sfp_lock_release>
 8006088:	230c      	movs	r3, #12
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	e7ee      	b.n	800606c <__sfp+0x60>
 800608e:	bf00      	nop
 8006090:	080069f0 	.word	0x080069f0
 8006094:	ffff0001 	.word	0xffff0001

08006098 <_fwalk_reent>:
 8006098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800609c:	4606      	mov	r6, r0
 800609e:	4688      	mov	r8, r1
 80060a0:	2700      	movs	r7, #0
 80060a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060aa:	f1b9 0901 	subs.w	r9, r9, #1
 80060ae:	d505      	bpl.n	80060bc <_fwalk_reent+0x24>
 80060b0:	6824      	ldr	r4, [r4, #0]
 80060b2:	2c00      	cmp	r4, #0
 80060b4:	d1f7      	bne.n	80060a6 <_fwalk_reent+0xe>
 80060b6:	4638      	mov	r0, r7
 80060b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060bc:	89ab      	ldrh	r3, [r5, #12]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d907      	bls.n	80060d2 <_fwalk_reent+0x3a>
 80060c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060c6:	3301      	adds	r3, #1
 80060c8:	d003      	beq.n	80060d2 <_fwalk_reent+0x3a>
 80060ca:	4629      	mov	r1, r5
 80060cc:	4630      	mov	r0, r6
 80060ce:	47c0      	blx	r8
 80060d0:	4307      	orrs	r7, r0
 80060d2:	3568      	adds	r5, #104	; 0x68
 80060d4:	e7e9      	b.n	80060aa <_fwalk_reent+0x12>

080060d6 <__retarget_lock_init_recursive>:
 80060d6:	4770      	bx	lr

080060d8 <__retarget_lock_acquire_recursive>:
 80060d8:	4770      	bx	lr

080060da <__retarget_lock_release_recursive>:
 80060da:	4770      	bx	lr

080060dc <__swhatbuf_r>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	460e      	mov	r6, r1
 80060e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e4:	4614      	mov	r4, r2
 80060e6:	2900      	cmp	r1, #0
 80060e8:	461d      	mov	r5, r3
 80060ea:	b096      	sub	sp, #88	; 0x58
 80060ec:	da08      	bge.n	8006100 <__swhatbuf_r+0x24>
 80060ee:	2200      	movs	r2, #0
 80060f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	061a      	lsls	r2, r3, #24
 80060f8:	d410      	bmi.n	800611c <__swhatbuf_r+0x40>
 80060fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fe:	e00e      	b.n	800611e <__swhatbuf_r+0x42>
 8006100:	466a      	mov	r2, sp
 8006102:	f000 f8fb 	bl	80062fc <_fstat_r>
 8006106:	2800      	cmp	r0, #0
 8006108:	dbf1      	blt.n	80060ee <__swhatbuf_r+0x12>
 800610a:	9a01      	ldr	r2, [sp, #4]
 800610c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006114:	425a      	negs	r2, r3
 8006116:	415a      	adcs	r2, r3
 8006118:	602a      	str	r2, [r5, #0]
 800611a:	e7ee      	b.n	80060fa <__swhatbuf_r+0x1e>
 800611c:	2340      	movs	r3, #64	; 0x40
 800611e:	2000      	movs	r0, #0
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	b016      	add	sp, #88	; 0x58
 8006124:	bd70      	pop	{r4, r5, r6, pc}
	...

08006128 <__smakebuf_r>:
 8006128:	898b      	ldrh	r3, [r1, #12]
 800612a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800612c:	079d      	lsls	r5, r3, #30
 800612e:	4606      	mov	r6, r0
 8006130:	460c      	mov	r4, r1
 8006132:	d507      	bpl.n	8006144 <__smakebuf_r+0x1c>
 8006134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	6123      	str	r3, [r4, #16]
 800613c:	2301      	movs	r3, #1
 800613e:	6163      	str	r3, [r4, #20]
 8006140:	b002      	add	sp, #8
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	466a      	mov	r2, sp
 8006146:	ab01      	add	r3, sp, #4
 8006148:	f7ff ffc8 	bl	80060dc <__swhatbuf_r>
 800614c:	9900      	ldr	r1, [sp, #0]
 800614e:	4605      	mov	r5, r0
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff fb0d 	bl	8005770 <_malloc_r>
 8006156:	b948      	cbnz	r0, 800616c <__smakebuf_r+0x44>
 8006158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800615c:	059a      	lsls	r2, r3, #22
 800615e:	d4ef      	bmi.n	8006140 <__smakebuf_r+0x18>
 8006160:	f023 0303 	bic.w	r3, r3, #3
 8006164:	f043 0302 	orr.w	r3, r3, #2
 8006168:	81a3      	strh	r3, [r4, #12]
 800616a:	e7e3      	b.n	8006134 <__smakebuf_r+0xc>
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <__smakebuf_r+0x7c>)
 800616e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	6020      	str	r0, [r4, #0]
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	6120      	str	r0, [r4, #16]
 800617e:	6163      	str	r3, [r4, #20]
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	b15b      	cbz	r3, 800619c <__smakebuf_r+0x74>
 8006184:	4630      	mov	r0, r6
 8006186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618a:	f000 f8c9 	bl	8006320 <_isatty_r>
 800618e:	b128      	cbz	r0, 800619c <__smakebuf_r+0x74>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	89a0      	ldrh	r0, [r4, #12]
 800619e:	4305      	orrs	r5, r0
 80061a0:	81a5      	strh	r5, [r4, #12]
 80061a2:	e7cd      	b.n	8006140 <__smakebuf_r+0x18>
 80061a4:	08005f35 	.word	0x08005f35

080061a8 <_raise_r>:
 80061a8:	291f      	cmp	r1, #31
 80061aa:	b538      	push	{r3, r4, r5, lr}
 80061ac:	4604      	mov	r4, r0
 80061ae:	460d      	mov	r5, r1
 80061b0:	d904      	bls.n	80061bc <_raise_r+0x14>
 80061b2:	2316      	movs	r3, #22
 80061b4:	6003      	str	r3, [r0, #0]
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061be:	b112      	cbz	r2, 80061c6 <_raise_r+0x1e>
 80061c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061c4:	b94b      	cbnz	r3, 80061da <_raise_r+0x32>
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 f830 	bl	800622c <_getpid_r>
 80061cc:	462a      	mov	r2, r5
 80061ce:	4601      	mov	r1, r0
 80061d0:	4620      	mov	r0, r4
 80061d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d6:	f000 b817 	b.w	8006208 <_kill_r>
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d00a      	beq.n	80061f4 <_raise_r+0x4c>
 80061de:	1c59      	adds	r1, r3, #1
 80061e0:	d103      	bne.n	80061ea <_raise_r+0x42>
 80061e2:	2316      	movs	r3, #22
 80061e4:	6003      	str	r3, [r0, #0]
 80061e6:	2001      	movs	r0, #1
 80061e8:	e7e7      	b.n	80061ba <_raise_r+0x12>
 80061ea:	2400      	movs	r4, #0
 80061ec:	4628      	mov	r0, r5
 80061ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061f2:	4798      	blx	r3
 80061f4:	2000      	movs	r0, #0
 80061f6:	e7e0      	b.n	80061ba <_raise_r+0x12>

080061f8 <raise>:
 80061f8:	4b02      	ldr	r3, [pc, #8]	; (8006204 <raise+0xc>)
 80061fa:	4601      	mov	r1, r0
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	f7ff bfd3 	b.w	80061a8 <_raise_r>
 8006202:	bf00      	nop
 8006204:	2000000c 	.word	0x2000000c

08006208 <_kill_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	2300      	movs	r3, #0
 800620c:	4d06      	ldr	r5, [pc, #24]	; (8006228 <_kill_r+0x20>)
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	4611      	mov	r1, r2
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	f7fb fba6 	bl	8001966 <_kill>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d102      	bne.n	8006224 <_kill_r+0x1c>
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	b103      	cbz	r3, 8006224 <_kill_r+0x1c>
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	bd38      	pop	{r3, r4, r5, pc}
 8006226:	bf00      	nop
 8006228:	20000338 	.word	0x20000338

0800622c <_getpid_r>:
 800622c:	f7fb bb94 	b.w	8001958 <_getpid>

08006230 <__sread>:
 8006230:	b510      	push	{r4, lr}
 8006232:	460c      	mov	r4, r1
 8006234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006238:	f000 f894 	bl	8006364 <_read_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	bfab      	itete	ge
 8006240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006242:	89a3      	ldrhlt	r3, [r4, #12]
 8006244:	181b      	addge	r3, r3, r0
 8006246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800624a:	bfac      	ite	ge
 800624c:	6563      	strge	r3, [r4, #84]	; 0x54
 800624e:	81a3      	strhlt	r3, [r4, #12]
 8006250:	bd10      	pop	{r4, pc}

08006252 <__swrite>:
 8006252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006256:	461f      	mov	r7, r3
 8006258:	898b      	ldrh	r3, [r1, #12]
 800625a:	4605      	mov	r5, r0
 800625c:	05db      	lsls	r3, r3, #23
 800625e:	460c      	mov	r4, r1
 8006260:	4616      	mov	r6, r2
 8006262:	d505      	bpl.n	8006270 <__swrite+0x1e>
 8006264:	2302      	movs	r3, #2
 8006266:	2200      	movs	r2, #0
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	f000 f868 	bl	8006340 <_lseek_r>
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	4632      	mov	r2, r6
 8006274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	4628      	mov	r0, r5
 800627c:	463b      	mov	r3, r7
 800627e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006286:	f000 b817 	b.w	80062b8 <_write_r>

0800628a <__sseek>:
 800628a:	b510      	push	{r4, lr}
 800628c:	460c      	mov	r4, r1
 800628e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006292:	f000 f855 	bl	8006340 <_lseek_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	bf15      	itete	ne
 800629c:	6560      	strne	r0, [r4, #84]	; 0x54
 800629e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062a6:	81a3      	strheq	r3, [r4, #12]
 80062a8:	bf18      	it	ne
 80062aa:	81a3      	strhne	r3, [r4, #12]
 80062ac:	bd10      	pop	{r4, pc}

080062ae <__sclose>:
 80062ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b2:	f000 b813 	b.w	80062dc <_close_r>
	...

080062b8 <_write_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	4611      	mov	r1, r2
 80062c0:	2200      	movs	r2, #0
 80062c2:	4d05      	ldr	r5, [pc, #20]	; (80062d8 <_write_r+0x20>)
 80062c4:	602a      	str	r2, [r5, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f7fb fb84 	bl	80019d4 <_write>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_write_r+0x1e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_write_r+0x1e>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20000338 	.word	0x20000338

080062dc <_close_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	2300      	movs	r3, #0
 80062e0:	4d05      	ldr	r5, [pc, #20]	; (80062f8 <_close_r+0x1c>)
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fb fb90 	bl	8001a0c <_close>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_close_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_close_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20000338 	.word	0x20000338

080062fc <_fstat_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	2300      	movs	r3, #0
 8006300:	4d06      	ldr	r5, [pc, #24]	; (800631c <_fstat_r+0x20>)
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	f7fb fb8a 	bl	8001a22 <_fstat>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d102      	bne.n	8006318 <_fstat_r+0x1c>
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	b103      	cbz	r3, 8006318 <_fstat_r+0x1c>
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	bd38      	pop	{r3, r4, r5, pc}
 800631a:	bf00      	nop
 800631c:	20000338 	.word	0x20000338

08006320 <_isatty_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	2300      	movs	r3, #0
 8006324:	4d05      	ldr	r5, [pc, #20]	; (800633c <_isatty_r+0x1c>)
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fb fb88 	bl	8001a40 <_isatty>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_isatty_r+0x1a>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_isatty_r+0x1a>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000338 	.word	0x20000338

08006340 <_lseek_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	4611      	mov	r1, r2
 8006348:	2200      	movs	r2, #0
 800634a:	4d05      	ldr	r5, [pc, #20]	; (8006360 <_lseek_r+0x20>)
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fb fb80 	bl	8001a54 <_lseek>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_lseek_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_lseek_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	20000338 	.word	0x20000338

08006364 <_read_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	2200      	movs	r2, #0
 800636e:	4d05      	ldr	r5, [pc, #20]	; (8006384 <_read_r+0x20>)
 8006370:	602a      	str	r2, [r5, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	f7fb fb11 	bl	800199a <_read>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_read_r+0x1e>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_read_r+0x1e>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20000338 	.word	0x20000338

08006388 <_init>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr

08006394 <_fini>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr
