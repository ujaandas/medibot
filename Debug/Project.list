
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073d0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a4c  080075b8  080075b8  000175b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008004  08008004  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008004  08008004  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008004  08008004  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800800c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001dc  080081e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080081e8  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e351  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c1  00000000  00000000  0002e556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  000313e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad8b  00000000  00000000  00031ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0ce  00000000  00000000  0004cd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098177  00000000  00000000  0005be51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3fc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000f4018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	080075a0 	.word	0x080075a0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	080075a0 	.word	0x080075a0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	e002      	b.n	8000bb0 <Delay+0x10>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f9      	bne.n	8000baa <Delay+0xa>
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr

08000bc2 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f829 	bl	8000c20 <LCD_BackLed_Control>
	LCD_Rst();
 8000bce:	f000 f80f 	bl	8000bf0 <LCD_Rst>
	LCD_REG_Config();
 8000bd2:	f000 f85f 	bl	8000c94 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000be0:	22f0      	movs	r2, #240	; 0xf0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f9e6 	bl	8000fb6 <LCD_Clear>
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <LCD_Rst+0x28>)
 8000bfa:	f001 fde3 	bl	80027c4 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <LCD_Rst+0x2c>)
 8000c00:	f7ff ffce 	bl	8000ba0 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2102      	movs	r1, #2
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <LCD_Rst+0x28>)
 8000c0a:	f001 fddb 	bl	80027c4 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <LCD_Rst+0x2c>)
 8000c10:	f7ff ffc6 	bl	8000ba0 <Delay>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40011800 	.word	0x40011800
 8000c1c:	0002bffc 	.word	0x0002bffc

08000c20 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <LCD_BackLed_Control+0x34>)
 8000c38:	f001 fdc4 	bl	80027c4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000c3c:	e005      	b.n	8000c4a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <LCD_BackLed_Control+0x34>)
 8000c46:	f001 fdbd 	bl	80027c4 <HAL_GPIO_WritePin>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40011400 	.word	0x40011400

08000c58 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c62:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	8013      	strh	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <LCD_Write_Data+0x1c>)
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	8013      	strh	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	60020000 	.word	0x60020000

08000c94 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c98:	20cf      	movs	r0, #207	; 0xcf
 8000c9a:	f7ff ffdd 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ffe8 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000ca4:	2081      	movs	r0, #129	; 0x81
 8000ca6:	f7ff ffe5 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000caa:	2030      	movs	r0, #48	; 0x30
 8000cac:	f7ff ffe2 	bl	8000c74 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000cb0:	20ed      	movs	r0, #237	; 0xed
 8000cb2:	f7ff ffd1 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000cb6:	2064      	movs	r0, #100	; 0x64
 8000cb8:	f7ff ffdc 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f7ff ffd9 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000cc2:	2012      	movs	r0, #18
 8000cc4:	f7ff ffd6 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000cc8:	2081      	movs	r0, #129	; 0x81
 8000cca:	f7ff ffd3 	bl	8000c74 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000cce:	20e8      	movs	r0, #232	; 0xe8
 8000cd0:	f7ff ffc2 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000cd4:	2085      	movs	r0, #133	; 0x85
 8000cd6:	f7ff ffcd 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000cda:	2010      	movs	r0, #16
 8000cdc:	f7ff ffca 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ce0:	2078      	movs	r0, #120	; 0x78
 8000ce2:	f7ff ffc7 	bl	8000c74 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000ce6:	20cb      	movs	r0, #203	; 0xcb
 8000ce8:	f7ff ffb6 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000cec:	2039      	movs	r0, #57	; 0x39
 8000cee:	f7ff ffc1 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000cf2:	202c      	movs	r0, #44	; 0x2c
 8000cf4:	f7ff ffbe 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ffbb 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000cfe:	2034      	movs	r0, #52	; 0x34
 8000d00:	f7ff ffb8 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff ffb5 	bl	8000c74 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000d0a:	20f7      	movs	r0, #247	; 0xf7
 8000d0c:	f7ff ffa4 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000d10:	2020      	movs	r0, #32
 8000d12:	f7ff ffaf 	bl	8000c74 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000d16:	20ea      	movs	r0, #234	; 0xea
 8000d18:	f7ff ff9e 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff ffa9 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ffa6 	bl	8000c74 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000d28:	20b1      	movs	r0, #177	; 0xb1
 8000d2a:	f7ff ff95 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ffa0 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000d34:	201b      	movs	r0, #27
 8000d36:	f7ff ff9d 	bl	8000c74 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000d3a:	20b6      	movs	r0, #182	; 0xb6
 8000d3c:	f7ff ff8c 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d40:	200a      	movs	r0, #10
 8000d42:	f7ff ff97 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d46:	20a2      	movs	r0, #162	; 0xa2
 8000d48:	f7ff ff94 	bl	8000c74 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d4c:	20c0      	movs	r0, #192	; 0xc0
 8000d4e:	f7ff ff83 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d52:	2035      	movs	r0, #53	; 0x35
 8000d54:	f7ff ff8e 	bl	8000c74 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d58:	20c1      	movs	r0, #193	; 0xc1
 8000d5a:	f7ff ff7d 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d5e:	2011      	movs	r0, #17
 8000d60:	f7ff ff88 	bl	8000c74 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d64:	20c5      	movs	r0, #197	; 0xc5
 8000d66:	f7ff ff77 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d6a:	2045      	movs	r0, #69	; 0x45
 8000d6c:	f7ff ff82 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d70:	2045      	movs	r0, #69	; 0x45
 8000d72:	f7ff ff7f 	bl	8000c74 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d76:	20c7      	movs	r0, #199	; 0xc7
 8000d78:	f7ff ff6e 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000d7c:	20a2      	movs	r0, #162	; 0xa2
 8000d7e:	f7ff ff79 	bl	8000c74 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d82:	20f2      	movs	r0, #242	; 0xf2
 8000d84:	f7ff ff68 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff73 	bl	8000c74 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d8e:	2026      	movs	r0, #38	; 0x26
 8000d90:	f7ff ff62 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ff6d 	bl	8000c74 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d9a:	20e0      	movs	r0, #224	; 0xe0
 8000d9c:	f7ff ff5c 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000da0:	200f      	movs	r0, #15
 8000da2:	f7ff ff67 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000da6:	2026      	movs	r0, #38	; 0x26
 8000da8:	f7ff ff64 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000dac:	2024      	movs	r0, #36	; 0x24
 8000dae:	f7ff ff61 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000db2:	200b      	movs	r0, #11
 8000db4:	f7ff ff5e 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000db8:	200e      	movs	r0, #14
 8000dba:	f7ff ff5b 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000dbe:	2009      	movs	r0, #9
 8000dc0:	f7ff ff58 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000dc4:	2054      	movs	r0, #84	; 0x54
 8000dc6:	f7ff ff55 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000dca:	20a8      	movs	r0, #168	; 0xa8
 8000dcc:	f7ff ff52 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000dd0:	2046      	movs	r0, #70	; 0x46
 8000dd2:	f7ff ff4f 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f7ff ff4c 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000ddc:	2017      	movs	r0, #23
 8000dde:	f7ff ff49 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000de2:	2009      	movs	r0, #9
 8000de4:	f7ff ff46 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000de8:	200f      	movs	r0, #15
 8000dea:	f7ff ff43 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dee:	2007      	movs	r0, #7
 8000df0:	f7ff ff40 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff ff3d 	bl	8000c74 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000dfa:	20e1      	movs	r0, #225	; 0xe1
 8000dfc:	f7ff ff2c 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff ff37 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000e06:	2019      	movs	r0, #25
 8000e08:	f7ff ff34 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000e0c:	201b      	movs	r0, #27
 8000e0e:	f7ff ff31 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000e12:	2004      	movs	r0, #4
 8000e14:	f7ff ff2e 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000e18:	2010      	movs	r0, #16
 8000e1a:	f7ff ff2b 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e1e:	2007      	movs	r0, #7
 8000e20:	f7ff ff28 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000e24:	202a      	movs	r0, #42	; 0x2a
 8000e26:	f7ff ff25 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000e2a:	2047      	movs	r0, #71	; 0x47
 8000e2c:	f7ff ff22 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000e30:	2039      	movs	r0, #57	; 0x39
 8000e32:	f7ff ff1f 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000e36:	2003      	movs	r0, #3
 8000e38:	f7ff ff1c 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e3c:	2006      	movs	r0, #6
 8000e3e:	f7ff ff19 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e42:	2006      	movs	r0, #6
 8000e44:	f7ff ff16 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e48:	2030      	movs	r0, #48	; 0x30
 8000e4a:	f7ff ff13 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e4e:	2038      	movs	r0, #56	; 0x38
 8000e50:	f7ff ff10 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e54:	200f      	movs	r0, #15
 8000e56:	f7ff ff0d 	bl	8000c74 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e5a:	2036      	movs	r0, #54	; 0x36
 8000e5c:	f7ff fefc 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000e60:	20c8      	movs	r0, #200	; 0xc8
 8000e62:	f7ff ff07 	bl	8000c74 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e66:	202a      	movs	r0, #42	; 0x2a
 8000e68:	f7ff fef6 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff ff01 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fefe 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fefb 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000e7e:	20ef      	movs	r0, #239	; 0xef
 8000e80:	f7ff fef8 	bl	8000c74 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e84:	202b      	movs	r0, #43	; 0x2b
 8000e86:	f7ff fee7 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fef2 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff feef 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff feec 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e9c:	203f      	movs	r0, #63	; 0x3f
 8000e9e:	f7ff fee9 	bl	8000c74 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000ea2:	203a      	movs	r0, #58	; 0x3a
 8000ea4:	f7ff fed8 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000ea8:	2055      	movs	r0, #85	; 0x55
 8000eaa:	f7ff fee3 	bl	8000c74 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000eae:	2011      	movs	r0, #17
 8000eb0:	f7ff fed2 	bl	8000c58 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <LCD_REG_Config+0x230>)
 8000eb6:	f7ff fe73 	bl	8000ba0 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000eba:	2029      	movs	r0, #41	; 0x29
 8000ebc:	f7ff fecc 	bl	8000c58 <LCD_Write_Cmd>
	
	
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0002bffc 	.word	0x0002bffc

08000ec8 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4604      	mov	r4, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	4603      	mov	r3, r0
 8000edc:	80bb      	strh	r3, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000ee6:	202a      	movs	r0, #42	; 0x2a
 8000ee8:	f7ff feb6 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff febe 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff feb8 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	121b      	asrs	r3, r3, #8
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff feaf 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fea4 	bl	8000c74 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000f2c:	202b      	movs	r0, #43	; 0x2b
 8000f2e:	f7ff fe93 	bl	8000c58 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe9b 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe95 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f4a:	88ba      	ldrh	r2, [r7, #4]
 8000f4c:	883b      	ldrh	r3, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b01      	subs	r3, #1
 8000f52:	121b      	asrs	r3, r3, #8
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe8c 	bl	8000c74 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f5c:	88ba      	ldrh	r2, [r7, #4]
 8000f5e:	883b      	ldrh	r3, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fe81 	bl	8000c74 <LCD_Write_Data>
	
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}

08000f7a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f8a:	202c      	movs	r0, #44	; 0x2c
 8000f8c:	f7ff fe64 	bl	8000c58 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e006      	b.n	8000fa4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe6b 	bl	8000c74 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3f4      	bcc.n	8000f96 <LCD_FillColor+0x1c>
		
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000fb6:	b590      	push	{r4, r7, lr}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	80fb      	strh	r3, [r7, #6]
 8000fc8:	4603      	mov	r3, r0
 8000fca:	80bb      	strh	r3, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000fd4:	883b      	ldrh	r3, [r7, #0]
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	88b9      	ldrh	r1, [r7, #4]
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	f7ff ff74 	bl	8000ec8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	883a      	ldrh	r2, [r7, #0]
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	8b3b      	ldrh	r3, [r7, #24]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4610      	mov	r0, r2
 8000ff0:	f7ff ffc3 	bl	8000f7a <LCD_FillColor>
	
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}

08000ffc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	460b      	mov	r3, r1
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	3b20      	subs	r3, #32
 8001012:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001014:	88b9      	ldrh	r1, [r7, #4]
 8001016:	88f8      	ldrh	r0, [r7, #6]
 8001018:	2310      	movs	r3, #16
 800101a:	2208      	movs	r2, #8
 800101c:	f7ff ff54 	bl	8000ec8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001020:	202c      	movs	r0, #44	; 0x2c
 8001022:	f7ff fe19 	bl	8000c58 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001026:	2300      	movs	r3, #0
 8001028:	73bb      	strb	r3, [r7, #14]
 800102a:	e023      	b.n	8001074 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800102c:	7b3a      	ldrb	r2, [r7, #12]
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	4914      	ldr	r1, [pc, #80]	; (8001084 <LCD_DrawChar+0x88>)
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	440a      	add	r2, r1
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800103c:	2300      	movs	r3, #0
 800103e:	737b      	strb	r3, [r7, #13]
 8001040:	e012      	b.n	8001068 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800104c:	201f      	movs	r0, #31
 800104e:	f7ff fe11 	bl	8000c74 <LCD_Write_Data>
 8001052:	e003      	b.n	800105c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001054:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001058:	f7ff fe0c 	bl	8000c74 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	085b      	lsrs	r3, r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	3301      	adds	r3, #1
 8001066:	737b      	strb	r3, [r7, #13]
 8001068:	7b7b      	ldrb	r3, [r7, #13]
 800106a:	2b07      	cmp	r3, #7
 800106c:	d9e9      	bls.n	8001042 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	3301      	adds	r3, #1
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	2b0f      	cmp	r3, #15
 8001078:	d9d8      	bls.n	800102c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	0800760c 	.word	0x0800760c

08001088 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	603a      	str	r2, [r7, #0]
 8001092:	80fb      	strh	r3, [r7, #6]
 8001094:	460b      	mov	r3, r1
 8001096:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001098:	e01c      	b.n	80010d4 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2be8      	cmp	r3, #232	; 0xe8
 800109e:	d904      	bls.n	80010aa <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010a0:	2300      	movs	r3, #0
 80010a2:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	3310      	adds	r3, #16
 80010a8:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80010aa:	88bb      	ldrh	r3, [r7, #4]
 80010ac:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80010b0:	d903      	bls.n	80010ba <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010b2:	2300      	movs	r3, #0
 80010b4:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	88b9      	ldrh	r1, [r7, #4]
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff9a 	bl	8000ffc <LCD_DrawChar>
		
		pStr ++;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	3308      	adds	r3, #8
 80010d2:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1de      	bne.n	800109a <LCD_DrawString+0x12>
		
	}
	
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// printf() function
int __io_putchar(int ch)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 80010f6:	f107 010f 	add.w	r1, r7, #15
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	2201      	movs	r2, #1
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <__io_putchar+0x28>)
 8001102:	f003 f87a 	bl	80041fa <HAL_UART_Transmit>
  return ch;
 8001106:	687b      	ldr	r3, [r7, #4]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000024c 	.word	0x2000024c

08001114 <max30102_plot>:

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir: %lu,r: %lu\n", ir_sample, red_sample);    // Print IR and Red
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <max30102_plot+0x1c>)
 8001124:	f004 f89a 	bl	800525c <iprintf>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	080075b8 	.word	0x080075b8

08001134 <dec_to_str>:

void dec_to_str(uint32_t adcVal, char *buffer) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
    sprintf(buffer, "%4lu", adcVal);
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4903      	ldr	r1, [pc, #12]	; (8001150 <dec_to_str+0x1c>)
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f004 f8b2 	bl	80052ac <siprintf>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	080075c8 	.word	0x080075c8

08001154 <checkForBeat>:

int checkForBeat(uint32_t irValue) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	// placeholder
    return irValue > 50000;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001162:	4293      	cmp	r3, r2
 8001164:	bf8c      	ite	hi
 8001166:	2301      	movhi	r3, #1
 8001168:	2300      	movls	r3, #0
 800116a:	b2db      	uxtb	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b098      	sub	sp, #96	; 0x60
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fff9 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f92b 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f9c7 	bl	8001518 <MX_GPIO_Init>
  MX_FSMC_Init();
 800118a:	f000 fa6f 	bl	800166c <MX_FSMC_Init>
  MX_I2C2_Init();
 800118e:	f000 f96b 	bl	8001468 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001192:	f000 f997 	bl	80014c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001196:	f7ff fd14 	bl	8000bc2 <LCD_INIT>

  char name[] = "DAS, Ujaan";
 800119a:	4a82      	ldr	r2, [pc, #520]	; (80013a4 <main+0x22c>)
 800119c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a2:	c303      	stmia	r3!, {r0, r1}
 80011a4:	801a      	strh	r2, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
  LCD_DrawString(0, 0, name);
 80011ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011b0:	461a      	mov	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ff67 	bl	8001088 <LCD_DrawString>
  char dec2[10];
  char bpmStr[20];
  char avgBpmStr[20];

  // init and pass i2c handle
  max30102_init(&max30102, &hi2c2);
 80011ba:	497b      	ldr	r1, [pc, #492]	; (80013a8 <main+0x230>)
 80011bc:	487b      	ldr	r0, [pc, #492]	; (80013ac <main+0x234>)
 80011be:	f000 fabe 	bl	800173e <max30102_init>

  // reset and clear fifo ptrs
  max30102_reset(&max30102);
 80011c2:	487a      	ldr	r0, [pc, #488]	; (80013ac <main+0x234>)
 80011c4:	f000 fb32 	bl	800182c <max30102_reset>
  max30102_clear_fifo(&max30102);
 80011c8:	4878      	ldr	r0, [pc, #480]	; (80013ac <main+0x234>)
 80011ca:	f000 fcef 	bl	8001bac <max30102_clear_fifo>

  // set up config
  // fifo
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 80011ce:	2307      	movs	r3, #7
 80011d0:	2201      	movs	r2, #1
 80011d2:	2103      	movs	r1, #3
 80011d4:	4875      	ldr	r0, [pc, #468]	; (80013ac <main+0x234>)
 80011d6:	f000 fcaf 	bl	8001b38 <max30102_set_fifo_config>
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80011da:	2101      	movs	r1, #1
 80011dc:	4873      	ldr	r0, [pc, #460]	; (80013ac <main+0x234>)
 80011de:	f000 fc12 	bl	8001a06 <max30102_set_led_pulse_width>
  // led
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80011e2:	2100      	movs	r1, #0
 80011e4:	4871      	ldr	r0, [pc, #452]	; (80013ac <main+0x234>)
 80011e6:	f000 fc31 	bl	8001a4c <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80011ea:	2104      	movs	r1, #4
 80011ec:	486f      	ldr	r0, [pc, #444]	; (80013ac <main+0x234>)
 80011ee:	f000 fbe6 	bl	80019be <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 80011f2:	496f      	ldr	r1, [pc, #444]	; (80013b0 <main+0x238>)
 80011f4:	486d      	ldr	r0, [pc, #436]	; (80013ac <main+0x234>)
 80011f6:	f000 fc4f 	bl	8001a98 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 80011fa:	496d      	ldr	r1, [pc, #436]	; (80013b0 <main+0x238>)
 80011fc:	486b      	ldr	r0, [pc, #428]	; (80013ac <main+0x234>)
 80011fe:	f000 fc73 	bl	8001ae8 <max30102_set_led_current_2>

  // measurement mode
  max30102_set_mode(&max30102, max30102_heart_rate);
 8001202:	2102      	movs	r1, #2
 8001204:	4869      	ldr	r0, [pc, #420]	; (80013ac <main+0x234>)
 8001206:	f000 fbb4 	bl	8001972 <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 800120a:	2101      	movs	r1, #1
 800120c:	4867      	ldr	r0, [pc, #412]	; (80013ac <main+0x234>)
 800120e:	f000 fb1e 	bl	800184e <max30102_set_a_full>

  // rqd interrupts
  max30102_set_a_full(&max30102, 1);
 8001212:	2101      	movs	r1, #1
 8001214:	4865      	ldr	r0, [pc, #404]	; (80013ac <main+0x234>)
 8001216:	f000 fb1a 	bl	800184e <max30102_set_a_full>
  max30102_set_die_temp_en(&max30102, 1);
 800121a:	2101      	movs	r1, #1
 800121c:	4863      	ldr	r0, [pc, #396]	; (80013ac <main+0x234>)
 800121e:	f000 fb56 	bl	80018ce <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 8001222:	2101      	movs	r1, #1
 8001224:	4861      	ldr	r0, [pc, #388]	; (80013ac <main+0x234>)
 8001226:	f000 fb3a 	bl	800189e <max30102_set_die_temp_rdy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (max30102_has_interrupt(&max30102)) {
 800122a:	4860      	ldr	r0, [pc, #384]	; (80013ac <main+0x234>)
 800122c:	f000 fb67 	bl	80018fe <max30102_has_interrupt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80b1 	beq.w	800139a <main+0x222>
		  max30102_interrupt_handler(&max30102);
 8001238:	485c      	ldr	r0, [pc, #368]	; (80013ac <main+0x234>)
 800123a:	f000 fb6c 	bl	8001916 <max30102_interrupt_handler>

		  uint32_t irValue = max30102._ir_samples[0];
 800123e:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <main+0x234>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	65bb      	str	r3, [r7, #88]	; 0x58
		  uint32_t redValue = max30102._red_samples[0];
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <main+0x234>)
 8001246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800124a:	657b      	str	r3, [r7, #84]	; 0x54

		  if (checkForBeat(irValue) == 1) {
 800124c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800124e:	f7ff ff81 	bl	8001154 <checkForBeat>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d14c      	bne.n	80012f2 <main+0x17a>
			  uint32_t delta = HAL_GetTick() - lastBeat;
 8001258:	f000 ffe4 	bl	8002224 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <main+0x23c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	653b      	str	r3, [r7, #80]	; 0x50
			  lastBeat = HAL_GetTick();
 8001266:	f000 ffdd 	bl	8002224 <HAL_GetTick>
 800126a:	4603      	mov	r3, r0
 800126c:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <main+0x23c>)
 800126e:	6013      	str	r3, [r2, #0]
			  beatsPerMinute = 60000 / delta;
 8001270:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <main+0x240>)
 800127c:	6013      	str	r3, [r2, #0]

			  if (beatsPerMinute < 255 && beatsPerMinute > 20) {
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <main+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2bfe      	cmp	r3, #254	; 0xfe
 8001284:	d835      	bhi.n	80012f2 <main+0x17a>
 8001286:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <main+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b14      	cmp	r3, #20
 800128c:	d931      	bls.n	80012f2 <main+0x17a>
				  rates[rateSpot++] = beatsPerMinute;
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <main+0x244>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	b2d1      	uxtb	r1, r2
 8001296:	4a49      	ldr	r2, [pc, #292]	; (80013bc <main+0x244>)
 8001298:	7011      	strb	r1, [r2, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <main+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <main+0x248>)
 80012a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				  rateSpot %= RATE_SIZE;
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <main+0x244>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <main+0x244>)
 80012b2:	701a      	strb	r2, [r3, #0]

				  beatAvg = 0;
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <main+0x24c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
				  for (uint8_t x = 0; x < RATE_SIZE; x++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012c0:	e00e      	b.n	80012e0 <main+0x168>
					  beatAvg += rates[x];
 80012c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012c6:	4a3e      	ldr	r2, [pc, #248]	; (80013c0 <main+0x248>)
 80012c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <main+0x24c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a3c      	ldr	r2, [pc, #240]	; (80013c4 <main+0x24c>)
 80012d4:	6013      	str	r3, [r2, #0]
				  for (uint8_t x = 0; x < RATE_SIZE; x++) {
 80012d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012da:	3301      	adds	r3, #1
 80012dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d9ec      	bls.n	80012c2 <main+0x14a>
				  }
				  beatAvg /= RATE_SIZE;
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <main+0x24c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	4a35      	ldr	r2, [pc, #212]	; (80013c4 <main+0x24c>)
 80012f0:	6013      	str	r3, [r2, #0]
			  }
		  }

		  // Convert values to strings for LCD display
		  dec_to_str(irValue, dec1);
 80012f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f6:	4619      	mov	r1, r3
 80012f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80012fa:	f7ff ff1b 	bl	8001134 <dec_to_str>
		  dec_to_str(redValue, dec2);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001306:	f7ff ff15 	bl	8001134 <dec_to_str>
		  dec_to_str(beatsPerMinute, bpmStr);
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <main+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f107 0218 	add.w	r2, r7, #24
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff0d 	bl	8001134 <dec_to_str>
		  dec_to_str(beatAvg, avgBpmStr);
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <main+0x24c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1d3a      	adds	r2, r7, #4
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff06 	bl	8001134 <dec_to_str>

		  // Display on LCD
		  LCD_DrawString(0, 30, "IR: ");
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <main+0x250>)
 800132a:	211e      	movs	r1, #30
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff feab 	bl	8001088 <LCD_DrawString>
		  LCD_DrawString(30, 30, dec1);
 8001332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001336:	461a      	mov	r2, r3
 8001338:	211e      	movs	r1, #30
 800133a:	201e      	movs	r0, #30
 800133c:	f7ff fea4 	bl	8001088 <LCD_DrawString>
		  LCD_DrawString(0, 50, "Red: ");
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <main+0x254>)
 8001342:	2132      	movs	r1, #50	; 0x32
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fe9f 	bl	8001088 <LCD_DrawString>
		  LCD_DrawString(50, 50, dec2);
 800134a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134e:	461a      	mov	r2, r3
 8001350:	2132      	movs	r1, #50	; 0x32
 8001352:	2032      	movs	r0, #50	; 0x32
 8001354:	f7ff fe98 	bl	8001088 <LCD_DrawString>
		  LCD_DrawString(0, 70, "BPM: ");
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <main+0x258>)
 800135a:	2146      	movs	r1, #70	; 0x46
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fe93 	bl	8001088 <LCD_DrawString>
		  LCD_DrawString(40, 70, bpmStr);
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	461a      	mov	r2, r3
 8001368:	2146      	movs	r1, #70	; 0x46
 800136a:	2028      	movs	r0, #40	; 0x28
 800136c:	f7ff fe8c 	bl	8001088 <LCD_DrawString>
		  LCD_DrawString(0, 90, "Avg BPM: ");
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <main+0x25c>)
 8001372:	215a      	movs	r1, #90	; 0x5a
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fe87 	bl	8001088 <LCD_DrawString>
		  LCD_DrawString(70, 90, avgBpmStr);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	461a      	mov	r2, r3
 800137e:	215a      	movs	r1, #90	; 0x5a
 8001380:	2046      	movs	r0, #70	; 0x46
 8001382:	f7ff fe81 	bl	8001088 <LCD_DrawString>

		  if (irValue < 50000) {
 8001386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001388:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800138c:	4293      	cmp	r3, r2
 800138e:	d804      	bhi.n	800139a <main+0x222>
			  LCD_DrawString(0, 110, "No finger?");
 8001390:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <main+0x260>)
 8001392:	216e      	movs	r1, #110	; 0x6e
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fe77 	bl	8001088 <LCD_DrawString>
		  }
	  }
	  HAL_Delay(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f000 ff4b 	bl	8002238 <HAL_Delay>
	  if (max30102_has_interrupt(&max30102)) {
 80013a2:	e742      	b.n	800122a <main+0xb2>
 80013a4:	08007600 	.word	0x08007600
 80013a8:	200001f8 	.word	0x200001f8
 80013ac:	200002dc 	.word	0x200002dc
 80013b0:	40c66666 	.word	0x40c66666
 80013b4:	200003f8 	.word	0x200003f8
 80013b8:	20000400 	.word	0x20000400
 80013bc:	200003e4 	.word	0x200003e4
 80013c0:	200003e8 	.word	0x200003e8
 80013c4:	200003fc 	.word	0x200003fc
 80013c8:	080075d0 	.word	0x080075d0
 80013cc:	080075d8 	.word	0x080075d8
 80013d0:	080075e0 	.word	0x080075e0
 80013d4:	080075e8 	.word	0x080075e8
 80013d8:	080075f4 	.word	0x080075f4

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b090      	sub	sp, #64	; 0x40
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	2228      	movs	r2, #40	; 0x28
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 f9f2 	bl	80047d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001406:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800141a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4618      	mov	r0, r3
 8001426:	f002 fa3b 	bl	80038a0 <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001430:	f000 f980 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001434:	230f      	movs	r3, #15
 8001436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001438:	2302      	movs	r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2102      	movs	r1, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fca8 	bl	8003da4 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800145a:	f000 f96b 	bl	8001734 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3740      	adds	r7, #64	; 0x40
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_I2C2_Init+0x50>)
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <MX_I2C2_Init+0x54>)
 8001470:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_I2C2_Init+0x50>)
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_I2C2_Init+0x58>)
 8001476:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_I2C2_Init+0x50>)
 8001486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_I2C2_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_I2C2_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_I2C2_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_I2C2_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_I2C2_Init+0x50>)
 80014a6:	f001 f9c7 	bl	8002838 <HAL_I2C_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014b0:	f000 f940 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200001f8 	.word	0x200001f8
 80014bc:	40005800 	.word	0x40005800
 80014c0:	000186a0 	.word	0x000186a0

080014c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART1_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014fc:	f002 fe2d 	bl	800415a <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f915 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000024c 	.word	0x2000024c
 8001514:	40013800 	.word	0x40013800

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152c:	4b48      	ldr	r3, [pc, #288]	; (8001650 <MX_GPIO_Init+0x138>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a47      	ldr	r2, [pc, #284]	; (8001650 <MX_GPIO_Init+0x138>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <MX_GPIO_Init+0x138>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <MX_GPIO_Init+0x138>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a41      	ldr	r2, [pc, #260]	; (8001650 <MX_GPIO_Init+0x138>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_GPIO_Init+0x138>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_GPIO_Init+0x138>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a3b      	ldr	r2, [pc, #236]	; (8001650 <MX_GPIO_Init+0x138>)
 8001562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <MX_GPIO_Init+0x138>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <MX_GPIO_Init+0x138>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a35      	ldr	r2, [pc, #212]	; (8001650 <MX_GPIO_Init+0x138>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b33      	ldr	r3, [pc, #204]	; (8001650 <MX_GPIO_Init+0x138>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_GPIO_Init+0x138>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <MX_GPIO_Init+0x138>)
 8001592:	f043 0320 	orr.w	r3, r3, #32
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <MX_GPIO_Init+0x138>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015aa:	482a      	ldr	r0, [pc, #168]	; (8001654 <MX_GPIO_Init+0x13c>)
 80015ac:	f001 f90a 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2102      	movs	r1, #2
 80015b4:	4828      	ldr	r0, [pc, #160]	; (8001658 <MX_GPIO_Init+0x140>)
 80015b6:	f001 f905 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : K2_Btn_Pin */
  GPIO_InitStruct.Pin = K2_Btn_Pin;
 80015ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_GPIO_Init+0x144>)
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_Btn_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0318 	add.w	r3, r7, #24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4824      	ldr	r0, [pc, #144]	; (8001660 <MX_GPIO_Init+0x148>)
 80015d0:	f000 ff64 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d4:	2308      	movs	r3, #8
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_GPIO_Init+0x14c>)
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4820      	ldr	r0, [pc, #128]	; (8001668 <MX_GPIO_Init+0x150>)
 80015e8:	f000 ff58 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0318 	add.w	r3, r7, #24
 8001602:	4619      	mov	r1, r3
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_GPIO_Init+0x13c>)
 8001606:	f000 ff49 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0318 	add.w	r3, r7, #24
 800161e:	4619      	mov	r1, r3
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_GPIO_Init+0x140>)
 8001622:	f000 ff3b 	bl	800249c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2009      	movs	r0, #9
 800162c:	f000 feff 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001630:	2009      	movs	r0, #9
 8001632:	f000 ff18 	bl	8002466 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2028      	movs	r0, #40	; 0x28
 800163c:	f000 fef7 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001640:	2028      	movs	r0, #40	; 0x28
 8001642:	f000 ff10 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40011400 	.word	0x40011400
 8001658:	40011800 	.word	0x40011800
 800165c:	10110000 	.word	0x10110000
 8001660:	40011000 	.word	0x40011000
 8001664:	10310000 	.word	0x10310000
 8001668:	40010800 	.word	0x40010800

0800166c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_FSMC_Init+0xbc>)
 8001686:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800168a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <MX_FSMC_Init+0xbc>)
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <MX_FSMC_Init+0xc0>)
 8001690:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_FSMC_Init+0xbc>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_FSMC_Init+0xbc>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016a6:	2210      	movs	r2, #16
 80016a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_FSMC_Init+0xbc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80016e2:	230f      	movs	r3, #15
 80016e4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80016e6:	230f      	movs	r3, #15
 80016e8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80016ea:	23ff      	movs	r3, #255	; 0xff
 80016ec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80016ee:	230f      	movs	r3, #15
 80016f0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80016f2:	2310      	movs	r3, #16
 80016f4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80016f6:	2311      	movs	r3, #17
 80016f8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <MX_FSMC_Init+0xbc>)
 8001706:	f002 fcdb 	bl	80040c0 <HAL_SRAM_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001710:	f000 f810 	bl	8001734 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_FSMC_Init+0xc4>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <MX_FSMC_Init+0xc4>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000294 	.word	0x20000294
 800172c:	a0000104 	.word	0xa0000104
 8001730:	40010000 	.word	0x40010000

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>

0800173e <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3304      	adds	r3, #4
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f003 f838 	bl	80047d4 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3384      	adds	r3, #132	; 0x84
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f831 	bl	80047d4 <memset>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b088      	sub	sp, #32
 800177e:	af02      	add	r7, sp, #8
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	461a      	mov	r2, r3
 8001786:	460b      	mov	r3, r1
 8001788:	72fb      	strb	r3, [r7, #11]
 800178a:	4613      	mov	r3, r2
 800178c:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800178e:	893b      	ldrh	r3, [r7, #8]
 8001790:	3301      	adds	r3, #1
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f800 	bl	8004798 <malloc>
 8001798:	4603      	mov	r3, r0
 800179a:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	7afa      	ldrb	r2, [r7, #11]
 80017a0:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <max30102_write+0x42>
 80017a8:	893b      	ldrh	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	893a      	ldrh	r2, [r7, #8]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 fffe 	bl	80047b8 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	893b      	ldrh	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ca:	9200      	str	r2, [sp, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	21ae      	movs	r1, #174	; 0xae
 80017d0:	f001 f976 	bl	8002ac0 <HAL_I2C_Master_Transmit>
    free(payload);
 80017d4:	6978      	ldr	r0, [r7, #20]
 80017d6:	f002 ffe7 	bl	80047a8 <free>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b088      	sub	sp, #32
 80017e6:	af02      	add	r7, sp, #8
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	461a      	mov	r2, r3
 80017ee:	460b      	mov	r3, r1
 80017f0:	72fb      	strb	r3, [r7, #11]
 80017f2:	4613      	mov	r3, r2
 80017f4:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	f107 0217 	add.w	r2, r7, #23
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	21ae      	movs	r1, #174	; 0xae
 800180c:	f001 f958 	bl	8002ac0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	893b      	ldrh	r3, [r7, #8]
 8001816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	21ae      	movs	r1, #174	; 0xae
 8001820:	f001 fa4c 	bl	8002cbc <HAL_I2C_Master_Receive>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8001834:	2340      	movs	r3, #64	; 0x40
 8001836:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8001838:	f107 020f 	add.w	r2, r7, #15
 800183c:	2301      	movs	r3, #1
 800183e:	2109      	movs	r1, #9
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff9a 	bl	800177a <max30102_write>
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800185e:	f107 020f 	add.w	r2, r7, #15
 8001862:	2301      	movs	r3, #1
 8001864:	2102      	movs	r1, #2
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffbb 	bl	80017e2 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001872:	b2db      	uxtb	r3, r3
 8001874:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	01db      	lsls	r3, r3, #7
 800187a:	b25a      	sxtb	r2, r3
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	b25b      	sxtb	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b25b      	sxtb	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001888:	f107 020f 	add.w	r2, r7, #15
 800188c:	2301      	movs	r3, #1
 800188e:	2102      	movs	r1, #2
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff72 	bl	800177a <max30102_write>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 80018b8:	f107 020f 	add.w	r2, r7, #15
 80018bc:	2301      	movs	r3, #1
 80018be:	2103      	movs	r1, #3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff5a 	bl	800177a <max30102_write>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80018e8:	f107 020f 	add.w	r2, r7, #15
 80018ec:	2301      	movs	r3, #1
 80018ee:	2121      	movs	r1, #33	; 0x21
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff42 	bl	800177a <max30102_write>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 800191e:	2300      	movs	r3, #0
 8001920:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8001922:	f107 020c 	add.w	r2, r7, #12
 8001926:	2302      	movs	r3, #2
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff59 	bl	80017e2 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8001930:	7b3b      	ldrb	r3, [r7, #12]
 8001932:	09db      	lsrs	r3, r3, #7
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f953 	bl	8001bea <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8001944:	7b7b      	ldrb	r3, [r7, #13]
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8001952:	f107 020a 	add.w	r2, r7, #10
 8001956:	f107 030b 	add.w	r3, r7, #11
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f9ab 	bl	8001cb8 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 800197e:	f107 020f 	add.w	r2, r7, #15
 8001982:	2301      	movs	r3, #1
 8001984:	2109      	movs	r1, #9
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff2b 	bl	80017e2 <max30102_read>
    config = (config & 0xf8) | mode;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	b25b      	sxtb	r3, r3
 8001990:	f023 0307 	bic.w	r3, r3, #7
 8001994:	b25a      	sxtb	r2, r3
 8001996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800199a:	4313      	orrs	r3, r2
 800199c:	b25b      	sxtb	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 80019a2:	f107 020f 	add.w	r2, r7, #15
 80019a6:	2301      	movs	r3, #1
 80019a8:	2109      	movs	r1, #9
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fee5 	bl	800177a <max30102_write>
    max30102_clear_fifo(obj);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8fb 	bl	8001bac <max30102_clear_fifo>
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80019ca:	f107 020f 	add.w	r2, r7, #15
 80019ce:	2301      	movs	r3, #1
 80019d0:	210a      	movs	r1, #10
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff05 	bl	80017e2 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	f003 0363 	and.w	r3, r3, #99	; 0x63
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80019f0:	f107 020f 	add.w	r2, r7, #15
 80019f4:	2301      	movs	r3, #1
 80019f6:	210a      	movs	r1, #10
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff febe 	bl	800177a <max30102_write>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001a12:	f107 020f 	add.w	r2, r7, #15
 8001a16:	2301      	movs	r3, #1
 8001a18:	210a      	movs	r1, #10
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fee1 	bl	80017e2 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001a28:	b25a      	sxtb	r2, r3
 8001a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001a36:	f107 020f 	add.w	r2, r7, #15
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	210a      	movs	r1, #10
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fe9b 	bl	800177a <max30102_write>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001a58:	f107 020f 	add.w	r2, r7, #15
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	210a      	movs	r1, #10
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff febe 	bl	80017e2 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001a7e:	f107 020f 	add.w	r2, r7, #15
 8001a82:	2301      	movs	r3, #1
 8001a84:	210a      	movs	r1, #10
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fe77 	bl	800177a <max30102_write>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	0000      	movs	r0, r0
	...

08001a98 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	f7fe fd2c 	bl	8000500 <__aeabi_f2d>
 8001aa8:	a30d      	add	r3, pc, #52	; (adr r3, 8001ae0 <max30102_set_led_current_1+0x48>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fea9 	bl	8000804 <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f851 	bl	8000b60 <__aeabi_d2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8001ac4:	f107 020f 	add.w	r2, r7, #15
 8001ac8:	2301      	movs	r3, #1
 8001aca:	210c      	movs	r1, #12
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff fe54 	bl	800177a <max30102_write>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	f3af 8000 	nop.w
 8001ae0:	9999999a 	.word	0x9999999a
 8001ae4:	3fc99999 	.word	0x3fc99999

08001ae8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8001af2:	6838      	ldr	r0, [r7, #0]
 8001af4:	f7fe fd04 	bl	8000500 <__aeabi_f2d>
 8001af8:	a30d      	add	r3, pc, #52	; (adr r3, 8001b30 <max30102_set_led_current_2+0x48>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fe81 	bl	8000804 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f829 	bl	8000b60 <__aeabi_d2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8001b14:	f107 020f 	add.w	r2, r7, #15
 8001b18:	2301      	movs	r3, #1
 8001b1a:	210d      	movs	r1, #13
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fe2c 	bl	800177a <max30102_write>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	f3af 8000 	nop.w
 8001b30:	9999999a 	.word	0x9999999a
 8001b34:	3fc99999 	.word	0x3fc99999

08001b38 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70bb      	strb	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	015b      	lsls	r3, r3, #5
 8001b5a:	b25a      	sxtb	r2, r3
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001b68:	78bb      	ldrb	r3, [r7, #2]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8001b80:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	b25a      	sxtb	r2, r3
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	b25b      	sxtb	r3, r3
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8001b96:	f107 020f 	add.w	r2, r7, #15
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fdeb 	bl	800177a <max30102_write>
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001bb8:	f107 020f 	add.w	r2, r7, #15
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fdda 	bl	800177a <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8001bc6:	f107 020f 	add.w	r2, r7, #15
 8001bca:	2303      	movs	r3, #3
 8001bcc:	2106      	movs	r1, #6
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fdd3 	bl	800177a <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8001bd4:	f107 020f 	add.w	r2, r7, #15
 8001bd8:	2303      	movs	r3, #3
 8001bda:	2105      	movs	r1, #5
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fdcc 	bl	800177a <max30102_write>
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b088      	sub	sp, #32
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	74fb      	strb	r3, [r7, #19]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8001bfa:	f107 0213 	add.w	r2, r7, #19
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2104      	movs	r1, #4
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fded 	bl	80017e2 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8001c08:	f107 0212 	add.w	r2, r7, #18
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	2106      	movs	r1, #6
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fde6 	bl	80017e2 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8001c16:	7cfa      	ldrb	r2, [r7, #19]
 8001c18:	7cbb      	ldrb	r3, [r7, #18]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8001c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	dc03      	bgt.n	8001c30 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	77bb      	strb	r3, [r7, #30]
 8001c34:	e035      	b.n	8001ca2 <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8001c36:	f107 020c 	add.w	r2, r7, #12
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	2107      	movs	r1, #7
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fdcf 	bl	80017e2 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	461a      	mov	r2, r3
 8001c4a:	7b7b      	ldrb	r3, [r7, #13]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	7bba      	ldrb	r2, [r7, #14]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001c58:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	041b      	lsls	r3, r3, #16
 8001c5e:	461a      	mov	r2, r3
 8001c60:	7c3b      	ldrb	r3, [r7, #16]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	7c7a      	ldrb	r2, [r7, #17]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001c6e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8001c70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8001c7e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	3320      	adds	r3, #32
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8001c8e:	6979      	ldr	r1, [r7, #20]
 8001c90:	69b8      	ldr	r0, [r7, #24]
 8001c92:	f7ff fa3f 	bl	8001114 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8001c96:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	77bb      	strb	r3, [r7, #30]
 8001ca2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001ca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dbc3      	blt.n	8001c36 <max30102_read_fifo+0x4c>
    }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	211f      	movs	r1, #31
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff fd89 	bl	80017e2 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fd83 	bl	80017e2 <max30102_read>
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6193      	str	r3, [r2, #24]
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_MspInit+0x60>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_MspInit+0x60>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000

08001d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d124      	bne.n	8001db2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d86:	2312      	movs	r3, #18
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4619      	mov	r1, r3
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <HAL_I2C_MspInit+0x7c>)
 8001d96:	f000 fb81 	bl	800249c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001da0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40005800 	.word	0x40005800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010c00 	.word	0x40010c00

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_UART_MspInit+0x8c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d131      	bne.n	8001e4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_UART_MspInit+0x94>)
 8001e2e:	f000 fb35 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_UART_MspInit+0x94>)
 8001e48:	f000 fb28 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010800 	.word	0x40010800

08001e60 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_FSMC_MspInit+0x78>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d129      	bne.n	8001ed0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_FSMC_MspInit+0x78>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_FSMC_MspInit+0x7c>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_FSMC_MspInit+0x7c>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6153      	str	r3, [r2, #20]
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_FSMC_MspInit+0x7c>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e9a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001e9e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	4619      	mov	r1, r3
 8001eae:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <HAL_FSMC_MspInit+0x80>)
 8001eb0:	f000 faf4 	bl	800249c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001eb4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001eb8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <HAL_FSMC_MspInit+0x84>)
 8001eca:	f000 fae7 	bl	800249c <HAL_GPIO_Init>
 8001ece:	e000      	b.n	8001ed2 <HAL_FSMC_MspInit+0x72>
    return;
 8001ed0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000404 	.word	0x20000404
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40011800 	.word	0x40011800
 8001ee4:	40011400 	.word	0x40011400

08001ee8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ef0:	f7ff ffb6 	bl	8001e60 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f000 f95d 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	int status = __HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3);
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <EXTI3_IRQHandler+0x38>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	607b      	str	r3, [r7, #4]
	if (status != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <EXTI3_IRQHandler+0x28>
	{
		max30102_interrupt_handler(&max30102);
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <EXTI3_IRQHandler+0x3c>)
 8001f64:	f7ff fcd7 	bl	8001916 <max30102_interrupt_handler>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <EXTI3_IRQHandler+0x38>)
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001f6e:	2008      	movs	r0, #8
 8001f70:	f000 fc58 	bl	8002824 <HAL_GPIO_EXTI_Callback>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f74:	2008      	movs	r0, #8
 8001f76:	f000 fc3d 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40010400 	.word	0x40010400
 8001f88:	200002dc 	.word	0x200002dc

08001f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K2_Btn_Pin);
 8001f90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f94:	f000 fc2e 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <_kill>:

int _kill(int pid, int sig)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fb4:	f002 fbc6 	bl	8004744 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2216      	movs	r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
	return -1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_exit>:

void _exit (int status)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffe7 	bl	8001faa <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fdc:	e7fe      	b.n	8001fdc <_exit+0x12>

08001fde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e00a      	b.n	8002006 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ff0:	f3af 8000 	nop.w
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	60ba      	str	r2, [r7, #8]
 8001ffc:	b2ca      	uxtb	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	dbf0      	blt.n	8001ff0 <_read+0x12>
	}

return len;
 800200e:	687b      	ldr	r3, [r7, #4]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e009      	b.n	800203e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	60ba      	str	r2, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f858 	bl	80010e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbf1      	blt.n	800202a <_write+0x12>
	}
	return len;
 8002046:	687b      	ldr	r3, [r7, #4]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_close>:

int _close(int file)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	return -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002076:	605a      	str	r2, [r3, #4]
	return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <_isatty>:

int _isatty(int file)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	return 1;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <_sbrk+0x5c>)
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <_sbrk+0x60>)
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <_sbrk+0x64>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <_sbrk+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e0:	f002 fb30 	bl	8004744 <__errno>
 80020e4:	4603      	mov	r3, r0
 80020e6:	220c      	movs	r2, #12
 80020e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ee:	e009      	b.n	8002104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <_sbrk+0x64>)
 8002100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20010000 	.word	0x20010000
 8002110:	00000400 	.word	0x00000400
 8002114:	20000408 	.word	0x20000408
 8002118:	20000420 	.word	0x20000420

0800211c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002128:	f7ff fff8 	bl	800211c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800212e:	490c      	ldr	r1, [pc, #48]	; (8002160 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002144:	4c09      	ldr	r4, [pc, #36]	; (800216c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002152:	f002 fafd 	bl	8004750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002156:	f7ff f80f 	bl	8001178 <main>
  bx lr
 800215a:	4770      	bx	lr
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002164:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 8002168:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800216c:	20000420 	.word	0x20000420

08002170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC1_2_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_Init+0x28>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_Init+0x28>)
 800217e:	f043 0310 	orr.w	r3, r3, #16
 8002182:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002184:	2003      	movs	r0, #3
 8002186:	f000 f947 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218a:	200f      	movs	r0, #15
 800218c:	f000 f808 	bl	80021a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002190:	f7ff fda8 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x54>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x58>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f95f 	bl	8002482 <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d80a      	bhi.n	80021ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	f000 f927 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_InitTick+0x5c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_IncTick+0x1c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_IncTick+0x20>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <HAL_IncTick+0x20>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000008 	.word	0x20000008
 8002220:	2000040c 	.word	0x2000040c

08002224 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <HAL_GetTick+0x10>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	2000040c 	.word	0x2000040c

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff fff0 	bl	8002224 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffe0 	bl	8002224 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4906      	ldr	r1, [pc, #24]	; (8002318 <__NVIC_EnableIRQ+0x34>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f8:	f7ff ff90 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff2d 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff42 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff90 	bl	8002370 <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5f 	bl	800231c <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff35 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b08b      	sub	sp, #44	; 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ae:	e179      	b.n	80027a4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b0:	2201      	movs	r2, #1
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 8168 	bne.w	800279e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4a96      	ldr	r2, [pc, #600]	; (800272c <HAL_GPIO_Init+0x290>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d05e      	beq.n	8002596 <HAL_GPIO_Init+0xfa>
 80024d8:	4a94      	ldr	r2, [pc, #592]	; (800272c <HAL_GPIO_Init+0x290>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d875      	bhi.n	80025ca <HAL_GPIO_Init+0x12e>
 80024de:	4a94      	ldr	r2, [pc, #592]	; (8002730 <HAL_GPIO_Init+0x294>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d058      	beq.n	8002596 <HAL_GPIO_Init+0xfa>
 80024e4:	4a92      	ldr	r2, [pc, #584]	; (8002730 <HAL_GPIO_Init+0x294>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d86f      	bhi.n	80025ca <HAL_GPIO_Init+0x12e>
 80024ea:	4a92      	ldr	r2, [pc, #584]	; (8002734 <HAL_GPIO_Init+0x298>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d052      	beq.n	8002596 <HAL_GPIO_Init+0xfa>
 80024f0:	4a90      	ldr	r2, [pc, #576]	; (8002734 <HAL_GPIO_Init+0x298>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d869      	bhi.n	80025ca <HAL_GPIO_Init+0x12e>
 80024f6:	4a90      	ldr	r2, [pc, #576]	; (8002738 <HAL_GPIO_Init+0x29c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d04c      	beq.n	8002596 <HAL_GPIO_Init+0xfa>
 80024fc:	4a8e      	ldr	r2, [pc, #568]	; (8002738 <HAL_GPIO_Init+0x29c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d863      	bhi.n	80025ca <HAL_GPIO_Init+0x12e>
 8002502:	4a8e      	ldr	r2, [pc, #568]	; (800273c <HAL_GPIO_Init+0x2a0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d046      	beq.n	8002596 <HAL_GPIO_Init+0xfa>
 8002508:	4a8c      	ldr	r2, [pc, #560]	; (800273c <HAL_GPIO_Init+0x2a0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d85d      	bhi.n	80025ca <HAL_GPIO_Init+0x12e>
 800250e:	2b12      	cmp	r3, #18
 8002510:	d82a      	bhi.n	8002568 <HAL_GPIO_Init+0xcc>
 8002512:	2b12      	cmp	r3, #18
 8002514:	d859      	bhi.n	80025ca <HAL_GPIO_Init+0x12e>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <HAL_GPIO_Init+0x80>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	08002597 	.word	0x08002597
 8002520:	08002571 	.word	0x08002571
 8002524:	08002583 	.word	0x08002583
 8002528:	080025c5 	.word	0x080025c5
 800252c:	080025cb 	.word	0x080025cb
 8002530:	080025cb 	.word	0x080025cb
 8002534:	080025cb 	.word	0x080025cb
 8002538:	080025cb 	.word	0x080025cb
 800253c:	080025cb 	.word	0x080025cb
 8002540:	080025cb 	.word	0x080025cb
 8002544:	080025cb 	.word	0x080025cb
 8002548:	080025cb 	.word	0x080025cb
 800254c:	080025cb 	.word	0x080025cb
 8002550:	080025cb 	.word	0x080025cb
 8002554:	080025cb 	.word	0x080025cb
 8002558:	080025cb 	.word	0x080025cb
 800255c:	080025cb 	.word	0x080025cb
 8002560:	08002579 	.word	0x08002579
 8002564:	0800258d 	.word	0x0800258d
 8002568:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_GPIO_Init+0x2a4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800256e:	e02c      	b.n	80025ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	623b      	str	r3, [r7, #32]
          break;
 8002576:	e029      	b.n	80025cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	3304      	adds	r3, #4
 800257e:	623b      	str	r3, [r7, #32]
          break;
 8002580:	e024      	b.n	80025cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	3308      	adds	r3, #8
 8002588:	623b      	str	r3, [r7, #32]
          break;
 800258a:	e01f      	b.n	80025cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	330c      	adds	r3, #12
 8002592:	623b      	str	r3, [r7, #32]
          break;
 8002594:	e01a      	b.n	80025cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800259e:	2304      	movs	r3, #4
 80025a0:	623b      	str	r3, [r7, #32]
          break;
 80025a2:	e013      	b.n	80025cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025ac:	2308      	movs	r3, #8
 80025ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	611a      	str	r2, [r3, #16]
          break;
 80025b6:	e009      	b.n	80025cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b8:	2308      	movs	r3, #8
 80025ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	615a      	str	r2, [r3, #20]
          break;
 80025c2:	e003      	b.n	80025cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
          break;
 80025c8:	e000      	b.n	80025cc <HAL_GPIO_Init+0x130>
          break;
 80025ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2bff      	cmp	r3, #255	; 0xff
 80025d0:	d801      	bhi.n	80025d6 <HAL_GPIO_Init+0x13a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_Init+0x13e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2bff      	cmp	r3, #255	; 0xff
 80025e0:	d802      	bhi.n	80025e8 <HAL_GPIO_Init+0x14c>
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	e002      	b.n	80025ee <HAL_GPIO_Init+0x152>
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	3b08      	subs	r3, #8
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	210f      	movs	r1, #15
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	6a39      	ldr	r1, [r7, #32]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	431a      	orrs	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80c1 	beq.w	800279e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800261c:	4b49      	ldr	r3, [pc, #292]	; (8002744 <HAL_GPIO_Init+0x2a8>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a48      	ldr	r2, [pc, #288]	; (8002744 <HAL_GPIO_Init+0x2a8>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_GPIO_Init+0x2a8>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002634:	4a44      	ldr	r2, [pc, #272]	; (8002748 <HAL_GPIO_Init+0x2ac>)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002640:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3c      	ldr	r2, [pc, #240]	; (800274c <HAL_GPIO_Init+0x2b0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d01f      	beq.n	80026a0 <HAL_GPIO_Init+0x204>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <HAL_GPIO_Init+0x2b4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d019      	beq.n	800269c <HAL_GPIO_Init+0x200>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <HAL_GPIO_Init+0x2b8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_GPIO_Init+0x1fc>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a39      	ldr	r2, [pc, #228]	; (8002758 <HAL_GPIO_Init+0x2bc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00d      	beq.n	8002694 <HAL_GPIO_Init+0x1f8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_GPIO_Init+0x2c0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <HAL_GPIO_Init+0x1f4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a37      	ldr	r2, [pc, #220]	; (8002760 <HAL_GPIO_Init+0x2c4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_GPIO_Init+0x1f0>
 8002688:	2305      	movs	r3, #5
 800268a:	e00a      	b.n	80026a2 <HAL_GPIO_Init+0x206>
 800268c:	2306      	movs	r3, #6
 800268e:	e008      	b.n	80026a2 <HAL_GPIO_Init+0x206>
 8002690:	2304      	movs	r3, #4
 8002692:	e006      	b.n	80026a2 <HAL_GPIO_Init+0x206>
 8002694:	2303      	movs	r3, #3
 8002696:	e004      	b.n	80026a2 <HAL_GPIO_Init+0x206>
 8002698:	2302      	movs	r3, #2
 800269a:	e002      	b.n	80026a2 <HAL_GPIO_Init+0x206>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_GPIO_Init+0x206>
 80026a0:	2300      	movs	r3, #0
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	f002 0203 	and.w	r2, r2, #3
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	4093      	lsls	r3, r2
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026b2:	4925      	ldr	r1, [pc, #148]	; (8002748 <HAL_GPIO_Init+0x2ac>)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	4924      	ldr	r1, [pc, #144]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4920      	ldr	r1, [pc, #128]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	491a      	ldr	r1, [pc, #104]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60cb      	str	r3, [r1, #12]
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	43db      	mvns	r3, r3
 800270a:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 800270c:	4013      	ands	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d025      	beq.n	8002768 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4910      	ldr	r1, [pc, #64]	; (8002764 <HAL_GPIO_Init+0x2c8>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	e025      	b.n	8002776 <HAL_GPIO_Init+0x2da>
 800272a:	bf00      	nop
 800272c:	10320000 	.word	0x10320000
 8002730:	10310000 	.word	0x10310000
 8002734:	10220000 	.word	0x10220000
 8002738:	10210000 	.word	0x10210000
 800273c:	10120000 	.word	0x10120000
 8002740:	10110000 	.word	0x10110000
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000
 800274c:	40010800 	.word	0x40010800
 8002750:	40010c00 	.word	0x40010c00
 8002754:	40011000 	.word	0x40011000
 8002758:	40011400 	.word	0x40011400
 800275c:	40011800 	.word	0x40011800
 8002760:	40011c00 	.word	0x40011c00
 8002764:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_GPIO_Init+0x324>)
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	43db      	mvns	r3, r3
 8002770:	4913      	ldr	r1, [pc, #76]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002772:	4013      	ands	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
 800278e:	e006      	b.n	800279e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	43db      	mvns	r3, r3
 8002798:	4909      	ldr	r1, [pc, #36]	; (80027c0 <HAL_GPIO_Init+0x324>)
 800279a:	4013      	ands	r3, r2
 800279c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	3301      	adds	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f ae7e 	bne.w	80024b0 <HAL_GPIO_Init+0x14>
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	372c      	adds	r7, #44	; 0x2c
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40010400 	.word	0x40010400

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f806 	bl	8002824 <HAL_GPIO_EXTI_Callback>
  }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40010400 	.word	0x40010400

08002824 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e12b      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fa72 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800289c:	f001 fbca 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 80028a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a81      	ldr	r2, [pc, #516]	; (8002aac <HAL_I2C_Init+0x274>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d807      	bhi.n	80028bc <HAL_I2C_Init+0x84>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a80      	ldr	r2, [pc, #512]	; (8002ab0 <HAL_I2C_Init+0x278>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e006      	b.n	80028ca <HAL_I2C_Init+0x92>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a7d      	ldr	r2, [pc, #500]	; (8002ab4 <HAL_I2C_Init+0x27c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0e7      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a78      	ldr	r2, [pc, #480]	; (8002ab8 <HAL_I2C_Init+0x280>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <HAL_I2C_Init+0x274>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d802      	bhi.n	800290c <HAL_I2C_Init+0xd4>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3301      	adds	r3, #1
 800290a:	e009      	b.n	8002920 <HAL_I2C_Init+0xe8>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a69      	ldr	r2, [pc, #420]	; (8002abc <HAL_I2C_Init+0x284>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	3301      	adds	r3, #1
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	495c      	ldr	r1, [pc, #368]	; (8002aac <HAL_I2C_Init+0x274>)
 800293c:	428b      	cmp	r3, r1
 800293e:	d819      	bhi.n	8002974 <HAL_I2C_Init+0x13c>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e59      	subs	r1, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fbb1 f3f3 	udiv	r3, r1, r3
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002954:	400b      	ands	r3, r1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_I2C_Init+0x138>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1e59      	subs	r1, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fbb1 f3f3 	udiv	r3, r1, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	e051      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002970:	2304      	movs	r3, #4
 8002972:	e04f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <HAL_I2C_Init+0x168>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e012      	b.n	80029c6 <HAL_I2C_Init+0x18e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Init+0x196>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e022      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10e      	bne.n	80029f4 <HAL_I2C_Init+0x1bc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e58      	subs	r0, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	440b      	add	r3, r1
 80029e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	6809      	ldr	r1, [r1, #0]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6911      	ldr	r1, [r2, #16]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	000186a0 	.word	0x000186a0
 8002ab0:	001e847f 	.word	0x001e847f
 8002ab4:	003d08ff 	.word	0x003d08ff
 8002ab8:	431bde83 	.word	0x431bde83
 8002abc:	10624dd3 	.word	0x10624dd3

08002ac0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff fba6 	bl	8002224 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 80e0 	bne.w	8002ca8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2319      	movs	r3, #25
 8002aee:	2201      	movs	r2, #1
 8002af0:	4970      	ldr	r1, [pc, #448]	; (8002cb4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fc9e 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	e0d3      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x50>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e0cc      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d007      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2221      	movs	r2, #33	; 0x21
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2210      	movs	r2, #16
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	893a      	ldrh	r2, [r7, #8]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a50      	ldr	r2, [pc, #320]	; (8002cb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fb08 	bl	8003194 <I2C_MasterRequestWrite>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e08d      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ba4:	e066      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fd5c 	bl	8003668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d107      	bne.n	8002bce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06b      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d11b      	bne.n	8002c48 <HAL_I2C_Master_Transmit+0x188>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6a39      	ldr	r1, [r7, #32]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fd53 	bl	80036f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e01a      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d194      	bne.n	8002ba6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e000      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca8:	2302      	movs	r3, #2
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	00100002 	.word	0x00100002
 8002cb8:	ffff0000 	.word	0xffff0000

08002cbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff faa6 	bl	8002224 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	f040 824b 	bne.w	800317e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2319      	movs	r3, #25
 8002cee:	2201      	movs	r2, #1
 8002cf0:	497f      	ldr	r1, [pc, #508]	; (8002ef0 <HAL_I2C_Master_Receive+0x234>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fb9e 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e23e      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_I2C_Master_Receive+0x54>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e237      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d007      	beq.n	8002d36 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2222      	movs	r2, #34	; 0x22
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2210      	movs	r2, #16
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	893a      	ldrh	r2, [r7, #8]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a5f      	ldr	r2, [pc, #380]	; (8002ef4 <HAL_I2C_Master_Receive+0x238>)
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fa8a 	bl	8003298 <I2C_MasterRequestRead>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1f8      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e1cc      	b.n	8003158 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d11e      	bne.n	8002e04 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd6:	b672      	cpsid	i
}
 8002dd8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e00:	b662      	cpsie	i
}
 8002e02:	e035      	b.n	8002e70 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d11e      	bne.n	8002e4a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e1c:	b672      	cpsid	i
}
 8002e1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e46:	b662      	cpsie	i
}
 8002e48:	e012      	b.n	8002e70 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e70:	e172      	b.n	8003158 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	f200 811f 	bhi.w	80030ba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d123      	bne.n	8002ecc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fc7d 	bl	8003788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e173      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eca:	e145      	b.n	8003158 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d152      	bne.n	8002f7a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	2200      	movs	r2, #0
 8002edc:	4906      	ldr	r1, [pc, #24]	; (8002ef8 <HAL_I2C_Master_Receive+0x23c>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 faa8 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e148      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
 8002eee:	bf00      	nop
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000
 8002ef8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002efc:	b672      	cpsid	i
}
 8002efe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f42:	b662      	cpsie	i
}
 8002f44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f78:	e0ee      	b.n	8003158 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2200      	movs	r2, #0
 8002f82:	4981      	ldr	r1, [pc, #516]	; (8003188 <HAL_I2C_Master_Receive+0x4cc>)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fa55 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0f5      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa4:	b672      	cpsid	i
}
 8002fa6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_I2C_Master_Receive+0x4d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	08db      	lsrs	r3, r3, #3
 8002fe0:	4a6b      	ldr	r2, [pc, #428]	; (8003190 <HAL_I2C_Master_Receive+0x4d4>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a1a      	lsrs	r2, r3, #8
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d118      	bne.n	8003032 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003022:	b662      	cpsie	i
}
 8003024:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0a6      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d1d9      	bne.n	8002ff4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003082:	b662      	cpsie	i
}
 8003084:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b8:	e04e      	b.n	8003158 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fb62 	bl	8003788 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e058      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d124      	bne.n	8003158 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003124:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f ae88 	bne.w	8002e72 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	00010004 	.word	0x00010004
 800318c:	20000000 	.word	0x20000000
 8003190:	14f8b589 	.word	0x14f8b589

08003194 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	460b      	mov	r3, r1
 80031a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d006      	beq.n	80031be <I2C_MasterRequestWrite+0x2a>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d003      	beq.n	80031be <I2C_MasterRequestWrite+0x2a>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031bc:	d108      	bne.n	80031d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e00b      	b.n	80031e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	2b12      	cmp	r3, #18
 80031d6:	d107      	bne.n	80031e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f91d 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320e:	d103      	bne.n	8003218 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e035      	b.n	8003288 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003224:	d108      	bne.n	8003238 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	e01b      	b.n	8003270 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003238:	897b      	ldrh	r3, [r7, #10]
 800323a:	11db      	asrs	r3, r3, #7
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 0306 	and.w	r3, r3, #6
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f063 030f 	orn	r3, r3, #15
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	490e      	ldr	r1, [pc, #56]	; (8003290 <I2C_MasterRequestWrite+0xfc>)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f966 	bl	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e010      	b.n	8003288 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003266:	897b      	ldrh	r3, [r7, #10]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4907      	ldr	r1, [pc, #28]	; (8003294 <I2C_MasterRequestWrite+0x100>)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f956 	bl	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	00010008 	.word	0x00010008
 8003294:	00010002 	.word	0x00010002

08003298 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	460b      	mov	r3, r1
 80032a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d006      	beq.n	80032d2 <I2C_MasterRequestRead+0x3a>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d003      	beq.n	80032d2 <I2C_MasterRequestRead+0x3a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032d0:	d108      	bne.n	80032e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e00b      	b.n	80032fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	2b11      	cmp	r3, #17
 80032ea:	d107      	bne.n	80032fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f893 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	d103      	bne.n	800332c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e079      	b.n	8003424 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003338:	d108      	bne.n	800334c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	e05f      	b.n	800340c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800334c:	897b      	ldrh	r3, [r7, #10]
 800334e:	11db      	asrs	r3, r3, #7
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 0306 	and.w	r3, r3, #6
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f063 030f 	orn	r3, r3, #15
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4930      	ldr	r1, [pc, #192]	; (800342c <I2C_MasterRequestRead+0x194>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f8dc 	bl	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e054      	b.n	8003424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4929      	ldr	r1, [pc, #164]	; (8003430 <I2C_MasterRequestRead+0x198>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f8cc 	bl	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e044      	b.n	8003424 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f831 	bl	8003434 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e6:	d103      	bne.n	80033f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e017      	b.n	8003424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033f4:	897b      	ldrh	r3, [r7, #10]
 80033f6:	11db      	asrs	r3, r3, #7
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f003 0306 	and.w	r3, r3, #6
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f063 030e 	orn	r3, r3, #14
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <I2C_MasterRequestRead+0x198>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f888 	bl	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	00010008 	.word	0x00010008
 8003430:	00010002 	.word	0x00010002

08003434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	e048      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344c:	d044      	beq.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe fee9 	bl	8002224 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d139      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10d      	bne.n	800348a <I2C_WaitOnFlagUntilTimeout+0x56>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	e00c      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d116      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e023      	b.n	8003520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10d      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	e00c      	b.n	8003518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d093      	beq.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003536:	e071      	b.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003546:	d123      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e067      	b.n	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003596:	d041      	beq.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003598:	f7fe fe44 	bl	8002224 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d136      	bne.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10c      	bne.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf14      	ite	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	2300      	moveq	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	e00b      	b.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	43da      	mvns	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e021      	b.n	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10c      	bne.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e00b      	b.n	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f af6d 	bne.w	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003674:	e034      	b.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8e3 	bl	8003842 <I2C_IsAcknowledgeFailed>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368c:	d028      	beq.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fe fdc9 	bl	8002224 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11d      	bne.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d016      	beq.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d1c3      	bne.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003704:	e034      	b.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f89b 	bl	8003842 <I2C_IsAcknowledgeFailed>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e034      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800371c:	d028      	beq.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7fe fd81 	bl	8002224 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11d      	bne.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d016      	beq.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d1c3      	bne.n	8003706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003794:	e049      	b.n	800382a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d119      	bne.n	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0210 	mvn.w	r2, #16
 80037ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e030      	b.n	800383a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d8:	f7fe fd24 	bl	8002224 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d302      	bcc.n	80037ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11d      	bne.n	800382a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d016      	beq.n	800382a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e007      	b.n	800383a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d1ae      	bne.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003858:	d11b      	bne.n	8003892 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003862:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e272      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8087 	beq.w	80039ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038c0:	4b92      	ldr	r3, [pc, #584]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038cc:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d112      	bne.n	80038fe <HAL_RCC_OscConfig+0x5e>
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d10b      	bne.n	80038fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	4b89      	ldr	r3, [pc, #548]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d06c      	beq.n	80039cc <HAL_RCC_OscConfig+0x12c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d168      	bne.n	80039cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e24c      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x76>
 8003908:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a7f      	ldr	r2, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e02e      	b.n	8003974 <HAL_RCC_OscConfig+0xd4>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x98>
 800391e:	4b7b      	ldr	r3, [pc, #492]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a7a      	ldr	r2, [pc, #488]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b78      	ldr	r3, [pc, #480]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a77      	ldr	r2, [pc, #476]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xd4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0xbc>
 8003942:	4b72      	ldr	r3, [pc, #456]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a71      	ldr	r2, [pc, #452]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6e      	ldr	r2, [pc, #440]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xd4>
 800395c:	4b6b      	ldr	r3, [pc, #428]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6a      	ldr	r2, [pc, #424]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a67      	ldr	r2, [pc, #412]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fc52 	bl	8002224 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe fc4e 	bl	8002224 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e200      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b5d      	ldr	r3, [pc, #372]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xe4>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fc3e 	bl	8002224 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe fc3a 	bl	8002224 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1ec      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x10c>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d063      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039da:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039e6:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x18c>
 80039f2:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x176>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1c0      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4939      	ldr	r1, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e03a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCC_OscConfig+0x270>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7fe fbf3 	bl	8002224 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe fbef 	bl	8002224 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1a1      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4927      	ldr	r1, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <HAL_RCC_OscConfig+0x270>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fbd2 	bl	8002224 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fe fbce 	bl	8002224 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e180      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d03a      	beq.n	8003b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d019      	beq.n	8003aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abc:	f7fe fbb2 	bl	8002224 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fbae 	bl	8002224 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e160      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f000 face 	bl	8004084 <RCC_Delay>
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_OscConfig+0x274>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe fb98 	bl	8002224 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af6:	e00f      	b.n	8003b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe fb94 	bl	8002224 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d908      	bls.n	8003b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e146      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	42420000 	.word	0x42420000
 8003b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b92      	ldr	r3, [pc, #584]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e9      	bne.n	8003af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a6 	beq.w	8003c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b8b      	ldr	r3, [pc, #556]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4a87      	ldr	r2, [pc, #540]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	61d3      	str	r3, [r2, #28]
 8003b4e:	4b85      	ldr	r3, [pc, #532]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7e      	ldr	r2, [pc, #504]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fe fb55 	bl	8002224 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fe fb51 	bl	8002224 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e103      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b75      	ldr	r3, [pc, #468]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x312>
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e02d      	b.n	8003c0e <HAL_RCC_OscConfig+0x36e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x334>
 8003bba:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	6213      	str	r3, [r2, #32]
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4a66      	ldr	r2, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	6213      	str	r3, [r2, #32]
 8003bd2:	e01c      	b.n	8003c0e <HAL_RCC_OscConfig+0x36e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x356>
 8003bdc:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4a60      	ldr	r2, [pc, #384]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6213      	str	r3, [r2, #32]
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6213      	str	r3, [r2, #32]
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCC_OscConfig+0x36e>
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	4a5a      	ldr	r2, [pc, #360]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6213      	str	r3, [r2, #32]
 8003c02:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d015      	beq.n	8003c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7fe fb05 	bl	8002224 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fb01 	bl	8002224 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0b1      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ee      	beq.n	8003c1e <HAL_RCC_OscConfig+0x37e>
 8003c40:	e014      	b.n	8003c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe faef 	bl	8002224 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe faeb 	bl	8002224 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e09b      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ee      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8087 	beq.w	8003d96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d061      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d146      	bne.n	8003d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fabf 	bl	8002224 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fabb 	bl	8002224 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e06d      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbc:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d108      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	4921      	ldr	r1, [pc, #132]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a19      	ldr	r1, [r3, #32]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x4cc>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fe fa8f 	bl	8002224 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe fa8b 	bl	8002224 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e03d      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x46a>
 8003d28:	e035      	b.n	8003d96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe fa78 	bl	8002224 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe fa74 	bl	8002224 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e026      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x498>
 8003d56:	e01e      	b.n	8003d96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e019      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x500>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d106      	bne.n	8003d92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0d0      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 0207 	bic.w	r2, r3, #7
 8003dce:	4965      	ldr	r1, [pc, #404]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0b8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	494d      	ldr	r1, [pc, #308]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d040      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d115      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e073      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06b      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4936      	ldr	r1, [pc, #216]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fe f9c6 	bl	8002224 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fe f9c2 	bl	8002224 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e053      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d210      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 0207 	bic.w	r2, r3, #7
 8003eda:	4922      	ldr	r1, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e032      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f32:	f000 f821 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490a      	ldr	r1, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1cc>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1d0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe f924 	bl	80021a0 <HAL_InitTick>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08007bfc 	.word	0x08007bfc
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x36>
 8003fa6:	e027      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_RCC_GetSysClockFreq+0x98>)
 8003faa:	613b      	str	r3, [r7, #16]
      break;
 8003fac:	e027      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d010      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0c5b      	lsrs	r3, r3, #17
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fd2:	5cd3      	ldrb	r3, [r2, r3]
 8003fd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fda:	fb03 f202 	mul.w	r2, r3, r2
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e004      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0c      	ldr	r2, [pc, #48]	; (800401c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	613b      	str	r3, [r7, #16]
      break;
 8003ff6:	e002      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ffa:	613b      	str	r3, [r7, #16]
      break;
 8003ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffe:	693b      	ldr	r3, [r7, #16]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	007a1200 	.word	0x007a1200
 8004014:	08007c14 	.word	0x08007c14
 8004018:	08007c24 	.word	0x08007c24
 800401c:	003d0900 	.word	0x003d0900

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b02      	ldr	r3, [pc, #8]	; (8004030 <HAL_RCC_GetHCLKFreq+0x10>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	20000000 	.word	0x20000000

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004038:	f7ff fff2 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4903      	ldr	r1, [pc, #12]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	08007c0c 	.word	0x08007c0c

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004060:	f7ff ffde 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0adb      	lsrs	r3, r3, #11
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	08007c0c 	.word	0x08007c0c

08004084 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <RCC_Delay+0x34>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <RCC_Delay+0x38>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0a5b      	lsrs	r3, r3, #9
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040a0:	bf00      	nop
  }
  while (Delay --);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	60fa      	str	r2, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f9      	bne.n	80040a0 <RCC_Delay+0x1c>
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	20000000 	.word	0x20000000
 80040bc:	10624dd3 	.word	0x10624dd3

080040c0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_SRAM_Init+0x1c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040da:	d101      	bne.n	80040e0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e038      	b.n	8004152 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7fd fef7 	bl	8001ee8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3308      	adds	r3, #8
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fa4d 	bl	80045a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	461a      	mov	r2, r3
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	f000 faaf 	bl	8004678 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6858      	ldr	r0, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	f000 fad4 	bl	80046d4 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6892      	ldr	r2, [r2, #8]
 8004134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	6892      	ldr	r2, [r2, #8]
 8004140:	f041 0101 	orr.w	r1, r1, #1
 8004144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e042      	b.n	80041f2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fd fe21 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2224      	movs	r2, #36	; 0x24
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f972 	bl	8004488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b08a      	sub	sp, #40	; 0x28
 80041fe:	af02      	add	r7, sp, #8
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b20      	cmp	r3, #32
 8004218:	d175      	bne.n	8004306 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_UART_Transmit+0x2c>
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e06e      	b.n	8004308 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2221      	movs	r2, #33	; 0x21
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004238:	f7fd fff4 	bl	8002224 <HAL_GetTick>
 800423c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	88fa      	ldrh	r2, [r7, #6]
 8004242:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	d108      	bne.n	8004266 <HAL_UART_Transmit+0x6c>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e003      	b.n	800426e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800426e:	e02e      	b.n	80042ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2200      	movs	r2, #0
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f848 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e03a      	b.n	8004308 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	3302      	adds	r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e007      	b.n	80042c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1cb      	bne.n	8004270 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f814 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e006      	b.n	8004308 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e000      	b.n	8004308 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004306:	2302      	movs	r3, #2
  }
}
 8004308:	4618      	mov	r0, r3
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	e03b      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004328:	d037      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fd ff7b 	bl	8002224 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <UART_WaitOnFlagUntilTimeout+0x30>
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e03a      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d023      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d020      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d01d      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d116      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f81d 	bl	80043c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2208      	movs	r2, #8
 800438c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e00f      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d0b4      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b095      	sub	sp, #84	; 0x54
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ea:	643a      	str	r2, [r7, #64]	; 0x40
 80043ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	61fb      	str	r3, [r7, #28]
   return(result);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	2b01      	cmp	r3, #1
 8004438:	d119      	bne.n	800446e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	60bb      	str	r3, [r7, #8]
   return(result);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f023 0310 	bic.w	r3, r3, #16
 8004450:	647b      	str	r3, [r7, #68]	; 0x44
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445a:	61ba      	str	r2, [r7, #24]
 800445c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6979      	ldr	r1, [r7, #20]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	613b      	str	r3, [r7, #16]
   return(result);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e5      	bne.n	800443a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800447c:	bf00      	nop
 800447e:	3754      	adds	r7, #84	; 0x54
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
	...

08004488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044c2:	f023 030c 	bic.w	r3, r3, #12
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2c      	ldr	r2, [pc, #176]	; (800459c <UART_SetConfig+0x114>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7ff fdb4 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	e002      	b.n	80044fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7ff fd9c 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 80044fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009a      	lsls	r2, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <UART_SetConfig+0x118>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	0119      	lsls	r1, r3, #4
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009a      	lsls	r2, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	fbb2 f2f3 	udiv	r2, r2, r3
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <UART_SetConfig+0x118>)
 8004536:	fba3 0302 	umull	r0, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2064      	movs	r0, #100	; 0x64
 800453e:	fb00 f303 	mul.w	r3, r0, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	3332      	adds	r3, #50	; 0x32
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <UART_SetConfig+0x118>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004554:	4419      	add	r1, r3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f2f3 	udiv	r2, r2, r3
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <UART_SetConfig+0x118>)
 800456e:	fba3 0302 	umull	r0, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2064      	movs	r0, #100	; 0x64
 8004576:	fb00 f303 	mul.w	r3, r0, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <UART_SetConfig+0x118>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	440a      	add	r2, r1
 8004592:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40013800 	.word	0x40013800
 80045a0:	51eb851f 	.word	0x51eb851f

080045a4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	f023 0101 	bic.w	r1, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d102      	bne.n	80045d4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e001      	b.n	80045d8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80045e4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80045ea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80045f0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80045f6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80045fc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004602:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004608:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800460e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004614:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <FSMC_NORSRAM_Init+0xd0>)
 8004634:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800463c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004644:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	43db      	mvns	r3, r3
 8004654:	ea02 0103 	and.w	r1, r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4319      	orrs	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	0008fb7f 	.word	0x0008fb7f

08004678 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 800468e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8004696:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 800469e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 80046a8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	3b02      	subs	r3, #2
 80046b0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 80046b2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 80046be:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
	...

080046d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e8:	d11d      	bne.n	8004726 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	6811      	ldr	r1, [r2, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	6852      	ldr	r2, [r2, #4]
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	4311      	orrs	r1, r2
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	0212      	lsls	r2, r2, #8
 8004708:	4311      	orrs	r1, r2
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	6992      	ldr	r2, [r2, #24]
 800470e:	4311      	orrs	r1, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	68d2      	ldr	r2, [r2, #12]
 8004714:	0412      	lsls	r2, r2, #16
 8004716:	430a      	orrs	r2, r1
 8004718:	ea43 0102 	orr.w	r1, r3, r2
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004724:	e005      	b.n	8004732 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800472e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	cff00000 	.word	0xcff00000

08004744 <__errno>:
 8004744:	4b01      	ldr	r3, [pc, #4]	; (800474c <__errno+0x8>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000000c 	.word	0x2000000c

08004750 <__libc_init_array>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	2600      	movs	r6, #0
 8004754:	4d0c      	ldr	r5, [pc, #48]	; (8004788 <__libc_init_array+0x38>)
 8004756:	4c0d      	ldr	r4, [pc, #52]	; (800478c <__libc_init_array+0x3c>)
 8004758:	1b64      	subs	r4, r4, r5
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	42a6      	cmp	r6, r4
 800475e:	d109      	bne.n	8004774 <__libc_init_array+0x24>
 8004760:	f002 ff1e 	bl	80075a0 <_init>
 8004764:	2600      	movs	r6, #0
 8004766:	4d0a      	ldr	r5, [pc, #40]	; (8004790 <__libc_init_array+0x40>)
 8004768:	4c0a      	ldr	r4, [pc, #40]	; (8004794 <__libc_init_array+0x44>)
 800476a:	1b64      	subs	r4, r4, r5
 800476c:	10a4      	asrs	r4, r4, #2
 800476e:	42a6      	cmp	r6, r4
 8004770:	d105      	bne.n	800477e <__libc_init_array+0x2e>
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	f855 3b04 	ldr.w	r3, [r5], #4
 8004778:	4798      	blx	r3
 800477a:	3601      	adds	r6, #1
 800477c:	e7ee      	b.n	800475c <__libc_init_array+0xc>
 800477e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004782:	4798      	blx	r3
 8004784:	3601      	adds	r6, #1
 8004786:	e7f2      	b.n	800476e <__libc_init_array+0x1e>
 8004788:	08008004 	.word	0x08008004
 800478c:	08008004 	.word	0x08008004
 8004790:	08008004 	.word	0x08008004
 8004794:	08008008 	.word	0x08008008

08004798 <malloc>:
 8004798:	4b02      	ldr	r3, [pc, #8]	; (80047a4 <malloc+0xc>)
 800479a:	4601      	mov	r1, r0
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	f000 b889 	b.w	80048b4 <_malloc_r>
 80047a2:	bf00      	nop
 80047a4:	2000000c 	.word	0x2000000c

080047a8 <free>:
 80047a8:	4b02      	ldr	r3, [pc, #8]	; (80047b4 <free+0xc>)
 80047aa:	4601      	mov	r1, r0
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	f000 b819 	b.w	80047e4 <_free_r>
 80047b2:	bf00      	nop
 80047b4:	2000000c 	.word	0x2000000c

080047b8 <memcpy>:
 80047b8:	440a      	add	r2, r1
 80047ba:	4291      	cmp	r1, r2
 80047bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80047c0:	d100      	bne.n	80047c4 <memcpy+0xc>
 80047c2:	4770      	bx	lr
 80047c4:	b510      	push	{r4, lr}
 80047c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ca:	4291      	cmp	r1, r2
 80047cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047d0:	d1f9      	bne.n	80047c6 <memcpy+0xe>
 80047d2:	bd10      	pop	{r4, pc}

080047d4 <memset>:
 80047d4:	4603      	mov	r3, r0
 80047d6:	4402      	add	r2, r0
 80047d8:	4293      	cmp	r3, r2
 80047da:	d100      	bne.n	80047de <memset+0xa>
 80047dc:	4770      	bx	lr
 80047de:	f803 1b01 	strb.w	r1, [r3], #1
 80047e2:	e7f9      	b.n	80047d8 <memset+0x4>

080047e4 <_free_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4605      	mov	r5, r0
 80047e8:	2900      	cmp	r1, #0
 80047ea:	d040      	beq.n	800486e <_free_r+0x8a>
 80047ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f0:	1f0c      	subs	r4, r1, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bfb8      	it	lt
 80047f6:	18e4      	addlt	r4, r4, r3
 80047f8:	f001 fd00 	bl	80061fc <__malloc_lock>
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <_free_r+0x8c>)
 80047fe:	6813      	ldr	r3, [r2, #0]
 8004800:	b933      	cbnz	r3, 8004810 <_free_r+0x2c>
 8004802:	6063      	str	r3, [r4, #4]
 8004804:	6014      	str	r4, [r2, #0]
 8004806:	4628      	mov	r0, r5
 8004808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800480c:	f001 bcfc 	b.w	8006208 <__malloc_unlock>
 8004810:	42a3      	cmp	r3, r4
 8004812:	d908      	bls.n	8004826 <_free_r+0x42>
 8004814:	6820      	ldr	r0, [r4, #0]
 8004816:	1821      	adds	r1, r4, r0
 8004818:	428b      	cmp	r3, r1
 800481a:	bf01      	itttt	eq
 800481c:	6819      	ldreq	r1, [r3, #0]
 800481e:	685b      	ldreq	r3, [r3, #4]
 8004820:	1809      	addeq	r1, r1, r0
 8004822:	6021      	streq	r1, [r4, #0]
 8004824:	e7ed      	b.n	8004802 <_free_r+0x1e>
 8004826:	461a      	mov	r2, r3
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b10b      	cbz	r3, 8004830 <_free_r+0x4c>
 800482c:	42a3      	cmp	r3, r4
 800482e:	d9fa      	bls.n	8004826 <_free_r+0x42>
 8004830:	6811      	ldr	r1, [r2, #0]
 8004832:	1850      	adds	r0, r2, r1
 8004834:	42a0      	cmp	r0, r4
 8004836:	d10b      	bne.n	8004850 <_free_r+0x6c>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	4401      	add	r1, r0
 800483c:	1850      	adds	r0, r2, r1
 800483e:	4283      	cmp	r3, r0
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	d1e0      	bne.n	8004806 <_free_r+0x22>
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4401      	add	r1, r0
 800484a:	6011      	str	r1, [r2, #0]
 800484c:	6053      	str	r3, [r2, #4]
 800484e:	e7da      	b.n	8004806 <_free_r+0x22>
 8004850:	d902      	bls.n	8004858 <_free_r+0x74>
 8004852:	230c      	movs	r3, #12
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	e7d6      	b.n	8004806 <_free_r+0x22>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	1821      	adds	r1, r4, r0
 800485c:	428b      	cmp	r3, r1
 800485e:	bf01      	itttt	eq
 8004860:	6819      	ldreq	r1, [r3, #0]
 8004862:	685b      	ldreq	r3, [r3, #4]
 8004864:	1809      	addeq	r1, r1, r0
 8004866:	6021      	streq	r1, [r4, #0]
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	6054      	str	r4, [r2, #4]
 800486c:	e7cb      	b.n	8004806 <_free_r+0x22>
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000410 	.word	0x20000410

08004874 <sbrk_aligned>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4e0e      	ldr	r6, [pc, #56]	; (80048b0 <sbrk_aligned+0x3c>)
 8004878:	460c      	mov	r4, r1
 800487a:	6831      	ldr	r1, [r6, #0]
 800487c:	4605      	mov	r5, r0
 800487e:	b911      	cbnz	r1, 8004886 <sbrk_aligned+0x12>
 8004880:	f000 fd04 	bl	800528c <_sbrk_r>
 8004884:	6030      	str	r0, [r6, #0]
 8004886:	4621      	mov	r1, r4
 8004888:	4628      	mov	r0, r5
 800488a:	f000 fcff 	bl	800528c <_sbrk_r>
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	d00a      	beq.n	80048a8 <sbrk_aligned+0x34>
 8004892:	1cc4      	adds	r4, r0, #3
 8004894:	f024 0403 	bic.w	r4, r4, #3
 8004898:	42a0      	cmp	r0, r4
 800489a:	d007      	beq.n	80048ac <sbrk_aligned+0x38>
 800489c:	1a21      	subs	r1, r4, r0
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 fcf4 	bl	800528c <_sbrk_r>
 80048a4:	3001      	adds	r0, #1
 80048a6:	d101      	bne.n	80048ac <sbrk_aligned+0x38>
 80048a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80048ac:	4620      	mov	r0, r4
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	20000414 	.word	0x20000414

080048b4 <_malloc_r>:
 80048b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b8:	1ccd      	adds	r5, r1, #3
 80048ba:	f025 0503 	bic.w	r5, r5, #3
 80048be:	3508      	adds	r5, #8
 80048c0:	2d0c      	cmp	r5, #12
 80048c2:	bf38      	it	cc
 80048c4:	250c      	movcc	r5, #12
 80048c6:	2d00      	cmp	r5, #0
 80048c8:	4607      	mov	r7, r0
 80048ca:	db01      	blt.n	80048d0 <_malloc_r+0x1c>
 80048cc:	42a9      	cmp	r1, r5
 80048ce:	d905      	bls.n	80048dc <_malloc_r+0x28>
 80048d0:	230c      	movs	r3, #12
 80048d2:	2600      	movs	r6, #0
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4630      	mov	r0, r6
 80048d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048dc:	4e2e      	ldr	r6, [pc, #184]	; (8004998 <_malloc_r+0xe4>)
 80048de:	f001 fc8d 	bl	80061fc <__malloc_lock>
 80048e2:	6833      	ldr	r3, [r6, #0]
 80048e4:	461c      	mov	r4, r3
 80048e6:	bb34      	cbnz	r4, 8004936 <_malloc_r+0x82>
 80048e8:	4629      	mov	r1, r5
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7ff ffc2 	bl	8004874 <sbrk_aligned>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	4604      	mov	r4, r0
 80048f4:	d14d      	bne.n	8004992 <_malloc_r+0xde>
 80048f6:	6834      	ldr	r4, [r6, #0]
 80048f8:	4626      	mov	r6, r4
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	d140      	bne.n	8004980 <_malloc_r+0xcc>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	4631      	mov	r1, r6
 8004902:	4638      	mov	r0, r7
 8004904:	eb04 0803 	add.w	r8, r4, r3
 8004908:	f000 fcc0 	bl	800528c <_sbrk_r>
 800490c:	4580      	cmp	r8, r0
 800490e:	d13a      	bne.n	8004986 <_malloc_r+0xd2>
 8004910:	6821      	ldr	r1, [r4, #0]
 8004912:	3503      	adds	r5, #3
 8004914:	1a6d      	subs	r5, r5, r1
 8004916:	f025 0503 	bic.w	r5, r5, #3
 800491a:	3508      	adds	r5, #8
 800491c:	2d0c      	cmp	r5, #12
 800491e:	bf38      	it	cc
 8004920:	250c      	movcc	r5, #12
 8004922:	4638      	mov	r0, r7
 8004924:	4629      	mov	r1, r5
 8004926:	f7ff ffa5 	bl	8004874 <sbrk_aligned>
 800492a:	3001      	adds	r0, #1
 800492c:	d02b      	beq.n	8004986 <_malloc_r+0xd2>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	442b      	add	r3, r5
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	e00e      	b.n	8004954 <_malloc_r+0xa0>
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	1b52      	subs	r2, r2, r5
 800493a:	d41e      	bmi.n	800497a <_malloc_r+0xc6>
 800493c:	2a0b      	cmp	r2, #11
 800493e:	d916      	bls.n	800496e <_malloc_r+0xba>
 8004940:	1961      	adds	r1, r4, r5
 8004942:	42a3      	cmp	r3, r4
 8004944:	6025      	str	r5, [r4, #0]
 8004946:	bf18      	it	ne
 8004948:	6059      	strne	r1, [r3, #4]
 800494a:	6863      	ldr	r3, [r4, #4]
 800494c:	bf08      	it	eq
 800494e:	6031      	streq	r1, [r6, #0]
 8004950:	5162      	str	r2, [r4, r5]
 8004952:	604b      	str	r3, [r1, #4]
 8004954:	4638      	mov	r0, r7
 8004956:	f104 060b 	add.w	r6, r4, #11
 800495a:	f001 fc55 	bl	8006208 <__malloc_unlock>
 800495e:	f026 0607 	bic.w	r6, r6, #7
 8004962:	1d23      	adds	r3, r4, #4
 8004964:	1af2      	subs	r2, r6, r3
 8004966:	d0b6      	beq.n	80048d6 <_malloc_r+0x22>
 8004968:	1b9b      	subs	r3, r3, r6
 800496a:	50a3      	str	r3, [r4, r2]
 800496c:	e7b3      	b.n	80048d6 <_malloc_r+0x22>
 800496e:	6862      	ldr	r2, [r4, #4]
 8004970:	42a3      	cmp	r3, r4
 8004972:	bf0c      	ite	eq
 8004974:	6032      	streq	r2, [r6, #0]
 8004976:	605a      	strne	r2, [r3, #4]
 8004978:	e7ec      	b.n	8004954 <_malloc_r+0xa0>
 800497a:	4623      	mov	r3, r4
 800497c:	6864      	ldr	r4, [r4, #4]
 800497e:	e7b2      	b.n	80048e6 <_malloc_r+0x32>
 8004980:	4634      	mov	r4, r6
 8004982:	6876      	ldr	r6, [r6, #4]
 8004984:	e7b9      	b.n	80048fa <_malloc_r+0x46>
 8004986:	230c      	movs	r3, #12
 8004988:	4638      	mov	r0, r7
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	f001 fc3c 	bl	8006208 <__malloc_unlock>
 8004990:	e7a1      	b.n	80048d6 <_malloc_r+0x22>
 8004992:	6025      	str	r5, [r4, #0]
 8004994:	e7de      	b.n	8004954 <_malloc_r+0xa0>
 8004996:	bf00      	nop
 8004998:	20000410 	.word	0x20000410

0800499c <__cvt>:
 800499c:	2b00      	cmp	r3, #0
 800499e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a2:	461f      	mov	r7, r3
 80049a4:	bfbb      	ittet	lt
 80049a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049aa:	461f      	movlt	r7, r3
 80049ac:	2300      	movge	r3, #0
 80049ae:	232d      	movlt	r3, #45	; 0x2d
 80049b0:	b088      	sub	sp, #32
 80049b2:	4614      	mov	r4, r2
 80049b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049b8:	7013      	strb	r3, [r2, #0]
 80049ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80049c0:	f023 0820 	bic.w	r8, r3, #32
 80049c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049c8:	d005      	beq.n	80049d6 <__cvt+0x3a>
 80049ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049ce:	d100      	bne.n	80049d2 <__cvt+0x36>
 80049d0:	3501      	adds	r5, #1
 80049d2:	2302      	movs	r3, #2
 80049d4:	e000      	b.n	80049d8 <__cvt+0x3c>
 80049d6:	2303      	movs	r3, #3
 80049d8:	aa07      	add	r2, sp, #28
 80049da:	9204      	str	r2, [sp, #16]
 80049dc:	aa06      	add	r2, sp, #24
 80049de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049e2:	e9cd 3500 	strd	r3, r5, [sp]
 80049e6:	4622      	mov	r2, r4
 80049e8:	463b      	mov	r3, r7
 80049ea:	f000 fd0d 	bl	8005408 <_dtoa_r>
 80049ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049f2:	4606      	mov	r6, r0
 80049f4:	d102      	bne.n	80049fc <__cvt+0x60>
 80049f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049f8:	07db      	lsls	r3, r3, #31
 80049fa:	d522      	bpl.n	8004a42 <__cvt+0xa6>
 80049fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a00:	eb06 0905 	add.w	r9, r6, r5
 8004a04:	d110      	bne.n	8004a28 <__cvt+0x8c>
 8004a06:	7833      	ldrb	r3, [r6, #0]
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d10a      	bne.n	8004a22 <__cvt+0x86>
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4620      	mov	r0, r4
 8004a12:	4639      	mov	r1, r7
 8004a14:	f7fc f834 	bl	8000a80 <__aeabi_dcmpeq>
 8004a18:	b918      	cbnz	r0, 8004a22 <__cvt+0x86>
 8004a1a:	f1c5 0501 	rsb	r5, r5, #1
 8004a1e:	f8ca 5000 	str.w	r5, [sl]
 8004a22:	f8da 3000 	ldr.w	r3, [sl]
 8004a26:	4499      	add	r9, r3
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f7fc f826 	bl	8000a80 <__aeabi_dcmpeq>
 8004a34:	b108      	cbz	r0, 8004a3a <__cvt+0x9e>
 8004a36:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a3a:	2230      	movs	r2, #48	; 0x30
 8004a3c:	9b07      	ldr	r3, [sp, #28]
 8004a3e:	454b      	cmp	r3, r9
 8004a40:	d307      	bcc.n	8004a52 <__cvt+0xb6>
 8004a42:	4630      	mov	r0, r6
 8004a44:	9b07      	ldr	r3, [sp, #28]
 8004a46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a48:	1b9b      	subs	r3, r3, r6
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	b008      	add	sp, #32
 8004a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	9107      	str	r1, [sp, #28]
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	e7f0      	b.n	8004a3c <__cvt+0xa0>

08004a5a <__exponent>:
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	f803 2b02 	strb.w	r2, [r3], #2
 8004a64:	bfb6      	itet	lt
 8004a66:	222d      	movlt	r2, #45	; 0x2d
 8004a68:	222b      	movge	r2, #43	; 0x2b
 8004a6a:	4249      	neglt	r1, r1
 8004a6c:	2909      	cmp	r1, #9
 8004a6e:	7042      	strb	r2, [r0, #1]
 8004a70:	dd2b      	ble.n	8004aca <__exponent+0x70>
 8004a72:	f10d 0407 	add.w	r4, sp, #7
 8004a76:	46a4      	mov	ip, r4
 8004a78:	270a      	movs	r7, #10
 8004a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a7e:	460a      	mov	r2, r1
 8004a80:	46a6      	mov	lr, r4
 8004a82:	fb07 1516 	mls	r5, r7, r6, r1
 8004a86:	2a63      	cmp	r2, #99	; 0x63
 8004a88:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004a92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a96:	dcf0      	bgt.n	8004a7a <__exponent+0x20>
 8004a98:	3130      	adds	r1, #48	; 0x30
 8004a9a:	f1ae 0502 	sub.w	r5, lr, #2
 8004a9e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	1c44      	adds	r4, r0, #1
 8004aa6:	4561      	cmp	r1, ip
 8004aa8:	d30a      	bcc.n	8004ac0 <__exponent+0x66>
 8004aaa:	f10d 0209 	add.w	r2, sp, #9
 8004aae:	eba2 020e 	sub.w	r2, r2, lr
 8004ab2:	4565      	cmp	r5, ip
 8004ab4:	bf88      	it	hi
 8004ab6:	2200      	movhi	r2, #0
 8004ab8:	4413      	add	r3, r2
 8004aba:	1a18      	subs	r0, r3, r0
 8004abc:	b003      	add	sp, #12
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ac4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ac8:	e7ed      	b.n	8004aa6 <__exponent+0x4c>
 8004aca:	2330      	movs	r3, #48	; 0x30
 8004acc:	3130      	adds	r1, #48	; 0x30
 8004ace:	7083      	strb	r3, [r0, #2]
 8004ad0:	70c1      	strb	r1, [r0, #3]
 8004ad2:	1d03      	adds	r3, r0, #4
 8004ad4:	e7f1      	b.n	8004aba <__exponent+0x60>
	...

08004ad8 <_printf_float>:
 8004ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004adc:	b091      	sub	sp, #68	; 0x44
 8004ade:	460c      	mov	r4, r1
 8004ae0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ae4:	4616      	mov	r6, r2
 8004ae6:	461f      	mov	r7, r3
 8004ae8:	4605      	mov	r5, r0
 8004aea:	f001 fb71 	bl	80061d0 <_localeconv_r>
 8004aee:	6803      	ldr	r3, [r0, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	9309      	str	r3, [sp, #36]	; 0x24
 8004af4:	f7fb fb98 	bl	8000228 <strlen>
 8004af8:	2300      	movs	r3, #0
 8004afa:	930e      	str	r3, [sp, #56]	; 0x38
 8004afc:	f8d8 3000 	ldr.w	r3, [r8]
 8004b00:	900a      	str	r0, [sp, #40]	; 0x28
 8004b02:	3307      	adds	r3, #7
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	f103 0208 	add.w	r2, r3, #8
 8004b0c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b10:	f8d4 b000 	ldr.w	fp, [r4]
 8004b14:	f8c8 2000 	str.w	r2, [r8]
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b20:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004b24:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b2e:	4640      	mov	r0, r8
 8004b30:	4b9c      	ldr	r3, [pc, #624]	; (8004da4 <_printf_float+0x2cc>)
 8004b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b34:	f7fb ffd6 	bl	8000ae4 <__aeabi_dcmpun>
 8004b38:	bb70      	cbnz	r0, 8004b98 <_printf_float+0xc0>
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4b98      	ldr	r3, [pc, #608]	; (8004da4 <_printf_float+0x2cc>)
 8004b42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b44:	f7fb ffb0 	bl	8000aa8 <__aeabi_dcmple>
 8004b48:	bb30      	cbnz	r0, 8004b98 <_printf_float+0xc0>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4640      	mov	r0, r8
 8004b50:	4651      	mov	r1, sl
 8004b52:	f7fb ff9f 	bl	8000a94 <__aeabi_dcmplt>
 8004b56:	b110      	cbz	r0, 8004b5e <_printf_float+0x86>
 8004b58:	232d      	movs	r3, #45	; 0x2d
 8004b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5e:	4b92      	ldr	r3, [pc, #584]	; (8004da8 <_printf_float+0x2d0>)
 8004b60:	4892      	ldr	r0, [pc, #584]	; (8004dac <_printf_float+0x2d4>)
 8004b62:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b66:	bf94      	ite	ls
 8004b68:	4698      	movls	r8, r3
 8004b6a:	4680      	movhi	r8, r0
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	f04f 0a00 	mov.w	sl, #0
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	f02b 0304 	bic.w	r3, fp, #4
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	4633      	mov	r3, r6
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4628      	mov	r0, r5
 8004b80:	9700      	str	r7, [sp, #0]
 8004b82:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b84:	f000 f9d4 	bl	8004f30 <_printf_common>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f040 8090 	bne.w	8004cae <_printf_float+0x1d6>
 8004b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b92:	b011      	add	sp, #68	; 0x44
 8004b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b98:	4642      	mov	r2, r8
 8004b9a:	4653      	mov	r3, sl
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	f7fb ffa0 	bl	8000ae4 <__aeabi_dcmpun>
 8004ba4:	b148      	cbz	r0, 8004bba <_printf_float+0xe2>
 8004ba6:	f1ba 0f00 	cmp.w	sl, #0
 8004baa:	bfb8      	it	lt
 8004bac:	232d      	movlt	r3, #45	; 0x2d
 8004bae:	4880      	ldr	r0, [pc, #512]	; (8004db0 <_printf_float+0x2d8>)
 8004bb0:	bfb8      	it	lt
 8004bb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bb6:	4b7f      	ldr	r3, [pc, #508]	; (8004db4 <_printf_float+0x2dc>)
 8004bb8:	e7d3      	b.n	8004b62 <_printf_float+0x8a>
 8004bba:	6863      	ldr	r3, [r4, #4]
 8004bbc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	d142      	bne.n	8004c4a <_printf_float+0x172>
 8004bc4:	2306      	movs	r3, #6
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	9206      	str	r2, [sp, #24]
 8004bcc:	aa0e      	add	r2, sp, #56	; 0x38
 8004bce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004bd2:	aa0d      	add	r2, sp, #52	; 0x34
 8004bd4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004bd8:	9203      	str	r2, [sp, #12]
 8004bda:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004bde:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	4642      	mov	r2, r8
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4628      	mov	r0, r5
 8004bec:	4653      	mov	r3, sl
 8004bee:	910b      	str	r1, [sp, #44]	; 0x2c
 8004bf0:	f7ff fed4 	bl	800499c <__cvt>
 8004bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bf6:	4680      	mov	r8, r0
 8004bf8:	2947      	cmp	r1, #71	; 0x47
 8004bfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bfc:	d108      	bne.n	8004c10 <_printf_float+0x138>
 8004bfe:	1cc8      	adds	r0, r1, #3
 8004c00:	db02      	blt.n	8004c08 <_printf_float+0x130>
 8004c02:	6863      	ldr	r3, [r4, #4]
 8004c04:	4299      	cmp	r1, r3
 8004c06:	dd40      	ble.n	8004c8a <_printf_float+0x1b2>
 8004c08:	f1a9 0902 	sub.w	r9, r9, #2
 8004c0c:	fa5f f989 	uxtb.w	r9, r9
 8004c10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c14:	d81f      	bhi.n	8004c56 <_printf_float+0x17e>
 8004c16:	464a      	mov	r2, r9
 8004c18:	3901      	subs	r1, #1
 8004c1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c1e:	910d      	str	r1, [sp, #52]	; 0x34
 8004c20:	f7ff ff1b 	bl	8004a5a <__exponent>
 8004c24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c26:	4682      	mov	sl, r0
 8004c28:	1813      	adds	r3, r2, r0
 8004c2a:	2a01      	cmp	r2, #1
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	dc02      	bgt.n	8004c36 <_printf_float+0x15e>
 8004c30:	6822      	ldr	r2, [r4, #0]
 8004c32:	07d2      	lsls	r2, r2, #31
 8004c34:	d501      	bpl.n	8004c3a <_printf_float+0x162>
 8004c36:	3301      	adds	r3, #1
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d09b      	beq.n	8004b7a <_printf_float+0xa2>
 8004c42:	232d      	movs	r3, #45	; 0x2d
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c48:	e797      	b.n	8004b7a <_printf_float+0xa2>
 8004c4a:	2947      	cmp	r1, #71	; 0x47
 8004c4c:	d1bc      	bne.n	8004bc8 <_printf_float+0xf0>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ba      	bne.n	8004bc8 <_printf_float+0xf0>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e7b7      	b.n	8004bc6 <_printf_float+0xee>
 8004c56:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c5a:	d118      	bne.n	8004c8e <_printf_float+0x1b6>
 8004c5c:	2900      	cmp	r1, #0
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	dd0b      	ble.n	8004c7a <_printf_float+0x1a2>
 8004c62:	6121      	str	r1, [r4, #16]
 8004c64:	b913      	cbnz	r3, 8004c6c <_printf_float+0x194>
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	07d0      	lsls	r0, r2, #31
 8004c6a:	d502      	bpl.n	8004c72 <_printf_float+0x19a>
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	440b      	add	r3, r1
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	f04f 0a00 	mov.w	sl, #0
 8004c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c78:	e7df      	b.n	8004c3a <_printf_float+0x162>
 8004c7a:	b913      	cbnz	r3, 8004c82 <_printf_float+0x1aa>
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	07d2      	lsls	r2, r2, #31
 8004c80:	d501      	bpl.n	8004c86 <_printf_float+0x1ae>
 8004c82:	3302      	adds	r3, #2
 8004c84:	e7f4      	b.n	8004c70 <_printf_float+0x198>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e7f2      	b.n	8004c70 <_printf_float+0x198>
 8004c8a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c90:	4299      	cmp	r1, r3
 8004c92:	db05      	blt.n	8004ca0 <_printf_float+0x1c8>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	6121      	str	r1, [r4, #16]
 8004c98:	07d8      	lsls	r0, r3, #31
 8004c9a:	d5ea      	bpl.n	8004c72 <_printf_float+0x19a>
 8004c9c:	1c4b      	adds	r3, r1, #1
 8004c9e:	e7e7      	b.n	8004c70 <_printf_float+0x198>
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	bfcc      	ite	gt
 8004ca4:	2201      	movgt	r2, #1
 8004ca6:	f1c1 0202 	rsble	r2, r1, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	e7e0      	b.n	8004c70 <_printf_float+0x198>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	055a      	lsls	r2, r3, #21
 8004cb2:	d407      	bmi.n	8004cc4 <_printf_float+0x1ec>
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	4642      	mov	r2, r8
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d12b      	bne.n	8004d1a <_printf_float+0x242>
 8004cc2:	e764      	b.n	8004b8e <_printf_float+0xb6>
 8004cc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cc8:	f240 80dd 	bls.w	8004e86 <_printf_float+0x3ae>
 8004ccc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f7fb fed4 	bl	8000a80 <__aeabi_dcmpeq>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d033      	beq.n	8004d44 <_printf_float+0x26c>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	4a35      	ldr	r2, [pc, #212]	; (8004db8 <_printf_float+0x2e0>)
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af51 	beq.w	8004b8e <_printf_float+0xb6>
 8004cec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	db02      	blt.n	8004cfa <_printf_float+0x222>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	07d8      	lsls	r0, r3, #31
 8004cf8:	d50f      	bpl.n	8004d1a <_printf_float+0x242>
 8004cfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f af42 	beq.w	8004b8e <_printf_float+0xb6>
 8004d0a:	f04f 0800 	mov.w	r8, #0
 8004d0e:	f104 091a 	add.w	r9, r4, #26
 8004d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4543      	cmp	r3, r8
 8004d18:	dc09      	bgt.n	8004d2e <_printf_float+0x256>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	079b      	lsls	r3, r3, #30
 8004d1e:	f100 8102 	bmi.w	8004f26 <_printf_float+0x44e>
 8004d22:	68e0      	ldr	r0, [r4, #12]
 8004d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d26:	4298      	cmp	r0, r3
 8004d28:	bfb8      	it	lt
 8004d2a:	4618      	movlt	r0, r3
 8004d2c:	e731      	b.n	8004b92 <_printf_float+0xba>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	464a      	mov	r2, r9
 8004d32:	4631      	mov	r1, r6
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b8      	blx	r7
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f43f af28 	beq.w	8004b8e <_printf_float+0xb6>
 8004d3e:	f108 0801 	add.w	r8, r8, #1
 8004d42:	e7e6      	b.n	8004d12 <_printf_float+0x23a>
 8004d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dc38      	bgt.n	8004dbc <_printf_float+0x2e4>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	4628      	mov	r0, r5
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <_printf_float+0x2e0>)
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f af1a 	beq.w	8004b8e <_printf_float+0xb6>
 8004d5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d102      	bne.n	8004d68 <_printf_float+0x290>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	07d9      	lsls	r1, r3, #31
 8004d66:	d5d8      	bpl.n	8004d1a <_printf_float+0x242>
 8004d68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f af0b 	beq.w	8004b8e <_printf_float+0xb6>
 8004d78:	f04f 0900 	mov.w	r9, #0
 8004d7c:	f104 0a1a 	add.w	sl, r4, #26
 8004d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d82:	425b      	negs	r3, r3
 8004d84:	454b      	cmp	r3, r9
 8004d86:	dc01      	bgt.n	8004d8c <_printf_float+0x2b4>
 8004d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d8a:	e794      	b.n	8004cb6 <_printf_float+0x1de>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4652      	mov	r2, sl
 8004d90:	4631      	mov	r1, r6
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f aef9 	beq.w	8004b8e <_printf_float+0xb6>
 8004d9c:	f109 0901 	add.w	r9, r9, #1
 8004da0:	e7ee      	b.n	8004d80 <_printf_float+0x2a8>
 8004da2:	bf00      	nop
 8004da4:	7fefffff 	.word	0x7fefffff
 8004da8:	08007c2c 	.word	0x08007c2c
 8004dac:	08007c30 	.word	0x08007c30
 8004db0:	08007c38 	.word	0x08007c38
 8004db4:	08007c34 	.word	0x08007c34
 8004db8:	08007c3c 	.word	0x08007c3c
 8004dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	bfa8      	it	ge
 8004dc4:	461a      	movge	r2, r3
 8004dc6:	2a00      	cmp	r2, #0
 8004dc8:	4691      	mov	r9, r2
 8004dca:	dc37      	bgt.n	8004e3c <_printf_float+0x364>
 8004dcc:	f04f 0b00 	mov.w	fp, #0
 8004dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dd4:	f104 021a 	add.w	r2, r4, #26
 8004dd8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ddc:	ebaa 0309 	sub.w	r3, sl, r9
 8004de0:	455b      	cmp	r3, fp
 8004de2:	dc33      	bgt.n	8004e4c <_printf_float+0x374>
 8004de4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004de8:	429a      	cmp	r2, r3
 8004dea:	db3b      	blt.n	8004e64 <_printf_float+0x38c>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	07da      	lsls	r2, r3, #31
 8004df0:	d438      	bmi.n	8004e64 <_printf_float+0x38c>
 8004df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004df6:	eba3 020a 	sub.w	r2, r3, sl
 8004dfa:	eba3 0901 	sub.w	r9, r3, r1
 8004dfe:	4591      	cmp	r9, r2
 8004e00:	bfa8      	it	ge
 8004e02:	4691      	movge	r9, r2
 8004e04:	f1b9 0f00 	cmp.w	r9, #0
 8004e08:	dc34      	bgt.n	8004e74 <_printf_float+0x39c>
 8004e0a:	f04f 0800 	mov.w	r8, #0
 8004e0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e12:	f104 0a1a 	add.w	sl, r4, #26
 8004e16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	eba3 0309 	sub.w	r3, r3, r9
 8004e20:	4543      	cmp	r3, r8
 8004e22:	f77f af7a 	ble.w	8004d1a <_printf_float+0x242>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4652      	mov	r2, sl
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f aeac 	beq.w	8004b8e <_printf_float+0xb6>
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	e7ec      	b.n	8004e16 <_printf_float+0x33e>
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4642      	mov	r2, r8
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	d1c0      	bne.n	8004dcc <_printf_float+0x2f4>
 8004e4a:	e6a0      	b.n	8004b8e <_printf_float+0xb6>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e54:	47b8      	blx	r7
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f ae99 	beq.w	8004b8e <_printf_float+0xb6>
 8004e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e5e:	f10b 0b01 	add.w	fp, fp, #1
 8004e62:	e7b9      	b.n	8004dd8 <_printf_float+0x300>
 8004e64:	4631      	mov	r1, r6
 8004e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d1bf      	bne.n	8004df2 <_printf_float+0x31a>
 8004e72:	e68c      	b.n	8004b8e <_printf_float+0xb6>
 8004e74:	464b      	mov	r3, r9
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	eb08 020a 	add.w	r2, r8, sl
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	d1c2      	bne.n	8004e0a <_printf_float+0x332>
 8004e84:	e683      	b.n	8004b8e <_printf_float+0xb6>
 8004e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e88:	2a01      	cmp	r2, #1
 8004e8a:	dc01      	bgt.n	8004e90 <_printf_float+0x3b8>
 8004e8c:	07db      	lsls	r3, r3, #31
 8004e8e:	d537      	bpl.n	8004f00 <_printf_float+0x428>
 8004e90:	2301      	movs	r3, #1
 8004e92:	4642      	mov	r2, r8
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b8      	blx	r7
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	f43f ae77 	beq.w	8004b8e <_printf_float+0xb6>
 8004ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f43f ae6f 	beq.w	8004b8e <_printf_float+0xb6>
 8004eb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f7fb fde2 	bl	8000a80 <__aeabi_dcmpeq>
 8004ebc:	b9d8      	cbnz	r0, 8004ef6 <_printf_float+0x41e>
 8004ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec0:	f108 0201 	add.w	r2, r8, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d10e      	bne.n	8004eee <_printf_float+0x416>
 8004ed0:	e65d      	b.n	8004b8e <_printf_float+0xb6>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	464a      	mov	r2, r9
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b8      	blx	r7
 8004edc:	3001      	adds	r0, #1
 8004ede:	f43f ae56 	beq.w	8004b8e <_printf_float+0xb6>
 8004ee2:	f108 0801 	add.w	r8, r8, #1
 8004ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4543      	cmp	r3, r8
 8004eec:	dcf1      	bgt.n	8004ed2 <_printf_float+0x3fa>
 8004eee:	4653      	mov	r3, sl
 8004ef0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ef4:	e6e0      	b.n	8004cb8 <_printf_float+0x1e0>
 8004ef6:	f04f 0800 	mov.w	r8, #0
 8004efa:	f104 091a 	add.w	r9, r4, #26
 8004efe:	e7f2      	b.n	8004ee6 <_printf_float+0x40e>
 8004f00:	2301      	movs	r3, #1
 8004f02:	4642      	mov	r2, r8
 8004f04:	e7df      	b.n	8004ec6 <_printf_float+0x3ee>
 8004f06:	2301      	movs	r3, #1
 8004f08:	464a      	mov	r2, r9
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae3c 	beq.w	8004b8e <_printf_float+0xb6>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f1e:	1a5b      	subs	r3, r3, r1
 8004f20:	4543      	cmp	r3, r8
 8004f22:	dcf0      	bgt.n	8004f06 <_printf_float+0x42e>
 8004f24:	e6fd      	b.n	8004d22 <_printf_float+0x24a>
 8004f26:	f04f 0800 	mov.w	r8, #0
 8004f2a:	f104 0919 	add.w	r9, r4, #25
 8004f2e:	e7f4      	b.n	8004f1a <_printf_float+0x442>

08004f30 <_printf_common>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	4616      	mov	r6, r2
 8004f36:	4699      	mov	r9, r3
 8004f38:	688a      	ldr	r2, [r1, #8]
 8004f3a:	690b      	ldr	r3, [r1, #16]
 8004f3c:	4607      	mov	r7, r0
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	bfb8      	it	lt
 8004f42:	4613      	movlt	r3, r2
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f50:	b10a      	cbz	r2, 8004f56 <_printf_common+0x26>
 8004f52:	3301      	adds	r3, #1
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	0699      	lsls	r1, r3, #26
 8004f5a:	bf42      	ittt	mi
 8004f5c:	6833      	ldrmi	r3, [r6, #0]
 8004f5e:	3302      	addmi	r3, #2
 8004f60:	6033      	strmi	r3, [r6, #0]
 8004f62:	6825      	ldr	r5, [r4, #0]
 8004f64:	f015 0506 	ands.w	r5, r5, #6
 8004f68:	d106      	bne.n	8004f78 <_printf_common+0x48>
 8004f6a:	f104 0a19 	add.w	sl, r4, #25
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	6832      	ldr	r2, [r6, #0]
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dc28      	bgt.n	8004fca <_printf_common+0x9a>
 8004f78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f7c:	1e13      	subs	r3, r2, #0
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	bf18      	it	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	0692      	lsls	r2, r2, #26
 8004f86:	d42d      	bmi.n	8004fe4 <_printf_common+0xb4>
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f90:	47c0      	blx	r8
 8004f92:	3001      	adds	r0, #1
 8004f94:	d020      	beq.n	8004fd8 <_printf_common+0xa8>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	68e5      	ldr	r5, [r4, #12]
 8004f9a:	f003 0306 	and.w	r3, r3, #6
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	bf18      	it	ne
 8004fa2:	2500      	movne	r5, #0
 8004fa4:	6832      	ldr	r2, [r6, #0]
 8004fa6:	f04f 0600 	mov.w	r6, #0
 8004faa:	68a3      	ldr	r3, [r4, #8]
 8004fac:	bf08      	it	eq
 8004fae:	1aad      	subeq	r5, r5, r2
 8004fb0:	6922      	ldr	r2, [r4, #16]
 8004fb2:	bf08      	it	eq
 8004fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	bfc4      	itt	gt
 8004fbc:	1a9b      	subgt	r3, r3, r2
 8004fbe:	18ed      	addgt	r5, r5, r3
 8004fc0:	341a      	adds	r4, #26
 8004fc2:	42b5      	cmp	r5, r6
 8004fc4:	d11a      	bne.n	8004ffc <_printf_common+0xcc>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e008      	b.n	8004fdc <_printf_common+0xac>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4652      	mov	r2, sl
 8004fce:	4649      	mov	r1, r9
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	47c0      	blx	r8
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d103      	bne.n	8004fe0 <_printf_common+0xb0>
 8004fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe0:	3501      	adds	r5, #1
 8004fe2:	e7c4      	b.n	8004f6e <_printf_common+0x3e>
 8004fe4:	2030      	movs	r0, #48	; 0x30
 8004fe6:	18e1      	adds	r1, r4, r3
 8004fe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ff2:	4422      	add	r2, r4
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ffa:	e7c5      	b.n	8004f88 <_printf_common+0x58>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4622      	mov	r2, r4
 8005000:	4649      	mov	r1, r9
 8005002:	4638      	mov	r0, r7
 8005004:	47c0      	blx	r8
 8005006:	3001      	adds	r0, #1
 8005008:	d0e6      	beq.n	8004fd8 <_printf_common+0xa8>
 800500a:	3601      	adds	r6, #1
 800500c:	e7d9      	b.n	8004fc2 <_printf_common+0x92>
	...

08005010 <_printf_i>:
 8005010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005014:	7e0f      	ldrb	r7, [r1, #24]
 8005016:	4691      	mov	r9, r2
 8005018:	2f78      	cmp	r7, #120	; 0x78
 800501a:	4680      	mov	r8, r0
 800501c:	460c      	mov	r4, r1
 800501e:	469a      	mov	sl, r3
 8005020:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005026:	d807      	bhi.n	8005038 <_printf_i+0x28>
 8005028:	2f62      	cmp	r7, #98	; 0x62
 800502a:	d80a      	bhi.n	8005042 <_printf_i+0x32>
 800502c:	2f00      	cmp	r7, #0
 800502e:	f000 80d9 	beq.w	80051e4 <_printf_i+0x1d4>
 8005032:	2f58      	cmp	r7, #88	; 0x58
 8005034:	f000 80a4 	beq.w	8005180 <_printf_i+0x170>
 8005038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800503c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005040:	e03a      	b.n	80050b8 <_printf_i+0xa8>
 8005042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005046:	2b15      	cmp	r3, #21
 8005048:	d8f6      	bhi.n	8005038 <_printf_i+0x28>
 800504a:	a101      	add	r1, pc, #4	; (adr r1, 8005050 <_printf_i+0x40>)
 800504c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005050:	080050a9 	.word	0x080050a9
 8005054:	080050bd 	.word	0x080050bd
 8005058:	08005039 	.word	0x08005039
 800505c:	08005039 	.word	0x08005039
 8005060:	08005039 	.word	0x08005039
 8005064:	08005039 	.word	0x08005039
 8005068:	080050bd 	.word	0x080050bd
 800506c:	08005039 	.word	0x08005039
 8005070:	08005039 	.word	0x08005039
 8005074:	08005039 	.word	0x08005039
 8005078:	08005039 	.word	0x08005039
 800507c:	080051cb 	.word	0x080051cb
 8005080:	080050ed 	.word	0x080050ed
 8005084:	080051ad 	.word	0x080051ad
 8005088:	08005039 	.word	0x08005039
 800508c:	08005039 	.word	0x08005039
 8005090:	080051ed 	.word	0x080051ed
 8005094:	08005039 	.word	0x08005039
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005039 	.word	0x08005039
 80050a0:	08005039 	.word	0x08005039
 80050a4:	080051b5 	.word	0x080051b5
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	602a      	str	r2, [r5, #0]
 80050b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0a4      	b.n	8005206 <_printf_i+0x1f6>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	6829      	ldr	r1, [r5, #0]
 80050c0:	0606      	lsls	r6, r0, #24
 80050c2:	f101 0304 	add.w	r3, r1, #4
 80050c6:	d50a      	bpl.n	80050de <_printf_i+0xce>
 80050c8:	680e      	ldr	r6, [r1, #0]
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	da03      	bge.n	80050d8 <_printf_i+0xc8>
 80050d0:	232d      	movs	r3, #45	; 0x2d
 80050d2:	4276      	negs	r6, r6
 80050d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d8:	230a      	movs	r3, #10
 80050da:	485e      	ldr	r0, [pc, #376]	; (8005254 <_printf_i+0x244>)
 80050dc:	e019      	b.n	8005112 <_printf_i+0x102>
 80050de:	680e      	ldr	r6, [r1, #0]
 80050e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	bf18      	it	ne
 80050e8:	b236      	sxthne	r6, r6
 80050ea:	e7ef      	b.n	80050cc <_printf_i+0xbc>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	1d19      	adds	r1, r3, #4
 80050f2:	6029      	str	r1, [r5, #0]
 80050f4:	0601      	lsls	r1, r0, #24
 80050f6:	d501      	bpl.n	80050fc <_printf_i+0xec>
 80050f8:	681e      	ldr	r6, [r3, #0]
 80050fa:	e002      	b.n	8005102 <_printf_i+0xf2>
 80050fc:	0646      	lsls	r6, r0, #25
 80050fe:	d5fb      	bpl.n	80050f8 <_printf_i+0xe8>
 8005100:	881e      	ldrh	r6, [r3, #0]
 8005102:	2f6f      	cmp	r7, #111	; 0x6f
 8005104:	bf0c      	ite	eq
 8005106:	2308      	moveq	r3, #8
 8005108:	230a      	movne	r3, #10
 800510a:	4852      	ldr	r0, [pc, #328]	; (8005254 <_printf_i+0x244>)
 800510c:	2100      	movs	r1, #0
 800510e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005112:	6865      	ldr	r5, [r4, #4]
 8005114:	2d00      	cmp	r5, #0
 8005116:	bfa8      	it	ge
 8005118:	6821      	ldrge	r1, [r4, #0]
 800511a:	60a5      	str	r5, [r4, #8]
 800511c:	bfa4      	itt	ge
 800511e:	f021 0104 	bicge.w	r1, r1, #4
 8005122:	6021      	strge	r1, [r4, #0]
 8005124:	b90e      	cbnz	r6, 800512a <_printf_i+0x11a>
 8005126:	2d00      	cmp	r5, #0
 8005128:	d04d      	beq.n	80051c6 <_printf_i+0x1b6>
 800512a:	4615      	mov	r5, r2
 800512c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005130:	fb03 6711 	mls	r7, r3, r1, r6
 8005134:	5dc7      	ldrb	r7, [r0, r7]
 8005136:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800513a:	4637      	mov	r7, r6
 800513c:	42bb      	cmp	r3, r7
 800513e:	460e      	mov	r6, r1
 8005140:	d9f4      	bls.n	800512c <_printf_i+0x11c>
 8005142:	2b08      	cmp	r3, #8
 8005144:	d10b      	bne.n	800515e <_printf_i+0x14e>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	07de      	lsls	r6, r3, #31
 800514a:	d508      	bpl.n	800515e <_printf_i+0x14e>
 800514c:	6923      	ldr	r3, [r4, #16]
 800514e:	6861      	ldr	r1, [r4, #4]
 8005150:	4299      	cmp	r1, r3
 8005152:	bfde      	ittt	le
 8005154:	2330      	movle	r3, #48	; 0x30
 8005156:	f805 3c01 	strble.w	r3, [r5, #-1]
 800515a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800515e:	1b52      	subs	r2, r2, r5
 8005160:	6122      	str	r2, [r4, #16]
 8005162:	464b      	mov	r3, r9
 8005164:	4621      	mov	r1, r4
 8005166:	4640      	mov	r0, r8
 8005168:	f8cd a000 	str.w	sl, [sp]
 800516c:	aa03      	add	r2, sp, #12
 800516e:	f7ff fedf 	bl	8004f30 <_printf_common>
 8005172:	3001      	adds	r0, #1
 8005174:	d14c      	bne.n	8005210 <_printf_i+0x200>
 8005176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800517a:	b004      	add	sp, #16
 800517c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005180:	4834      	ldr	r0, [pc, #208]	; (8005254 <_printf_i+0x244>)
 8005182:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005186:	6829      	ldr	r1, [r5, #0]
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	f851 6b04 	ldr.w	r6, [r1], #4
 800518e:	6029      	str	r1, [r5, #0]
 8005190:	061d      	lsls	r5, r3, #24
 8005192:	d514      	bpl.n	80051be <_printf_i+0x1ae>
 8005194:	07df      	lsls	r7, r3, #31
 8005196:	bf44      	itt	mi
 8005198:	f043 0320 	orrmi.w	r3, r3, #32
 800519c:	6023      	strmi	r3, [r4, #0]
 800519e:	b91e      	cbnz	r6, 80051a8 <_printf_i+0x198>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	f023 0320 	bic.w	r3, r3, #32
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	2310      	movs	r3, #16
 80051aa:	e7af      	b.n	800510c <_printf_i+0xfc>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	f043 0320 	orr.w	r3, r3, #32
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	2378      	movs	r3, #120	; 0x78
 80051b6:	4828      	ldr	r0, [pc, #160]	; (8005258 <_printf_i+0x248>)
 80051b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051bc:	e7e3      	b.n	8005186 <_printf_i+0x176>
 80051be:	0659      	lsls	r1, r3, #25
 80051c0:	bf48      	it	mi
 80051c2:	b2b6      	uxthmi	r6, r6
 80051c4:	e7e6      	b.n	8005194 <_printf_i+0x184>
 80051c6:	4615      	mov	r5, r2
 80051c8:	e7bb      	b.n	8005142 <_printf_i+0x132>
 80051ca:	682b      	ldr	r3, [r5, #0]
 80051cc:	6826      	ldr	r6, [r4, #0]
 80051ce:	1d18      	adds	r0, r3, #4
 80051d0:	6961      	ldr	r1, [r4, #20]
 80051d2:	6028      	str	r0, [r5, #0]
 80051d4:	0635      	lsls	r5, r6, #24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	d501      	bpl.n	80051de <_printf_i+0x1ce>
 80051da:	6019      	str	r1, [r3, #0]
 80051dc:	e002      	b.n	80051e4 <_printf_i+0x1d4>
 80051de:	0670      	lsls	r0, r6, #25
 80051e0:	d5fb      	bpl.n	80051da <_printf_i+0x1ca>
 80051e2:	8019      	strh	r1, [r3, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	4615      	mov	r5, r2
 80051e8:	6123      	str	r3, [r4, #16]
 80051ea:	e7ba      	b.n	8005162 <_printf_i+0x152>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	2100      	movs	r1, #0
 80051f0:	1d1a      	adds	r2, r3, #4
 80051f2:	602a      	str	r2, [r5, #0]
 80051f4:	681d      	ldr	r5, [r3, #0]
 80051f6:	6862      	ldr	r2, [r4, #4]
 80051f8:	4628      	mov	r0, r5
 80051fa:	f000 fff0 	bl	80061de <memchr>
 80051fe:	b108      	cbz	r0, 8005204 <_printf_i+0x1f4>
 8005200:	1b40      	subs	r0, r0, r5
 8005202:	6060      	str	r0, [r4, #4]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	2300      	movs	r3, #0
 800520a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520e:	e7a8      	b.n	8005162 <_printf_i+0x152>
 8005210:	462a      	mov	r2, r5
 8005212:	4649      	mov	r1, r9
 8005214:	4640      	mov	r0, r8
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	47d0      	blx	sl
 800521a:	3001      	adds	r0, #1
 800521c:	d0ab      	beq.n	8005176 <_printf_i+0x166>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	079b      	lsls	r3, r3, #30
 8005222:	d413      	bmi.n	800524c <_printf_i+0x23c>
 8005224:	68e0      	ldr	r0, [r4, #12]
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	4298      	cmp	r0, r3
 800522a:	bfb8      	it	lt
 800522c:	4618      	movlt	r0, r3
 800522e:	e7a4      	b.n	800517a <_printf_i+0x16a>
 8005230:	2301      	movs	r3, #1
 8005232:	4632      	mov	r2, r6
 8005234:	4649      	mov	r1, r9
 8005236:	4640      	mov	r0, r8
 8005238:	47d0      	blx	sl
 800523a:	3001      	adds	r0, #1
 800523c:	d09b      	beq.n	8005176 <_printf_i+0x166>
 800523e:	3501      	adds	r5, #1
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	9903      	ldr	r1, [sp, #12]
 8005244:	1a5b      	subs	r3, r3, r1
 8005246:	42ab      	cmp	r3, r5
 8005248:	dcf2      	bgt.n	8005230 <_printf_i+0x220>
 800524a:	e7eb      	b.n	8005224 <_printf_i+0x214>
 800524c:	2500      	movs	r5, #0
 800524e:	f104 0619 	add.w	r6, r4, #25
 8005252:	e7f5      	b.n	8005240 <_printf_i+0x230>
 8005254:	08007c3e 	.word	0x08007c3e
 8005258:	08007c4f 	.word	0x08007c4f

0800525c <iprintf>:
 800525c:	b40f      	push	{r0, r1, r2, r3}
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <iprintf+0x2c>)
 8005260:	b513      	push	{r0, r1, r4, lr}
 8005262:	681c      	ldr	r4, [r3, #0]
 8005264:	b124      	cbz	r4, 8005270 <iprintf+0x14>
 8005266:	69a3      	ldr	r3, [r4, #24]
 8005268:	b913      	cbnz	r3, 8005270 <iprintf+0x14>
 800526a:	4620      	mov	r0, r4
 800526c:	f000 ff12 	bl	8006094 <__sinit>
 8005270:	ab05      	add	r3, sp, #20
 8005272:	4620      	mov	r0, r4
 8005274:	9a04      	ldr	r2, [sp, #16]
 8005276:	68a1      	ldr	r1, [r4, #8]
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	f001 fce5 	bl	8006c48 <_vfiprintf_r>
 800527e:	b002      	add	sp, #8
 8005280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005284:	b004      	add	sp, #16
 8005286:	4770      	bx	lr
 8005288:	2000000c 	.word	0x2000000c

0800528c <_sbrk_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	2300      	movs	r3, #0
 8005290:	4d05      	ldr	r5, [pc, #20]	; (80052a8 <_sbrk_r+0x1c>)
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fc ff0a 	bl	80020b0 <_sbrk>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_sbrk_r+0x1a>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_sbrk_r+0x1a>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	2000041c 	.word	0x2000041c

080052ac <siprintf>:
 80052ac:	b40e      	push	{r1, r2, r3}
 80052ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052b2:	b500      	push	{lr}
 80052b4:	b09c      	sub	sp, #112	; 0x70
 80052b6:	ab1d      	add	r3, sp, #116	; 0x74
 80052b8:	9002      	str	r0, [sp, #8]
 80052ba:	9006      	str	r0, [sp, #24]
 80052bc:	9107      	str	r1, [sp, #28]
 80052be:	9104      	str	r1, [sp, #16]
 80052c0:	4808      	ldr	r0, [pc, #32]	; (80052e4 <siprintf+0x38>)
 80052c2:	4909      	ldr	r1, [pc, #36]	; (80052e8 <siprintf+0x3c>)
 80052c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052c8:	9105      	str	r1, [sp, #20]
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	a902      	add	r1, sp, #8
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	f001 fb92 	bl	80069f8 <_svfiprintf_r>
 80052d4:	2200      	movs	r2, #0
 80052d6:	9b02      	ldr	r3, [sp, #8]
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	b01c      	add	sp, #112	; 0x70
 80052dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e0:	b003      	add	sp, #12
 80052e2:	4770      	bx	lr
 80052e4:	2000000c 	.word	0x2000000c
 80052e8:	ffff0208 	.word	0xffff0208

080052ec <quorem>:
 80052ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	6903      	ldr	r3, [r0, #16]
 80052f2:	690c      	ldr	r4, [r1, #16]
 80052f4:	4607      	mov	r7, r0
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	f2c0 8082 	blt.w	8005400 <quorem+0x114>
 80052fc:	3c01      	subs	r4, #1
 80052fe:	f100 0514 	add.w	r5, r0, #20
 8005302:	f101 0814 	add.w	r8, r1, #20
 8005306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005314:	3301      	adds	r3, #1
 8005316:	429a      	cmp	r2, r3
 8005318:	fbb2 f6f3 	udiv	r6, r2, r3
 800531c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005320:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005324:	d331      	bcc.n	800538a <quorem+0x9e>
 8005326:	f04f 0e00 	mov.w	lr, #0
 800532a:	4640      	mov	r0, r8
 800532c:	46ac      	mov	ip, r5
 800532e:	46f2      	mov	sl, lr
 8005330:	f850 2b04 	ldr.w	r2, [r0], #4
 8005334:	b293      	uxth	r3, r2
 8005336:	fb06 e303 	mla	r3, r6, r3, lr
 800533a:	0c12      	lsrs	r2, r2, #16
 800533c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005340:	b29b      	uxth	r3, r3
 8005342:	fb06 e202 	mla	r2, r6, r2, lr
 8005346:	ebaa 0303 	sub.w	r3, sl, r3
 800534a:	f8dc a000 	ldr.w	sl, [ip]
 800534e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005352:	fa1f fa8a 	uxth.w	sl, sl
 8005356:	4453      	add	r3, sl
 8005358:	f8dc a000 	ldr.w	sl, [ip]
 800535c:	b292      	uxth	r2, r2
 800535e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005362:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005366:	b29b      	uxth	r3, r3
 8005368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800536c:	4581      	cmp	r9, r0
 800536e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005372:	f84c 3b04 	str.w	r3, [ip], #4
 8005376:	d2db      	bcs.n	8005330 <quorem+0x44>
 8005378:	f855 300b 	ldr.w	r3, [r5, fp]
 800537c:	b92b      	cbnz	r3, 800538a <quorem+0x9e>
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	3b04      	subs	r3, #4
 8005382:	429d      	cmp	r5, r3
 8005384:	461a      	mov	r2, r3
 8005386:	d32f      	bcc.n	80053e8 <quorem+0xfc>
 8005388:	613c      	str	r4, [r7, #16]
 800538a:	4638      	mov	r0, r7
 800538c:	f001 f9c0 	bl	8006710 <__mcmp>
 8005390:	2800      	cmp	r0, #0
 8005392:	db25      	blt.n	80053e0 <quorem+0xf4>
 8005394:	4628      	mov	r0, r5
 8005396:	f04f 0c00 	mov.w	ip, #0
 800539a:	3601      	adds	r6, #1
 800539c:	f858 1b04 	ldr.w	r1, [r8], #4
 80053a0:	f8d0 e000 	ldr.w	lr, [r0]
 80053a4:	b28b      	uxth	r3, r1
 80053a6:	ebac 0303 	sub.w	r3, ip, r3
 80053aa:	fa1f f28e 	uxth.w	r2, lr
 80053ae:	4413      	add	r3, r2
 80053b0:	0c0a      	lsrs	r2, r1, #16
 80053b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053c0:	45c1      	cmp	r9, r8
 80053c2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053c6:	f840 3b04 	str.w	r3, [r0], #4
 80053ca:	d2e7      	bcs.n	800539c <quorem+0xb0>
 80053cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053d4:	b922      	cbnz	r2, 80053e0 <quorem+0xf4>
 80053d6:	3b04      	subs	r3, #4
 80053d8:	429d      	cmp	r5, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	d30a      	bcc.n	80053f4 <quorem+0x108>
 80053de:	613c      	str	r4, [r7, #16]
 80053e0:	4630      	mov	r0, r6
 80053e2:	b003      	add	sp, #12
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	3b04      	subs	r3, #4
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	d1cb      	bne.n	8005388 <quorem+0x9c>
 80053f0:	3c01      	subs	r4, #1
 80053f2:	e7c6      	b.n	8005382 <quorem+0x96>
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	3b04      	subs	r3, #4
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d1f0      	bne.n	80053de <quorem+0xf2>
 80053fc:	3c01      	subs	r4, #1
 80053fe:	e7eb      	b.n	80053d8 <quorem+0xec>
 8005400:	2000      	movs	r0, #0
 8005402:	e7ee      	b.n	80053e2 <quorem+0xf6>
 8005404:	0000      	movs	r0, r0
	...

08005408 <_dtoa_r>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	4616      	mov	r6, r2
 800540e:	461f      	mov	r7, r3
 8005410:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005412:	b099      	sub	sp, #100	; 0x64
 8005414:	4605      	mov	r5, r0
 8005416:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800541a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800541e:	b974      	cbnz	r4, 800543e <_dtoa_r+0x36>
 8005420:	2010      	movs	r0, #16
 8005422:	f7ff f9b9 	bl	8004798 <malloc>
 8005426:	4602      	mov	r2, r0
 8005428:	6268      	str	r0, [r5, #36]	; 0x24
 800542a:	b920      	cbnz	r0, 8005436 <_dtoa_r+0x2e>
 800542c:	21ea      	movs	r1, #234	; 0xea
 800542e:	4ba8      	ldr	r3, [pc, #672]	; (80056d0 <_dtoa_r+0x2c8>)
 8005430:	48a8      	ldr	r0, [pc, #672]	; (80056d4 <_dtoa_r+0x2cc>)
 8005432:	f001 fe4f 	bl	80070d4 <__assert_func>
 8005436:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800543a:	6004      	str	r4, [r0, #0]
 800543c:	60c4      	str	r4, [r0, #12]
 800543e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005440:	6819      	ldr	r1, [r3, #0]
 8005442:	b151      	cbz	r1, 800545a <_dtoa_r+0x52>
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	2301      	movs	r3, #1
 8005448:	4093      	lsls	r3, r2
 800544a:	604a      	str	r2, [r1, #4]
 800544c:	608b      	str	r3, [r1, #8]
 800544e:	4628      	mov	r0, r5
 8005450:	f000 ff20 	bl	8006294 <_Bfree>
 8005454:	2200      	movs	r2, #0
 8005456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	1e3b      	subs	r3, r7, #0
 800545c:	bfaf      	iteee	ge
 800545e:	2300      	movge	r3, #0
 8005460:	2201      	movlt	r2, #1
 8005462:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005466:	9305      	strlt	r3, [sp, #20]
 8005468:	bfa8      	it	ge
 800546a:	f8c8 3000 	strge.w	r3, [r8]
 800546e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005472:	4b99      	ldr	r3, [pc, #612]	; (80056d8 <_dtoa_r+0x2d0>)
 8005474:	bfb8      	it	lt
 8005476:	f8c8 2000 	strlt.w	r2, [r8]
 800547a:	ea33 0309 	bics.w	r3, r3, r9
 800547e:	d119      	bne.n	80054b4 <_dtoa_r+0xac>
 8005480:	f242 730f 	movw	r3, #9999	; 0x270f
 8005484:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800548c:	4333      	orrs	r3, r6
 800548e:	f000 857f 	beq.w	8005f90 <_dtoa_r+0xb88>
 8005492:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005494:	b953      	cbnz	r3, 80054ac <_dtoa_r+0xa4>
 8005496:	4b91      	ldr	r3, [pc, #580]	; (80056dc <_dtoa_r+0x2d4>)
 8005498:	e022      	b.n	80054e0 <_dtoa_r+0xd8>
 800549a:	4b91      	ldr	r3, [pc, #580]	; (80056e0 <_dtoa_r+0x2d8>)
 800549c:	9303      	str	r3, [sp, #12]
 800549e:	3308      	adds	r3, #8
 80054a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	9803      	ldr	r0, [sp, #12]
 80054a6:	b019      	add	sp, #100	; 0x64
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	4b8b      	ldr	r3, [pc, #556]	; (80056dc <_dtoa_r+0x2d4>)
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	3303      	adds	r3, #3
 80054b2:	e7f5      	b.n	80054a0 <_dtoa_r+0x98>
 80054b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80054bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c0:	2200      	movs	r2, #0
 80054c2:	2300      	movs	r3, #0
 80054c4:	f7fb fadc 	bl	8000a80 <__aeabi_dcmpeq>
 80054c8:	4680      	mov	r8, r0
 80054ca:	b158      	cbz	r0, 80054e4 <_dtoa_r+0xdc>
 80054cc:	2301      	movs	r3, #1
 80054ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8558 	beq.w	8005f8a <_dtoa_r+0xb82>
 80054da:	4882      	ldr	r0, [pc, #520]	; (80056e4 <_dtoa_r+0x2dc>)
 80054dc:	6018      	str	r0, [r3, #0]
 80054de:	1e43      	subs	r3, r0, #1
 80054e0:	9303      	str	r3, [sp, #12]
 80054e2:	e7df      	b.n	80054a4 <_dtoa_r+0x9c>
 80054e4:	ab16      	add	r3, sp, #88	; 0x58
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	ab17      	add	r3, sp, #92	; 0x5c
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4628      	mov	r0, r5
 80054ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054f2:	f001 f9b5 	bl	8006860 <__d2b>
 80054f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80054fa:	4683      	mov	fp, r0
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	d07f      	beq.n	8005600 <_dtoa_r+0x1f8>
 8005500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005506:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800550a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800550e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005512:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005516:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800551a:	2200      	movs	r2, #0
 800551c:	4b72      	ldr	r3, [pc, #456]	; (80056e8 <_dtoa_r+0x2e0>)
 800551e:	f7fa fe8f 	bl	8000240 <__aeabi_dsub>
 8005522:	a365      	add	r3, pc, #404	; (adr r3, 80056b8 <_dtoa_r+0x2b0>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fb f842 	bl	80005b0 <__aeabi_dmul>
 800552c:	a364      	add	r3, pc, #400	; (adr r3, 80056c0 <_dtoa_r+0x2b8>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fa fe87 	bl	8000244 <__adddf3>
 8005536:	4606      	mov	r6, r0
 8005538:	4620      	mov	r0, r4
 800553a:	460f      	mov	r7, r1
 800553c:	f7fa ffce 	bl	80004dc <__aeabi_i2d>
 8005540:	a361      	add	r3, pc, #388	; (adr r3, 80056c8 <_dtoa_r+0x2c0>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fb f833 	bl	80005b0 <__aeabi_dmul>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fa fe77 	bl	8000244 <__adddf3>
 8005556:	4606      	mov	r6, r0
 8005558:	460f      	mov	r7, r1
 800555a:	f7fb fad9 	bl	8000b10 <__aeabi_d2iz>
 800555e:	2200      	movs	r2, #0
 8005560:	4682      	mov	sl, r0
 8005562:	2300      	movs	r3, #0
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fb fa94 	bl	8000a94 <__aeabi_dcmplt>
 800556c:	b148      	cbz	r0, 8005582 <_dtoa_r+0x17a>
 800556e:	4650      	mov	r0, sl
 8005570:	f7fa ffb4 	bl	80004dc <__aeabi_i2d>
 8005574:	4632      	mov	r2, r6
 8005576:	463b      	mov	r3, r7
 8005578:	f7fb fa82 	bl	8000a80 <__aeabi_dcmpeq>
 800557c:	b908      	cbnz	r0, 8005582 <_dtoa_r+0x17a>
 800557e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005582:	f1ba 0f16 	cmp.w	sl, #22
 8005586:	d858      	bhi.n	800563a <_dtoa_r+0x232>
 8005588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800558c:	4b57      	ldr	r3, [pc, #348]	; (80056ec <_dtoa_r+0x2e4>)
 800558e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f7fb fa7d 	bl	8000a94 <__aeabi_dcmplt>
 800559a:	2800      	cmp	r0, #0
 800559c:	d04f      	beq.n	800563e <_dtoa_r+0x236>
 800559e:	2300      	movs	r3, #0
 80055a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80055a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055a8:	1b1c      	subs	r4, r3, r4
 80055aa:	1e63      	subs	r3, r4, #1
 80055ac:	9309      	str	r3, [sp, #36]	; 0x24
 80055ae:	bf49      	itett	mi
 80055b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80055b4:	2300      	movpl	r3, #0
 80055b6:	9306      	strmi	r3, [sp, #24]
 80055b8:	2300      	movmi	r3, #0
 80055ba:	bf54      	ite	pl
 80055bc:	9306      	strpl	r3, [sp, #24]
 80055be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80055c0:	f1ba 0f00 	cmp.w	sl, #0
 80055c4:	db3d      	blt.n	8005642 <_dtoa_r+0x23a>
 80055c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80055cc:	4453      	add	r3, sl
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	2300      	movs	r3, #0
 80055d2:	930a      	str	r3, [sp, #40]	; 0x28
 80055d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055d6:	2b09      	cmp	r3, #9
 80055d8:	f200 808c 	bhi.w	80056f4 <_dtoa_r+0x2ec>
 80055dc:	2b05      	cmp	r3, #5
 80055de:	bfc4      	itt	gt
 80055e0:	3b04      	subgt	r3, #4
 80055e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80055e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055e6:	bfc8      	it	gt
 80055e8:	2400      	movgt	r4, #0
 80055ea:	f1a3 0302 	sub.w	r3, r3, #2
 80055ee:	bfd8      	it	le
 80055f0:	2401      	movle	r4, #1
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	f200 808a 	bhi.w	800570c <_dtoa_r+0x304>
 80055f8:	e8df f003 	tbb	[pc, r3]
 80055fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005600:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005604:	441c      	add	r4, r3
 8005606:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800560a:	2b20      	cmp	r3, #32
 800560c:	bfc3      	ittte	gt
 800560e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005612:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005616:	fa09 f303 	lslgt.w	r3, r9, r3
 800561a:	f1c3 0320 	rsble	r3, r3, #32
 800561e:	bfc6      	itte	gt
 8005620:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005624:	4318      	orrgt	r0, r3
 8005626:	fa06 f003 	lslle.w	r0, r6, r3
 800562a:	f7fa ff47 	bl	80004bc <__aeabi_ui2d>
 800562e:	2301      	movs	r3, #1
 8005630:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005634:	3c01      	subs	r4, #1
 8005636:	9313      	str	r3, [sp, #76]	; 0x4c
 8005638:	e76f      	b.n	800551a <_dtoa_r+0x112>
 800563a:	2301      	movs	r3, #1
 800563c:	e7b2      	b.n	80055a4 <_dtoa_r+0x19c>
 800563e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005640:	e7b1      	b.n	80055a6 <_dtoa_r+0x19e>
 8005642:	9b06      	ldr	r3, [sp, #24]
 8005644:	eba3 030a 	sub.w	r3, r3, sl
 8005648:	9306      	str	r3, [sp, #24]
 800564a:	f1ca 0300 	rsb	r3, sl, #0
 800564e:	930a      	str	r3, [sp, #40]	; 0x28
 8005650:	2300      	movs	r3, #0
 8005652:	930e      	str	r3, [sp, #56]	; 0x38
 8005654:	e7be      	b.n	80055d4 <_dtoa_r+0x1cc>
 8005656:	2300      	movs	r3, #0
 8005658:	930b      	str	r3, [sp, #44]	; 0x2c
 800565a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800565c:	2b00      	cmp	r3, #0
 800565e:	dc58      	bgt.n	8005712 <_dtoa_r+0x30a>
 8005660:	f04f 0901 	mov.w	r9, #1
 8005664:	464b      	mov	r3, r9
 8005666:	f8cd 9020 	str.w	r9, [sp, #32]
 800566a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800566e:	2200      	movs	r2, #0
 8005670:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005672:	6042      	str	r2, [r0, #4]
 8005674:	2204      	movs	r2, #4
 8005676:	f102 0614 	add.w	r6, r2, #20
 800567a:	429e      	cmp	r6, r3
 800567c:	6841      	ldr	r1, [r0, #4]
 800567e:	d94e      	bls.n	800571e <_dtoa_r+0x316>
 8005680:	4628      	mov	r0, r5
 8005682:	f000 fdc7 	bl	8006214 <_Balloc>
 8005686:	9003      	str	r0, [sp, #12]
 8005688:	2800      	cmp	r0, #0
 800568a:	d14c      	bne.n	8005726 <_dtoa_r+0x31e>
 800568c:	4602      	mov	r2, r0
 800568e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005692:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <_dtoa_r+0x2e8>)
 8005694:	e6cc      	b.n	8005430 <_dtoa_r+0x28>
 8005696:	2301      	movs	r3, #1
 8005698:	e7de      	b.n	8005658 <_dtoa_r+0x250>
 800569a:	2300      	movs	r3, #0
 800569c:	930b      	str	r3, [sp, #44]	; 0x2c
 800569e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056a0:	eb0a 0903 	add.w	r9, sl, r3
 80056a4:	f109 0301 	add.w	r3, r9, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	9308      	str	r3, [sp, #32]
 80056ac:	bfb8      	it	lt
 80056ae:	2301      	movlt	r3, #1
 80056b0:	e7dd      	b.n	800566e <_dtoa_r+0x266>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e7f2      	b.n	800569c <_dtoa_r+0x294>
 80056b6:	bf00      	nop
 80056b8:	636f4361 	.word	0x636f4361
 80056bc:	3fd287a7 	.word	0x3fd287a7
 80056c0:	8b60c8b3 	.word	0x8b60c8b3
 80056c4:	3fc68a28 	.word	0x3fc68a28
 80056c8:	509f79fb 	.word	0x509f79fb
 80056cc:	3fd34413 	.word	0x3fd34413
 80056d0:	08007c6d 	.word	0x08007c6d
 80056d4:	08007c84 	.word	0x08007c84
 80056d8:	7ff00000 	.word	0x7ff00000
 80056dc:	08007c69 	.word	0x08007c69
 80056e0:	08007c60 	.word	0x08007c60
 80056e4:	08007c3d 	.word	0x08007c3d
 80056e8:	3ff80000 	.word	0x3ff80000
 80056ec:	08007dd8 	.word	0x08007dd8
 80056f0:	08007cdf 	.word	0x08007cdf
 80056f4:	2401      	movs	r4, #1
 80056f6:	2300      	movs	r3, #0
 80056f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80056fa:	9322      	str	r3, [sp, #136]	; 0x88
 80056fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005700:	2200      	movs	r2, #0
 8005702:	2312      	movs	r3, #18
 8005704:	f8cd 9020 	str.w	r9, [sp, #32]
 8005708:	9223      	str	r2, [sp, #140]	; 0x8c
 800570a:	e7b0      	b.n	800566e <_dtoa_r+0x266>
 800570c:	2301      	movs	r3, #1
 800570e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005710:	e7f4      	b.n	80056fc <_dtoa_r+0x2f4>
 8005712:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005716:	464b      	mov	r3, r9
 8005718:	f8cd 9020 	str.w	r9, [sp, #32]
 800571c:	e7a7      	b.n	800566e <_dtoa_r+0x266>
 800571e:	3101      	adds	r1, #1
 8005720:	6041      	str	r1, [r0, #4]
 8005722:	0052      	lsls	r2, r2, #1
 8005724:	e7a7      	b.n	8005676 <_dtoa_r+0x26e>
 8005726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005728:	9a03      	ldr	r2, [sp, #12]
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	9b08      	ldr	r3, [sp, #32]
 800572e:	2b0e      	cmp	r3, #14
 8005730:	f200 80a8 	bhi.w	8005884 <_dtoa_r+0x47c>
 8005734:	2c00      	cmp	r4, #0
 8005736:	f000 80a5 	beq.w	8005884 <_dtoa_r+0x47c>
 800573a:	f1ba 0f00 	cmp.w	sl, #0
 800573e:	dd34      	ble.n	80057aa <_dtoa_r+0x3a2>
 8005740:	4a9a      	ldr	r2, [pc, #616]	; (80059ac <_dtoa_r+0x5a4>)
 8005742:	f00a 030f 	and.w	r3, sl, #15
 8005746:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800574a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800574e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005752:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005756:	ea4f 142a 	mov.w	r4, sl, asr #4
 800575a:	d016      	beq.n	800578a <_dtoa_r+0x382>
 800575c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005760:	4b93      	ldr	r3, [pc, #588]	; (80059b0 <_dtoa_r+0x5a8>)
 8005762:	2703      	movs	r7, #3
 8005764:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005768:	f7fb f84c 	bl	8000804 <__aeabi_ddiv>
 800576c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005770:	f004 040f 	and.w	r4, r4, #15
 8005774:	4e8e      	ldr	r6, [pc, #568]	; (80059b0 <_dtoa_r+0x5a8>)
 8005776:	b954      	cbnz	r4, 800578e <_dtoa_r+0x386>
 8005778:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800577c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005780:	f7fb f840 	bl	8000804 <__aeabi_ddiv>
 8005784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005788:	e029      	b.n	80057de <_dtoa_r+0x3d6>
 800578a:	2702      	movs	r7, #2
 800578c:	e7f2      	b.n	8005774 <_dtoa_r+0x36c>
 800578e:	07e1      	lsls	r1, r4, #31
 8005790:	d508      	bpl.n	80057a4 <_dtoa_r+0x39c>
 8005792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005796:	e9d6 2300 	ldrd	r2, r3, [r6]
 800579a:	f7fa ff09 	bl	80005b0 <__aeabi_dmul>
 800579e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057a2:	3701      	adds	r7, #1
 80057a4:	1064      	asrs	r4, r4, #1
 80057a6:	3608      	adds	r6, #8
 80057a8:	e7e5      	b.n	8005776 <_dtoa_r+0x36e>
 80057aa:	f000 80a5 	beq.w	80058f8 <_dtoa_r+0x4f0>
 80057ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057b2:	f1ca 0400 	rsb	r4, sl, #0
 80057b6:	4b7d      	ldr	r3, [pc, #500]	; (80059ac <_dtoa_r+0x5a4>)
 80057b8:	f004 020f 	and.w	r2, r4, #15
 80057bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f7fa fef4 	bl	80005b0 <__aeabi_dmul>
 80057c8:	2702      	movs	r7, #2
 80057ca:	2300      	movs	r3, #0
 80057cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057d0:	4e77      	ldr	r6, [pc, #476]	; (80059b0 <_dtoa_r+0x5a8>)
 80057d2:	1124      	asrs	r4, r4, #4
 80057d4:	2c00      	cmp	r4, #0
 80057d6:	f040 8084 	bne.w	80058e2 <_dtoa_r+0x4da>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1d2      	bne.n	8005784 <_dtoa_r+0x37c>
 80057de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 808b 	beq.w	80058fc <_dtoa_r+0x4f4>
 80057e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057f2:	2200      	movs	r2, #0
 80057f4:	4b6f      	ldr	r3, [pc, #444]	; (80059b4 <_dtoa_r+0x5ac>)
 80057f6:	f7fb f94d 	bl	8000a94 <__aeabi_dcmplt>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d07e      	beq.n	80058fc <_dtoa_r+0x4f4>
 80057fe:	9b08      	ldr	r3, [sp, #32]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d07b      	beq.n	80058fc <_dtoa_r+0x4f4>
 8005804:	f1b9 0f00 	cmp.w	r9, #0
 8005808:	dd38      	ble.n	800587c <_dtoa_r+0x474>
 800580a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800580e:	2200      	movs	r2, #0
 8005810:	4b69      	ldr	r3, [pc, #420]	; (80059b8 <_dtoa_r+0x5b0>)
 8005812:	f7fa fecd 	bl	80005b0 <__aeabi_dmul>
 8005816:	464c      	mov	r4, r9
 8005818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800581c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005820:	3701      	adds	r7, #1
 8005822:	4638      	mov	r0, r7
 8005824:	f7fa fe5a 	bl	80004dc <__aeabi_i2d>
 8005828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800582c:	f7fa fec0 	bl	80005b0 <__aeabi_dmul>
 8005830:	2200      	movs	r2, #0
 8005832:	4b62      	ldr	r3, [pc, #392]	; (80059bc <_dtoa_r+0x5b4>)
 8005834:	f7fa fd06 	bl	8000244 <__adddf3>
 8005838:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800583c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005840:	9611      	str	r6, [sp, #68]	; 0x44
 8005842:	2c00      	cmp	r4, #0
 8005844:	d15d      	bne.n	8005902 <_dtoa_r+0x4fa>
 8005846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800584a:	2200      	movs	r2, #0
 800584c:	4b5c      	ldr	r3, [pc, #368]	; (80059c0 <_dtoa_r+0x5b8>)
 800584e:	f7fa fcf7 	bl	8000240 <__aeabi_dsub>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800585a:	4633      	mov	r3, r6
 800585c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800585e:	f7fb f937 	bl	8000ad0 <__aeabi_dcmpgt>
 8005862:	2800      	cmp	r0, #0
 8005864:	f040 829c 	bne.w	8005da0 <_dtoa_r+0x998>
 8005868:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800586c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800586e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005872:	f7fb f90f 	bl	8000a94 <__aeabi_dcmplt>
 8005876:	2800      	cmp	r0, #0
 8005878:	f040 8290 	bne.w	8005d9c <_dtoa_r+0x994>
 800587c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005880:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005886:	2b00      	cmp	r3, #0
 8005888:	f2c0 8152 	blt.w	8005b30 <_dtoa_r+0x728>
 800588c:	f1ba 0f0e 	cmp.w	sl, #14
 8005890:	f300 814e 	bgt.w	8005b30 <_dtoa_r+0x728>
 8005894:	4b45      	ldr	r3, [pc, #276]	; (80059ac <_dtoa_r+0x5a4>)
 8005896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800589a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800589e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f280 80db 	bge.w	8005a60 <_dtoa_r+0x658>
 80058aa:	9b08      	ldr	r3, [sp, #32]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f300 80d7 	bgt.w	8005a60 <_dtoa_r+0x658>
 80058b2:	f040 8272 	bne.w	8005d9a <_dtoa_r+0x992>
 80058b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ba:	2200      	movs	r2, #0
 80058bc:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <_dtoa_r+0x5b8>)
 80058be:	f7fa fe77 	bl	80005b0 <__aeabi_dmul>
 80058c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058c6:	f7fb f8f9 	bl	8000abc <__aeabi_dcmpge>
 80058ca:	9c08      	ldr	r4, [sp, #32]
 80058cc:	4626      	mov	r6, r4
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f040 8248 	bne.w	8005d64 <_dtoa_r+0x95c>
 80058d4:	2331      	movs	r3, #49	; 0x31
 80058d6:	9f03      	ldr	r7, [sp, #12]
 80058d8:	f10a 0a01 	add.w	sl, sl, #1
 80058dc:	f807 3b01 	strb.w	r3, [r7], #1
 80058e0:	e244      	b.n	8005d6c <_dtoa_r+0x964>
 80058e2:	07e2      	lsls	r2, r4, #31
 80058e4:	d505      	bpl.n	80058f2 <_dtoa_r+0x4ea>
 80058e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058ea:	f7fa fe61 	bl	80005b0 <__aeabi_dmul>
 80058ee:	2301      	movs	r3, #1
 80058f0:	3701      	adds	r7, #1
 80058f2:	1064      	asrs	r4, r4, #1
 80058f4:	3608      	adds	r6, #8
 80058f6:	e76d      	b.n	80057d4 <_dtoa_r+0x3cc>
 80058f8:	2702      	movs	r7, #2
 80058fa:	e770      	b.n	80057de <_dtoa_r+0x3d6>
 80058fc:	46d0      	mov	r8, sl
 80058fe:	9c08      	ldr	r4, [sp, #32]
 8005900:	e78f      	b.n	8005822 <_dtoa_r+0x41a>
 8005902:	9903      	ldr	r1, [sp, #12]
 8005904:	4b29      	ldr	r3, [pc, #164]	; (80059ac <_dtoa_r+0x5a4>)
 8005906:	4421      	add	r1, r4
 8005908:	9112      	str	r1, [sp, #72]	; 0x48
 800590a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800590c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005910:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005914:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005918:	2900      	cmp	r1, #0
 800591a:	d055      	beq.n	80059c8 <_dtoa_r+0x5c0>
 800591c:	2000      	movs	r0, #0
 800591e:	4929      	ldr	r1, [pc, #164]	; (80059c4 <_dtoa_r+0x5bc>)
 8005920:	f7fa ff70 	bl	8000804 <__aeabi_ddiv>
 8005924:	463b      	mov	r3, r7
 8005926:	4632      	mov	r2, r6
 8005928:	f7fa fc8a 	bl	8000240 <__aeabi_dsub>
 800592c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005930:	9f03      	ldr	r7, [sp, #12]
 8005932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005936:	f7fb f8eb 	bl	8000b10 <__aeabi_d2iz>
 800593a:	4604      	mov	r4, r0
 800593c:	f7fa fdce 	bl	80004dc <__aeabi_i2d>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005948:	f7fa fc7a 	bl	8000240 <__aeabi_dsub>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	3430      	adds	r4, #48	; 0x30
 8005952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005956:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800595a:	f807 4b01 	strb.w	r4, [r7], #1
 800595e:	f7fb f899 	bl	8000a94 <__aeabi_dcmplt>
 8005962:	2800      	cmp	r0, #0
 8005964:	d174      	bne.n	8005a50 <_dtoa_r+0x648>
 8005966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800596a:	2000      	movs	r0, #0
 800596c:	4911      	ldr	r1, [pc, #68]	; (80059b4 <_dtoa_r+0x5ac>)
 800596e:	f7fa fc67 	bl	8000240 <__aeabi_dsub>
 8005972:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005976:	f7fb f88d 	bl	8000a94 <__aeabi_dcmplt>
 800597a:	2800      	cmp	r0, #0
 800597c:	f040 80b7 	bne.w	8005aee <_dtoa_r+0x6e6>
 8005980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005982:	429f      	cmp	r7, r3
 8005984:	f43f af7a 	beq.w	800587c <_dtoa_r+0x474>
 8005988:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800598c:	2200      	movs	r2, #0
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <_dtoa_r+0x5b0>)
 8005990:	f7fa fe0e 	bl	80005b0 <__aeabi_dmul>
 8005994:	2200      	movs	r2, #0
 8005996:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800599a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <_dtoa_r+0x5b0>)
 80059a0:	f7fa fe06 	bl	80005b0 <__aeabi_dmul>
 80059a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059a8:	e7c3      	b.n	8005932 <_dtoa_r+0x52a>
 80059aa:	bf00      	nop
 80059ac:	08007dd8 	.word	0x08007dd8
 80059b0:	08007db0 	.word	0x08007db0
 80059b4:	3ff00000 	.word	0x3ff00000
 80059b8:	40240000 	.word	0x40240000
 80059bc:	401c0000 	.word	0x401c0000
 80059c0:	40140000 	.word	0x40140000
 80059c4:	3fe00000 	.word	0x3fe00000
 80059c8:	4630      	mov	r0, r6
 80059ca:	4639      	mov	r1, r7
 80059cc:	f7fa fdf0 	bl	80005b0 <__aeabi_dmul>
 80059d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059d6:	9c03      	ldr	r4, [sp, #12]
 80059d8:	9314      	str	r3, [sp, #80]	; 0x50
 80059da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059de:	f7fb f897 	bl	8000b10 <__aeabi_d2iz>
 80059e2:	9015      	str	r0, [sp, #84]	; 0x54
 80059e4:	f7fa fd7a 	bl	80004dc <__aeabi_i2d>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059f0:	f7fa fc26 	bl	8000240 <__aeabi_dsub>
 80059f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059f6:	4606      	mov	r6, r0
 80059f8:	3330      	adds	r3, #48	; 0x30
 80059fa:	f804 3b01 	strb.w	r3, [r4], #1
 80059fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a00:	460f      	mov	r7, r1
 8005a02:	429c      	cmp	r4, r3
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	d124      	bne.n	8005a54 <_dtoa_r+0x64c>
 8005a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a0e:	4bb0      	ldr	r3, [pc, #704]	; (8005cd0 <_dtoa_r+0x8c8>)
 8005a10:	f7fa fc18 	bl	8000244 <__adddf3>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	f7fb f858 	bl	8000ad0 <__aeabi_dcmpgt>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d163      	bne.n	8005aec <_dtoa_r+0x6e4>
 8005a24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a28:	2000      	movs	r0, #0
 8005a2a:	49a9      	ldr	r1, [pc, #676]	; (8005cd0 <_dtoa_r+0x8c8>)
 8005a2c:	f7fa fc08 	bl	8000240 <__aeabi_dsub>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	f7fb f82c 	bl	8000a94 <__aeabi_dcmplt>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f43f af1d 	beq.w	800587c <_dtoa_r+0x474>
 8005a42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a44:	1e7b      	subs	r3, r7, #1
 8005a46:	9314      	str	r3, [sp, #80]	; 0x50
 8005a48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a4c:	2b30      	cmp	r3, #48	; 0x30
 8005a4e:	d0f8      	beq.n	8005a42 <_dtoa_r+0x63a>
 8005a50:	46c2      	mov	sl, r8
 8005a52:	e03b      	b.n	8005acc <_dtoa_r+0x6c4>
 8005a54:	4b9f      	ldr	r3, [pc, #636]	; (8005cd4 <_dtoa_r+0x8cc>)
 8005a56:	f7fa fdab 	bl	80005b0 <__aeabi_dmul>
 8005a5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a5e:	e7bc      	b.n	80059da <_dtoa_r+0x5d2>
 8005a60:	9f03      	ldr	r7, [sp, #12]
 8005a62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	f7fa fec9 	bl	8000804 <__aeabi_ddiv>
 8005a72:	f7fb f84d 	bl	8000b10 <__aeabi_d2iz>
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7fa fd30 	bl	80004dc <__aeabi_i2d>
 8005a7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a80:	f7fa fd96 	bl	80005b0 <__aeabi_dmul>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4640      	mov	r0, r8
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	f7fa fbd8 	bl	8000240 <__aeabi_dsub>
 8005a90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005a94:	f807 6b01 	strb.w	r6, [r7], #1
 8005a98:	9e03      	ldr	r6, [sp, #12]
 8005a9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005a9e:	1bbe      	subs	r6, r7, r6
 8005aa0:	45b4      	cmp	ip, r6
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	d136      	bne.n	8005b16 <_dtoa_r+0x70e>
 8005aa8:	f7fa fbcc 	bl	8000244 <__adddf3>
 8005aac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	4689      	mov	r9, r1
 8005ab4:	f7fb f80c 	bl	8000ad0 <__aeabi_dcmpgt>
 8005ab8:	bb58      	cbnz	r0, 8005b12 <_dtoa_r+0x70a>
 8005aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005abe:	4640      	mov	r0, r8
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f7fa ffdd 	bl	8000a80 <__aeabi_dcmpeq>
 8005ac6:	b108      	cbz	r0, 8005acc <_dtoa_r+0x6c4>
 8005ac8:	07e1      	lsls	r1, r4, #31
 8005aca:	d422      	bmi.n	8005b12 <_dtoa_r+0x70a>
 8005acc:	4628      	mov	r0, r5
 8005ace:	4659      	mov	r1, fp
 8005ad0:	f000 fbe0 	bl	8006294 <_Bfree>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	703b      	strb	r3, [r7, #0]
 8005ad8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ada:	f10a 0001 	add.w	r0, sl, #1
 8005ade:	6018      	str	r0, [r3, #0]
 8005ae0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f43f acde 	beq.w	80054a4 <_dtoa_r+0x9c>
 8005ae8:	601f      	str	r7, [r3, #0]
 8005aea:	e4db      	b.n	80054a4 <_dtoa_r+0x9c>
 8005aec:	4627      	mov	r7, r4
 8005aee:	463b      	mov	r3, r7
 8005af0:	461f      	mov	r7, r3
 8005af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af6:	2a39      	cmp	r2, #57	; 0x39
 8005af8:	d107      	bne.n	8005b0a <_dtoa_r+0x702>
 8005afa:	9a03      	ldr	r2, [sp, #12]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1f7      	bne.n	8005af0 <_dtoa_r+0x6e8>
 8005b00:	2230      	movs	r2, #48	; 0x30
 8005b02:	9903      	ldr	r1, [sp, #12]
 8005b04:	f108 0801 	add.w	r8, r8, #1
 8005b08:	700a      	strb	r2, [r1, #0]
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e79e      	b.n	8005a50 <_dtoa_r+0x648>
 8005b12:	46d0      	mov	r8, sl
 8005b14:	e7eb      	b.n	8005aee <_dtoa_r+0x6e6>
 8005b16:	2200      	movs	r2, #0
 8005b18:	4b6e      	ldr	r3, [pc, #440]	; (8005cd4 <_dtoa_r+0x8cc>)
 8005b1a:	f7fa fd49 	bl	80005b0 <__aeabi_dmul>
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2300      	movs	r3, #0
 8005b22:	4680      	mov	r8, r0
 8005b24:	4689      	mov	r9, r1
 8005b26:	f7fa ffab 	bl	8000a80 <__aeabi_dcmpeq>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d09b      	beq.n	8005a66 <_dtoa_r+0x65e>
 8005b2e:	e7cd      	b.n	8005acc <_dtoa_r+0x6c4>
 8005b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b32:	2a00      	cmp	r2, #0
 8005b34:	f000 80d0 	beq.w	8005cd8 <_dtoa_r+0x8d0>
 8005b38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b3a:	2a01      	cmp	r2, #1
 8005b3c:	f300 80ae 	bgt.w	8005c9c <_dtoa_r+0x894>
 8005b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	f000 80a6 	beq.w	8005c94 <_dtoa_r+0x88c>
 8005b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b4e:	9f06      	ldr	r7, [sp, #24]
 8005b50:	9a06      	ldr	r2, [sp, #24]
 8005b52:	2101      	movs	r1, #1
 8005b54:	441a      	add	r2, r3
 8005b56:	9206      	str	r2, [sp, #24]
 8005b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	441a      	add	r2, r3
 8005b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b60:	f000 fc4e 	bl	8006400 <__i2b>
 8005b64:	4606      	mov	r6, r0
 8005b66:	2f00      	cmp	r7, #0
 8005b68:	dd0c      	ble.n	8005b84 <_dtoa_r+0x77c>
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dd09      	ble.n	8005b84 <_dtoa_r+0x77c>
 8005b70:	42bb      	cmp	r3, r7
 8005b72:	bfa8      	it	ge
 8005b74:	463b      	movge	r3, r7
 8005b76:	9a06      	ldr	r2, [sp, #24]
 8005b78:	1aff      	subs	r7, r7, r3
 8005b7a:	1ad2      	subs	r2, r2, r3
 8005b7c:	9206      	str	r2, [sp, #24]
 8005b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	9309      	str	r3, [sp, #36]	; 0x24
 8005b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b86:	b1f3      	cbz	r3, 8005bc6 <_dtoa_r+0x7be>
 8005b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80a8 	beq.w	8005ce0 <_dtoa_r+0x8d8>
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	dd10      	ble.n	8005bb6 <_dtoa_r+0x7ae>
 8005b94:	4631      	mov	r1, r6
 8005b96:	4622      	mov	r2, r4
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f000 fcef 	bl	800657c <__pow5mult>
 8005b9e:	465a      	mov	r2, fp
 8005ba0:	4601      	mov	r1, r0
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f000 fc41 	bl	800642c <__multiply>
 8005baa:	4680      	mov	r8, r0
 8005bac:	4659      	mov	r1, fp
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 fb70 	bl	8006294 <_Bfree>
 8005bb4:	46c3      	mov	fp, r8
 8005bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb8:	1b1a      	subs	r2, r3, r4
 8005bba:	d004      	beq.n	8005bc6 <_dtoa_r+0x7be>
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 fcdc 	bl	800657c <__pow5mult>
 8005bc4:	4683      	mov	fp, r0
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 fc19 	bl	8006400 <__i2b>
 8005bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f340 8086 	ble.w	8005ce4 <_dtoa_r+0x8dc>
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4601      	mov	r1, r0
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 fccd 	bl	800657c <__pow5mult>
 8005be2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005be4:	4604      	mov	r4, r0
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	dd7f      	ble.n	8005cea <_dtoa_r+0x8e2>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bf4:	6918      	ldr	r0, [r3, #16]
 8005bf6:	f000 fbb5 	bl	8006364 <__hi0bits>
 8005bfa:	f1c0 0020 	rsb	r0, r0, #32
 8005bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c00:	4418      	add	r0, r3
 8005c02:	f010 001f 	ands.w	r0, r0, #31
 8005c06:	f000 8092 	beq.w	8005d2e <_dtoa_r+0x926>
 8005c0a:	f1c0 0320 	rsb	r3, r0, #32
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	f340 808a 	ble.w	8005d28 <_dtoa_r+0x920>
 8005c14:	f1c0 001c 	rsb	r0, r0, #28
 8005c18:	9b06      	ldr	r3, [sp, #24]
 8005c1a:	4407      	add	r7, r0
 8005c1c:	4403      	add	r3, r0
 8005c1e:	9306      	str	r3, [sp, #24]
 8005c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c22:	4403      	add	r3, r0
 8005c24:	9309      	str	r3, [sp, #36]	; 0x24
 8005c26:	9b06      	ldr	r3, [sp, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dd05      	ble.n	8005c38 <_dtoa_r+0x830>
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 fcfd 	bl	8006630 <__lshift>
 8005c36:	4683      	mov	fp, r0
 8005c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	dd05      	ble.n	8005c4a <_dtoa_r+0x842>
 8005c3e:	4621      	mov	r1, r4
 8005c40:	461a      	mov	r2, r3
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 fcf4 	bl	8006630 <__lshift>
 8005c48:	4604      	mov	r4, r0
 8005c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d070      	beq.n	8005d32 <_dtoa_r+0x92a>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4658      	mov	r0, fp
 8005c54:	f000 fd5c 	bl	8006710 <__mcmp>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	da6a      	bge.n	8005d32 <_dtoa_r+0x92a>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4659      	mov	r1, fp
 8005c60:	220a      	movs	r2, #10
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 fb38 	bl	80062d8 <__multadd>
 8005c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6a:	4683      	mov	fp, r0
 8005c6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8194 	beq.w	8005f9e <_dtoa_r+0xb96>
 8005c76:	4631      	mov	r1, r6
 8005c78:	2300      	movs	r3, #0
 8005c7a:	220a      	movs	r2, #10
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 fb2b 	bl	80062d8 <__multadd>
 8005c82:	f1b9 0f00 	cmp.w	r9, #0
 8005c86:	4606      	mov	r6, r0
 8005c88:	f300 8093 	bgt.w	8005db2 <_dtoa_r+0x9aa>
 8005c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	dc57      	bgt.n	8005d42 <_dtoa_r+0x93a>
 8005c92:	e08e      	b.n	8005db2 <_dtoa_r+0x9aa>
 8005c94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c9a:	e757      	b.n	8005b4c <_dtoa_r+0x744>
 8005c9c:	9b08      	ldr	r3, [sp, #32]
 8005c9e:	1e5c      	subs	r4, r3, #1
 8005ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	bfb7      	itett	lt
 8005ca6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ca8:	1b1c      	subge	r4, r3, r4
 8005caa:	1ae2      	sublt	r2, r4, r3
 8005cac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005cae:	bfbe      	ittt	lt
 8005cb0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005cb2:	189b      	addlt	r3, r3, r2
 8005cb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005cb6:	9b08      	ldr	r3, [sp, #32]
 8005cb8:	bfb8      	it	lt
 8005cba:	2400      	movlt	r4, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bfbb      	ittet	lt
 8005cc0:	9b06      	ldrlt	r3, [sp, #24]
 8005cc2:	9a08      	ldrlt	r2, [sp, #32]
 8005cc4:	9f06      	ldrge	r7, [sp, #24]
 8005cc6:	1a9f      	sublt	r7, r3, r2
 8005cc8:	bfac      	ite	ge
 8005cca:	9b08      	ldrge	r3, [sp, #32]
 8005ccc:	2300      	movlt	r3, #0
 8005cce:	e73f      	b.n	8005b50 <_dtoa_r+0x748>
 8005cd0:	3fe00000 	.word	0x3fe00000
 8005cd4:	40240000 	.word	0x40240000
 8005cd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005cda:	9f06      	ldr	r7, [sp, #24]
 8005cdc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005cde:	e742      	b.n	8005b66 <_dtoa_r+0x75e>
 8005ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ce2:	e76b      	b.n	8005bbc <_dtoa_r+0x7b4>
 8005ce4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	dc19      	bgt.n	8005d1e <_dtoa_r+0x916>
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	b9bb      	cbnz	r3, 8005d1e <_dtoa_r+0x916>
 8005cee:	9b05      	ldr	r3, [sp, #20]
 8005cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cf4:	b99b      	cbnz	r3, 8005d1e <_dtoa_r+0x916>
 8005cf6:	9b05      	ldr	r3, [sp, #20]
 8005cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	0d1b      	lsrs	r3, r3, #20
 8005cfe:	051b      	lsls	r3, r3, #20
 8005d00:	b183      	cbz	r3, 8005d24 <_dtoa_r+0x91c>
 8005d02:	f04f 0801 	mov.w	r8, #1
 8005d06:	9b06      	ldr	r3, [sp, #24]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	9306      	str	r3, [sp, #24]
 8005d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0e:	3301      	adds	r3, #1
 8005d10:	9309      	str	r3, [sp, #36]	; 0x24
 8005d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f47f af6a 	bne.w	8005bee <_dtoa_r+0x7e6>
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	e76f      	b.n	8005bfe <_dtoa_r+0x7f6>
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	e7f6      	b.n	8005d12 <_dtoa_r+0x90a>
 8005d24:	4698      	mov	r8, r3
 8005d26:	e7f4      	b.n	8005d12 <_dtoa_r+0x90a>
 8005d28:	f43f af7d 	beq.w	8005c26 <_dtoa_r+0x81e>
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	301c      	adds	r0, #28
 8005d30:	e772      	b.n	8005c18 <_dtoa_r+0x810>
 8005d32:	9b08      	ldr	r3, [sp, #32]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dc36      	bgt.n	8005da6 <_dtoa_r+0x99e>
 8005d38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	dd33      	ble.n	8005da6 <_dtoa_r+0x99e>
 8005d3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d42:	f1b9 0f00 	cmp.w	r9, #0
 8005d46:	d10d      	bne.n	8005d64 <_dtoa_r+0x95c>
 8005d48:	4621      	mov	r1, r4
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	2205      	movs	r2, #5
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 fac2 	bl	80062d8 <__multadd>
 8005d54:	4601      	mov	r1, r0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4658      	mov	r0, fp
 8005d5a:	f000 fcd9 	bl	8006710 <__mcmp>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f73f adb8 	bgt.w	80058d4 <_dtoa_r+0x4cc>
 8005d64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d66:	9f03      	ldr	r7, [sp, #12]
 8005d68:	ea6f 0a03 	mvn.w	sl, r3
 8005d6c:	f04f 0800 	mov.w	r8, #0
 8005d70:	4621      	mov	r1, r4
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 fa8e 	bl	8006294 <_Bfree>
 8005d78:	2e00      	cmp	r6, #0
 8005d7a:	f43f aea7 	beq.w	8005acc <_dtoa_r+0x6c4>
 8005d7e:	f1b8 0f00 	cmp.w	r8, #0
 8005d82:	d005      	beq.n	8005d90 <_dtoa_r+0x988>
 8005d84:	45b0      	cmp	r8, r6
 8005d86:	d003      	beq.n	8005d90 <_dtoa_r+0x988>
 8005d88:	4641      	mov	r1, r8
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 fa82 	bl	8006294 <_Bfree>
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 fa7e 	bl	8006294 <_Bfree>
 8005d98:	e698      	b.n	8005acc <_dtoa_r+0x6c4>
 8005d9a:	2400      	movs	r4, #0
 8005d9c:	4626      	mov	r6, r4
 8005d9e:	e7e1      	b.n	8005d64 <_dtoa_r+0x95c>
 8005da0:	46c2      	mov	sl, r8
 8005da2:	4626      	mov	r6, r4
 8005da4:	e596      	b.n	80058d4 <_dtoa_r+0x4cc>
 8005da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80fd 	beq.w	8005fac <_dtoa_r+0xba4>
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	dd05      	ble.n	8005dc2 <_dtoa_r+0x9ba>
 8005db6:	4631      	mov	r1, r6
 8005db8:	463a      	mov	r2, r7
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 fc38 	bl	8006630 <__lshift>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	f1b8 0f00 	cmp.w	r8, #0
 8005dc6:	d05c      	beq.n	8005e82 <_dtoa_r+0xa7a>
 8005dc8:	4628      	mov	r0, r5
 8005dca:	6871      	ldr	r1, [r6, #4]
 8005dcc:	f000 fa22 	bl	8006214 <_Balloc>
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	b928      	cbnz	r0, 8005de0 <_dtoa_r+0x9d8>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005dda:	4b7f      	ldr	r3, [pc, #508]	; (8005fd8 <_dtoa_r+0xbd0>)
 8005ddc:	f7ff bb28 	b.w	8005430 <_dtoa_r+0x28>
 8005de0:	6932      	ldr	r2, [r6, #16]
 8005de2:	f106 010c 	add.w	r1, r6, #12
 8005de6:	3202      	adds	r2, #2
 8005de8:	0092      	lsls	r2, r2, #2
 8005dea:	300c      	adds	r0, #12
 8005dec:	f7fe fce4 	bl	80047b8 <memcpy>
 8005df0:	2201      	movs	r2, #1
 8005df2:	4639      	mov	r1, r7
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 fc1b 	bl	8006630 <__lshift>
 8005dfa:	46b0      	mov	r8, r6
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	3301      	adds	r3, #1
 8005e02:	9308      	str	r3, [sp, #32]
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	444b      	add	r3, r9
 8005e08:	930a      	str	r3, [sp, #40]	; 0x28
 8005e0a:	9b04      	ldr	r3, [sp, #16]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	9309      	str	r3, [sp, #36]	; 0x24
 8005e12:	9b08      	ldr	r3, [sp, #32]
 8005e14:	4621      	mov	r1, r4
 8005e16:	3b01      	subs	r3, #1
 8005e18:	4658      	mov	r0, fp
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	f7ff fa66 	bl	80052ec <quorem>
 8005e20:	4603      	mov	r3, r0
 8005e22:	4641      	mov	r1, r8
 8005e24:	3330      	adds	r3, #48	; 0x30
 8005e26:	9006      	str	r0, [sp, #24]
 8005e28:	4658      	mov	r0, fp
 8005e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e2c:	f000 fc70 	bl	8006710 <__mcmp>
 8005e30:	4632      	mov	r2, r6
 8005e32:	4681      	mov	r9, r0
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fc86 	bl	8006748 <__mdiff>
 8005e3c:	68c2      	ldr	r2, [r0, #12]
 8005e3e:	4607      	mov	r7, r0
 8005e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e42:	bb02      	cbnz	r2, 8005e86 <_dtoa_r+0xa7e>
 8005e44:	4601      	mov	r1, r0
 8005e46:	4658      	mov	r0, fp
 8005e48:	f000 fc62 	bl	8006710 <__mcmp>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e50:	4639      	mov	r1, r7
 8005e52:	4628      	mov	r0, r5
 8005e54:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005e58:	f000 fa1c 	bl	8006294 <_Bfree>
 8005e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e60:	9f08      	ldr	r7, [sp, #32]
 8005e62:	ea43 0102 	orr.w	r1, r3, r2
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e6c:	d10d      	bne.n	8005e8a <_dtoa_r+0xa82>
 8005e6e:	2b39      	cmp	r3, #57	; 0x39
 8005e70:	d029      	beq.n	8005ec6 <_dtoa_r+0xabe>
 8005e72:	f1b9 0f00 	cmp.w	r9, #0
 8005e76:	dd01      	ble.n	8005e7c <_dtoa_r+0xa74>
 8005e78:	9b06      	ldr	r3, [sp, #24]
 8005e7a:	3331      	adds	r3, #49	; 0x31
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	7013      	strb	r3, [r2, #0]
 8005e80:	e776      	b.n	8005d70 <_dtoa_r+0x968>
 8005e82:	4630      	mov	r0, r6
 8005e84:	e7b9      	b.n	8005dfa <_dtoa_r+0x9f2>
 8005e86:	2201      	movs	r2, #1
 8005e88:	e7e2      	b.n	8005e50 <_dtoa_r+0xa48>
 8005e8a:	f1b9 0f00 	cmp.w	r9, #0
 8005e8e:	db06      	blt.n	8005e9e <_dtoa_r+0xa96>
 8005e90:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e92:	ea41 0909 	orr.w	r9, r1, r9
 8005e96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e98:	ea59 0101 	orrs.w	r1, r9, r1
 8005e9c:	d120      	bne.n	8005ee0 <_dtoa_r+0xad8>
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	ddec      	ble.n	8005e7c <_dtoa_r+0xa74>
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	9308      	str	r3, [sp, #32]
 8005eaa:	f000 fbc1 	bl	8006630 <__lshift>
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4683      	mov	fp, r0
 8005eb2:	f000 fc2d 	bl	8006710 <__mcmp>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	dc02      	bgt.n	8005ec2 <_dtoa_r+0xaba>
 8005ebc:	d1de      	bne.n	8005e7c <_dtoa_r+0xa74>
 8005ebe:	07da      	lsls	r2, r3, #31
 8005ec0:	d5dc      	bpl.n	8005e7c <_dtoa_r+0xa74>
 8005ec2:	2b39      	cmp	r3, #57	; 0x39
 8005ec4:	d1d8      	bne.n	8005e78 <_dtoa_r+0xa70>
 8005ec6:	2339      	movs	r3, #57	; 0x39
 8005ec8:	9a04      	ldr	r2, [sp, #16]
 8005eca:	7013      	strb	r3, [r2, #0]
 8005ecc:	463b      	mov	r3, r7
 8005ece:	461f      	mov	r7, r3
 8005ed0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	2a39      	cmp	r2, #57	; 0x39
 8005ed8:	d050      	beq.n	8005f7c <_dtoa_r+0xb74>
 8005eda:	3201      	adds	r2, #1
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e747      	b.n	8005d70 <_dtoa_r+0x968>
 8005ee0:	2a00      	cmp	r2, #0
 8005ee2:	dd03      	ble.n	8005eec <_dtoa_r+0xae4>
 8005ee4:	2b39      	cmp	r3, #57	; 0x39
 8005ee6:	d0ee      	beq.n	8005ec6 <_dtoa_r+0xabe>
 8005ee8:	3301      	adds	r3, #1
 8005eea:	e7c7      	b.n	8005e7c <_dtoa_r+0xa74>
 8005eec:	9a08      	ldr	r2, [sp, #32]
 8005eee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ef0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ef4:	428a      	cmp	r2, r1
 8005ef6:	d02a      	beq.n	8005f4e <_dtoa_r+0xb46>
 8005ef8:	4659      	mov	r1, fp
 8005efa:	2300      	movs	r3, #0
 8005efc:	220a      	movs	r2, #10
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 f9ea 	bl	80062d8 <__multadd>
 8005f04:	45b0      	cmp	r8, r6
 8005f06:	4683      	mov	fp, r0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	f04f 020a 	mov.w	r2, #10
 8005f10:	4641      	mov	r1, r8
 8005f12:	4628      	mov	r0, r5
 8005f14:	d107      	bne.n	8005f26 <_dtoa_r+0xb1e>
 8005f16:	f000 f9df 	bl	80062d8 <__multadd>
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	9b08      	ldr	r3, [sp, #32]
 8005f20:	3301      	adds	r3, #1
 8005f22:	9308      	str	r3, [sp, #32]
 8005f24:	e775      	b.n	8005e12 <_dtoa_r+0xa0a>
 8005f26:	f000 f9d7 	bl	80062d8 <__multadd>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	2300      	movs	r3, #0
 8005f30:	220a      	movs	r2, #10
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f9d0 	bl	80062d8 <__multadd>
 8005f38:	4606      	mov	r6, r0
 8005f3a:	e7f0      	b.n	8005f1e <_dtoa_r+0xb16>
 8005f3c:	f1b9 0f00 	cmp.w	r9, #0
 8005f40:	bfcc      	ite	gt
 8005f42:	464f      	movgt	r7, r9
 8005f44:	2701      	movle	r7, #1
 8005f46:	f04f 0800 	mov.w	r8, #0
 8005f4a:	9a03      	ldr	r2, [sp, #12]
 8005f4c:	4417      	add	r7, r2
 8005f4e:	4659      	mov	r1, fp
 8005f50:	2201      	movs	r2, #1
 8005f52:	4628      	mov	r0, r5
 8005f54:	9308      	str	r3, [sp, #32]
 8005f56:	f000 fb6b 	bl	8006630 <__lshift>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4683      	mov	fp, r0
 8005f5e:	f000 fbd7 	bl	8006710 <__mcmp>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	dcb2      	bgt.n	8005ecc <_dtoa_r+0xac4>
 8005f66:	d102      	bne.n	8005f6e <_dtoa_r+0xb66>
 8005f68:	9b08      	ldr	r3, [sp, #32]
 8005f6a:	07db      	lsls	r3, r3, #31
 8005f6c:	d4ae      	bmi.n	8005ecc <_dtoa_r+0xac4>
 8005f6e:	463b      	mov	r3, r7
 8005f70:	461f      	mov	r7, r3
 8005f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f76:	2a30      	cmp	r2, #48	; 0x30
 8005f78:	d0fa      	beq.n	8005f70 <_dtoa_r+0xb68>
 8005f7a:	e6f9      	b.n	8005d70 <_dtoa_r+0x968>
 8005f7c:	9a03      	ldr	r2, [sp, #12]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d1a5      	bne.n	8005ece <_dtoa_r+0xac6>
 8005f82:	2331      	movs	r3, #49	; 0x31
 8005f84:	f10a 0a01 	add.w	sl, sl, #1
 8005f88:	e779      	b.n	8005e7e <_dtoa_r+0xa76>
 8005f8a:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <_dtoa_r+0xbd4>)
 8005f8c:	f7ff baa8 	b.w	80054e0 <_dtoa_r+0xd8>
 8005f90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f47f aa81 	bne.w	800549a <_dtoa_r+0x92>
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <_dtoa_r+0xbd8>)
 8005f9a:	f7ff baa1 	b.w	80054e0 <_dtoa_r+0xd8>
 8005f9e:	f1b9 0f00 	cmp.w	r9, #0
 8005fa2:	dc03      	bgt.n	8005fac <_dtoa_r+0xba4>
 8005fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	f73f aecb 	bgt.w	8005d42 <_dtoa_r+0x93a>
 8005fac:	9f03      	ldr	r7, [sp, #12]
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4658      	mov	r0, fp
 8005fb2:	f7ff f99b 	bl	80052ec <quorem>
 8005fb6:	9a03      	ldr	r2, [sp, #12]
 8005fb8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005fbc:	f807 3b01 	strb.w	r3, [r7], #1
 8005fc0:	1aba      	subs	r2, r7, r2
 8005fc2:	4591      	cmp	r9, r2
 8005fc4:	ddba      	ble.n	8005f3c <_dtoa_r+0xb34>
 8005fc6:	4659      	mov	r1, fp
 8005fc8:	2300      	movs	r3, #0
 8005fca:	220a      	movs	r2, #10
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 f983 	bl	80062d8 <__multadd>
 8005fd2:	4683      	mov	fp, r0
 8005fd4:	e7eb      	b.n	8005fae <_dtoa_r+0xba6>
 8005fd6:	bf00      	nop
 8005fd8:	08007cdf 	.word	0x08007cdf
 8005fdc:	08007c3c 	.word	0x08007c3c
 8005fe0:	08007c60 	.word	0x08007c60

08005fe4 <std>:
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	b510      	push	{r4, lr}
 8005fe8:	4604      	mov	r4, r0
 8005fea:	e9c0 3300 	strd	r3, r3, [r0]
 8005fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ff2:	6083      	str	r3, [r0, #8]
 8005ff4:	8181      	strh	r1, [r0, #12]
 8005ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ff8:	81c2      	strh	r2, [r0, #14]
 8005ffa:	6183      	str	r3, [r0, #24]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	2208      	movs	r2, #8
 8006000:	305c      	adds	r0, #92	; 0x5c
 8006002:	f7fe fbe7 	bl	80047d4 <memset>
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <std+0x38>)
 8006008:	6224      	str	r4, [r4, #32]
 800600a:	6263      	str	r3, [r4, #36]	; 0x24
 800600c:	4b04      	ldr	r3, [pc, #16]	; (8006020 <std+0x3c>)
 800600e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <std+0x40>)
 8006012:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <std+0x44>)
 8006016:	6323      	str	r3, [r4, #48]	; 0x30
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	08006ea9 	.word	0x08006ea9
 8006020:	08006ecb 	.word	0x08006ecb
 8006024:	08006f03 	.word	0x08006f03
 8006028:	08006f27 	.word	0x08006f27

0800602c <_cleanup_r>:
 800602c:	4901      	ldr	r1, [pc, #4]	; (8006034 <_cleanup_r+0x8>)
 800602e:	f000 b8af 	b.w	8006190 <_fwalk_reent>
 8006032:	bf00      	nop
 8006034:	08007235 	.word	0x08007235

08006038 <__sfmoreglue>:
 8006038:	2268      	movs	r2, #104	; 0x68
 800603a:	b570      	push	{r4, r5, r6, lr}
 800603c:	1e4d      	subs	r5, r1, #1
 800603e:	4355      	muls	r5, r2
 8006040:	460e      	mov	r6, r1
 8006042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006046:	f7fe fc35 	bl	80048b4 <_malloc_r>
 800604a:	4604      	mov	r4, r0
 800604c:	b140      	cbz	r0, 8006060 <__sfmoreglue+0x28>
 800604e:	2100      	movs	r1, #0
 8006050:	e9c0 1600 	strd	r1, r6, [r0]
 8006054:	300c      	adds	r0, #12
 8006056:	60a0      	str	r0, [r4, #8]
 8006058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800605c:	f7fe fbba 	bl	80047d4 <memset>
 8006060:	4620      	mov	r0, r4
 8006062:	bd70      	pop	{r4, r5, r6, pc}

08006064 <__sfp_lock_acquire>:
 8006064:	4801      	ldr	r0, [pc, #4]	; (800606c <__sfp_lock_acquire+0x8>)
 8006066:	f000 b8b8 	b.w	80061da <__retarget_lock_acquire_recursive>
 800606a:	bf00      	nop
 800606c:	20000419 	.word	0x20000419

08006070 <__sfp_lock_release>:
 8006070:	4801      	ldr	r0, [pc, #4]	; (8006078 <__sfp_lock_release+0x8>)
 8006072:	f000 b8b3 	b.w	80061dc <__retarget_lock_release_recursive>
 8006076:	bf00      	nop
 8006078:	20000419 	.word	0x20000419

0800607c <__sinit_lock_acquire>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__sinit_lock_acquire+0x8>)
 800607e:	f000 b8ac 	b.w	80061da <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	2000041a 	.word	0x2000041a

08006088 <__sinit_lock_release>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__sinit_lock_release+0x8>)
 800608a:	f000 b8a7 	b.w	80061dc <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	2000041a 	.word	0x2000041a

08006094 <__sinit>:
 8006094:	b510      	push	{r4, lr}
 8006096:	4604      	mov	r4, r0
 8006098:	f7ff fff0 	bl	800607c <__sinit_lock_acquire>
 800609c:	69a3      	ldr	r3, [r4, #24]
 800609e:	b11b      	cbz	r3, 80060a8 <__sinit+0x14>
 80060a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a4:	f7ff bff0 	b.w	8006088 <__sinit_lock_release>
 80060a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060ac:	6523      	str	r3, [r4, #80]	; 0x50
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <__sinit+0x68>)
 80060b0:	4a13      	ldr	r2, [pc, #76]	; (8006100 <__sinit+0x6c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	bf08      	it	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	4620      	mov	r0, r4
 80060be:	bf08      	it	eq
 80060c0:	61a3      	streq	r3, [r4, #24]
 80060c2:	f000 f81f 	bl	8006104 <__sfp>
 80060c6:	6060      	str	r0, [r4, #4]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 f81b 	bl	8006104 <__sfp>
 80060ce:	60a0      	str	r0, [r4, #8]
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f817 	bl	8006104 <__sfp>
 80060d6:	2200      	movs	r2, #0
 80060d8:	2104      	movs	r1, #4
 80060da:	60e0      	str	r0, [r4, #12]
 80060dc:	6860      	ldr	r0, [r4, #4]
 80060de:	f7ff ff81 	bl	8005fe4 <std>
 80060e2:	2201      	movs	r2, #1
 80060e4:	2109      	movs	r1, #9
 80060e6:	68a0      	ldr	r0, [r4, #8]
 80060e8:	f7ff ff7c 	bl	8005fe4 <std>
 80060ec:	2202      	movs	r2, #2
 80060ee:	2112      	movs	r1, #18
 80060f0:	68e0      	ldr	r0, [r4, #12]
 80060f2:	f7ff ff77 	bl	8005fe4 <std>
 80060f6:	2301      	movs	r3, #1
 80060f8:	61a3      	str	r3, [r4, #24]
 80060fa:	e7d1      	b.n	80060a0 <__sinit+0xc>
 80060fc:	08007c28 	.word	0x08007c28
 8006100:	0800602d 	.word	0x0800602d

08006104 <__sfp>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	4607      	mov	r7, r0
 8006108:	f7ff ffac 	bl	8006064 <__sfp_lock_acquire>
 800610c:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <__sfp+0x84>)
 800610e:	681e      	ldr	r6, [r3, #0]
 8006110:	69b3      	ldr	r3, [r6, #24]
 8006112:	b913      	cbnz	r3, 800611a <__sfp+0x16>
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff ffbd 	bl	8006094 <__sinit>
 800611a:	3648      	adds	r6, #72	; 0x48
 800611c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006120:	3b01      	subs	r3, #1
 8006122:	d503      	bpl.n	800612c <__sfp+0x28>
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	b30b      	cbz	r3, 800616c <__sfp+0x68>
 8006128:	6836      	ldr	r6, [r6, #0]
 800612a:	e7f7      	b.n	800611c <__sfp+0x18>
 800612c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006130:	b9d5      	cbnz	r5, 8006168 <__sfp+0x64>
 8006132:	4b16      	ldr	r3, [pc, #88]	; (800618c <__sfp+0x88>)
 8006134:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006138:	60e3      	str	r3, [r4, #12]
 800613a:	6665      	str	r5, [r4, #100]	; 0x64
 800613c:	f000 f84c 	bl	80061d8 <__retarget_lock_init_recursive>
 8006140:	f7ff ff96 	bl	8006070 <__sfp_lock_release>
 8006144:	2208      	movs	r2, #8
 8006146:	4629      	mov	r1, r5
 8006148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800614c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006150:	6025      	str	r5, [r4, #0]
 8006152:	61a5      	str	r5, [r4, #24]
 8006154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006158:	f7fe fb3c 	bl	80047d4 <memset>
 800615c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006164:	4620      	mov	r0, r4
 8006166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006168:	3468      	adds	r4, #104	; 0x68
 800616a:	e7d9      	b.n	8006120 <__sfp+0x1c>
 800616c:	2104      	movs	r1, #4
 800616e:	4638      	mov	r0, r7
 8006170:	f7ff ff62 	bl	8006038 <__sfmoreglue>
 8006174:	4604      	mov	r4, r0
 8006176:	6030      	str	r0, [r6, #0]
 8006178:	2800      	cmp	r0, #0
 800617a:	d1d5      	bne.n	8006128 <__sfp+0x24>
 800617c:	f7ff ff78 	bl	8006070 <__sfp_lock_release>
 8006180:	230c      	movs	r3, #12
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	e7ee      	b.n	8006164 <__sfp+0x60>
 8006186:	bf00      	nop
 8006188:	08007c28 	.word	0x08007c28
 800618c:	ffff0001 	.word	0xffff0001

08006190 <_fwalk_reent>:
 8006190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006194:	4606      	mov	r6, r0
 8006196:	4688      	mov	r8, r1
 8006198:	2700      	movs	r7, #0
 800619a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800619e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061a2:	f1b9 0901 	subs.w	r9, r9, #1
 80061a6:	d505      	bpl.n	80061b4 <_fwalk_reent+0x24>
 80061a8:	6824      	ldr	r4, [r4, #0]
 80061aa:	2c00      	cmp	r4, #0
 80061ac:	d1f7      	bne.n	800619e <_fwalk_reent+0xe>
 80061ae:	4638      	mov	r0, r7
 80061b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061b4:	89ab      	ldrh	r3, [r5, #12]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d907      	bls.n	80061ca <_fwalk_reent+0x3a>
 80061ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061be:	3301      	adds	r3, #1
 80061c0:	d003      	beq.n	80061ca <_fwalk_reent+0x3a>
 80061c2:	4629      	mov	r1, r5
 80061c4:	4630      	mov	r0, r6
 80061c6:	47c0      	blx	r8
 80061c8:	4307      	orrs	r7, r0
 80061ca:	3568      	adds	r5, #104	; 0x68
 80061cc:	e7e9      	b.n	80061a2 <_fwalk_reent+0x12>
	...

080061d0 <_localeconv_r>:
 80061d0:	4800      	ldr	r0, [pc, #0]	; (80061d4 <_localeconv_r+0x4>)
 80061d2:	4770      	bx	lr
 80061d4:	20000160 	.word	0x20000160

080061d8 <__retarget_lock_init_recursive>:
 80061d8:	4770      	bx	lr

080061da <__retarget_lock_acquire_recursive>:
 80061da:	4770      	bx	lr

080061dc <__retarget_lock_release_recursive>:
 80061dc:	4770      	bx	lr

080061de <memchr>:
 80061de:	4603      	mov	r3, r0
 80061e0:	b510      	push	{r4, lr}
 80061e2:	b2c9      	uxtb	r1, r1
 80061e4:	4402      	add	r2, r0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	d101      	bne.n	80061f0 <memchr+0x12>
 80061ec:	2000      	movs	r0, #0
 80061ee:	e003      	b.n	80061f8 <memchr+0x1a>
 80061f0:	7804      	ldrb	r4, [r0, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	428c      	cmp	r4, r1
 80061f6:	d1f6      	bne.n	80061e6 <memchr+0x8>
 80061f8:	bd10      	pop	{r4, pc}
	...

080061fc <__malloc_lock>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__malloc_lock+0x8>)
 80061fe:	f7ff bfec 	b.w	80061da <__retarget_lock_acquire_recursive>
 8006202:	bf00      	nop
 8006204:	20000418 	.word	0x20000418

08006208 <__malloc_unlock>:
 8006208:	4801      	ldr	r0, [pc, #4]	; (8006210 <__malloc_unlock+0x8>)
 800620a:	f7ff bfe7 	b.w	80061dc <__retarget_lock_release_recursive>
 800620e:	bf00      	nop
 8006210:	20000418 	.word	0x20000418

08006214 <_Balloc>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006218:	4604      	mov	r4, r0
 800621a:	460d      	mov	r5, r1
 800621c:	b976      	cbnz	r6, 800623c <_Balloc+0x28>
 800621e:	2010      	movs	r0, #16
 8006220:	f7fe faba 	bl	8004798 <malloc>
 8006224:	4602      	mov	r2, r0
 8006226:	6260      	str	r0, [r4, #36]	; 0x24
 8006228:	b920      	cbnz	r0, 8006234 <_Balloc+0x20>
 800622a:	2166      	movs	r1, #102	; 0x66
 800622c:	4b17      	ldr	r3, [pc, #92]	; (800628c <_Balloc+0x78>)
 800622e:	4818      	ldr	r0, [pc, #96]	; (8006290 <_Balloc+0x7c>)
 8006230:	f000 ff50 	bl	80070d4 <__assert_func>
 8006234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006238:	6006      	str	r6, [r0, #0]
 800623a:	60c6      	str	r6, [r0, #12]
 800623c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800623e:	68f3      	ldr	r3, [r6, #12]
 8006240:	b183      	cbz	r3, 8006264 <_Balloc+0x50>
 8006242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800624a:	b9b8      	cbnz	r0, 800627c <_Balloc+0x68>
 800624c:	2101      	movs	r1, #1
 800624e:	fa01 f605 	lsl.w	r6, r1, r5
 8006252:	1d72      	adds	r2, r6, #5
 8006254:	4620      	mov	r0, r4
 8006256:	0092      	lsls	r2, r2, #2
 8006258:	f000 fb5e 	bl	8006918 <_calloc_r>
 800625c:	b160      	cbz	r0, 8006278 <_Balloc+0x64>
 800625e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006262:	e00e      	b.n	8006282 <_Balloc+0x6e>
 8006264:	2221      	movs	r2, #33	; 0x21
 8006266:	2104      	movs	r1, #4
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fb55 	bl	8006918 <_calloc_r>
 800626e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006270:	60f0      	str	r0, [r6, #12]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e4      	bne.n	8006242 <_Balloc+0x2e>
 8006278:	2000      	movs	r0, #0
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	6802      	ldr	r2, [r0, #0]
 800627e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006282:	2300      	movs	r3, #0
 8006284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006288:	e7f7      	b.n	800627a <_Balloc+0x66>
 800628a:	bf00      	nop
 800628c:	08007c6d 	.word	0x08007c6d
 8006290:	08007d50 	.word	0x08007d50

08006294 <_Bfree>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006298:	4605      	mov	r5, r0
 800629a:	460c      	mov	r4, r1
 800629c:	b976      	cbnz	r6, 80062bc <_Bfree+0x28>
 800629e:	2010      	movs	r0, #16
 80062a0:	f7fe fa7a 	bl	8004798 <malloc>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6268      	str	r0, [r5, #36]	; 0x24
 80062a8:	b920      	cbnz	r0, 80062b4 <_Bfree+0x20>
 80062aa:	218a      	movs	r1, #138	; 0x8a
 80062ac:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <_Bfree+0x3c>)
 80062ae:	4809      	ldr	r0, [pc, #36]	; (80062d4 <_Bfree+0x40>)
 80062b0:	f000 ff10 	bl	80070d4 <__assert_func>
 80062b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062b8:	6006      	str	r6, [r0, #0]
 80062ba:	60c6      	str	r6, [r0, #12]
 80062bc:	b13c      	cbz	r4, 80062ce <_Bfree+0x3a>
 80062be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062c0:	6862      	ldr	r2, [r4, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062c8:	6021      	str	r1, [r4, #0]
 80062ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	08007c6d 	.word	0x08007c6d
 80062d4:	08007d50 	.word	0x08007d50

080062d8 <__multadd>:
 80062d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062dc:	4607      	mov	r7, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	461e      	mov	r6, r3
 80062e2:	2000      	movs	r0, #0
 80062e4:	690d      	ldr	r5, [r1, #16]
 80062e6:	f101 0c14 	add.w	ip, r1, #20
 80062ea:	f8dc 3000 	ldr.w	r3, [ip]
 80062ee:	3001      	adds	r0, #1
 80062f0:	b299      	uxth	r1, r3
 80062f2:	fb02 6101 	mla	r1, r2, r1, r6
 80062f6:	0c1e      	lsrs	r6, r3, #16
 80062f8:	0c0b      	lsrs	r3, r1, #16
 80062fa:	fb02 3306 	mla	r3, r2, r6, r3
 80062fe:	b289      	uxth	r1, r1
 8006300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006304:	4285      	cmp	r5, r0
 8006306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800630a:	f84c 1b04 	str.w	r1, [ip], #4
 800630e:	dcec      	bgt.n	80062ea <__multadd+0x12>
 8006310:	b30e      	cbz	r6, 8006356 <__multadd+0x7e>
 8006312:	68a3      	ldr	r3, [r4, #8]
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc19      	bgt.n	800634c <__multadd+0x74>
 8006318:	6861      	ldr	r1, [r4, #4]
 800631a:	4638      	mov	r0, r7
 800631c:	3101      	adds	r1, #1
 800631e:	f7ff ff79 	bl	8006214 <_Balloc>
 8006322:	4680      	mov	r8, r0
 8006324:	b928      	cbnz	r0, 8006332 <__multadd+0x5a>
 8006326:	4602      	mov	r2, r0
 8006328:	21b5      	movs	r1, #181	; 0xb5
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <__multadd+0x84>)
 800632c:	480c      	ldr	r0, [pc, #48]	; (8006360 <__multadd+0x88>)
 800632e:	f000 fed1 	bl	80070d4 <__assert_func>
 8006332:	6922      	ldr	r2, [r4, #16]
 8006334:	f104 010c 	add.w	r1, r4, #12
 8006338:	3202      	adds	r2, #2
 800633a:	0092      	lsls	r2, r2, #2
 800633c:	300c      	adds	r0, #12
 800633e:	f7fe fa3b 	bl	80047b8 <memcpy>
 8006342:	4621      	mov	r1, r4
 8006344:	4638      	mov	r0, r7
 8006346:	f7ff ffa5 	bl	8006294 <_Bfree>
 800634a:	4644      	mov	r4, r8
 800634c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006350:	3501      	adds	r5, #1
 8006352:	615e      	str	r6, [r3, #20]
 8006354:	6125      	str	r5, [r4, #16]
 8006356:	4620      	mov	r0, r4
 8006358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800635c:	08007cdf 	.word	0x08007cdf
 8006360:	08007d50 	.word	0x08007d50

08006364 <__hi0bits>:
 8006364:	0c02      	lsrs	r2, r0, #16
 8006366:	0412      	lsls	r2, r2, #16
 8006368:	4603      	mov	r3, r0
 800636a:	b9ca      	cbnz	r2, 80063a0 <__hi0bits+0x3c>
 800636c:	0403      	lsls	r3, r0, #16
 800636e:	2010      	movs	r0, #16
 8006370:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006374:	bf04      	itt	eq
 8006376:	021b      	lsleq	r3, r3, #8
 8006378:	3008      	addeq	r0, #8
 800637a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800637e:	bf04      	itt	eq
 8006380:	011b      	lsleq	r3, r3, #4
 8006382:	3004      	addeq	r0, #4
 8006384:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006388:	bf04      	itt	eq
 800638a:	009b      	lsleq	r3, r3, #2
 800638c:	3002      	addeq	r0, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	db05      	blt.n	800639e <__hi0bits+0x3a>
 8006392:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006396:	f100 0001 	add.w	r0, r0, #1
 800639a:	bf08      	it	eq
 800639c:	2020      	moveq	r0, #32
 800639e:	4770      	bx	lr
 80063a0:	2000      	movs	r0, #0
 80063a2:	e7e5      	b.n	8006370 <__hi0bits+0xc>

080063a4 <__lo0bits>:
 80063a4:	6803      	ldr	r3, [r0, #0]
 80063a6:	4602      	mov	r2, r0
 80063a8:	f013 0007 	ands.w	r0, r3, #7
 80063ac:	d00b      	beq.n	80063c6 <__lo0bits+0x22>
 80063ae:	07d9      	lsls	r1, r3, #31
 80063b0:	d421      	bmi.n	80063f6 <__lo0bits+0x52>
 80063b2:	0798      	lsls	r0, r3, #30
 80063b4:	bf49      	itett	mi
 80063b6:	085b      	lsrmi	r3, r3, #1
 80063b8:	089b      	lsrpl	r3, r3, #2
 80063ba:	2001      	movmi	r0, #1
 80063bc:	6013      	strmi	r3, [r2, #0]
 80063be:	bf5c      	itt	pl
 80063c0:	2002      	movpl	r0, #2
 80063c2:	6013      	strpl	r3, [r2, #0]
 80063c4:	4770      	bx	lr
 80063c6:	b299      	uxth	r1, r3
 80063c8:	b909      	cbnz	r1, 80063ce <__lo0bits+0x2a>
 80063ca:	2010      	movs	r0, #16
 80063cc:	0c1b      	lsrs	r3, r3, #16
 80063ce:	b2d9      	uxtb	r1, r3
 80063d0:	b909      	cbnz	r1, 80063d6 <__lo0bits+0x32>
 80063d2:	3008      	adds	r0, #8
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	0719      	lsls	r1, r3, #28
 80063d8:	bf04      	itt	eq
 80063da:	091b      	lsreq	r3, r3, #4
 80063dc:	3004      	addeq	r0, #4
 80063de:	0799      	lsls	r1, r3, #30
 80063e0:	bf04      	itt	eq
 80063e2:	089b      	lsreq	r3, r3, #2
 80063e4:	3002      	addeq	r0, #2
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	d403      	bmi.n	80063f2 <__lo0bits+0x4e>
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	f100 0001 	add.w	r0, r0, #1
 80063f0:	d003      	beq.n	80063fa <__lo0bits+0x56>
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4770      	bx	lr
 80063f6:	2000      	movs	r0, #0
 80063f8:	4770      	bx	lr
 80063fa:	2020      	movs	r0, #32
 80063fc:	4770      	bx	lr
	...

08006400 <__i2b>:
 8006400:	b510      	push	{r4, lr}
 8006402:	460c      	mov	r4, r1
 8006404:	2101      	movs	r1, #1
 8006406:	f7ff ff05 	bl	8006214 <_Balloc>
 800640a:	4602      	mov	r2, r0
 800640c:	b928      	cbnz	r0, 800641a <__i2b+0x1a>
 800640e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <__i2b+0x24>)
 8006414:	4804      	ldr	r0, [pc, #16]	; (8006428 <__i2b+0x28>)
 8006416:	f000 fe5d 	bl	80070d4 <__assert_func>
 800641a:	2301      	movs	r3, #1
 800641c:	6144      	str	r4, [r0, #20]
 800641e:	6103      	str	r3, [r0, #16]
 8006420:	bd10      	pop	{r4, pc}
 8006422:	bf00      	nop
 8006424:	08007cdf 	.word	0x08007cdf
 8006428:	08007d50 	.word	0x08007d50

0800642c <__multiply>:
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	4691      	mov	r9, r2
 8006432:	690a      	ldr	r2, [r1, #16]
 8006434:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006438:	460c      	mov	r4, r1
 800643a:	429a      	cmp	r2, r3
 800643c:	bfbe      	ittt	lt
 800643e:	460b      	movlt	r3, r1
 8006440:	464c      	movlt	r4, r9
 8006442:	4699      	movlt	r9, r3
 8006444:	6927      	ldr	r7, [r4, #16]
 8006446:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	6861      	ldr	r1, [r4, #4]
 800644e:	eb07 060a 	add.w	r6, r7, sl
 8006452:	42b3      	cmp	r3, r6
 8006454:	b085      	sub	sp, #20
 8006456:	bfb8      	it	lt
 8006458:	3101      	addlt	r1, #1
 800645a:	f7ff fedb 	bl	8006214 <_Balloc>
 800645e:	b930      	cbnz	r0, 800646e <__multiply+0x42>
 8006460:	4602      	mov	r2, r0
 8006462:	f240 115d 	movw	r1, #349	; 0x15d
 8006466:	4b43      	ldr	r3, [pc, #268]	; (8006574 <__multiply+0x148>)
 8006468:	4843      	ldr	r0, [pc, #268]	; (8006578 <__multiply+0x14c>)
 800646a:	f000 fe33 	bl	80070d4 <__assert_func>
 800646e:	f100 0514 	add.w	r5, r0, #20
 8006472:	462b      	mov	r3, r5
 8006474:	2200      	movs	r2, #0
 8006476:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800647a:	4543      	cmp	r3, r8
 800647c:	d321      	bcc.n	80064c2 <__multiply+0x96>
 800647e:	f104 0314 	add.w	r3, r4, #20
 8006482:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006486:	f109 0314 	add.w	r3, r9, #20
 800648a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800648e:	9202      	str	r2, [sp, #8]
 8006490:	1b3a      	subs	r2, r7, r4
 8006492:	3a15      	subs	r2, #21
 8006494:	f022 0203 	bic.w	r2, r2, #3
 8006498:	3204      	adds	r2, #4
 800649a:	f104 0115 	add.w	r1, r4, #21
 800649e:	428f      	cmp	r7, r1
 80064a0:	bf38      	it	cc
 80064a2:	2204      	movcc	r2, #4
 80064a4:	9201      	str	r2, [sp, #4]
 80064a6:	9a02      	ldr	r2, [sp, #8]
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d80c      	bhi.n	80064c8 <__multiply+0x9c>
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	dd03      	ble.n	80064ba <__multiply+0x8e>
 80064b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d059      	beq.n	800656e <__multiply+0x142>
 80064ba:	6106      	str	r6, [r0, #16]
 80064bc:	b005      	add	sp, #20
 80064be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c2:	f843 2b04 	str.w	r2, [r3], #4
 80064c6:	e7d8      	b.n	800647a <__multiply+0x4e>
 80064c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80064cc:	f1ba 0f00 	cmp.w	sl, #0
 80064d0:	d023      	beq.n	800651a <__multiply+0xee>
 80064d2:	46a9      	mov	r9, r5
 80064d4:	f04f 0c00 	mov.w	ip, #0
 80064d8:	f104 0e14 	add.w	lr, r4, #20
 80064dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064e0:	f8d9 1000 	ldr.w	r1, [r9]
 80064e4:	fa1f fb82 	uxth.w	fp, r2
 80064e8:	b289      	uxth	r1, r1
 80064ea:	fb0a 110b 	mla	r1, sl, fp, r1
 80064ee:	4461      	add	r1, ip
 80064f0:	f8d9 c000 	ldr.w	ip, [r9]
 80064f4:	0c12      	lsrs	r2, r2, #16
 80064f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80064fa:	fb0a c202 	mla	r2, sl, r2, ip
 80064fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006502:	b289      	uxth	r1, r1
 8006504:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006508:	4577      	cmp	r7, lr
 800650a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800650e:	f849 1b04 	str.w	r1, [r9], #4
 8006512:	d8e3      	bhi.n	80064dc <__multiply+0xb0>
 8006514:	9a01      	ldr	r2, [sp, #4]
 8006516:	f845 c002 	str.w	ip, [r5, r2]
 800651a:	9a03      	ldr	r2, [sp, #12]
 800651c:	3304      	adds	r3, #4
 800651e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006522:	f1b9 0f00 	cmp.w	r9, #0
 8006526:	d020      	beq.n	800656a <__multiply+0x13e>
 8006528:	46ae      	mov	lr, r5
 800652a:	f04f 0a00 	mov.w	sl, #0
 800652e:	6829      	ldr	r1, [r5, #0]
 8006530:	f104 0c14 	add.w	ip, r4, #20
 8006534:	f8bc b000 	ldrh.w	fp, [ip]
 8006538:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800653c:	b289      	uxth	r1, r1
 800653e:	fb09 220b 	mla	r2, r9, fp, r2
 8006542:	4492      	add	sl, r2
 8006544:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006548:	f84e 1b04 	str.w	r1, [lr], #4
 800654c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006550:	f8be 1000 	ldrh.w	r1, [lr]
 8006554:	0c12      	lsrs	r2, r2, #16
 8006556:	fb09 1102 	mla	r1, r9, r2, r1
 800655a:	4567      	cmp	r7, ip
 800655c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006560:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006564:	d8e6      	bhi.n	8006534 <__multiply+0x108>
 8006566:	9a01      	ldr	r2, [sp, #4]
 8006568:	50a9      	str	r1, [r5, r2]
 800656a:	3504      	adds	r5, #4
 800656c:	e79b      	b.n	80064a6 <__multiply+0x7a>
 800656e:	3e01      	subs	r6, #1
 8006570:	e79d      	b.n	80064ae <__multiply+0x82>
 8006572:	bf00      	nop
 8006574:	08007cdf 	.word	0x08007cdf
 8006578:	08007d50 	.word	0x08007d50

0800657c <__pow5mult>:
 800657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006580:	4615      	mov	r5, r2
 8006582:	f012 0203 	ands.w	r2, r2, #3
 8006586:	4606      	mov	r6, r0
 8006588:	460f      	mov	r7, r1
 800658a:	d007      	beq.n	800659c <__pow5mult+0x20>
 800658c:	4c25      	ldr	r4, [pc, #148]	; (8006624 <__pow5mult+0xa8>)
 800658e:	3a01      	subs	r2, #1
 8006590:	2300      	movs	r3, #0
 8006592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006596:	f7ff fe9f 	bl	80062d8 <__multadd>
 800659a:	4607      	mov	r7, r0
 800659c:	10ad      	asrs	r5, r5, #2
 800659e:	d03d      	beq.n	800661c <__pow5mult+0xa0>
 80065a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065a2:	b97c      	cbnz	r4, 80065c4 <__pow5mult+0x48>
 80065a4:	2010      	movs	r0, #16
 80065a6:	f7fe f8f7 	bl	8004798 <malloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	6270      	str	r0, [r6, #36]	; 0x24
 80065ae:	b928      	cbnz	r0, 80065bc <__pow5mult+0x40>
 80065b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065b4:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <__pow5mult+0xac>)
 80065b6:	481d      	ldr	r0, [pc, #116]	; (800662c <__pow5mult+0xb0>)
 80065b8:	f000 fd8c 	bl	80070d4 <__assert_func>
 80065bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065c0:	6004      	str	r4, [r0, #0]
 80065c2:	60c4      	str	r4, [r0, #12]
 80065c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065cc:	b94c      	cbnz	r4, 80065e2 <__pow5mult+0x66>
 80065ce:	f240 2171 	movw	r1, #625	; 0x271
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7ff ff14 	bl	8006400 <__i2b>
 80065d8:	2300      	movs	r3, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80065e0:	6003      	str	r3, [r0, #0]
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	07eb      	lsls	r3, r5, #31
 80065e8:	d50a      	bpl.n	8006600 <__pow5mult+0x84>
 80065ea:	4639      	mov	r1, r7
 80065ec:	4622      	mov	r2, r4
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff ff1c 	bl	800642c <__multiply>
 80065f4:	4680      	mov	r8, r0
 80065f6:	4639      	mov	r1, r7
 80065f8:	4630      	mov	r0, r6
 80065fa:	f7ff fe4b 	bl	8006294 <_Bfree>
 80065fe:	4647      	mov	r7, r8
 8006600:	106d      	asrs	r5, r5, #1
 8006602:	d00b      	beq.n	800661c <__pow5mult+0xa0>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	b938      	cbnz	r0, 8006618 <__pow5mult+0x9c>
 8006608:	4622      	mov	r2, r4
 800660a:	4621      	mov	r1, r4
 800660c:	4630      	mov	r0, r6
 800660e:	f7ff ff0d 	bl	800642c <__multiply>
 8006612:	6020      	str	r0, [r4, #0]
 8006614:	f8c0 9000 	str.w	r9, [r0]
 8006618:	4604      	mov	r4, r0
 800661a:	e7e4      	b.n	80065e6 <__pow5mult+0x6a>
 800661c:	4638      	mov	r0, r7
 800661e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006622:	bf00      	nop
 8006624:	08007ea0 	.word	0x08007ea0
 8006628:	08007c6d 	.word	0x08007c6d
 800662c:	08007d50 	.word	0x08007d50

08006630 <__lshift>:
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	4607      	mov	r7, r0
 8006638:	4691      	mov	r9, r2
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	6849      	ldr	r1, [r1, #4]
 800663e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006642:	68a3      	ldr	r3, [r4, #8]
 8006644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006648:	f108 0601 	add.w	r6, r8, #1
 800664c:	42b3      	cmp	r3, r6
 800664e:	db0b      	blt.n	8006668 <__lshift+0x38>
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff fddf 	bl	8006214 <_Balloc>
 8006656:	4605      	mov	r5, r0
 8006658:	b948      	cbnz	r0, 800666e <__lshift+0x3e>
 800665a:	4602      	mov	r2, r0
 800665c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006660:	4b29      	ldr	r3, [pc, #164]	; (8006708 <__lshift+0xd8>)
 8006662:	482a      	ldr	r0, [pc, #168]	; (800670c <__lshift+0xdc>)
 8006664:	f000 fd36 	bl	80070d4 <__assert_func>
 8006668:	3101      	adds	r1, #1
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	e7ee      	b.n	800664c <__lshift+0x1c>
 800666e:	2300      	movs	r3, #0
 8006670:	f100 0114 	add.w	r1, r0, #20
 8006674:	f100 0210 	add.w	r2, r0, #16
 8006678:	4618      	mov	r0, r3
 800667a:	4553      	cmp	r3, sl
 800667c:	db37      	blt.n	80066ee <__lshift+0xbe>
 800667e:	6920      	ldr	r0, [r4, #16]
 8006680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006684:	f104 0314 	add.w	r3, r4, #20
 8006688:	f019 091f 	ands.w	r9, r9, #31
 800668c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006690:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006694:	d02f      	beq.n	80066f6 <__lshift+0xc6>
 8006696:	468a      	mov	sl, r1
 8006698:	f04f 0c00 	mov.w	ip, #0
 800669c:	f1c9 0e20 	rsb	lr, r9, #32
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	fa02 f209 	lsl.w	r2, r2, r9
 80066a6:	ea42 020c 	orr.w	r2, r2, ip
 80066aa:	f84a 2b04 	str.w	r2, [sl], #4
 80066ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b2:	4298      	cmp	r0, r3
 80066b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066b8:	d8f2      	bhi.n	80066a0 <__lshift+0x70>
 80066ba:	1b03      	subs	r3, r0, r4
 80066bc:	3b15      	subs	r3, #21
 80066be:	f023 0303 	bic.w	r3, r3, #3
 80066c2:	3304      	adds	r3, #4
 80066c4:	f104 0215 	add.w	r2, r4, #21
 80066c8:	4290      	cmp	r0, r2
 80066ca:	bf38      	it	cc
 80066cc:	2304      	movcc	r3, #4
 80066ce:	f841 c003 	str.w	ip, [r1, r3]
 80066d2:	f1bc 0f00 	cmp.w	ip, #0
 80066d6:	d001      	beq.n	80066dc <__lshift+0xac>
 80066d8:	f108 0602 	add.w	r6, r8, #2
 80066dc:	3e01      	subs	r6, #1
 80066de:	4638      	mov	r0, r7
 80066e0:	4621      	mov	r1, r4
 80066e2:	612e      	str	r6, [r5, #16]
 80066e4:	f7ff fdd6 	bl	8006294 <_Bfree>
 80066e8:	4628      	mov	r0, r5
 80066ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80066f2:	3301      	adds	r3, #1
 80066f4:	e7c1      	b.n	800667a <__lshift+0x4a>
 80066f6:	3904      	subs	r1, #4
 80066f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fc:	4298      	cmp	r0, r3
 80066fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006702:	d8f9      	bhi.n	80066f8 <__lshift+0xc8>
 8006704:	e7ea      	b.n	80066dc <__lshift+0xac>
 8006706:	bf00      	nop
 8006708:	08007cdf 	.word	0x08007cdf
 800670c:	08007d50 	.word	0x08007d50

08006710 <__mcmp>:
 8006710:	4603      	mov	r3, r0
 8006712:	690a      	ldr	r2, [r1, #16]
 8006714:	6900      	ldr	r0, [r0, #16]
 8006716:	b530      	push	{r4, r5, lr}
 8006718:	1a80      	subs	r0, r0, r2
 800671a:	d10d      	bne.n	8006738 <__mcmp+0x28>
 800671c:	3314      	adds	r3, #20
 800671e:	3114      	adds	r1, #20
 8006720:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006724:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800672c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006730:	4295      	cmp	r5, r2
 8006732:	d002      	beq.n	800673a <__mcmp+0x2a>
 8006734:	d304      	bcc.n	8006740 <__mcmp+0x30>
 8006736:	2001      	movs	r0, #1
 8006738:	bd30      	pop	{r4, r5, pc}
 800673a:	42a3      	cmp	r3, r4
 800673c:	d3f4      	bcc.n	8006728 <__mcmp+0x18>
 800673e:	e7fb      	b.n	8006738 <__mcmp+0x28>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006744:	e7f8      	b.n	8006738 <__mcmp+0x28>
	...

08006748 <__mdiff>:
 8006748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	460d      	mov	r5, r1
 800674e:	4607      	mov	r7, r0
 8006750:	4611      	mov	r1, r2
 8006752:	4628      	mov	r0, r5
 8006754:	4614      	mov	r4, r2
 8006756:	f7ff ffdb 	bl	8006710 <__mcmp>
 800675a:	1e06      	subs	r6, r0, #0
 800675c:	d111      	bne.n	8006782 <__mdiff+0x3a>
 800675e:	4631      	mov	r1, r6
 8006760:	4638      	mov	r0, r7
 8006762:	f7ff fd57 	bl	8006214 <_Balloc>
 8006766:	4602      	mov	r2, r0
 8006768:	b928      	cbnz	r0, 8006776 <__mdiff+0x2e>
 800676a:	f240 2132 	movw	r1, #562	; 0x232
 800676e:	4b3a      	ldr	r3, [pc, #232]	; (8006858 <__mdiff+0x110>)
 8006770:	483a      	ldr	r0, [pc, #232]	; (800685c <__mdiff+0x114>)
 8006772:	f000 fcaf 	bl	80070d4 <__assert_func>
 8006776:	2301      	movs	r3, #1
 8006778:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800677c:	4610      	mov	r0, r2
 800677e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006782:	bfa4      	itt	ge
 8006784:	4623      	movge	r3, r4
 8006786:	462c      	movge	r4, r5
 8006788:	4638      	mov	r0, r7
 800678a:	6861      	ldr	r1, [r4, #4]
 800678c:	bfa6      	itte	ge
 800678e:	461d      	movge	r5, r3
 8006790:	2600      	movge	r6, #0
 8006792:	2601      	movlt	r6, #1
 8006794:	f7ff fd3e 	bl	8006214 <_Balloc>
 8006798:	4602      	mov	r2, r0
 800679a:	b918      	cbnz	r0, 80067a4 <__mdiff+0x5c>
 800679c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067a0:	4b2d      	ldr	r3, [pc, #180]	; (8006858 <__mdiff+0x110>)
 80067a2:	e7e5      	b.n	8006770 <__mdiff+0x28>
 80067a4:	f102 0814 	add.w	r8, r2, #20
 80067a8:	46c2      	mov	sl, r8
 80067aa:	f04f 0c00 	mov.w	ip, #0
 80067ae:	6927      	ldr	r7, [r4, #16]
 80067b0:	60c6      	str	r6, [r0, #12]
 80067b2:	692e      	ldr	r6, [r5, #16]
 80067b4:	f104 0014 	add.w	r0, r4, #20
 80067b8:	f105 0914 	add.w	r9, r5, #20
 80067bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80067c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067c4:	3410      	adds	r4, #16
 80067c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80067ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80067ce:	fa1f f18b 	uxth.w	r1, fp
 80067d2:	448c      	add	ip, r1
 80067d4:	b299      	uxth	r1, r3
 80067d6:	0c1b      	lsrs	r3, r3, #16
 80067d8:	ebac 0101 	sub.w	r1, ip, r1
 80067dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067e4:	b289      	uxth	r1, r1
 80067e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80067ea:	454e      	cmp	r6, r9
 80067ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067f0:	f84a 3b04 	str.w	r3, [sl], #4
 80067f4:	d8e7      	bhi.n	80067c6 <__mdiff+0x7e>
 80067f6:	1b73      	subs	r3, r6, r5
 80067f8:	3b15      	subs	r3, #21
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	3515      	adds	r5, #21
 8006800:	3304      	adds	r3, #4
 8006802:	42ae      	cmp	r6, r5
 8006804:	bf38      	it	cc
 8006806:	2304      	movcc	r3, #4
 8006808:	4418      	add	r0, r3
 800680a:	4443      	add	r3, r8
 800680c:	461e      	mov	r6, r3
 800680e:	4605      	mov	r5, r0
 8006810:	4575      	cmp	r5, lr
 8006812:	d30e      	bcc.n	8006832 <__mdiff+0xea>
 8006814:	f10e 0103 	add.w	r1, lr, #3
 8006818:	1a09      	subs	r1, r1, r0
 800681a:	f021 0103 	bic.w	r1, r1, #3
 800681e:	3803      	subs	r0, #3
 8006820:	4586      	cmp	lr, r0
 8006822:	bf38      	it	cc
 8006824:	2100      	movcc	r1, #0
 8006826:	4419      	add	r1, r3
 8006828:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800682c:	b18b      	cbz	r3, 8006852 <__mdiff+0x10a>
 800682e:	6117      	str	r7, [r2, #16]
 8006830:	e7a4      	b.n	800677c <__mdiff+0x34>
 8006832:	f855 8b04 	ldr.w	r8, [r5], #4
 8006836:	fa1f f188 	uxth.w	r1, r8
 800683a:	4461      	add	r1, ip
 800683c:	140c      	asrs	r4, r1, #16
 800683e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006842:	b289      	uxth	r1, r1
 8006844:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006848:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800684c:	f846 1b04 	str.w	r1, [r6], #4
 8006850:	e7de      	b.n	8006810 <__mdiff+0xc8>
 8006852:	3f01      	subs	r7, #1
 8006854:	e7e8      	b.n	8006828 <__mdiff+0xe0>
 8006856:	bf00      	nop
 8006858:	08007cdf 	.word	0x08007cdf
 800685c:	08007d50 	.word	0x08007d50

08006860 <__d2b>:
 8006860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006864:	2101      	movs	r1, #1
 8006866:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800686a:	4690      	mov	r8, r2
 800686c:	461d      	mov	r5, r3
 800686e:	f7ff fcd1 	bl	8006214 <_Balloc>
 8006872:	4604      	mov	r4, r0
 8006874:	b930      	cbnz	r0, 8006884 <__d2b+0x24>
 8006876:	4602      	mov	r2, r0
 8006878:	f240 310a 	movw	r1, #778	; 0x30a
 800687c:	4b24      	ldr	r3, [pc, #144]	; (8006910 <__d2b+0xb0>)
 800687e:	4825      	ldr	r0, [pc, #148]	; (8006914 <__d2b+0xb4>)
 8006880:	f000 fc28 	bl	80070d4 <__assert_func>
 8006884:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006888:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800688c:	bb2d      	cbnz	r5, 80068da <__d2b+0x7a>
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	f1b8 0300 	subs.w	r3, r8, #0
 8006894:	d026      	beq.n	80068e4 <__d2b+0x84>
 8006896:	4668      	mov	r0, sp
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	f7ff fd83 	bl	80063a4 <__lo0bits>
 800689e:	9900      	ldr	r1, [sp, #0]
 80068a0:	b1f0      	cbz	r0, 80068e0 <__d2b+0x80>
 80068a2:	9a01      	ldr	r2, [sp, #4]
 80068a4:	f1c0 0320 	rsb	r3, r0, #32
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	430b      	orrs	r3, r1
 80068ae:	40c2      	lsrs	r2, r0
 80068b0:	6163      	str	r3, [r4, #20]
 80068b2:	9201      	str	r2, [sp, #4]
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf14      	ite	ne
 80068ba:	2102      	movne	r1, #2
 80068bc:	2101      	moveq	r1, #1
 80068be:	61a3      	str	r3, [r4, #24]
 80068c0:	6121      	str	r1, [r4, #16]
 80068c2:	b1c5      	cbz	r5, 80068f6 <__d2b+0x96>
 80068c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068c8:	4405      	add	r5, r0
 80068ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068ce:	603d      	str	r5, [r7, #0]
 80068d0:	6030      	str	r0, [r6, #0]
 80068d2:	4620      	mov	r0, r4
 80068d4:	b002      	add	sp, #8
 80068d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068de:	e7d6      	b.n	800688e <__d2b+0x2e>
 80068e0:	6161      	str	r1, [r4, #20]
 80068e2:	e7e7      	b.n	80068b4 <__d2b+0x54>
 80068e4:	a801      	add	r0, sp, #4
 80068e6:	f7ff fd5d 	bl	80063a4 <__lo0bits>
 80068ea:	2101      	movs	r1, #1
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	6121      	str	r1, [r4, #16]
 80068f0:	6163      	str	r3, [r4, #20]
 80068f2:	3020      	adds	r0, #32
 80068f4:	e7e5      	b.n	80068c2 <__d2b+0x62>
 80068f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80068fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068fe:	6038      	str	r0, [r7, #0]
 8006900:	6918      	ldr	r0, [r3, #16]
 8006902:	f7ff fd2f 	bl	8006364 <__hi0bits>
 8006906:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800690a:	6031      	str	r1, [r6, #0]
 800690c:	e7e1      	b.n	80068d2 <__d2b+0x72>
 800690e:	bf00      	nop
 8006910:	08007cdf 	.word	0x08007cdf
 8006914:	08007d50 	.word	0x08007d50

08006918 <_calloc_r>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	fba1 5402 	umull	r5, r4, r1, r2
 800691e:	b934      	cbnz	r4, 800692e <_calloc_r+0x16>
 8006920:	4629      	mov	r1, r5
 8006922:	f7fd ffc7 	bl	80048b4 <_malloc_r>
 8006926:	4606      	mov	r6, r0
 8006928:	b928      	cbnz	r0, 8006936 <_calloc_r+0x1e>
 800692a:	4630      	mov	r0, r6
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	220c      	movs	r2, #12
 8006930:	2600      	movs	r6, #0
 8006932:	6002      	str	r2, [r0, #0]
 8006934:	e7f9      	b.n	800692a <_calloc_r+0x12>
 8006936:	462a      	mov	r2, r5
 8006938:	4621      	mov	r1, r4
 800693a:	f7fd ff4b 	bl	80047d4 <memset>
 800693e:	e7f4      	b.n	800692a <_calloc_r+0x12>

08006940 <__ssputs_r>:
 8006940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	688e      	ldr	r6, [r1, #8]
 8006946:	4682      	mov	sl, r0
 8006948:	429e      	cmp	r6, r3
 800694a:	460c      	mov	r4, r1
 800694c:	4690      	mov	r8, r2
 800694e:	461f      	mov	r7, r3
 8006950:	d838      	bhi.n	80069c4 <__ssputs_r+0x84>
 8006952:	898a      	ldrh	r2, [r1, #12]
 8006954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006958:	d032      	beq.n	80069c0 <__ssputs_r+0x80>
 800695a:	6825      	ldr	r5, [r4, #0]
 800695c:	6909      	ldr	r1, [r1, #16]
 800695e:	3301      	adds	r3, #1
 8006960:	eba5 0901 	sub.w	r9, r5, r1
 8006964:	6965      	ldr	r5, [r4, #20]
 8006966:	444b      	add	r3, r9
 8006968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800696c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006970:	106d      	asrs	r5, r5, #1
 8006972:	429d      	cmp	r5, r3
 8006974:	bf38      	it	cc
 8006976:	461d      	movcc	r5, r3
 8006978:	0553      	lsls	r3, r2, #21
 800697a:	d531      	bpl.n	80069e0 <__ssputs_r+0xa0>
 800697c:	4629      	mov	r1, r5
 800697e:	f7fd ff99 	bl	80048b4 <_malloc_r>
 8006982:	4606      	mov	r6, r0
 8006984:	b950      	cbnz	r0, 800699c <__ssputs_r+0x5c>
 8006986:	230c      	movs	r3, #12
 8006988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800698c:	f8ca 3000 	str.w	r3, [sl]
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699c:	464a      	mov	r2, r9
 800699e:	6921      	ldr	r1, [r4, #16]
 80069a0:	f7fd ff0a 	bl	80047b8 <memcpy>
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	6126      	str	r6, [r4, #16]
 80069b2:	444e      	add	r6, r9
 80069b4:	6026      	str	r6, [r4, #0]
 80069b6:	463e      	mov	r6, r7
 80069b8:	6165      	str	r5, [r4, #20]
 80069ba:	eba5 0509 	sub.w	r5, r5, r9
 80069be:	60a5      	str	r5, [r4, #8]
 80069c0:	42be      	cmp	r6, r7
 80069c2:	d900      	bls.n	80069c6 <__ssputs_r+0x86>
 80069c4:	463e      	mov	r6, r7
 80069c6:	4632      	mov	r2, r6
 80069c8:	4641      	mov	r1, r8
 80069ca:	6820      	ldr	r0, [r4, #0]
 80069cc:	f000 fd0a 	bl	80073e4 <memmove>
 80069d0:	68a3      	ldr	r3, [r4, #8]
 80069d2:	2000      	movs	r0, #0
 80069d4:	1b9b      	subs	r3, r3, r6
 80069d6:	60a3      	str	r3, [r4, #8]
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	4433      	add	r3, r6
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	e7db      	b.n	8006998 <__ssputs_r+0x58>
 80069e0:	462a      	mov	r2, r5
 80069e2:	f000 fd19 	bl	8007418 <_realloc_r>
 80069e6:	4606      	mov	r6, r0
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d1e1      	bne.n	80069b0 <__ssputs_r+0x70>
 80069ec:	4650      	mov	r0, sl
 80069ee:	6921      	ldr	r1, [r4, #16]
 80069f0:	f7fd fef8 	bl	80047e4 <_free_r>
 80069f4:	e7c7      	b.n	8006986 <__ssputs_r+0x46>
	...

080069f8 <_svfiprintf_r>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	4698      	mov	r8, r3
 80069fe:	898b      	ldrh	r3, [r1, #12]
 8006a00:	4607      	mov	r7, r0
 8006a02:	061b      	lsls	r3, r3, #24
 8006a04:	460d      	mov	r5, r1
 8006a06:	4614      	mov	r4, r2
 8006a08:	b09d      	sub	sp, #116	; 0x74
 8006a0a:	d50e      	bpl.n	8006a2a <_svfiprintf_r+0x32>
 8006a0c:	690b      	ldr	r3, [r1, #16]
 8006a0e:	b963      	cbnz	r3, 8006a2a <_svfiprintf_r+0x32>
 8006a10:	2140      	movs	r1, #64	; 0x40
 8006a12:	f7fd ff4f 	bl	80048b4 <_malloc_r>
 8006a16:	6028      	str	r0, [r5, #0]
 8006a18:	6128      	str	r0, [r5, #16]
 8006a1a:	b920      	cbnz	r0, 8006a26 <_svfiprintf_r+0x2e>
 8006a1c:	230c      	movs	r3, #12
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a24:	e0d1      	b.n	8006bca <_svfiprintf_r+0x1d2>
 8006a26:	2340      	movs	r3, #64	; 0x40
 8006a28:	616b      	str	r3, [r5, #20]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2e:	2320      	movs	r3, #32
 8006a30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a34:	2330      	movs	r3, #48	; 0x30
 8006a36:	f04f 0901 	mov.w	r9, #1
 8006a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006be4 <_svfiprintf_r+0x1ec>
 8006a42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a46:	4623      	mov	r3, r4
 8006a48:	469a      	mov	sl, r3
 8006a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a4e:	b10a      	cbz	r2, 8006a54 <_svfiprintf_r+0x5c>
 8006a50:	2a25      	cmp	r2, #37	; 0x25
 8006a52:	d1f9      	bne.n	8006a48 <_svfiprintf_r+0x50>
 8006a54:	ebba 0b04 	subs.w	fp, sl, r4
 8006a58:	d00b      	beq.n	8006a72 <_svfiprintf_r+0x7a>
 8006a5a:	465b      	mov	r3, fp
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4638      	mov	r0, r7
 8006a62:	f7ff ff6d 	bl	8006940 <__ssputs_r>
 8006a66:	3001      	adds	r0, #1
 8006a68:	f000 80aa 	beq.w	8006bc0 <_svfiprintf_r+0x1c8>
 8006a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a6e:	445a      	add	r2, fp
 8006a70:	9209      	str	r2, [sp, #36]	; 0x24
 8006a72:	f89a 3000 	ldrb.w	r3, [sl]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 80a2 	beq.w	8006bc0 <_svfiprintf_r+0x1c8>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a86:	f10a 0a01 	add.w	sl, sl, #1
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	9307      	str	r3, [sp, #28]
 8006a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a92:	931a      	str	r3, [sp, #104]	; 0x68
 8006a94:	4654      	mov	r4, sl
 8006a96:	2205      	movs	r2, #5
 8006a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a9c:	4851      	ldr	r0, [pc, #324]	; (8006be4 <_svfiprintf_r+0x1ec>)
 8006a9e:	f7ff fb9e 	bl	80061de <memchr>
 8006aa2:	9a04      	ldr	r2, [sp, #16]
 8006aa4:	b9d8      	cbnz	r0, 8006ade <_svfiprintf_r+0xe6>
 8006aa6:	06d0      	lsls	r0, r2, #27
 8006aa8:	bf44      	itt	mi
 8006aaa:	2320      	movmi	r3, #32
 8006aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab0:	0711      	lsls	r1, r2, #28
 8006ab2:	bf44      	itt	mi
 8006ab4:	232b      	movmi	r3, #43	; 0x2b
 8006ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aba:	f89a 3000 	ldrb.w	r3, [sl]
 8006abe:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac0:	d015      	beq.n	8006aee <_svfiprintf_r+0xf6>
 8006ac2:	4654      	mov	r4, sl
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	f04f 0c0a 	mov.w	ip, #10
 8006aca:	9a07      	ldr	r2, [sp, #28]
 8006acc:	4621      	mov	r1, r4
 8006ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ad2:	3b30      	subs	r3, #48	; 0x30
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d94e      	bls.n	8006b76 <_svfiprintf_r+0x17e>
 8006ad8:	b1b0      	cbz	r0, 8006b08 <_svfiprintf_r+0x110>
 8006ada:	9207      	str	r2, [sp, #28]
 8006adc:	e014      	b.n	8006b08 <_svfiprintf_r+0x110>
 8006ade:	eba0 0308 	sub.w	r3, r0, r8
 8006ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	46a2      	mov	sl, r4
 8006aea:	9304      	str	r3, [sp, #16]
 8006aec:	e7d2      	b.n	8006a94 <_svfiprintf_r+0x9c>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	9103      	str	r1, [sp, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfbb      	ittet	lt
 8006afa:	425b      	neglt	r3, r3
 8006afc:	f042 0202 	orrlt.w	r2, r2, #2
 8006b00:	9307      	strge	r3, [sp, #28]
 8006b02:	9307      	strlt	r3, [sp, #28]
 8006b04:	bfb8      	it	lt
 8006b06:	9204      	strlt	r2, [sp, #16]
 8006b08:	7823      	ldrb	r3, [r4, #0]
 8006b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b0c:	d10c      	bne.n	8006b28 <_svfiprintf_r+0x130>
 8006b0e:	7863      	ldrb	r3, [r4, #1]
 8006b10:	2b2a      	cmp	r3, #42	; 0x2a
 8006b12:	d135      	bne.n	8006b80 <_svfiprintf_r+0x188>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	3402      	adds	r4, #2
 8006b18:	1d1a      	adds	r2, r3, #4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	9203      	str	r2, [sp, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bfb8      	it	lt
 8006b22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b26:	9305      	str	r3, [sp, #20]
 8006b28:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006be8 <_svfiprintf_r+0x1f0>
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	4650      	mov	r0, sl
 8006b30:	7821      	ldrb	r1, [r4, #0]
 8006b32:	f7ff fb54 	bl	80061de <memchr>
 8006b36:	b140      	cbz	r0, 8006b4a <_svfiprintf_r+0x152>
 8006b38:	2340      	movs	r3, #64	; 0x40
 8006b3a:	eba0 000a 	sub.w	r0, r0, sl
 8006b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b42:	9b04      	ldr	r3, [sp, #16]
 8006b44:	3401      	adds	r4, #1
 8006b46:	4303      	orrs	r3, r0
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4e:	2206      	movs	r2, #6
 8006b50:	4826      	ldr	r0, [pc, #152]	; (8006bec <_svfiprintf_r+0x1f4>)
 8006b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b56:	f7ff fb42 	bl	80061de <memchr>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d038      	beq.n	8006bd0 <_svfiprintf_r+0x1d8>
 8006b5e:	4b24      	ldr	r3, [pc, #144]	; (8006bf0 <_svfiprintf_r+0x1f8>)
 8006b60:	bb1b      	cbnz	r3, 8006baa <_svfiprintf_r+0x1b2>
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	3307      	adds	r3, #7
 8006b66:	f023 0307 	bic.w	r3, r3, #7
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b70:	4433      	add	r3, r6
 8006b72:	9309      	str	r3, [sp, #36]	; 0x24
 8006b74:	e767      	b.n	8006a46 <_svfiprintf_r+0x4e>
 8006b76:	460c      	mov	r4, r1
 8006b78:	2001      	movs	r0, #1
 8006b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b7e:	e7a5      	b.n	8006acc <_svfiprintf_r+0xd4>
 8006b80:	2300      	movs	r3, #0
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4619      	mov	r1, r3
 8006b88:	3401      	adds	r4, #1
 8006b8a:	9305      	str	r3, [sp, #20]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b92:	3a30      	subs	r2, #48	; 0x30
 8006b94:	2a09      	cmp	r2, #9
 8006b96:	d903      	bls.n	8006ba0 <_svfiprintf_r+0x1a8>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0c5      	beq.n	8006b28 <_svfiprintf_r+0x130>
 8006b9c:	9105      	str	r1, [sp, #20]
 8006b9e:	e7c3      	b.n	8006b28 <_svfiprintf_r+0x130>
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ba8:	e7f0      	b.n	8006b8c <_svfiprintf_r+0x194>
 8006baa:	ab03      	add	r3, sp, #12
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	462a      	mov	r2, r5
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <_svfiprintf_r+0x1fc>)
 8006bb4:	a904      	add	r1, sp, #16
 8006bb6:	f7fd ff8f 	bl	8004ad8 <_printf_float>
 8006bba:	1c42      	adds	r2, r0, #1
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	d1d6      	bne.n	8006b6e <_svfiprintf_r+0x176>
 8006bc0:	89ab      	ldrh	r3, [r5, #12]
 8006bc2:	065b      	lsls	r3, r3, #25
 8006bc4:	f53f af2c 	bmi.w	8006a20 <_svfiprintf_r+0x28>
 8006bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bca:	b01d      	add	sp, #116	; 0x74
 8006bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd0:	ab03      	add	r3, sp, #12
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	462a      	mov	r2, r5
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <_svfiprintf_r+0x1fc>)
 8006bda:	a904      	add	r1, sp, #16
 8006bdc:	f7fe fa18 	bl	8005010 <_printf_i>
 8006be0:	e7eb      	b.n	8006bba <_svfiprintf_r+0x1c2>
 8006be2:	bf00      	nop
 8006be4:	08007eac 	.word	0x08007eac
 8006be8:	08007eb2 	.word	0x08007eb2
 8006bec:	08007eb6 	.word	0x08007eb6
 8006bf0:	08004ad9 	.word	0x08004ad9
 8006bf4:	08006941 	.word	0x08006941

08006bf8 <__sfputc_r>:
 8006bf8:	6893      	ldr	r3, [r2, #8]
 8006bfa:	b410      	push	{r4}
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	6093      	str	r3, [r2, #8]
 8006c02:	da07      	bge.n	8006c14 <__sfputc_r+0x1c>
 8006c04:	6994      	ldr	r4, [r2, #24]
 8006c06:	42a3      	cmp	r3, r4
 8006c08:	db01      	blt.n	8006c0e <__sfputc_r+0x16>
 8006c0a:	290a      	cmp	r1, #10
 8006c0c:	d102      	bne.n	8006c14 <__sfputc_r+0x1c>
 8006c0e:	bc10      	pop	{r4}
 8006c10:	f000 b98e 	b.w	8006f30 <__swbuf_r>
 8006c14:	6813      	ldr	r3, [r2, #0]
 8006c16:	1c58      	adds	r0, r3, #1
 8006c18:	6010      	str	r0, [r2, #0]
 8006c1a:	7019      	strb	r1, [r3, #0]
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	bc10      	pop	{r4}
 8006c20:	4770      	bx	lr

08006c22 <__sfputs_r>:
 8006c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c24:	4606      	mov	r6, r0
 8006c26:	460f      	mov	r7, r1
 8006c28:	4614      	mov	r4, r2
 8006c2a:	18d5      	adds	r5, r2, r3
 8006c2c:	42ac      	cmp	r4, r5
 8006c2e:	d101      	bne.n	8006c34 <__sfputs_r+0x12>
 8006c30:	2000      	movs	r0, #0
 8006c32:	e007      	b.n	8006c44 <__sfputs_r+0x22>
 8006c34:	463a      	mov	r2, r7
 8006c36:	4630      	mov	r0, r6
 8006c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3c:	f7ff ffdc 	bl	8006bf8 <__sfputc_r>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d1f3      	bne.n	8006c2c <__sfputs_r+0xa>
 8006c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c48 <_vfiprintf_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	4614      	mov	r4, r2
 8006c50:	4698      	mov	r8, r3
 8006c52:	4606      	mov	r6, r0
 8006c54:	b09d      	sub	sp, #116	; 0x74
 8006c56:	b118      	cbz	r0, 8006c60 <_vfiprintf_r+0x18>
 8006c58:	6983      	ldr	r3, [r0, #24]
 8006c5a:	b90b      	cbnz	r3, 8006c60 <_vfiprintf_r+0x18>
 8006c5c:	f7ff fa1a 	bl	8006094 <__sinit>
 8006c60:	4b89      	ldr	r3, [pc, #548]	; (8006e88 <_vfiprintf_r+0x240>)
 8006c62:	429d      	cmp	r5, r3
 8006c64:	d11b      	bne.n	8006c9e <_vfiprintf_r+0x56>
 8006c66:	6875      	ldr	r5, [r6, #4]
 8006c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	d405      	bmi.n	8006c7a <_vfiprintf_r+0x32>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	059a      	lsls	r2, r3, #22
 8006c72:	d402      	bmi.n	8006c7a <_vfiprintf_r+0x32>
 8006c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c76:	f7ff fab0 	bl	80061da <__retarget_lock_acquire_recursive>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	071b      	lsls	r3, r3, #28
 8006c7e:	d501      	bpl.n	8006c84 <_vfiprintf_r+0x3c>
 8006c80:	692b      	ldr	r3, [r5, #16]
 8006c82:	b9eb      	cbnz	r3, 8006cc0 <_vfiprintf_r+0x78>
 8006c84:	4629      	mov	r1, r5
 8006c86:	4630      	mov	r0, r6
 8006c88:	f000 f9b6 	bl	8006ff8 <__swsetup_r>
 8006c8c:	b1c0      	cbz	r0, 8006cc0 <_vfiprintf_r+0x78>
 8006c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c90:	07dc      	lsls	r4, r3, #31
 8006c92:	d50e      	bpl.n	8006cb2 <_vfiprintf_r+0x6a>
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c98:	b01d      	add	sp, #116	; 0x74
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	4b7b      	ldr	r3, [pc, #492]	; (8006e8c <_vfiprintf_r+0x244>)
 8006ca0:	429d      	cmp	r5, r3
 8006ca2:	d101      	bne.n	8006ca8 <_vfiprintf_r+0x60>
 8006ca4:	68b5      	ldr	r5, [r6, #8]
 8006ca6:	e7df      	b.n	8006c68 <_vfiprintf_r+0x20>
 8006ca8:	4b79      	ldr	r3, [pc, #484]	; (8006e90 <_vfiprintf_r+0x248>)
 8006caa:	429d      	cmp	r5, r3
 8006cac:	bf08      	it	eq
 8006cae:	68f5      	ldreq	r5, [r6, #12]
 8006cb0:	e7da      	b.n	8006c68 <_vfiprintf_r+0x20>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	0598      	lsls	r0, r3, #22
 8006cb6:	d4ed      	bmi.n	8006c94 <_vfiprintf_r+0x4c>
 8006cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cba:	f7ff fa8f 	bl	80061dc <__retarget_lock_release_recursive>
 8006cbe:	e7e9      	b.n	8006c94 <_vfiprintf_r+0x4c>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cca:	2330      	movs	r3, #48	; 0x30
 8006ccc:	f04f 0901 	mov.w	r9, #1
 8006cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cd4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e94 <_vfiprintf_r+0x24c>
 8006cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cdc:	4623      	mov	r3, r4
 8006cde:	469a      	mov	sl, r3
 8006ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce4:	b10a      	cbz	r2, 8006cea <_vfiprintf_r+0xa2>
 8006ce6:	2a25      	cmp	r2, #37	; 0x25
 8006ce8:	d1f9      	bne.n	8006cde <_vfiprintf_r+0x96>
 8006cea:	ebba 0b04 	subs.w	fp, sl, r4
 8006cee:	d00b      	beq.n	8006d08 <_vfiprintf_r+0xc0>
 8006cf0:	465b      	mov	r3, fp
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ff93 	bl	8006c22 <__sfputs_r>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f000 80aa 	beq.w	8006e56 <_vfiprintf_r+0x20e>
 8006d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d04:	445a      	add	r2, fp
 8006d06:	9209      	str	r2, [sp, #36]	; 0x24
 8006d08:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80a2 	beq.w	8006e56 <_vfiprintf_r+0x20e>
 8006d12:	2300      	movs	r3, #0
 8006d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d1c:	f10a 0a01 	add.w	sl, sl, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	9307      	str	r3, [sp, #28]
 8006d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d28:	931a      	str	r3, [sp, #104]	; 0x68
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2205      	movs	r2, #5
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4858      	ldr	r0, [pc, #352]	; (8006e94 <_vfiprintf_r+0x24c>)
 8006d34:	f7ff fa53 	bl	80061de <memchr>
 8006d38:	9a04      	ldr	r2, [sp, #16]
 8006d3a:	b9d8      	cbnz	r0, 8006d74 <_vfiprintf_r+0x12c>
 8006d3c:	06d1      	lsls	r1, r2, #27
 8006d3e:	bf44      	itt	mi
 8006d40:	2320      	movmi	r3, #32
 8006d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d46:	0713      	lsls	r3, r2, #28
 8006d48:	bf44      	itt	mi
 8006d4a:	232b      	movmi	r3, #43	; 0x2b
 8006d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d50:	f89a 3000 	ldrb.w	r3, [sl]
 8006d54:	2b2a      	cmp	r3, #42	; 0x2a
 8006d56:	d015      	beq.n	8006d84 <_vfiprintf_r+0x13c>
 8006d58:	4654      	mov	r4, sl
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f04f 0c0a 	mov.w	ip, #10
 8006d60:	9a07      	ldr	r2, [sp, #28]
 8006d62:	4621      	mov	r1, r4
 8006d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d68:	3b30      	subs	r3, #48	; 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d94e      	bls.n	8006e0c <_vfiprintf_r+0x1c4>
 8006d6e:	b1b0      	cbz	r0, 8006d9e <_vfiprintf_r+0x156>
 8006d70:	9207      	str	r2, [sp, #28]
 8006d72:	e014      	b.n	8006d9e <_vfiprintf_r+0x156>
 8006d74:	eba0 0308 	sub.w	r3, r0, r8
 8006d78:	fa09 f303 	lsl.w	r3, r9, r3
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	46a2      	mov	sl, r4
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	e7d2      	b.n	8006d2a <_vfiprintf_r+0xe2>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	1d19      	adds	r1, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9103      	str	r1, [sp, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfbb      	ittet	lt
 8006d90:	425b      	neglt	r3, r3
 8006d92:	f042 0202 	orrlt.w	r2, r2, #2
 8006d96:	9307      	strge	r3, [sp, #28]
 8006d98:	9307      	strlt	r3, [sp, #28]
 8006d9a:	bfb8      	it	lt
 8006d9c:	9204      	strlt	r2, [sp, #16]
 8006d9e:	7823      	ldrb	r3, [r4, #0]
 8006da0:	2b2e      	cmp	r3, #46	; 0x2e
 8006da2:	d10c      	bne.n	8006dbe <_vfiprintf_r+0x176>
 8006da4:	7863      	ldrb	r3, [r4, #1]
 8006da6:	2b2a      	cmp	r3, #42	; 0x2a
 8006da8:	d135      	bne.n	8006e16 <_vfiprintf_r+0x1ce>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	3402      	adds	r4, #2
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	9203      	str	r2, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfb8      	it	lt
 8006db8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006e98 <_vfiprintf_r+0x250>
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	4650      	mov	r0, sl
 8006dc6:	7821      	ldrb	r1, [r4, #0]
 8006dc8:	f7ff fa09 	bl	80061de <memchr>
 8006dcc:	b140      	cbz	r0, 8006de0 <_vfiprintf_r+0x198>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	eba0 000a 	sub.w	r0, r0, sl
 8006dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	3401      	adds	r4, #1
 8006ddc:	4303      	orrs	r3, r0
 8006dde:	9304      	str	r3, [sp, #16]
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	2206      	movs	r2, #6
 8006de6:	482d      	ldr	r0, [pc, #180]	; (8006e9c <_vfiprintf_r+0x254>)
 8006de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dec:	f7ff f9f7 	bl	80061de <memchr>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d03f      	beq.n	8006e74 <_vfiprintf_r+0x22c>
 8006df4:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <_vfiprintf_r+0x258>)
 8006df6:	bb1b      	cbnz	r3, 8006e40 <_vfiprintf_r+0x1f8>
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	3307      	adds	r3, #7
 8006dfc:	f023 0307 	bic.w	r3, r3, #7
 8006e00:	3308      	adds	r3, #8
 8006e02:	9303      	str	r3, [sp, #12]
 8006e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e06:	443b      	add	r3, r7
 8006e08:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0a:	e767      	b.n	8006cdc <_vfiprintf_r+0x94>
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	2001      	movs	r0, #1
 8006e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e14:	e7a5      	b.n	8006d62 <_vfiprintf_r+0x11a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f04f 0c0a 	mov.w	ip, #10
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	3401      	adds	r4, #1
 8006e20:	9305      	str	r3, [sp, #20]
 8006e22:	4620      	mov	r0, r4
 8006e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e28:	3a30      	subs	r2, #48	; 0x30
 8006e2a:	2a09      	cmp	r2, #9
 8006e2c:	d903      	bls.n	8006e36 <_vfiprintf_r+0x1ee>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0c5      	beq.n	8006dbe <_vfiprintf_r+0x176>
 8006e32:	9105      	str	r1, [sp, #20]
 8006e34:	e7c3      	b.n	8006dbe <_vfiprintf_r+0x176>
 8006e36:	4604      	mov	r4, r0
 8006e38:	2301      	movs	r3, #1
 8006e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e3e:	e7f0      	b.n	8006e22 <_vfiprintf_r+0x1da>
 8006e40:	ab03      	add	r3, sp, #12
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	462a      	mov	r2, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	4b16      	ldr	r3, [pc, #88]	; (8006ea4 <_vfiprintf_r+0x25c>)
 8006e4a:	a904      	add	r1, sp, #16
 8006e4c:	f7fd fe44 	bl	8004ad8 <_printf_float>
 8006e50:	4607      	mov	r7, r0
 8006e52:	1c78      	adds	r0, r7, #1
 8006e54:	d1d6      	bne.n	8006e04 <_vfiprintf_r+0x1bc>
 8006e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e58:	07d9      	lsls	r1, r3, #31
 8006e5a:	d405      	bmi.n	8006e68 <_vfiprintf_r+0x220>
 8006e5c:	89ab      	ldrh	r3, [r5, #12]
 8006e5e:	059a      	lsls	r2, r3, #22
 8006e60:	d402      	bmi.n	8006e68 <_vfiprintf_r+0x220>
 8006e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e64:	f7ff f9ba 	bl	80061dc <__retarget_lock_release_recursive>
 8006e68:	89ab      	ldrh	r3, [r5, #12]
 8006e6a:	065b      	lsls	r3, r3, #25
 8006e6c:	f53f af12 	bmi.w	8006c94 <_vfiprintf_r+0x4c>
 8006e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e72:	e711      	b.n	8006c98 <_vfiprintf_r+0x50>
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <_vfiprintf_r+0x25c>)
 8006e7e:	a904      	add	r1, sp, #16
 8006e80:	f7fe f8c6 	bl	8005010 <_printf_i>
 8006e84:	e7e4      	b.n	8006e50 <_vfiprintf_r+0x208>
 8006e86:	bf00      	nop
 8006e88:	08007d10 	.word	0x08007d10
 8006e8c:	08007d30 	.word	0x08007d30
 8006e90:	08007cf0 	.word	0x08007cf0
 8006e94:	08007eac 	.word	0x08007eac
 8006e98:	08007eb2 	.word	0x08007eb2
 8006e9c:	08007eb6 	.word	0x08007eb6
 8006ea0:	08004ad9 	.word	0x08004ad9
 8006ea4:	08006c23 	.word	0x08006c23

08006ea8 <__sread>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	460c      	mov	r4, r1
 8006eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb0:	f000 fae2 	bl	8007478 <_read_r>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	bfab      	itete	ge
 8006eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eba:	89a3      	ldrhlt	r3, [r4, #12]
 8006ebc:	181b      	addge	r3, r3, r0
 8006ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ec2:	bfac      	ite	ge
 8006ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ec6:	81a3      	strhlt	r3, [r4, #12]
 8006ec8:	bd10      	pop	{r4, pc}

08006eca <__swrite>:
 8006eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ece:	461f      	mov	r7, r3
 8006ed0:	898b      	ldrh	r3, [r1, #12]
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	05db      	lsls	r3, r3, #23
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	4616      	mov	r6, r2
 8006eda:	d505      	bpl.n	8006ee8 <__swrite+0x1e>
 8006edc:	2302      	movs	r3, #2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	f000 f9f4 	bl	80072d0 <_lseek_r>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	4632      	mov	r2, r6
 8006eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efe:	f000 b869 	b.w	8006fd4 <_write_r>

08006f02 <__sseek>:
 8006f02:	b510      	push	{r4, lr}
 8006f04:	460c      	mov	r4, r1
 8006f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0a:	f000 f9e1 	bl	80072d0 <_lseek_r>
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	bf15      	itete	ne
 8006f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f1e:	81a3      	strheq	r3, [r4, #12]
 8006f20:	bf18      	it	ne
 8006f22:	81a3      	strhne	r3, [r4, #12]
 8006f24:	bd10      	pop	{r4, pc}

08006f26 <__sclose>:
 8006f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2a:	f000 b8f1 	b.w	8007110 <_close_r>
	...

08006f30 <__swbuf_r>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	460e      	mov	r6, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	4605      	mov	r5, r0
 8006f38:	b118      	cbz	r0, 8006f42 <__swbuf_r+0x12>
 8006f3a:	6983      	ldr	r3, [r0, #24]
 8006f3c:	b90b      	cbnz	r3, 8006f42 <__swbuf_r+0x12>
 8006f3e:	f7ff f8a9 	bl	8006094 <__sinit>
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <__swbuf_r+0x98>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d12b      	bne.n	8006fa0 <__swbuf_r+0x70>
 8006f48:	686c      	ldr	r4, [r5, #4]
 8006f4a:	69a3      	ldr	r3, [r4, #24]
 8006f4c:	60a3      	str	r3, [r4, #8]
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	071a      	lsls	r2, r3, #28
 8006f52:	d52f      	bpl.n	8006fb4 <__swbuf_r+0x84>
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	b36b      	cbz	r3, 8006fb4 <__swbuf_r+0x84>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	6820      	ldr	r0, [r4, #0]
 8006f5c:	b2f6      	uxtb	r6, r6
 8006f5e:	1ac0      	subs	r0, r0, r3
 8006f60:	6963      	ldr	r3, [r4, #20]
 8006f62:	4637      	mov	r7, r6
 8006f64:	4283      	cmp	r3, r0
 8006f66:	dc04      	bgt.n	8006f72 <__swbuf_r+0x42>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f962 	bl	8007234 <_fflush_r>
 8006f70:	bb30      	cbnz	r0, 8006fc0 <__swbuf_r+0x90>
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	3001      	adds	r0, #1
 8006f76:	3b01      	subs	r3, #1
 8006f78:	60a3      	str	r3, [r4, #8]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	6022      	str	r2, [r4, #0]
 8006f80:	701e      	strb	r6, [r3, #0]
 8006f82:	6963      	ldr	r3, [r4, #20]
 8006f84:	4283      	cmp	r3, r0
 8006f86:	d004      	beq.n	8006f92 <__swbuf_r+0x62>
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	07db      	lsls	r3, r3, #31
 8006f8c:	d506      	bpl.n	8006f9c <__swbuf_r+0x6c>
 8006f8e:	2e0a      	cmp	r6, #10
 8006f90:	d104      	bne.n	8006f9c <__swbuf_r+0x6c>
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f000 f94d 	bl	8007234 <_fflush_r>
 8006f9a:	b988      	cbnz	r0, 8006fc0 <__swbuf_r+0x90>
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <__swbuf_r+0x9c>)
 8006fa2:	429c      	cmp	r4, r3
 8006fa4:	d101      	bne.n	8006faa <__swbuf_r+0x7a>
 8006fa6:	68ac      	ldr	r4, [r5, #8]
 8006fa8:	e7cf      	b.n	8006f4a <__swbuf_r+0x1a>
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <__swbuf_r+0xa0>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	bf08      	it	eq
 8006fb0:	68ec      	ldreq	r4, [r5, #12]
 8006fb2:	e7ca      	b.n	8006f4a <__swbuf_r+0x1a>
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 f81e 	bl	8006ff8 <__swsetup_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d0cb      	beq.n	8006f58 <__swbuf_r+0x28>
 8006fc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006fc4:	e7ea      	b.n	8006f9c <__swbuf_r+0x6c>
 8006fc6:	bf00      	nop
 8006fc8:	08007d10 	.word	0x08007d10
 8006fcc:	08007d30 	.word	0x08007d30
 8006fd0:	08007cf0 	.word	0x08007cf0

08006fd4 <_write_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4d05      	ldr	r5, [pc, #20]	; (8006ff4 <_write_r+0x20>)
 8006fe0:	602a      	str	r2, [r5, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f7fb f818 	bl	8002018 <_write>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_write_r+0x1e>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_write_r+0x1e>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	2000041c 	.word	0x2000041c

08006ff8 <__swsetup_r>:
 8006ff8:	4b32      	ldr	r3, [pc, #200]	; (80070c4 <__swsetup_r+0xcc>)
 8006ffa:	b570      	push	{r4, r5, r6, lr}
 8006ffc:	681d      	ldr	r5, [r3, #0]
 8006ffe:	4606      	mov	r6, r0
 8007000:	460c      	mov	r4, r1
 8007002:	b125      	cbz	r5, 800700e <__swsetup_r+0x16>
 8007004:	69ab      	ldr	r3, [r5, #24]
 8007006:	b913      	cbnz	r3, 800700e <__swsetup_r+0x16>
 8007008:	4628      	mov	r0, r5
 800700a:	f7ff f843 	bl	8006094 <__sinit>
 800700e:	4b2e      	ldr	r3, [pc, #184]	; (80070c8 <__swsetup_r+0xd0>)
 8007010:	429c      	cmp	r4, r3
 8007012:	d10f      	bne.n	8007034 <__swsetup_r+0x3c>
 8007014:	686c      	ldr	r4, [r5, #4]
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800701c:	0719      	lsls	r1, r3, #28
 800701e:	d42c      	bmi.n	800707a <__swsetup_r+0x82>
 8007020:	06dd      	lsls	r5, r3, #27
 8007022:	d411      	bmi.n	8007048 <__swsetup_r+0x50>
 8007024:	2309      	movs	r3, #9
 8007026:	6033      	str	r3, [r6, #0]
 8007028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800702c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	e03e      	b.n	80070b2 <__swsetup_r+0xba>
 8007034:	4b25      	ldr	r3, [pc, #148]	; (80070cc <__swsetup_r+0xd4>)
 8007036:	429c      	cmp	r4, r3
 8007038:	d101      	bne.n	800703e <__swsetup_r+0x46>
 800703a:	68ac      	ldr	r4, [r5, #8]
 800703c:	e7eb      	b.n	8007016 <__swsetup_r+0x1e>
 800703e:	4b24      	ldr	r3, [pc, #144]	; (80070d0 <__swsetup_r+0xd8>)
 8007040:	429c      	cmp	r4, r3
 8007042:	bf08      	it	eq
 8007044:	68ec      	ldreq	r4, [r5, #12]
 8007046:	e7e6      	b.n	8007016 <__swsetup_r+0x1e>
 8007048:	0758      	lsls	r0, r3, #29
 800704a:	d512      	bpl.n	8007072 <__swsetup_r+0x7a>
 800704c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800704e:	b141      	cbz	r1, 8007062 <__swsetup_r+0x6a>
 8007050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007054:	4299      	cmp	r1, r3
 8007056:	d002      	beq.n	800705e <__swsetup_r+0x66>
 8007058:	4630      	mov	r0, r6
 800705a:	f7fd fbc3 	bl	80047e4 <_free_r>
 800705e:	2300      	movs	r3, #0
 8007060:	6363      	str	r3, [r4, #52]	; 0x34
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	2300      	movs	r3, #0
 800706c:	6063      	str	r3, [r4, #4]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f043 0308 	orr.w	r3, r3, #8
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	b94b      	cbnz	r3, 8007092 <__swsetup_r+0x9a>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007088:	d003      	beq.n	8007092 <__swsetup_r+0x9a>
 800708a:	4621      	mov	r1, r4
 800708c:	4630      	mov	r0, r6
 800708e:	f000 f957 	bl	8007340 <__smakebuf_r>
 8007092:	89a0      	ldrh	r0, [r4, #12]
 8007094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007098:	f010 0301 	ands.w	r3, r0, #1
 800709c:	d00a      	beq.n	80070b4 <__swsetup_r+0xbc>
 800709e:	2300      	movs	r3, #0
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	6963      	ldr	r3, [r4, #20]
 80070a4:	425b      	negs	r3, r3
 80070a6:	61a3      	str	r3, [r4, #24]
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	b943      	cbnz	r3, 80070be <__swsetup_r+0xc6>
 80070ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070b0:	d1ba      	bne.n	8007028 <__swsetup_r+0x30>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	0781      	lsls	r1, r0, #30
 80070b6:	bf58      	it	pl
 80070b8:	6963      	ldrpl	r3, [r4, #20]
 80070ba:	60a3      	str	r3, [r4, #8]
 80070bc:	e7f4      	b.n	80070a8 <__swsetup_r+0xb0>
 80070be:	2000      	movs	r0, #0
 80070c0:	e7f7      	b.n	80070b2 <__swsetup_r+0xba>
 80070c2:	bf00      	nop
 80070c4:	2000000c 	.word	0x2000000c
 80070c8:	08007d10 	.word	0x08007d10
 80070cc:	08007d30 	.word	0x08007d30
 80070d0:	08007cf0 	.word	0x08007cf0

080070d4 <__assert_func>:
 80070d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070d6:	4614      	mov	r4, r2
 80070d8:	461a      	mov	r2, r3
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <__assert_func+0x2c>)
 80070dc:	4605      	mov	r5, r0
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68d8      	ldr	r0, [r3, #12]
 80070e2:	b14c      	cbz	r4, 80070f8 <__assert_func+0x24>
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <__assert_func+0x30>)
 80070e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070ea:	9100      	str	r1, [sp, #0]
 80070ec:	462b      	mov	r3, r5
 80070ee:	4906      	ldr	r1, [pc, #24]	; (8007108 <__assert_func+0x34>)
 80070f0:	f000 f8dc 	bl	80072ac <fiprintf>
 80070f4:	f000 f9df 	bl	80074b6 <abort>
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <__assert_func+0x38>)
 80070fa:	461c      	mov	r4, r3
 80070fc:	e7f3      	b.n	80070e6 <__assert_func+0x12>
 80070fe:	bf00      	nop
 8007100:	2000000c 	.word	0x2000000c
 8007104:	08007ebd 	.word	0x08007ebd
 8007108:	08007eca 	.word	0x08007eca
 800710c:	08007ef8 	.word	0x08007ef8

08007110 <_close_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	2300      	movs	r3, #0
 8007114:	4d05      	ldr	r5, [pc, #20]	; (800712c <_close_r+0x1c>)
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	f7fa ff98 	bl	8002050 <_close>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_close_r+0x1a>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_close_r+0x1a>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	2000041c 	.word	0x2000041c

08007130 <__sflush_r>:
 8007130:	898a      	ldrh	r2, [r1, #12]
 8007132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007134:	4605      	mov	r5, r0
 8007136:	0710      	lsls	r0, r2, #28
 8007138:	460c      	mov	r4, r1
 800713a:	d457      	bmi.n	80071ec <__sflush_r+0xbc>
 800713c:	684b      	ldr	r3, [r1, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	dc04      	bgt.n	800714c <__sflush_r+0x1c>
 8007142:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	dc01      	bgt.n	800714c <__sflush_r+0x1c>
 8007148:	2000      	movs	r0, #0
 800714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800714c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800714e:	2e00      	cmp	r6, #0
 8007150:	d0fa      	beq.n	8007148 <__sflush_r+0x18>
 8007152:	2300      	movs	r3, #0
 8007154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007158:	682f      	ldr	r7, [r5, #0]
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	d032      	beq.n	80071c4 <__sflush_r+0x94>
 800715e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	075a      	lsls	r2, r3, #29
 8007164:	d505      	bpl.n	8007172 <__sflush_r+0x42>
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	1ac0      	subs	r0, r0, r3
 800716a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800716c:	b10b      	cbz	r3, 8007172 <__sflush_r+0x42>
 800716e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007170:	1ac0      	subs	r0, r0, r3
 8007172:	2300      	movs	r3, #0
 8007174:	4602      	mov	r2, r0
 8007176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007178:	4628      	mov	r0, r5
 800717a:	6a21      	ldr	r1, [r4, #32]
 800717c:	47b0      	blx	r6
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	d106      	bne.n	8007192 <__sflush_r+0x62>
 8007184:	6829      	ldr	r1, [r5, #0]
 8007186:	291d      	cmp	r1, #29
 8007188:	d82c      	bhi.n	80071e4 <__sflush_r+0xb4>
 800718a:	4a29      	ldr	r2, [pc, #164]	; (8007230 <__sflush_r+0x100>)
 800718c:	40ca      	lsrs	r2, r1
 800718e:	07d6      	lsls	r6, r2, #31
 8007190:	d528      	bpl.n	80071e4 <__sflush_r+0xb4>
 8007192:	2200      	movs	r2, #0
 8007194:	6062      	str	r2, [r4, #4]
 8007196:	6922      	ldr	r2, [r4, #16]
 8007198:	04d9      	lsls	r1, r3, #19
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	d504      	bpl.n	80071a8 <__sflush_r+0x78>
 800719e:	1c42      	adds	r2, r0, #1
 80071a0:	d101      	bne.n	80071a6 <__sflush_r+0x76>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	b903      	cbnz	r3, 80071a8 <__sflush_r+0x78>
 80071a6:	6560      	str	r0, [r4, #84]	; 0x54
 80071a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071aa:	602f      	str	r7, [r5, #0]
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d0cb      	beq.n	8007148 <__sflush_r+0x18>
 80071b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b4:	4299      	cmp	r1, r3
 80071b6:	d002      	beq.n	80071be <__sflush_r+0x8e>
 80071b8:	4628      	mov	r0, r5
 80071ba:	f7fd fb13 	bl	80047e4 <_free_r>
 80071be:	2000      	movs	r0, #0
 80071c0:	6360      	str	r0, [r4, #52]	; 0x34
 80071c2:	e7c2      	b.n	800714a <__sflush_r+0x1a>
 80071c4:	6a21      	ldr	r1, [r4, #32]
 80071c6:	2301      	movs	r3, #1
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b0      	blx	r6
 80071cc:	1c41      	adds	r1, r0, #1
 80071ce:	d1c7      	bne.n	8007160 <__sflush_r+0x30>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c4      	beq.n	8007160 <__sflush_r+0x30>
 80071d6:	2b1d      	cmp	r3, #29
 80071d8:	d001      	beq.n	80071de <__sflush_r+0xae>
 80071da:	2b16      	cmp	r3, #22
 80071dc:	d101      	bne.n	80071e2 <__sflush_r+0xb2>
 80071de:	602f      	str	r7, [r5, #0]
 80071e0:	e7b2      	b.n	8007148 <__sflush_r+0x18>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	e7ae      	b.n	800714a <__sflush_r+0x1a>
 80071ec:	690f      	ldr	r7, [r1, #16]
 80071ee:	2f00      	cmp	r7, #0
 80071f0:	d0aa      	beq.n	8007148 <__sflush_r+0x18>
 80071f2:	0793      	lsls	r3, r2, #30
 80071f4:	bf18      	it	ne
 80071f6:	2300      	movne	r3, #0
 80071f8:	680e      	ldr	r6, [r1, #0]
 80071fa:	bf08      	it	eq
 80071fc:	694b      	ldreq	r3, [r1, #20]
 80071fe:	1bf6      	subs	r6, r6, r7
 8007200:	600f      	str	r7, [r1, #0]
 8007202:	608b      	str	r3, [r1, #8]
 8007204:	2e00      	cmp	r6, #0
 8007206:	dd9f      	ble.n	8007148 <__sflush_r+0x18>
 8007208:	4633      	mov	r3, r6
 800720a:	463a      	mov	r2, r7
 800720c:	4628      	mov	r0, r5
 800720e:	6a21      	ldr	r1, [r4, #32]
 8007210:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007214:	47e0      	blx	ip
 8007216:	2800      	cmp	r0, #0
 8007218:	dc06      	bgt.n	8007228 <__sflush_r+0xf8>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	e790      	b.n	800714a <__sflush_r+0x1a>
 8007228:	4407      	add	r7, r0
 800722a:	1a36      	subs	r6, r6, r0
 800722c:	e7ea      	b.n	8007204 <__sflush_r+0xd4>
 800722e:	bf00      	nop
 8007230:	20400001 	.word	0x20400001

08007234 <_fflush_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	690b      	ldr	r3, [r1, #16]
 8007238:	4605      	mov	r5, r0
 800723a:	460c      	mov	r4, r1
 800723c:	b913      	cbnz	r3, 8007244 <_fflush_r+0x10>
 800723e:	2500      	movs	r5, #0
 8007240:	4628      	mov	r0, r5
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	b118      	cbz	r0, 800724e <_fflush_r+0x1a>
 8007246:	6983      	ldr	r3, [r0, #24]
 8007248:	b90b      	cbnz	r3, 800724e <_fflush_r+0x1a>
 800724a:	f7fe ff23 	bl	8006094 <__sinit>
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <_fflush_r+0x6c>)
 8007250:	429c      	cmp	r4, r3
 8007252:	d11b      	bne.n	800728c <_fflush_r+0x58>
 8007254:	686c      	ldr	r4, [r5, #4]
 8007256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0ef      	beq.n	800723e <_fflush_r+0xa>
 800725e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007260:	07d0      	lsls	r0, r2, #31
 8007262:	d404      	bmi.n	800726e <_fflush_r+0x3a>
 8007264:	0599      	lsls	r1, r3, #22
 8007266:	d402      	bmi.n	800726e <_fflush_r+0x3a>
 8007268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800726a:	f7fe ffb6 	bl	80061da <__retarget_lock_acquire_recursive>
 800726e:	4628      	mov	r0, r5
 8007270:	4621      	mov	r1, r4
 8007272:	f7ff ff5d 	bl	8007130 <__sflush_r>
 8007276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007278:	4605      	mov	r5, r0
 800727a:	07da      	lsls	r2, r3, #31
 800727c:	d4e0      	bmi.n	8007240 <_fflush_r+0xc>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	059b      	lsls	r3, r3, #22
 8007282:	d4dd      	bmi.n	8007240 <_fflush_r+0xc>
 8007284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007286:	f7fe ffa9 	bl	80061dc <__retarget_lock_release_recursive>
 800728a:	e7d9      	b.n	8007240 <_fflush_r+0xc>
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <_fflush_r+0x70>)
 800728e:	429c      	cmp	r4, r3
 8007290:	d101      	bne.n	8007296 <_fflush_r+0x62>
 8007292:	68ac      	ldr	r4, [r5, #8]
 8007294:	e7df      	b.n	8007256 <_fflush_r+0x22>
 8007296:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <_fflush_r+0x74>)
 8007298:	429c      	cmp	r4, r3
 800729a:	bf08      	it	eq
 800729c:	68ec      	ldreq	r4, [r5, #12]
 800729e:	e7da      	b.n	8007256 <_fflush_r+0x22>
 80072a0:	08007d10 	.word	0x08007d10
 80072a4:	08007d30 	.word	0x08007d30
 80072a8:	08007cf0 	.word	0x08007cf0

080072ac <fiprintf>:
 80072ac:	b40e      	push	{r1, r2, r3}
 80072ae:	b503      	push	{r0, r1, lr}
 80072b0:	4601      	mov	r1, r0
 80072b2:	ab03      	add	r3, sp, #12
 80072b4:	4805      	ldr	r0, [pc, #20]	; (80072cc <fiprintf+0x20>)
 80072b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	f7ff fcc3 	bl	8006c48 <_vfiprintf_r>
 80072c2:	b002      	add	sp, #8
 80072c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c8:	b003      	add	sp, #12
 80072ca:	4770      	bx	lr
 80072cc:	2000000c 	.word	0x2000000c

080072d0 <_lseek_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	2200      	movs	r2, #0
 80072da:	4d05      	ldr	r5, [pc, #20]	; (80072f0 <_lseek_r+0x20>)
 80072dc:	602a      	str	r2, [r5, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	f7fa feda 	bl	8002098 <_lseek>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_lseek_r+0x1e>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_lseek_r+0x1e>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	2000041c 	.word	0x2000041c

080072f4 <__swhatbuf_r>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	460e      	mov	r6, r1
 80072f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fc:	4614      	mov	r4, r2
 80072fe:	2900      	cmp	r1, #0
 8007300:	461d      	mov	r5, r3
 8007302:	b096      	sub	sp, #88	; 0x58
 8007304:	da08      	bge.n	8007318 <__swhatbuf_r+0x24>
 8007306:	2200      	movs	r2, #0
 8007308:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800730c:	602a      	str	r2, [r5, #0]
 800730e:	061a      	lsls	r2, r3, #24
 8007310:	d410      	bmi.n	8007334 <__swhatbuf_r+0x40>
 8007312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007316:	e00e      	b.n	8007336 <__swhatbuf_r+0x42>
 8007318:	466a      	mov	r2, sp
 800731a:	f000 f8d3 	bl	80074c4 <_fstat_r>
 800731e:	2800      	cmp	r0, #0
 8007320:	dbf1      	blt.n	8007306 <__swhatbuf_r+0x12>
 8007322:	9a01      	ldr	r2, [sp, #4]
 8007324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800732c:	425a      	negs	r2, r3
 800732e:	415a      	adcs	r2, r3
 8007330:	602a      	str	r2, [r5, #0]
 8007332:	e7ee      	b.n	8007312 <__swhatbuf_r+0x1e>
 8007334:	2340      	movs	r3, #64	; 0x40
 8007336:	2000      	movs	r0, #0
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	b016      	add	sp, #88	; 0x58
 800733c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007340 <__smakebuf_r>:
 8007340:	898b      	ldrh	r3, [r1, #12]
 8007342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007344:	079d      	lsls	r5, r3, #30
 8007346:	4606      	mov	r6, r0
 8007348:	460c      	mov	r4, r1
 800734a:	d507      	bpl.n	800735c <__smakebuf_r+0x1c>
 800734c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	2301      	movs	r3, #1
 8007356:	6163      	str	r3, [r4, #20]
 8007358:	b002      	add	sp, #8
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	466a      	mov	r2, sp
 800735e:	ab01      	add	r3, sp, #4
 8007360:	f7ff ffc8 	bl	80072f4 <__swhatbuf_r>
 8007364:	9900      	ldr	r1, [sp, #0]
 8007366:	4605      	mov	r5, r0
 8007368:	4630      	mov	r0, r6
 800736a:	f7fd faa3 	bl	80048b4 <_malloc_r>
 800736e:	b948      	cbnz	r0, 8007384 <__smakebuf_r+0x44>
 8007370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007374:	059a      	lsls	r2, r3, #22
 8007376:	d4ef      	bmi.n	8007358 <__smakebuf_r+0x18>
 8007378:	f023 0303 	bic.w	r3, r3, #3
 800737c:	f043 0302 	orr.w	r3, r3, #2
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	e7e3      	b.n	800734c <__smakebuf_r+0xc>
 8007384:	4b0d      	ldr	r3, [pc, #52]	; (80073bc <__smakebuf_r+0x7c>)
 8007386:	62b3      	str	r3, [r6, #40]	; 0x28
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	6020      	str	r0, [r4, #0]
 800738c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	9b00      	ldr	r3, [sp, #0]
 8007394:	6120      	str	r0, [r4, #16]
 8007396:	6163      	str	r3, [r4, #20]
 8007398:	9b01      	ldr	r3, [sp, #4]
 800739a:	b15b      	cbz	r3, 80073b4 <__smakebuf_r+0x74>
 800739c:	4630      	mov	r0, r6
 800739e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073a2:	f000 f8a1 	bl	80074e8 <_isatty_r>
 80073a6:	b128      	cbz	r0, 80073b4 <__smakebuf_r+0x74>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	89a0      	ldrh	r0, [r4, #12]
 80073b6:	4305      	orrs	r5, r0
 80073b8:	81a5      	strh	r5, [r4, #12]
 80073ba:	e7cd      	b.n	8007358 <__smakebuf_r+0x18>
 80073bc:	0800602d 	.word	0x0800602d

080073c0 <__ascii_mbtowc>:
 80073c0:	b082      	sub	sp, #8
 80073c2:	b901      	cbnz	r1, 80073c6 <__ascii_mbtowc+0x6>
 80073c4:	a901      	add	r1, sp, #4
 80073c6:	b142      	cbz	r2, 80073da <__ascii_mbtowc+0x1a>
 80073c8:	b14b      	cbz	r3, 80073de <__ascii_mbtowc+0x1e>
 80073ca:	7813      	ldrb	r3, [r2, #0]
 80073cc:	600b      	str	r3, [r1, #0]
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	1e10      	subs	r0, r2, #0
 80073d2:	bf18      	it	ne
 80073d4:	2001      	movne	r0, #1
 80073d6:	b002      	add	sp, #8
 80073d8:	4770      	bx	lr
 80073da:	4610      	mov	r0, r2
 80073dc:	e7fb      	b.n	80073d6 <__ascii_mbtowc+0x16>
 80073de:	f06f 0001 	mvn.w	r0, #1
 80073e2:	e7f8      	b.n	80073d6 <__ascii_mbtowc+0x16>

080073e4 <memmove>:
 80073e4:	4288      	cmp	r0, r1
 80073e6:	b510      	push	{r4, lr}
 80073e8:	eb01 0402 	add.w	r4, r1, r2
 80073ec:	d902      	bls.n	80073f4 <memmove+0x10>
 80073ee:	4284      	cmp	r4, r0
 80073f0:	4623      	mov	r3, r4
 80073f2:	d807      	bhi.n	8007404 <memmove+0x20>
 80073f4:	1e43      	subs	r3, r0, #1
 80073f6:	42a1      	cmp	r1, r4
 80073f8:	d008      	beq.n	800740c <memmove+0x28>
 80073fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007402:	e7f8      	b.n	80073f6 <memmove+0x12>
 8007404:	4601      	mov	r1, r0
 8007406:	4402      	add	r2, r0
 8007408:	428a      	cmp	r2, r1
 800740a:	d100      	bne.n	800740e <memmove+0x2a>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007416:	e7f7      	b.n	8007408 <memmove+0x24>

08007418 <_realloc_r>:
 8007418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741c:	4680      	mov	r8, r0
 800741e:	4614      	mov	r4, r2
 8007420:	460e      	mov	r6, r1
 8007422:	b921      	cbnz	r1, 800742e <_realloc_r+0x16>
 8007424:	4611      	mov	r1, r2
 8007426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800742a:	f7fd ba43 	b.w	80048b4 <_malloc_r>
 800742e:	b92a      	cbnz	r2, 800743c <_realloc_r+0x24>
 8007430:	f7fd f9d8 	bl	80047e4 <_free_r>
 8007434:	4625      	mov	r5, r4
 8007436:	4628      	mov	r0, r5
 8007438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743c:	f000 f864 	bl	8007508 <_malloc_usable_size_r>
 8007440:	4284      	cmp	r4, r0
 8007442:	4607      	mov	r7, r0
 8007444:	d802      	bhi.n	800744c <_realloc_r+0x34>
 8007446:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800744a:	d812      	bhi.n	8007472 <_realloc_r+0x5a>
 800744c:	4621      	mov	r1, r4
 800744e:	4640      	mov	r0, r8
 8007450:	f7fd fa30 	bl	80048b4 <_malloc_r>
 8007454:	4605      	mov	r5, r0
 8007456:	2800      	cmp	r0, #0
 8007458:	d0ed      	beq.n	8007436 <_realloc_r+0x1e>
 800745a:	42bc      	cmp	r4, r7
 800745c:	4622      	mov	r2, r4
 800745e:	4631      	mov	r1, r6
 8007460:	bf28      	it	cs
 8007462:	463a      	movcs	r2, r7
 8007464:	f7fd f9a8 	bl	80047b8 <memcpy>
 8007468:	4631      	mov	r1, r6
 800746a:	4640      	mov	r0, r8
 800746c:	f7fd f9ba 	bl	80047e4 <_free_r>
 8007470:	e7e1      	b.n	8007436 <_realloc_r+0x1e>
 8007472:	4635      	mov	r5, r6
 8007474:	e7df      	b.n	8007436 <_realloc_r+0x1e>
	...

08007478 <_read_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	2200      	movs	r2, #0
 8007482:	4d05      	ldr	r5, [pc, #20]	; (8007498 <_read_r+0x20>)
 8007484:	602a      	str	r2, [r5, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	f7fa fda9 	bl	8001fde <_read>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_read_r+0x1e>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_read_r+0x1e>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	2000041c 	.word	0x2000041c

0800749c <__ascii_wctomb>:
 800749c:	4603      	mov	r3, r0
 800749e:	4608      	mov	r0, r1
 80074a0:	b141      	cbz	r1, 80074b4 <__ascii_wctomb+0x18>
 80074a2:	2aff      	cmp	r2, #255	; 0xff
 80074a4:	d904      	bls.n	80074b0 <__ascii_wctomb+0x14>
 80074a6:	228a      	movs	r2, #138	; 0x8a
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	4770      	bx	lr
 80074b0:	2001      	movs	r0, #1
 80074b2:	700a      	strb	r2, [r1, #0]
 80074b4:	4770      	bx	lr

080074b6 <abort>:
 80074b6:	2006      	movs	r0, #6
 80074b8:	b508      	push	{r3, lr}
 80074ba:	f000 f855 	bl	8007568 <raise>
 80074be:	2001      	movs	r0, #1
 80074c0:	f7fa fd83 	bl	8001fca <_exit>

080074c4 <_fstat_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	2300      	movs	r3, #0
 80074c8:	4d06      	ldr	r5, [pc, #24]	; (80074e4 <_fstat_r+0x20>)
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	f7fa fdc8 	bl	8002066 <_fstat>
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	d102      	bne.n	80074e0 <_fstat_r+0x1c>
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	b103      	cbz	r3, 80074e0 <_fstat_r+0x1c>
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	bf00      	nop
 80074e4:	2000041c 	.word	0x2000041c

080074e8 <_isatty_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	2300      	movs	r3, #0
 80074ec:	4d05      	ldr	r5, [pc, #20]	; (8007504 <_isatty_r+0x1c>)
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	f7fa fdc6 	bl	8002084 <_isatty>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_isatty_r+0x1a>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_isatty_r+0x1a>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	2000041c 	.word	0x2000041c

08007508 <_malloc_usable_size_r>:
 8007508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750c:	1f18      	subs	r0, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	bfbc      	itt	lt
 8007512:	580b      	ldrlt	r3, [r1, r0]
 8007514:	18c0      	addlt	r0, r0, r3
 8007516:	4770      	bx	lr

08007518 <_raise_r>:
 8007518:	291f      	cmp	r1, #31
 800751a:	b538      	push	{r3, r4, r5, lr}
 800751c:	4604      	mov	r4, r0
 800751e:	460d      	mov	r5, r1
 8007520:	d904      	bls.n	800752c <_raise_r+0x14>
 8007522:	2316      	movs	r3, #22
 8007524:	6003      	str	r3, [r0, #0]
 8007526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800752e:	b112      	cbz	r2, 8007536 <_raise_r+0x1e>
 8007530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007534:	b94b      	cbnz	r3, 800754a <_raise_r+0x32>
 8007536:	4620      	mov	r0, r4
 8007538:	f000 f830 	bl	800759c <_getpid_r>
 800753c:	462a      	mov	r2, r5
 800753e:	4601      	mov	r1, r0
 8007540:	4620      	mov	r0, r4
 8007542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007546:	f000 b817 	b.w	8007578 <_kill_r>
 800754a:	2b01      	cmp	r3, #1
 800754c:	d00a      	beq.n	8007564 <_raise_r+0x4c>
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	d103      	bne.n	800755a <_raise_r+0x42>
 8007552:	2316      	movs	r3, #22
 8007554:	6003      	str	r3, [r0, #0]
 8007556:	2001      	movs	r0, #1
 8007558:	e7e7      	b.n	800752a <_raise_r+0x12>
 800755a:	2400      	movs	r4, #0
 800755c:	4628      	mov	r0, r5
 800755e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007562:	4798      	blx	r3
 8007564:	2000      	movs	r0, #0
 8007566:	e7e0      	b.n	800752a <_raise_r+0x12>

08007568 <raise>:
 8007568:	4b02      	ldr	r3, [pc, #8]	; (8007574 <raise+0xc>)
 800756a:	4601      	mov	r1, r0
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	f7ff bfd3 	b.w	8007518 <_raise_r>
 8007572:	bf00      	nop
 8007574:	2000000c 	.word	0x2000000c

08007578 <_kill_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	2300      	movs	r3, #0
 800757c:	4d06      	ldr	r5, [pc, #24]	; (8007598 <_kill_r+0x20>)
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	f7fa fd10 	bl	8001faa <_kill>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d102      	bne.n	8007594 <_kill_r+0x1c>
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	b103      	cbz	r3, 8007594 <_kill_r+0x1c>
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	bd38      	pop	{r3, r4, r5, pc}
 8007596:	bf00      	nop
 8007598:	2000041c 	.word	0x2000041c

0800759c <_getpid_r>:
 800759c:	f7fa bcfe 	b.w	8001f9c <_getpid>

080075a0 <_init>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr

080075ac <_fini>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	bf00      	nop
 80075b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b2:	bc08      	pop	{r3}
 80075b4:	469e      	mov	lr, r3
 80075b6:	4770      	bx	lr
