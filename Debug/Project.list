
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b98  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08006d80  08006d80  00016d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a4  080077a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080077a4  080077a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077a4  080077a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080077a4  080077a4  000177a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001dc  0800798c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800798c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014146  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e09  00000000  00000000  0003434b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00037158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00038340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc11  00000000  00000000  00039418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152fc  00000000  00000000  00057029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0800  00000000  00000000  0006c325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010cb25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b7c  00000000  00000000  0010cb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006d68 	.word	0x08006d68

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006d68 	.word	0x08006d68

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <_ZN8CupServoC1EtP17TIM_HandleTypeDeft>:
 *      Author: ooj
 */

#include <CupServo/CupServo.h>

CupServo::CupServo(uint16_t cupCount, TIM_HandleTypeDef* timer, uint16_t timerChannel):
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	461a      	mov	r2, r3
 8000bac:	460b      	mov	r3, r1
 8000bae:	817b      	strh	r3, [r7, #10]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	813b      	strh	r3, [r7, #8]
	ServoMotor(timer, timerChannel), cupCount(cupCount) {}
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	893a      	ldrh	r2, [r7, #8]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fad4 	bl	8001168 <_ZN10ServoMotorC1EP17TIM_HandleTypeDeft>
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	897a      	ldrh	r2, [r7, #10]
 8000bc4:	81da      	strh	r2, [r3, #14]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_ZN8CupServo9selectCupEt>:

void CupServo::selectCup(uint16_t cup){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]
	if (cup == 0) {
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d105      	bne.n	8000bee <_ZN8CupServo9selectCupEt+0x1e>
		ServoMotor::spinTo(0);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fb0e 	bl	8001208 <_ZN10ServoMotor6spinToEt>
	} else if (cup == 1) {
		ServoMotor::spinTo(90);
	} else if (cup == 2) {
		ServoMotor::spinTo(180);
	}
}
 8000bec:	e010      	b.n	8000c10 <_ZN8CupServo9selectCupEt+0x40>
	} else if (cup == 1) {
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <_ZN8CupServo9selectCupEt+0x30>
		ServoMotor::spinTo(90);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	215a      	movs	r1, #90	; 0x5a
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fb05 	bl	8001208 <_ZN10ServoMotor6spinToEt>
}
 8000bfe:	e007      	b.n	8000c10 <_ZN8CupServo9selectCupEt+0x40>
	} else if (cup == 2) {
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d104      	bne.n	8000c10 <_ZN8CupServo9selectCupEt+0x40>
		ServoMotor::spinTo(180);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	21b4      	movs	r1, #180	; 0xb4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fafc 	bl	8001208 <_ZN10ServoMotor6spinToEt>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_Z5Delaym>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <_Z5Delaym+0x20>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e7f3      	b.n	8000c20 <_Z5Delaym+0x8>
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <_Z8LCD_INITv>:

void LCD_INIT ( void )
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 f829 	bl	8000ca0 <_Z19LCD_BackLed_Control15FunctionalState>
	LCD_Rst();
 8000c4e:	f000 f80f 	bl	8000c70 <_Z7LCD_Rstv>
	LCD_REG_Config();
 8000c52:	f000 f85f 	bl	8000d14 <_Z14LCD_REG_Configv>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c60:	22f0      	movs	r2, #240	; 0xf0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e5 	bl	8001034 <_Z9LCD_Clearttttt>
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_Z7LCD_Rstv>:



void LCD_Rst ( void )
{			
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2102      	movs	r1, #2
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <_Z7LCD_Rstv+0x28>)
 8000c7a:	f001 fcd9 	bl	8002630 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <_Z7LCD_Rstv+0x2c>)
 8000c80:	f7ff ffca 	bl	8000c18 <_Z5Delaym>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2102      	movs	r1, #2
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <_Z7LCD_Rstv+0x28>)
 8000c8a:	f001 fcd1 	bl	8002630 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <_Z7LCD_Rstv+0x2c>)
 8000c90:	f7ff ffc2 	bl	8000c18 <_Z5Delaym>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40011800 	.word	0x40011800
 8000c9c:	0002bffc 	.word	0x0002bffc

08000ca0 <_Z19LCD_BackLed_Control15FunctionalState>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <_Z19LCD_BackLed_Control15FunctionalState+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <_Z19LCD_BackLed_Control15FunctionalState+0x34>)
 8000cb8:	f001 fcba 	bl	8002630 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000cbc:	e005      	b.n	8000cca <_Z19LCD_BackLed_Control15FunctionalState+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <_Z19LCD_BackLed_Control15FunctionalState+0x34>)
 8000cc6:	f001 fcb3 	bl	8002630 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40011400 	.word	0x40011400

08000cd8 <_Z13LCD_Write_Cmdt>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ce2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	8013      	strh	r3, [r2, #0]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <_Z14LCD_Write_Datat>:




void LCD_Write_Data ( uint16_t usData )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <_Z14LCD_Write_Datat+0x1c>)
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	8013      	strh	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	60020000 	.word	0x60020000

08000d14 <_Z14LCD_REG_Configv>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000d18:	20cf      	movs	r0, #207	; 0xcf
 8000d1a:	f7ff ffdd 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00  );
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ffe8 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x81  );
 8000d24:	2081      	movs	r0, #129	; 0x81
 8000d26:	f7ff ffe5 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x30  );
 8000d2a:	2030      	movs	r0, #48	; 0x30
 8000d2c:	f7ff ffe2 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000d30:	20ed      	movs	r0, #237	; 0xed
 8000d32:	f7ff ffd1 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x64 );
 8000d36:	2064      	movs	r0, #100	; 0x64
 8000d38:	f7ff ffdc 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x03 );
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f7ff ffd9 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x12 );
 8000d42:	2012      	movs	r0, #18
 8000d44:	f7ff ffd6 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x81 );
 8000d48:	2081      	movs	r0, #129	; 0x81
 8000d4a:	f7ff ffd3 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000d4e:	20e8      	movs	r0, #232	; 0xe8
 8000d50:	f7ff ffc2 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x85 );
 8000d54:	2085      	movs	r0, #133	; 0x85
 8000d56:	f7ff ffcd 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x10 );
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f7ff ffca 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x78 );
 8000d60:	2078      	movs	r0, #120	; 0x78
 8000d62:	f7ff ffc7 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000d66:	20cb      	movs	r0, #203	; 0xcb
 8000d68:	f7ff ffb6 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x39 );
 8000d6c:	2039      	movs	r0, #57	; 0x39
 8000d6e:	f7ff ffc1 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x2C );
 8000d72:	202c      	movs	r0, #44	; 0x2c
 8000d74:	f7ff ffbe 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ffbb 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x34 );
 8000d7e:	2034      	movs	r0, #52	; 0x34
 8000d80:	f7ff ffb8 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x02 );
 8000d84:	2002      	movs	r0, #2
 8000d86:	f7ff ffb5 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000d8a:	20f7      	movs	r0, #247	; 0xf7
 8000d8c:	f7ff ffa4 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x20 );
 8000d90:	2020      	movs	r0, #32
 8000d92:	f7ff ffaf 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000d96:	20ea      	movs	r0, #234	; 0xea
 8000d98:	f7ff ff9e 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ffa9 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff ffa6 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000da8:	20b1      	movs	r0, #177	; 0xb1
 8000daa:	f7ff ff95 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff ffa0 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x1B );
 8000db4:	201b      	movs	r0, #27
 8000db6:	f7ff ff9d 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000dba:	20b6      	movs	r0, #182	; 0xb6
 8000dbc:	f7ff ff8c 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x0A );
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f7ff ff97 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0xA2 );
 8000dc6:	20a2      	movs	r0, #162	; 0xa2
 8000dc8:	f7ff ff94 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000dcc:	20c0      	movs	r0, #192	; 0xc0
 8000dce:	f7ff ff83 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x35 );
 8000dd2:	2035      	movs	r0, #53	; 0x35
 8000dd4:	f7ff ff8e 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000dd8:	20c1      	movs	r0, #193	; 0xc1
 8000dda:	f7ff ff7d 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x11 );
 8000dde:	2011      	movs	r0, #17
 8000de0:	f7ff ff88 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000de4:	20c5      	movs	r0, #197	; 0xc5
 8000de6:	f7ff ff77 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x45 );
 8000dea:	2045      	movs	r0, #69	; 0x45
 8000dec:	f7ff ff82 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x45 );
 8000df0:	2045      	movs	r0, #69	; 0x45
 8000df2:	f7ff ff7f 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000df6:	20c7      	movs	r0, #199	; 0xc7
 8000df8:	f7ff ff6e 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0xA2 );
 8000dfc:	20a2      	movs	r0, #162	; 0xa2
 8000dfe:	f7ff ff79 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000e02:	20f2      	movs	r0, #242	; 0xf2
 8000e04:	f7ff ff68 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff ff73 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000e0e:	2026      	movs	r0, #38	; 0x26
 8000e10:	f7ff ff62 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x01 );
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff ff6d 	bl	8000cf4 <_Z14LCD_Write_Datat>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000e1a:	20e0      	movs	r0, #224	; 0xe0
 8000e1c:	f7ff ff5c 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x0F );
 8000e20:	200f      	movs	r0, #15
 8000e22:	f7ff ff67 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x26 );
 8000e26:	2026      	movs	r0, #38	; 0x26
 8000e28:	f7ff ff64 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x24 );
 8000e2c:	2024      	movs	r0, #36	; 0x24
 8000e2e:	f7ff ff61 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0B );
 8000e32:	200b      	movs	r0, #11
 8000e34:	f7ff ff5e 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0E );
 8000e38:	200e      	movs	r0, #14
 8000e3a:	f7ff ff5b 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x09 );
 8000e3e:	2009      	movs	r0, #9
 8000e40:	f7ff ff58 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x54 );
 8000e44:	2054      	movs	r0, #84	; 0x54
 8000e46:	f7ff ff55 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0xA8 );
 8000e4a:	20a8      	movs	r0, #168	; 0xa8
 8000e4c:	f7ff ff52 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x46 );
 8000e50:	2046      	movs	r0, #70	; 0x46
 8000e52:	f7ff ff4f 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0C );
 8000e56:	200c      	movs	r0, #12
 8000e58:	f7ff ff4c 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x17 );
 8000e5c:	2017      	movs	r0, #23
 8000e5e:	f7ff ff49 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x09 );
 8000e62:	2009      	movs	r0, #9
 8000e64:	f7ff ff46 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0F );
 8000e68:	200f      	movs	r0, #15
 8000e6a:	f7ff ff43 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x07 );
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f7ff ff40 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff ff3d 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000e7a:	20e1      	movs	r0, #225	; 0xe1
 8000e7c:	f7ff ff2c 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff ff37 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x19 );
 8000e86:	2019      	movs	r0, #25
 8000e88:	f7ff ff34 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x1B );
 8000e8c:	201b      	movs	r0, #27
 8000e8e:	f7ff ff31 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x04 );
 8000e92:	2004      	movs	r0, #4
 8000e94:	f7ff ff2e 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x10 );
 8000e98:	2010      	movs	r0, #16
 8000e9a:	f7ff ff2b 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x07 );
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f7ff ff28 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x2A );
 8000ea4:	202a      	movs	r0, #42	; 0x2a
 8000ea6:	f7ff ff25 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x47 );
 8000eaa:	2047      	movs	r0, #71	; 0x47
 8000eac:	f7ff ff22 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x39 );
 8000eb0:	2039      	movs	r0, #57	; 0x39
 8000eb2:	f7ff ff1f 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x03 );
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f7ff ff1c 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x06 );
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f7ff ff19 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x06 );
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff ff16 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x30 );
 8000ec8:	2030      	movs	r0, #48	; 0x30
 8000eca:	f7ff ff13 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x38 );
 8000ece:	2038      	movs	r0, #56	; 0x38
 8000ed0:	f7ff ff10 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x0F );
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f7ff ff0d 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000eda:	2036      	movs	r0, #54	; 0x36
 8000edc:	f7ff fefc 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000ee0:	20c8      	movs	r0, #200	; 0xc8
 8000ee2:	f7ff ff07 	bl	8000cf4 <_Z14LCD_Write_Datat>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000ee6:	202a      	movs	r0, #42	; 0x2a
 8000ee8:	f7ff fef6 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff ff01 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fefe 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fefb 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0xEF );
 8000efe:	20ef      	movs	r0, #239	; 0xef
 8000f00:	f7ff fef8 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000f04:	202b      	movs	r0, #43	; 0x2b
 8000f06:	f7ff fee7 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x00 );
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fef2 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x00 );
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff feef 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x01 );
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff feec 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( 0x3F );
 8000f1c:	203f      	movs	r0, #63	; 0x3f
 8000f1e:	f7ff fee9 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000f22:	203a      	movs	r0, #58	; 0x3a
 8000f24:	f7ff fed8 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( 0x55 );
 8000f28:	2055      	movs	r0, #85	; 0x55
 8000f2a:	f7ff fee3 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000f2e:	2011      	movs	r0, #17
 8000f30:	f7ff fed2 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	Delay ( 0xAFFf<<2 );
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <_Z14LCD_REG_Configv+0x230>)
 8000f36:	f7ff fe6f 	bl	8000c18 <_Z5Delaym>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000f3a:	2029      	movs	r0, #41	; 0x29
 8000f3c:	f7ff fecc 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	
	
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0002bffc 	.word	0x0002bffc

08000f48 <_Z14LCD_OpenWindowtttt>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000f66:	202a      	movs	r0, #42	; 0x2a
 8000f68:	f7ff feb6 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff febe 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff feb8 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000f84:	88fa      	ldrh	r2, [r7, #6]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	121b      	asrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff feaf 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fea4 	bl	8000cf4 <_Z14LCD_Write_Datat>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000fac:	202b      	movs	r0, #43	; 0x2b
 8000fae:	f7ff fe93 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	LCD_Write_Data ( usPAGE >> 8  );
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fe9b 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe95 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000fca:	88ba      	ldrh	r2, [r7, #4]
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	121b      	asrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe8c 	bl	8000cf4 <_Z14LCD_Write_Datat>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000fdc:	88ba      	ldrh	r2, [r7, #4]
 8000fde:	883b      	ldrh	r3, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fe81 	bl	8000cf4 <_Z14LCD_Write_Datat>
	
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd90      	pop	{r4, r7, pc}

08000ffa <_Z13LCD_FillColormt>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800100a:	202c      	movs	r0, #44	; 0x2c
 800100c:	f7ff fe64 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
		
	for ( i = 0; i < usPoint; i ++ )
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_Z13LCD_FillColormt+0x32>
		LCD_Write_Data ( usColor );
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe68 	bl	8000cf4 <_Z14LCD_Write_Datat>
	for ( i = 0; i < usPoint; i ++ )
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e7f3      	b.n	8001014 <_Z13LCD_FillColormt+0x1a>
		
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_Z9LCD_Clearttttt>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4604      	mov	r4, r0
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4623      	mov	r3, r4
 8001044:	80fb      	strh	r3, [r7, #6]
 8001046:	4603      	mov	r3, r0
 8001048:	80bb      	strh	r3, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]
 800104e:	4613      	mov	r3, r2
 8001050:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001052:	883b      	ldrh	r3, [r7, #0]
 8001054:	887a      	ldrh	r2, [r7, #2]
 8001056:	88b9      	ldrh	r1, [r7, #4]
 8001058:	88f8      	ldrh	r0, [r7, #6]
 800105a:	f7ff ff75 	bl	8000f48 <_Z14LCD_OpenWindowtttt>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	883a      	ldrh	r2, [r7, #0]
 8001062:	fb02 f303 	mul.w	r3, r2, r3
 8001066:	461a      	mov	r2, r3
 8001068:	8b3b      	ldrh	r3, [r7, #24]
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f7ff ffc4 	bl	8000ffa <_Z13LCD_FillColormt>
	
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}
	...

0800107c <_Z12LCD_DrawCharttc>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
 8001086:	460b      	mov	r3, r1
 8001088:	80bb      	strh	r3, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	3b20      	subs	r3, #32
 8001092:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001094:	88b9      	ldrh	r1, [r7, #4]
 8001096:	88f8      	ldrh	r0, [r7, #6]
 8001098:	2310      	movs	r3, #16
 800109a:	2208      	movs	r2, #8
 800109c:	f7ff ff54 	bl	8000f48 <_Z14LCD_OpenWindowtttt>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80010a0:	202c      	movs	r0, #44	; 0x2c
 80010a2:	f7ff fe19 	bl	8000cd8 <_Z13LCD_Write_Cmdt>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d824      	bhi.n	80010fa <_Z12LCD_DrawCharttc+0x7e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80010b0:	7b3a      	ldrb	r2, [r7, #12]
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <_Z12LCD_DrawCharttc+0x88>)
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	440a      	add	r2, r1
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d813      	bhi.n	80010f2 <_Z12LCD_DrawCharttc+0x76>
		{
			if ( ucTemp & 0x01 )
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <_Z12LCD_DrawCharttc+0x60>
				LCD_Write_Data ( 0x001F );
 80010d4:	201f      	movs	r0, #31
 80010d6:	f7ff fe0d 	bl	8000cf4 <_Z14LCD_Write_Datat>
 80010da:	e003      	b.n	80010e4 <_Z12LCD_DrawCharttc+0x68>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80010dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010e0:	f7ff fe08 	bl	8000cf4 <_Z14LCD_Write_Datat>
			
			ucTemp >>= 1;		
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
 80010ec:	3301      	adds	r3, #1
 80010ee:	737b      	strb	r3, [r7, #13]
 80010f0:	e7e8      	b.n	80010c4 <_Z12LCD_DrawCharttc+0x48>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73bb      	strb	r3, [r7, #14]
 80010f8:	e7d7      	b.n	80010aa <_Z12LCD_DrawCharttc+0x2e>
			
		}
		
	}
	
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08006dac 	.word	0x08006dac

08001108 <_Z14LCD_DrawStringttPKc>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	603a      	str	r2, [r7, #0]
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	460b      	mov	r3, r1
 8001116:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01d      	beq.n	800115c <_Z14LCD_DrawStringttPKc+0x54>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	2be8      	cmp	r3, #232	; 0xe8
 8001124:	d904      	bls.n	8001130 <_Z14LCD_DrawStringttPKc+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001126:	2300      	movs	r3, #0
 8001128:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	3310      	adds	r3, #16
 800112e:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001136:	d903      	bls.n	8001140 <_Z14LCD_DrawStringttPKc+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001138:	2300      	movs	r3, #0
 800113a:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800113c:	2300      	movs	r3, #0
 800113e:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	88b9      	ldrh	r1, [r7, #4]
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff97 	bl	800107c <_Z12LCD_DrawCharttc>
		
		pStr ++;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	3308      	adds	r3, #8
 8001158:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800115a:	e7dd      	b.n	8001118 <_Z14LCD_DrawStringttPKc+0x10>
		
	}
	
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0000      	movs	r0, r0
	...

08001168 <_ZN10ServoMotorC1EP17TIM_HandleTypeDeft>:
 *      Author: ooj
 */

#include <ServoMotor/ServoMotor.h>

ServoMotor::ServoMotor(TIM_HandleTypeDef* timer, uint16_t timerChannel) :
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	4613      	mov	r3, r2
 8001174:	80fb      	strh	r3, [r7, #6]
	timer(timer), timerChannel(timerChannel){
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	819a      	strh	r2, [r3, #12]
	HAL_TIM_PWM_Start(timer, timerChannel);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	4619      	mov	r1, r3
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	f002 f964 	bl	8003454 <HAL_TIM_PWM_Start>
	uint16_t arr = timer->Init.Period;
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	82fb      	strh	r3, [r7, #22]
	minPulse = arr * 0.025;
 8001192:	8afb      	ldrh	r3, [r7, #22]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9a1 	bl	80004dc <__aeabi_i2d>
 800119a:	a319      	add	r3, pc, #100	; (adr r3, 8001200 <_ZN10ServoMotorC1EP17TIM_HandleTypeDeft+0x98>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa06 	bl	80005b0 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcd8 	bl	8000b60 <__aeabi_d2uiz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	801a      	strh	r2, [r3, #0]
	maxPulse = arr * 0.125;
 80011b8:	8afb      	ldrh	r3, [r7, #22]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f98e 	bl	80004dc <__aeabi_i2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80011c8:	f7ff f9f2 	bl	80005b0 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fcc4 	bl	8000b60 <__aeabi_d2uiz>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	805a      	strh	r2, [r3, #2]
	totalSteps = maxPulse - minPulse;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	885a      	ldrh	r2, [r3, #2]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	809a      	strh	r2, [r3, #4]
}
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	9999999a 	.word	0x9999999a
 8001204:	3f999999 	.word	0x3f999999

08001208 <_ZN10ServoMotor6spinToEt>:


void ServoMotor::spinTo(uint16_t angle) {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
    if (angle > 180) angle = 180;
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	2bb4      	cmp	r3, #180	; 0xb4
 8001218:	d901      	bls.n	800121e <_ZN10ServoMotor6spinToEt+0x16>
 800121a:	23b4      	movs	r3, #180	; 0xb4
 800121c:	807b      	strh	r3, [r7, #2]
    if (angle < 0) angle = 0;

    uint16_t pulseWidth = minPulse + ((angle * totalSteps) / 180);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	881a      	ldrh	r2, [r3, #0]
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	8889      	ldrh	r1, [r1, #4]
 8001228:	fb01 f303 	mul.w	r3, r1, r3
 800122c:	4918      	ldr	r1, [pc, #96]	; (8001290 <_ZN10ServoMotor6spinToEt+0x88>)
 800122e:	fb81 0103 	smull	r0, r1, r1, r3
 8001232:	4419      	add	r1, r3
 8001234:	11c9      	asrs	r1, r1, #7
 8001236:	17db      	asrs	r3, r3, #31
 8001238:	1acb      	subs	r3, r1, r3
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	81fb      	strh	r3, [r7, #14]

    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	899b      	ldrh	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d105      	bne.n	8001254 <_ZN10ServoMotor6spinToEt+0x4c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	89fa      	ldrh	r2, [r7, #14]
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001252:	e018      	b.n	8001286 <_ZN10ServoMotor6spinToEt+0x7e>
    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	899b      	ldrh	r3, [r3, #12]
 8001258:	2b04      	cmp	r3, #4
 800125a:	d105      	bne.n	8001268 <_ZN10ServoMotor6spinToEt+0x60>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	89fa      	ldrh	r2, [r7, #14]
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001266:	e00e      	b.n	8001286 <_ZN10ServoMotor6spinToEt+0x7e>
    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	899b      	ldrh	r3, [r3, #12]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d105      	bne.n	800127c <_ZN10ServoMotor6spinToEt+0x74>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	89fa      	ldrh	r2, [r7, #14]
 8001278:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800127a:	e004      	b.n	8001286 <_ZN10ServoMotor6spinToEt+0x7e>
    __HAL_TIM_SET_COMPARE(timer, timerChannel, pulseWidth);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	89fa      	ldrh	r2, [r7, #14]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	b60b60b7 	.word	0xb60b60b7

08001294 <_ZN12StepperMotorC1EP12GPIO_TypeDefttttP17TIM_HandleTypeDef>:
 *      Author: ooj
 */

#include <StepperMotor/StepperMotor.h>

StepperMotor::StepperMotor(GPIO_TypeDef* gpioPort, uint16_t pin1, uint16_t pin2, uint16_t pin3, uint16_t pin4, TIM_HandleTypeDef* timer)
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	460b      	mov	r3, r1
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	4613      	mov	r3, r2
 80012a8:	80bb      	strh	r3, [r7, #4]
    : gpioPort(gpioPort), pin1(pin1), pin2(pin2), pin3(pin3), pin4(pin4), timer(timer) {
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	809a      	strh	r2, [r3, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	88ba      	ldrh	r2, [r7, #4]
 80012ba:	80da      	strh	r2, [r3, #6]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8c3a      	ldrh	r2, [r7, #32]
 80012c0:	811a      	strh	r2, [r3, #8]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012c6:	815a      	strh	r2, [r3, #10]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <_ZN12StepperMotorC1EP12GPIO_TypeDefttttP17TIM_HandleTypeDef+0x60>)
 80012d2:	f103 0410 	add.w	r4, r3, #16
 80012d6:	4615      	mov	r5, r2
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_TIM_Base_Start(timer);
 80012e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012e6:	f002 f805 	bl	80032f4 <HAL_TIM_Base_Start>
}
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}
 80012f4:	08006d80 	.word	0x08006d80

080012f8 <_ZN12StepperMotor10microDelayEt>:

void StepperMotor::microDelay(uint16_t delay) {
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COUNTER(timer, 0);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(timer) < delay);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	429a      	cmp	r2, r3
 800131a:	bf34      	ite	cc
 800131c:	2301      	movcc	r3, #1
 800131e:	2300      	movcs	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d000      	beq.n	8001328 <_ZN12StepperMotor10microDelayEt+0x30>
 8001326:	e7f2      	b.n	800130e <_ZN12StepperMotor10microDelayEt+0x16>
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <_ZN12StepperMotor10singleStepEi>:

void StepperMotor::singleStep(int index) {
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(gpioPort, pin1, state[index][0]);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8899      	ldrh	r1, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	3204      	adds	r2, #4
 800134a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800134e:	461a      	mov	r2, r3
 8001350:	f001 f96e 	bl	8002630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpioPort, pin2, state[index][1]);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	88d9      	ldrh	r1, [r3, #6]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	7c5b      	ldrb	r3, [r3, #17]
 8001366:	461a      	mov	r2, r3
 8001368:	f001 f962 	bl	8002630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpioPort, pin3, state[index][2]);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	8919      	ldrh	r1, [r3, #8]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	7c9b      	ldrb	r3, [r3, #18]
 800137e:	461a      	mov	r2, r3
 8001380:	f001 f956 	bl	8002630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpioPort, pin4, state[index][3]);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	8959      	ldrh	r1, [r3, #10]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	7cdb      	ldrb	r3, [r3, #19]
 8001396:	461a      	mov	r2, r3
 8001398:	f001 f94a 	bl	8002630 <HAL_GPIO_WritePin>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZN12StepperMotor9makeStepsEitb>:

void StepperMotor::makeSteps(int steps, uint16_t delay, bool clockwise) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	460b      	mov	r3, r1
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
    for (int x = 0; x < steps; ++x) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	da1e      	bge.n	8001404 <_ZN12StepperMotor9makeStepsEitb+0x60>
        for (int i = 0; i < STEP_COUNT; ++i) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	dc15      	bgt.n	80013fc <_ZN12StepperMotor9makeStepsEitb+0x58>
            int index = clockwise ? (STEP_COUNT - 1 - i) : i;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <_ZN12StepperMotor9makeStepsEitb+0x3a>
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f1c3 0307 	rsb	r3, r3, #7
 80013dc:	e000      	b.n	80013e0 <_ZN12StepperMotor9makeStepsEitb+0x3c>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	617b      	str	r3, [r7, #20]
            singleStep(index);
 80013e2:	6979      	ldr	r1, [r7, #20]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff ffa4 	bl	8001332 <_ZN12StepperMotor10singleStepEi>
            microDelay(delay);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff ff82 	bl	80012f8 <_ZN12StepperMotor10microDelayEt>
        for (int i = 0; i < STEP_COUNT; ++i) {
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	3301      	adds	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	e7e6      	b.n	80013ca <_ZN12StepperMotor9makeStepsEitb+0x26>
    for (int x = 0; x < steps; ++x) {
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	3301      	adds	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e7dc      	b.n	80013be <_ZN12StepperMotor9makeStepsEitb+0x1a>
        }
    }
}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f000 fde6 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f811 	bl	800143a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 f97a 	bl	8001710 <MX_GPIO_Init>
  MX_FSMC_Init();
 800141c:	f000 fa42 	bl	80018a4 <MX_FSMC_Init>
  MX_I2C2_Init();
 8001420:	f000 f856 	bl	80014d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001424:	f000 f94a 	bl	80016bc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001428:	f000 f880 	bl	800152c <MX_TIM1_Init>
  MX_TIM3_Init();
 800142c:	f000 f8ce 	bl	80015cc <MX_TIM3_Init>
    /* USER CODE BEGIN 3 */
  }

  // the main entry point in the C++ source after initializing
  // the runtime environment.
  return mymain();
 8001430:	f000 faa2 	bl	8001978 <mymain>
 8001434:	4603      	mov	r3, r0
  /* USER CODE END 3 */
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}

0800143a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b090      	sub	sp, #64	; 0x40
 800143e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	2228      	movs	r2, #40	; 0x28
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f002 ff77 	bl	800433c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001464:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001476:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fa52 	bl	800292c <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800148e:	f000 fa6d 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2302      	movs	r3, #2
 8001498:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fcbf 	bl	8002e30 <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014b8:	f000 fa58 	bl	800196c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80014bc:	2200      	movs	r2, #0
 80014be:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80014c2:	2000      	movs	r0, #0
 80014c4:	f001 fd9e 	bl	8003004 <HAL_RCC_MCOConfig>
}
 80014c8:	bf00      	nop
 80014ca:	3740      	adds	r7, #64	; 0x40
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C2_Init+0x50>)
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <MX_I2C2_Init+0x54>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C2_Init+0x50>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_I2C2_Init+0x58>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C2_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_I2C2_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_I2C2_Init+0x50>)
 80014ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_I2C2_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_I2C2_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_I2C2_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_I2C2_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_I2C2_Init+0x50>)
 800150e:	f001 f8c9 	bl	80026a4 <HAL_I2C_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001518:	f000 fa28 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001f8 	.word	0x200001f8
 8001524:	40005800 	.word	0x40005800
 8001528:	000186a0 	.word	0x000186a0

0800152c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_TIM1_Init+0x98>)
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <MX_TIM1_Init+0x9c>)
 800154c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_TIM1_Init+0x98>)
 8001550:	2247      	movs	r2, #71	; 0x47
 8001552:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_TIM1_Init+0x98>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_TIM1_Init+0x98>)
 800155c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001560:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_TIM1_Init+0x98>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_TIM1_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_TIM1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001574:	4813      	ldr	r0, [pc, #76]	; (80015c4 <MX_TIM1_Init+0x98>)
 8001576:	f001 fe6e 	bl	8003256 <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 f9f4 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	4619      	mov	r1, r3
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <MX_TIM1_Init+0x98>)
 8001592:	f002 f8db 	bl	800374c <HAL_TIM_ConfigClockSource>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800159c:	f000 f9e6 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_TIM1_Init+0x98>)
 80015ae:	f002 fc81 	bl	8003eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015b8:	f000 f9d8 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000024c 	.word	0x2000024c
 80015c8:	40012c00 	.word	0x40012c00

080015cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <MX_TIM3_Init+0xe8>)
 80015fe:	4a2e      	ldr	r2, [pc, #184]	; (80016b8 <MX_TIM3_Init+0xec>)
 8001600:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001602:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001604:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <MX_TIM3_Init+0xe8>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 480-1;
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001612:	f240 12df 	movw	r2, #479	; 0x1df
 8001616:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <MX_TIM3_Init+0xe8>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001624:	4823      	ldr	r0, [pc, #140]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001626:	f001 fe16 	bl	8003256 <HAL_TIM_Base_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001630:	f000 f99c 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	4619      	mov	r1, r3
 8001640:	481c      	ldr	r0, [pc, #112]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001642:	f002 f883 	bl	800374c <HAL_TIM_ConfigClockSource>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800164c:	f000 f98e 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001650:	4818      	ldr	r0, [pc, #96]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001652:	f001 fea7 	bl	80033a4 <HAL_TIM_PWM_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800165c:	f000 f986 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	4619      	mov	r1, r3
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001670:	f002 fc20 	bl	8003eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800167a:	f000 f977 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167e:	2360      	movs	r3, #96	; 0x60
 8001680:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 120;
 8001682:	2378      	movs	r3, #120	; 0x78
 8001684:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001696:	f001 ff97 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016a0:	f000 f964 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <MX_TIM3_Init+0xe8>)
 80016a6:	f000 fa45 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 80016aa:	bf00      	nop
 80016ac:	3738      	adds	r7, #56	; 0x38
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000294 	.word	0x20000294
 80016b8:	40000400 	.word	0x40000400

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART1_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016f4:	f002 fc4a 	bl	8003f8c <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 f935 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002dc 	.word	0x200002dc
 800170c:	40013800 	.word	0x40013800

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	4b58      	ldr	r3, [pc, #352]	; (8001888 <MX_GPIO_Init+0x178>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a57      	ldr	r2, [pc, #348]	; (8001888 <MX_GPIO_Init+0x178>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b55      	ldr	r3, [pc, #340]	; (8001888 <MX_GPIO_Init+0x178>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b52      	ldr	r3, [pc, #328]	; (8001888 <MX_GPIO_Init+0x178>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a51      	ldr	r2, [pc, #324]	; (8001888 <MX_GPIO_Init+0x178>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <MX_GPIO_Init+0x178>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001754:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <MX_GPIO_Init+0x178>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <MX_GPIO_Init+0x178>)
 800175a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b49      	ldr	r3, [pc, #292]	; (8001888 <MX_GPIO_Init+0x178>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b46      	ldr	r3, [pc, #280]	; (8001888 <MX_GPIO_Init+0x178>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a45      	ldr	r2, [pc, #276]	; (8001888 <MX_GPIO_Init+0x178>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <MX_GPIO_Init+0x178>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001784:	4b40      	ldr	r3, [pc, #256]	; (8001888 <MX_GPIO_Init+0x178>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <MX_GPIO_Init+0x178>)
 800178a:	f043 0320 	orr.w	r3, r3, #32
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <MX_GPIO_Init+0x178>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STP_1_Pin|STP_2_Pin|STP_3_Pin|STP_4_Pin, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	21f0      	movs	r1, #240	; 0xf0
 80017a0:	483a      	ldr	r0, [pc, #232]	; (800188c <MX_GPIO_Init+0x17c>)
 80017a2:	f000 ff45 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ac:	4838      	ldr	r0, [pc, #224]	; (8001890 <MX_GPIO_Init+0x180>)
 80017ae:	f000 ff3f 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2102      	movs	r1, #2
 80017b6:	4837      	ldr	r0, [pc, #220]	; (8001894 <MX_GPIO_Init+0x184>)
 80017b8:	f000 ff3a 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : K2_Btn_Pin */
  GPIO_InitStruct.Pin = K2_Btn_Pin;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <MX_GPIO_Init+0x188>)
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_Btn_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4832      	ldr	r0, [pc, #200]	; (800189c <MX_GPIO_Init+0x18c>)
 80017d2:	f000 fd99 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d6:	2308      	movs	r3, #8
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <MX_GPIO_Init+0x190>)
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	2301      	movs	r3, #1
 80017e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4828      	ldr	r0, [pc, #160]	; (800188c <MX_GPIO_Init+0x17c>)
 80017ea:	f000 fd8d 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : STP_1_Pin STP_2_Pin STP_3_Pin STP_4_Pin */
  GPIO_InitStruct.Pin = STP_1_Pin|STP_2_Pin|STP_3_Pin|STP_4_Pin;
 80017ee:	23f0      	movs	r3, #240	; 0xf0
 80017f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0318 	add.w	r3, r7, #24
 8001802:	4619      	mov	r1, r3
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_GPIO_Init+0x17c>)
 8001806:	f000 fd7f 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	4619      	mov	r1, r3
 8001822:	481b      	ldr	r0, [pc, #108]	; (8001890 <MX_GPIO_Init+0x180>)
 8001824:	f000 fd70 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0318 	add.w	r3, r7, #24
 800183a:	4619      	mov	r1, r3
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_GPIO_Init+0x17c>)
 800183e:	f000 fd63 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	4619      	mov	r1, r3
 8001858:	480e      	ldr	r0, [pc, #56]	; (8001894 <MX_GPIO_Init+0x184>)
 800185a:	f000 fd55 	bl	8002308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2009      	movs	r0, #9
 8001864:	f000 fd19 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001868:	2009      	movs	r0, #9
 800186a:	f000 fd32 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2028      	movs	r0, #40	; 0x28
 8001874:	f000 fd11 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001878:	2028      	movs	r0, #40	; 0x28
 800187a:	f000 fd2a 	bl	80022d2 <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800
 8001890:	40011400 	.word	0x40011400
 8001894:	40011800 	.word	0x40011800
 8001898:	10110000 	.word	0x10110000
 800189c:	40011000 	.word	0x40011000
 80018a0:	10310000 	.word	0x10310000

080018a4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018be:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80018c2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018c6:	4a27      	ldr	r2, [pc, #156]	; (8001964 <MX_FSMC_Init+0xc0>)
 80018c8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018de:	2210      	movs	r2, #16
 80018e0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_FSMC_Init+0xbc>)
 80018fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_FSMC_Init+0xbc>)
 8001904:	2200      	movs	r2, #0
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_FSMC_Init+0xbc>)
 800190a:	2200      	movs	r2, #0
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_FSMC_Init+0xbc>)
 8001910:	2200      	movs	r2, #0
 8001912:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_FSMC_Init+0xbc>)
 8001916:	2200      	movs	r2, #0
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800191a:	230f      	movs	r3, #15
 800191c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800191e:	230f      	movs	r3, #15
 8001920:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001922:	23ff      	movs	r3, #255	; 0xff
 8001924:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001926:	230f      	movs	r3, #15
 8001928:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800192a:	2310      	movs	r3, #16
 800192c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800192e:	2311      	movs	r3, #17
 8001930:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4808      	ldr	r0, [pc, #32]	; (8001960 <MX_FSMC_Init+0xbc>)
 800193e:	f001 fc3d 	bl	80031bc <HAL_SRAM_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001948:	f000 f810 	bl	800196c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_FSMC_Init+0xc4>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <MX_FSMC_Init+0xc4>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000324 	.word	0x20000324
 8001964:	a0000104 	.word	0xa0000104
 8001968:	40010000 	.word	0x40010000

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x8>
	...

08001978 <mymain>:
#include <CupServo/CupServo.h>

extern TIM_HandleTypeDef htim1;

int mymain(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af04      	add	r7, sp, #16
  LCD_INIT();
 800197e:	f7ff f960 	bl	8000c42 <_Z8LCD_INITv>

  char name[] = "DAS, Ujaan";
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <mymain+0x68>)
 8001984:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001988:	ca07      	ldmia	r2, {r0, r1, r2}
 800198a:	c303      	stmia	r3!, {r0, r1}
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	3302      	adds	r3, #2
 8001990:	0c12      	lsrs	r2, r2, #16
 8001992:	701a      	strb	r2, [r3, #0]
  LCD_DrawString(0, 0, name);
 8001994:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001998:	461a      	mov	r2, r3
 800199a:	2100      	movs	r1, #0
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fbb3 	bl	8001108 <_Z14LCD_DrawStringttPKc>

  StepperMotor stepper(GPIOA, STP_1_Pin, STP_2_Pin, STP_3_Pin, STP_4_Pin, &htim1);
 80019a2:	1d38      	adds	r0, r7, #4
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <mymain+0x6c>)
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2340      	movs	r3, #64	; 0x40
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2320      	movs	r3, #32
 80019b2:	2210      	movs	r2, #16
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <mymain+0x70>)
 80019b6:	f7ff fc6d 	bl	8001294 <_ZN12StepperMotorC1EP12GPIO_TypeDefttttP17TIM_HandleTypeDef>

  while (1)
  {
	  stepper.makeSteps(256, 300, true);
 80019ba:	1d38      	adds	r0, r7, #4
 80019bc:	2301      	movs	r3, #1
 80019be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c6:	f7ff fced 	bl	80013a4 <_ZN12StepperMotor9makeStepsEitb>
	  HAL_Delay(100);
 80019ca:	2064      	movs	r0, #100	; 0x64
 80019cc:	f000 fb6a 	bl	80020a4 <HAL_Delay>
	  stepper.makeSteps(128, 300, false);
 80019d0:	1d38      	adds	r0, r7, #4
 80019d2:	2300      	movs	r3, #0
 80019d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	f7ff fce3 	bl	80013a4 <_ZN12StepperMotor9makeStepsEitb>
	  stepper.makeSteps(256, 300, true);
 80019de:	e7ec      	b.n	80019ba <mymain+0x42>
 80019e0:	08006da0 	.word	0x08006da0
 80019e4:	2000024c 	.word	0x2000024c
 80019e8:	40010800 	.word	0x40010800

080019ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_MspInit+0x5c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6193      	str	r3, [r2, #24]
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_MspInit+0x60>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_MspInit+0x60>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000

08001a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <HAL_I2C_MspInit+0x74>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d124      	bne.n	8001aba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_I2C_MspInit+0x78>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <HAL_I2C_MspInit+0x78>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_I2C_MspInit+0x78>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8e:	2312      	movs	r3, #18
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <HAL_I2C_MspInit+0x7c>)
 8001a9e:	f000 fc33 	bl	8002308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_I2C_MspInit+0x78>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_I2C_MspInit+0x78>)
 8001aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_I2C_MspInit+0x78>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40005800 	.word	0x40005800
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010c00 	.word	0x40010c00

08001ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <HAL_TIM_Base_MspInit+0x58>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10c      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_TIM_Base_MspInit+0x5c>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_TIM_Base_MspInit+0x5c>)
 8001ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aec:	6193      	str	r3, [r2, #24]
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_TIM_Base_MspInit+0x5c>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001afa:	e010      	b.n	8001b1e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0x60>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10b      	bne.n	8001b1e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_TIM_Base_MspInit+0x5c>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_TIM_Base_MspInit+0x5c>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	61d3      	str	r3, [r2, #28]
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_TIM_Base_MspInit+0x5c>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	40012c00 	.word	0x40012c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40000400 	.word	0x40000400

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_TIM_MspPostInit+0x7c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d129      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_TIM_MspPostInit+0x80>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <HAL_TIM_MspPostInit+0x80>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_TIM_MspPostInit+0x80>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b6c:	2340      	movs	r3, #64	; 0x40
 8001b6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <HAL_TIM_MspPostInit+0x84>)
 8001b80:	f000 fbc2 	bl	8002308 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_TIM_MspPostInit+0x88>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_TIM_MspPostInit+0x88>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_UART_MspInit+0x8c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d131      	bne.n	8001c44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_UART_MspInit+0x90>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_UART_MspInit+0x90>)
 8001be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_UART_MspInit+0x90>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_UART_MspInit+0x90>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_UART_MspInit+0x90>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_UART_MspInit+0x90>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <HAL_UART_MspInit+0x94>)
 8001c26:	f000 fb6f 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_UART_MspInit+0x94>)
 8001c40:	f000 fb62 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010800 	.word	0x40010800

08001c58 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_FSMC_MspInit+0x78>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d129      	bne.n	8001cc8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_FSMC_MspInit+0x78>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_FSMC_MspInit+0x7c>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_FSMC_MspInit+0x7c>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c84:	6153      	str	r3, [r2, #20]
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_FSMC_MspInit+0x7c>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c92:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001c96:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <HAL_FSMC_MspInit+0x80>)
 8001ca8:	f000 fb2e 	bl	8002308 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cac:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001cb0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4806      	ldr	r0, [pc, #24]	; (8001cdc <HAL_FSMC_MspInit+0x84>)
 8001cc2:	f000 fb21 	bl	8002308 <HAL_GPIO_Init>
 8001cc6:	e000      	b.n	8001cca <HAL_FSMC_MspInit+0x72>
    return;
 8001cc8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000036c 	.word	0x2000036c
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40011800 	.word	0x40011800
 8001cdc:	40011400 	.word	0x40011400

08001ce0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ce8:	f7ff ffb6 	bl	8001c58 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3a:	f000 f997 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	int status = __HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <EXTI3_IRQHandler+0x30>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	607b      	str	r3, [r7, #4]
	if (status != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <EXTI3_IRQHandler+0x22>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <EXTI3_IRQHandler+0x30>)
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001d60:	2008      	movs	r0, #8
 8001d62:	f000 fc95 	bl	8002690 <HAL_GPIO_EXTI_Callback>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d66:	2008      	movs	r0, #8
 8001d68:	f000 fc7a 	bl	8002660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40010400 	.word	0x40010400

08001d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	int status = __HAL_GPIO_EXTI_GET_IT(K2_Btn_Pin);
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <EXTI15_10_IRQHandler+0x40>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d86:	607b      	str	r3, [r7, #4]
	if (status != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <EXTI15_10_IRQHandler+0x2e>
	{
		cupServo.selectCup(2);
 8001d8e:	2102      	movs	r1, #2
 8001d90:	480a      	ldr	r0, [pc, #40]	; (8001dbc <EXTI15_10_IRQHandler+0x44>)
 8001d92:	f7fe ff1d 	bl	8000bd0 <_ZN8CupServo9selectCupEt>
		__HAL_GPIO_EXTI_CLEAR_IT(K2_Btn_Pin);
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <EXTI15_10_IRQHandler+0x40>)
 8001d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9c:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(K2_Btn_Pin);
 8001d9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001da2:	f000 fc75 	bl	8002690 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K2_Btn_Pin);
 8001da6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001daa:	f000 fc59 	bl	8002660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40010400 	.word	0x40010400
 8001dbc:	20000370 	.word	0x20000370

08001dc0 <_Z41__static_initialization_and_destruction_0ii>:
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d10a      	bne.n	8001de6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d105      	bne.n	8001de6 <_Z41__static_initialization_and_destruction_0ii+0x26>
CupServo cupServo(3, &htim3, TIM_CHANNEL_1);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001dde:	2103      	movs	r1, #3
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001de2:	f7fe fedd 	bl	8000ba0 <_ZN8CupServoC1EtP17TIM_HandleTypeDeft>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000294 	.word	0x20000294
 8001df4:	20000370 	.word	0x20000370

08001df8 <_GLOBAL__sub_I_cupServo>:
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff ffdd 	bl	8001dc0 <_Z41__static_initialization_and_destruction_0ii>
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <_kill>:

int _kill(int pid, int sig)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e20:	f002 fa62 	bl	80042e8 <__errno>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2216      	movs	r2, #22
 8001e28:	601a      	str	r2, [r3, #0]
	return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_exit>:

void _exit (int status)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffe7 	bl	8001e16 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e48:	e7fe      	b.n	8001e48 <_exit+0x12>

08001e4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e00a      	b.n	8001e72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e5c:	f3af 8000 	nop.w
 8001e60:	4601      	mov	r1, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	60ba      	str	r2, [r7, #8]
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbf0      	blt.n	8001e5c <_read+0x12>
	}

return len;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e009      	b.n	8001eaa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	dbf1      	blt.n	8001e96 <_write+0x12>
	}
	return len;
 8001eb2:	687b      	ldr	r3, [r7, #4]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_close>:

int _close(int file)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	return -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <_isatty>:

int _isatty(int file)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	return 1;
 8001ef8:	2301      	movs	r3, #1
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f002 f9cc 	bl	80042e8 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20010000 	.word	0x20010000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20000380 	.word	0x20000380
 8001f84:	20000398 	.word	0x20000398

08001f88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f94:	f7ff fff8 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f98:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f9a:	490c      	ldr	r1, [pc, #48]	; (8001fcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fb0:	4c09      	ldr	r4, [pc, #36]	; (8001fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f002 f999 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc2:	f7ff fa23 	bl	800140c <main>
  bx lr
 8001fc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fd0:	080077b0 	.word	0x080077b0
  ldr r2, =_sbss
 8001fd4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fd8:	20000398 	.word	0x20000398

08001fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_2_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x28>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x28>)
 8001fea:	f043 0310 	orr.w	r3, r3, #16
 8001fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f947 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fcf6 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40022000 	.word	0x40022000

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f95f 	bl	80022ee <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002048:	f000 f927 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000000 	.word	0x20000000
 8002064:	20000008 	.word	0x20000008
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_IncTick+0x1c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x20>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_IncTick+0x20>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000008 	.word	0x20000008
 800208c:	20000384 	.word	0x20000384

08002090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <HAL_GetTick+0x10>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000384 	.word	0x20000384

080020a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff fff0 	bl	8002090 <HAL_GetTick>
 80020b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020bc:	d005      	beq.n	80020ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_Delay+0x44>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ca:	bf00      	nop
 80020cc:	f7ff ffe0 	bl	8002090 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d8f7      	bhi.n	80020cc <HAL_Delay+0x28>
  {
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <__NVIC_EnableIRQ+0x34>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002264:	f7ff ff90 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff2d 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff42 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff90 	bl	80021dc <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5f 	bl	8002188 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff35 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b08b      	sub	sp, #44	; 0x2c
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	e179      	b.n	8002610 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800231c:	2201      	movs	r2, #1
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8168 	bne.w	800260a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4a96      	ldr	r2, [pc, #600]	; (8002598 <HAL_GPIO_Init+0x290>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d05e      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002344:	4a94      	ldr	r2, [pc, #592]	; (8002598 <HAL_GPIO_Init+0x290>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d875      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800234a:	4a94      	ldr	r2, [pc, #592]	; (800259c <HAL_GPIO_Init+0x294>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d058      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_GPIO_Init+0x294>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d86f      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002356:	4a92      	ldr	r2, [pc, #584]	; (80025a0 <HAL_GPIO_Init+0x298>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d052      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 800235c:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_GPIO_Init+0x298>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d869      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002362:	4a90      	ldr	r2, [pc, #576]	; (80025a4 <HAL_GPIO_Init+0x29c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d04c      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002368:	4a8e      	ldr	r2, [pc, #568]	; (80025a4 <HAL_GPIO_Init+0x29c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d863      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800236e:	4a8e      	ldr	r2, [pc, #568]	; (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d046      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002374:	4a8c      	ldr	r2, [pc, #560]	; (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d85d      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800237a:	2b12      	cmp	r3, #18
 800237c:	d82a      	bhi.n	80023d4 <HAL_GPIO_Init+0xcc>
 800237e:	2b12      	cmp	r3, #18
 8002380:	d859      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_GPIO_Init+0x80>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002403 	.word	0x08002403
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080023ef 	.word	0x080023ef
 8002394:	08002431 	.word	0x08002431
 8002398:	08002437 	.word	0x08002437
 800239c:	08002437 	.word	0x08002437
 80023a0:	08002437 	.word	0x08002437
 80023a4:	08002437 	.word	0x08002437
 80023a8:	08002437 	.word	0x08002437
 80023ac:	08002437 	.word	0x08002437
 80023b0:	08002437 	.word	0x08002437
 80023b4:	08002437 	.word	0x08002437
 80023b8:	08002437 	.word	0x08002437
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002437 	.word	0x08002437
 80023c4:	08002437 	.word	0x08002437
 80023c8:	08002437 	.word	0x08002437
 80023cc:	080023e5 	.word	0x080023e5
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_GPIO_Init+0x2a4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023da:	e02c      	b.n	8002436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	623b      	str	r3, [r7, #32]
          break;
 80023e2:	e029      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	3304      	adds	r3, #4
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e024      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	3308      	adds	r3, #8
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e01f      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	330c      	adds	r3, #12
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e01a      	b.n	8002438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800240a:	2304      	movs	r3, #4
 800240c:	623b      	str	r3, [r7, #32]
          break;
 800240e:	e013      	b.n	8002438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002418:	2308      	movs	r3, #8
 800241a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	611a      	str	r2, [r3, #16]
          break;
 8002422:	e009      	b.n	8002438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	615a      	str	r2, [r3, #20]
          break;
 800242e:	e003      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x130>
          break;
 8002436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	; 0xff
 800243c:	d801      	bhi.n	8002442 <HAL_GPIO_Init+0x13a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	e001      	b.n	8002446 <HAL_GPIO_Init+0x13e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2bff      	cmp	r3, #255	; 0xff
 800244c:	d802      	bhi.n	8002454 <HAL_GPIO_Init+0x14c>
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	e002      	b.n	800245a <HAL_GPIO_Init+0x152>
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	3b08      	subs	r3, #8
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	210f      	movs	r1, #15
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	431a      	orrs	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80c1 	beq.w	800260a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002488:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a0:	4a44      	ldr	r2, [pc, #272]	; (80025b4 <HAL_GPIO_Init+0x2ac>)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_GPIO_Init+0x2b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01f      	beq.n	800250c <HAL_GPIO_Init+0x204>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <HAL_GPIO_Init+0x2b4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d019      	beq.n	8002508 <HAL_GPIO_Init+0x200>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3a      	ldr	r2, [pc, #232]	; (80025c0 <HAL_GPIO_Init+0x2b8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x1fc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a39      	ldr	r2, [pc, #228]	; (80025c4 <HAL_GPIO_Init+0x2bc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1f8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <HAL_GPIO_Init+0x2c0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1f4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a37      	ldr	r2, [pc, #220]	; (80025cc <HAL_GPIO_Init+0x2c4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1f0>
 80024f4:	2305      	movs	r3, #5
 80024f6:	e00a      	b.n	800250e <HAL_GPIO_Init+0x206>
 80024f8:	2306      	movs	r3, #6
 80024fa:	e008      	b.n	800250e <HAL_GPIO_Init+0x206>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e006      	b.n	800250e <HAL_GPIO_Init+0x206>
 8002500:	2303      	movs	r3, #3
 8002502:	e004      	b.n	800250e <HAL_GPIO_Init+0x206>
 8002504:	2302      	movs	r3, #2
 8002506:	e002      	b.n	800250e <HAL_GPIO_Init+0x206>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_GPIO_Init+0x206>
 800250c:	2300      	movs	r3, #0
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	f002 0203 	and.w	r2, r2, #3
 8002514:	0092      	lsls	r2, r2, #2
 8002516:	4093      	lsls	r3, r2
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800251e:	4925      	ldr	r1, [pc, #148]	; (80025b4 <HAL_GPIO_Init+0x2ac>)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	43db      	mvns	r3, r3
 800254e:	4920      	ldr	r1, [pc, #128]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002550:	4013      	ands	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	491a      	ldr	r1, [pc, #104]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	43db      	mvns	r3, r3
 8002576:	4916      	ldr	r1, [pc, #88]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002578:	4013      	ands	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d025      	beq.n	80025d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4910      	ldr	r1, [pc, #64]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	e025      	b.n	80025e2 <HAL_GPIO_Init+0x2da>
 8002596:	bf00      	nop
 8002598:	10320000 	.word	0x10320000
 800259c:	10310000 	.word	0x10310000
 80025a0:	10220000 	.word	0x10220000
 80025a4:	10210000 	.word	0x10210000
 80025a8:	10120000 	.word	0x10120000
 80025ac:	10110000 	.word	0x10110000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40010800 	.word	0x40010800
 80025bc:	40010c00 	.word	0x40010c00
 80025c0:	40011000 	.word	0x40011000
 80025c4:	40011400 	.word	0x40011400
 80025c8:	40011800 	.word	0x40011800
 80025cc:	40011c00 	.word	0x40011c00
 80025d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_GPIO_Init+0x324>)
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4913      	ldr	r1, [pc, #76]	; (800262c <HAL_GPIO_Init+0x324>)
 80025de:	4013      	ands	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_GPIO_Init+0x324>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_GPIO_Init+0x324>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
 80025fa:	e006      	b.n	800260a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_GPIO_Init+0x324>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	43db      	mvns	r3, r3
 8002604:	4909      	ldr	r1, [pc, #36]	; (800262c <HAL_GPIO_Init+0x324>)
 8002606:	4013      	ands	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3301      	adds	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	f47f ae7e 	bne.w	800231c <HAL_GPIO_Init+0x14>
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	372c      	adds	r7, #44	; 0x2c
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800264c:	e003      	b.n	8002656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f806 	bl	8002690 <HAL_GPIO_EXTI_Callback>
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e12b      	b.n	800290e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff f9c0 	bl	8001a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002708:	f000 fd12 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 800270c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a81      	ldr	r2, [pc, #516]	; (8002918 <HAL_I2C_Init+0x274>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d807      	bhi.n	8002728 <HAL_I2C_Init+0x84>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a80      	ldr	r2, [pc, #512]	; (800291c <HAL_I2C_Init+0x278>)
 800271c:	4293      	cmp	r3, r2
 800271e:	bf94      	ite	ls
 8002720:	2301      	movls	r3, #1
 8002722:	2300      	movhi	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e006      	b.n	8002736 <HAL_I2C_Init+0x92>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a7d      	ldr	r2, [pc, #500]	; (8002920 <HAL_I2C_Init+0x27c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0e7      	b.n	800290e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a78      	ldr	r2, [pc, #480]	; (8002924 <HAL_I2C_Init+0x280>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9b      	lsrs	r3, r3, #18
 8002748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_I2C_Init+0x274>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d802      	bhi.n	8002778 <HAL_I2C_Init+0xd4>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3301      	adds	r3, #1
 8002776:	e009      	b.n	800278c <HAL_I2C_Init+0xe8>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	4a69      	ldr	r2, [pc, #420]	; (8002928 <HAL_I2C_Init+0x284>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	3301      	adds	r3, #1
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	430b      	orrs	r3, r1
 8002792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800279e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	495c      	ldr	r1, [pc, #368]	; (8002918 <HAL_I2C_Init+0x274>)
 80027a8:	428b      	cmp	r3, r1
 80027aa:	d819      	bhi.n	80027e0 <HAL_I2C_Init+0x13c>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e59      	subs	r1, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ba:	1c59      	adds	r1, r3, #1
 80027bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027c0:	400b      	ands	r3, r1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_I2C_Init+0x138>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1e59      	subs	r1, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027da:	e051      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 80027dc:	2304      	movs	r3, #4
 80027de:	e04f      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d111      	bne.n	800280c <HAL_I2C_Init+0x168>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	440b      	add	r3, r1
 80027f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e012      	b.n	8002832 <HAL_I2C_Init+0x18e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1e58      	subs	r0, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	0099      	lsls	r1, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Init+0x196>
 8002836:	2301      	movs	r3, #1
 8002838:	e022      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10e      	bne.n	8002860 <HAL_I2C_Init+0x1bc>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e58      	subs	r0, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	440b      	add	r3, r1
 8002850:	fbb0 f3f3 	udiv	r3, r0, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285e:	e00f      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	0099      	lsls	r1, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	6809      	ldr	r1, [r1, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6911      	ldr	r1, [r2, #16]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	000186a0 	.word	0x000186a0
 800291c:	001e847f 	.word	0x001e847f
 8002920:	003d08ff 	.word	0x003d08ff
 8002924:	431bde83 	.word	0x431bde83
 8002928:	10624dd3 	.word	0x10624dd3

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e272      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800294c:	4b92      	ldr	r3, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002958:	4b8f      	ldr	r3, [pc, #572]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
 8002964:	4b8c      	ldr	r3, [pc, #560]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d10b      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x12c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e24c      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x76>
 8002994:	4b80      	ldr	r3, [pc, #512]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7a      	ldr	r2, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xbc>
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a71      	ldr	r2, [pc, #452]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029e8:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fb42 	bl	8002090 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff fb3e 	bl	8002090 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e200      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe4>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff fb2e 	bl	8002090 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff fb2a 	bl	8002090 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1ec      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x10c>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a72:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4939      	ldr	r1, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff fae3 	bl	8002090 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff fadf 	bl	8002090 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4927      	ldr	r1, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff fac2 	bl	8002090 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7ff fabe 	bl	8002090 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e180      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03a      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7ff faa2 	bl	8002090 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7ff fa9e 	bl	8002090 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e160      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 fb06 	bl	8003180 <RCC_Delay>
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7ff fa88 	bl	8002090 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7ff fa84 	bl	8002090 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e146      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	42420000 	.word	0x42420000
 8002ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e9      	bne.n	8002b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a6 	beq.w	8002d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b82      	ldr	r3, [pc, #520]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c02:	f7ff fa45 	bl	8002090 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7ff fa41 	bl	8002090 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	; 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e103      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x312>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e02d      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x334>
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e01c      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x356>
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a57      	ldr	r2, [pc, #348]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff f9f5 	bl	8002090 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7ff f9f1 	bl	8002090 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ee      	beq.n	8002caa <HAL_RCC_OscConfig+0x37e>
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7ff f9df 	bl	8002090 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff f9db 	bl	8002090 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e09b      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d061      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d146      	bne.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7ff f9af 	bl	8002090 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7ff f9ab 	bl	8002090 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e06d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4921      	ldr	r1, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a19      	ldr	r1, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	430b      	orrs	r3, r1
 8002d82:	491b      	ldr	r1, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7ff f97f 	bl	8002090 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7ff f97b 	bl	8002090 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46a>
 8002db4:	e035      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f968 	bl	8002090 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7ff f964 	bl	8002090 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e026      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x498>
 8002de2:	e01e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x500>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d0      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4965      	ldr	r1, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e073      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06b      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4936      	ldr	r1, [pc, #216]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7ff f8b6 	bl	8002090 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7ff f8b2 	bl	8002090 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e053      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d210      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4922      	ldr	r1, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f859 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f814 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	0800739c 	.word	0x0800739c
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800302a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800302e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_RCC_MCOConfig+0x68>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_RCC_MCOConfig+0x68>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_MCOConfig+0x68>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003048:	f107 0318 	add.w	r3, r7, #24
 800304c:	4619      	mov	r1, r3
 800304e:	4808      	ldr	r0, [pc, #32]	; (8003070 <HAL_RCC_MCOConfig+0x6c>)
 8003050:	f7ff f95a 	bl	8002308 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_MCOConfig+0x68>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_MCOConfig+0x68>)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
}
 8003064:	bf00      	nop
 8003066:	3728      	adds	r7, #40	; 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	40010800 	.word	0x40010800

08003074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <HAL_RCC_GetSysClockFreq+0x94>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b04      	cmp	r3, #4
 800309c:	d002      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x30>
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x36>
 80030a2:	e027      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_GetSysClockFreq+0x98>)
 80030a6:	613b      	str	r3, [r7, #16]
      break;
 80030a8:	e027      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0c9b      	lsrs	r3, r3, #18
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d010      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	0c5b      	lsrs	r3, r3, #17
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	4a11      	ldr	r2, [pc, #68]	; (8003114 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <HAL_RCC_GetSysClockFreq+0x98>)
 80030d6:	fb03 f202 	mul.w	r2, r3, r2
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e004      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	613b      	str	r3, [r7, #16]
      break;
 80030f2:	e002      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetSysClockFreq+0x98>)
 80030f6:	613b      	str	r3, [r7, #16]
      break;
 80030f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fa:	693b      	ldr	r3, [r7, #16]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	007a1200 	.word	0x007a1200
 8003110:	080073b4 	.word	0x080073b4
 8003114:	080073c4 	.word	0x080073c4
 8003118:	003d0900 	.word	0x003d0900

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b02      	ldr	r3, [pc, #8]	; (800312c <HAL_RCC_GetHCLKFreq+0x10>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	20000000 	.word	0x20000000

08003130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003134:	f7ff fff2 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4903      	ldr	r1, [pc, #12]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	080073ac 	.word	0x080073ac

08003158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800315c:	f7ff ffde 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0adb      	lsrs	r3, r3, #11
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCC_GetPCLK2Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	080073ac 	.word	0x080073ac

08003180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <RCC_Delay+0x34>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <RCC_Delay+0x38>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0a5b      	lsrs	r3, r3, #9
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800319c:	bf00      	nop
  }
  while (Delay --);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	60fa      	str	r2, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f9      	bne.n	800319c <RCC_Delay+0x1c>
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	20000000 	.word	0x20000000
 80031b8:	10624dd3 	.word	0x10624dd3

080031bc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_SRAM_Init+0x1c>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d101      	bne.n	80031dc <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e038      	b.n	800324e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7fe fd75 	bl	8001ce0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3308      	adds	r3, #8
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f000 ffa1 	bl	8004148 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	461a      	mov	r2, r3
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	f001 f803 	bl	800421c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6858      	ldr	r0, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f001 f828 	bl	8004278 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	6892      	ldr	r2, [r2, #8]
 8003230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	f041 0101 	orr.w	r1, r1, #1
 8003240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e041      	b.n	80032ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fe fc27 	bl	8001ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f000 fb21 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d001      	beq.n	800330c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e03c      	b.n	8003386 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <HAL_TIM_Base_Start+0x9c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d018      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <HAL_TIM_Base_Start+0xa0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_TIM_Base_Start+0xa4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_TIM_Base_Start+0xa8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <HAL_TIM_Base_Start+0xac>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d010      	beq.n	8003384 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	e007      	b.n	8003384 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40013400 	.word	0x40013400
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00

080033a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e041      	b.n	800343a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f839 	bl	8003442 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f000 fa7a 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_TIM_PWM_Start+0x24>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e022      	b.n	80034be <HAL_TIM_PWM_Start+0x6a>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d109      	bne.n	8003492 <HAL_TIM_PWM_Start+0x3e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e015      	b.n	80034be <HAL_TIM_PWM_Start+0x6a>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start+0x58>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e008      	b.n	80034be <HAL_TIM_PWM_Start+0x6a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e072      	b.n	80035ac <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x82>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d4:	e013      	b.n	80034fe <HAL_TIM_PWM_Start+0xaa>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x92>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e4:	e00b      	b.n	80034fe <HAL_TIM_PWM_Start+0xaa>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_PWM_Start+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f4:	e003      	b.n	80034fe <HAL_TIM_PWM_Start+0xaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	6839      	ldr	r1, [r7, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fcb0 	bl	8003e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <HAL_TIM_PWM_Start+0x160>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_PWM_Start+0xcc>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <HAL_TIM_PWM_Start+0x164>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_TIM_PWM_Start+0xd0>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_TIM_PWM_Start+0xd2>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_TIM_PWM_Start+0x160>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d018      	beq.n	8003576 <HAL_TIM_PWM_Start+0x122>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_TIM_PWM_Start+0x164>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_TIM_PWM_Start+0x122>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d00e      	beq.n	8003576 <HAL_TIM_PWM_Start+0x122>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a17      	ldr	r2, [pc, #92]	; (80035bc <HAL_TIM_PWM_Start+0x168>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_TIM_PWM_Start+0x122>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_TIM_PWM_Start+0x16c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIM_PWM_Start+0x122>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <HAL_TIM_PWM_Start+0x170>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b06      	cmp	r3, #6
 8003586:	d010      	beq.n	80035aa <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	e007      	b.n	80035aa <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40013400 	.word	0x40013400
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	40000c00 	.word	0x40000c00

080035c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0ae      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	f200 809f 	bhi.w	8003734 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003735 	.word	0x08003735
 8003604:	08003735 	.word	0x08003735
 8003608:	08003735 	.word	0x08003735
 800360c:	08003671 	.word	0x08003671
 8003610:	08003735 	.word	0x08003735
 8003614:	08003735 	.word	0x08003735
 8003618:	08003735 	.word	0x08003735
 800361c:	080036b3 	.word	0x080036b3
 8003620:	08003735 	.word	0x08003735
 8003624:	08003735 	.word	0x08003735
 8003628:	08003735 	.word	0x08003735
 800362c:	080036f3 	.word	0x080036f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f9d6 	bl	80039e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6999      	ldr	r1, [r3, #24]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	619a      	str	r2, [r3, #24]
      break;
 800366e:	e064      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fa26 	bl	8003ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
      break;
 80036b0:	e043      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fa79 	bl	8003bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0208 	orr.w	r2, r2, #8
 80036cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0204 	bic.w	r2, r2, #4
 80036dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	61da      	str	r2, [r3, #28]
      break;
 80036f0:	e023      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 facd 	bl	8003c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	61da      	str	r2, [r3, #28]
      break;
 8003732:	e002      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
      break;
 8003738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIM_ConfigClockSource+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e0b4      	b.n	80038d2 <HAL_TIM_ConfigClockSource+0x186>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a0:	d03e      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0xd4>
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	f200 8087 	bhi.w	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ae:	f000 8086 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x172>
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d87f      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b70      	cmp	r3, #112	; 0x70
 80037ba:	d01a      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0xa6>
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d87b      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b60      	cmp	r3, #96	; 0x60
 80037c2:	d050      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x11a>
 80037c4:	2b60      	cmp	r3, #96	; 0x60
 80037c6:	d877      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b50      	cmp	r3, #80	; 0x50
 80037ca:	d03c      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0xfa>
 80037cc:	2b50      	cmp	r3, #80	; 0x50
 80037ce:	d873      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d058      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x13a>
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d86f      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037d8:	2b30      	cmp	r3, #48	; 0x30
 80037da:	d064      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037dc:	2b30      	cmp	r3, #48	; 0x30
 80037de:	d86b      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d060      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d867      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d05c      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d05a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037f0:	e062      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f000 fb14 	bl	8003e2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	609a      	str	r2, [r3, #8]
      break;
 800381e:	e04f      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f000 fafd 	bl	8003e2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003842:	609a      	str	r2, [r3, #8]
      break;
 8003844:	e03c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	461a      	mov	r2, r3
 8003854:	f000 fa74 	bl	8003d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2150      	movs	r1, #80	; 0x50
 800385e:	4618      	mov	r0, r3
 8003860:	f000 facb 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 8003864:	e02c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	461a      	mov	r2, r3
 8003874:	f000 fa92 	bl	8003d9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2160      	movs	r1, #96	; 0x60
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fabb 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 8003884:	e01c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	461a      	mov	r2, r3
 8003894:	f000 fa54 	bl	8003d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2140      	movs	r1, #64	; 0x40
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 faab 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 80038a4:	e00c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 faa2 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 80038b6:	e003      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e000      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a39      	ldr	r2, [pc, #228]	; (80039d4 <TIM_Base_SetConfig+0xf8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a38      	ldr	r2, [pc, #224]	; (80039d8 <TIM_Base_SetConfig+0xfc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00f      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a35      	ldr	r2, [pc, #212]	; (80039dc <TIM_Base_SetConfig+0x100>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a34      	ldr	r2, [pc, #208]	; (80039e0 <TIM_Base_SetConfig+0x104>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a33      	ldr	r2, [pc, #204]	; (80039e4 <TIM_Base_SetConfig+0x108>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <TIM_Base_SetConfig+0xf8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <TIM_Base_SetConfig+0x82>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <TIM_Base_SetConfig+0xfc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00f      	beq.n	800395e <TIM_Base_SetConfig+0x82>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d00b      	beq.n	800395e <TIM_Base_SetConfig+0x82>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <TIM_Base_SetConfig+0x100>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_Base_SetConfig+0x82>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <TIM_Base_SetConfig+0x104>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_Base_SetConfig+0x82>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <TIM_Base_SetConfig+0x108>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d108      	bne.n	8003970 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <TIM_Base_SetConfig+0xf8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <TIM_Base_SetConfig+0xc8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <TIM_Base_SetConfig+0xfc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d103      	bne.n	80039ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f023 0201 	bic.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	611a      	str	r2, [r3, #16]
  }
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40013400 	.word	0x40013400
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00

080039e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f023 0201 	bic.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0303 	bic.w	r3, r3, #3
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 0302 	bic.w	r3, r3, #2
 8003a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a20      	ldr	r2, [pc, #128]	; (8003ac0 <TIM_OC1_SetConfig+0xd8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC1_SetConfig+0x64>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <TIM_OC1_SetConfig+0xdc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <TIM_OC1_SetConfig+0xd8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_OC1_SetConfig+0x8e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <TIM_OC1_SetConfig+0xdc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d111      	bne.n	8003a9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400

08003ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 0210 	bic.w	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0320 	bic.w	r3, r3, #32
 8003b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <TIM_OC2_SetConfig+0xe0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC2_SetConfig+0x68>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a20      	ldr	r2, [pc, #128]	; (8003bac <TIM_OC2_SetConfig+0xe4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10d      	bne.n	8003b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <TIM_OC2_SetConfig+0xe0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_OC2_SetConfig+0x94>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <TIM_OC2_SetConfig+0xe4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d113      	bne.n	8003b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	621a      	str	r2, [r3, #32]
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40013400 	.word	0x40013400

08003bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <TIM_OC3_SetConfig+0xe0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_OC3_SetConfig+0x66>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <TIM_OC3_SetConfig+0xe4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10d      	bne.n	8003c32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <TIM_OC3_SetConfig+0xe0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_OC3_SetConfig+0x92>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <TIM_OC3_SetConfig+0xe4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d113      	bne.n	8003c6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	621a      	str	r2, [r3, #32]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	40013400 	.word	0x40013400

08003c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	031b      	lsls	r3, r3, #12
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <TIM_OC4_SetConfig+0xa0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_OC4_SetConfig+0x68>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a10      	ldr	r2, [pc, #64]	; (8003d3c <TIM_OC4_SetConfig+0xa4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d109      	bne.n	8003d14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	019b      	lsls	r3, r3, #6
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40013400 	.word	0x40013400

08003d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0201 	bic.w	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 030a 	bic.w	r3, r3, #10
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	031b      	lsls	r3, r3, #12
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f043 0307 	orr.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	609a      	str	r2, [r3, #8]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b087      	sub	sp, #28
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	021a      	lsls	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	609a      	str	r2, [r3, #8]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2201      	movs	r2, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e050      	b.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00e      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10c      	bne.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00

08003f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e042      	b.n	8004024 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fe04 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	; 0x24
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f82b 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004066:	f023 030c 	bic.w	r3, r3, #12
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	430b      	orrs	r3, r1
 8004072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2c      	ldr	r2, [pc, #176]	; (8004140 <UART_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7ff f860 	bl	8003158 <HAL_RCC_GetPCLK2Freq>
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	e002      	b.n	80040a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7ff f848 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <UART_SetConfig+0x118>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a15      	ldr	r2, [pc, #84]	; (8004144 <UART_SetConfig+0x118>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	4419      	add	r1, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	440a      	add	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013800 	.word	0x40013800
 8004144:	51eb851f 	.word	0x51eb851f

08004148 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	f023 0101 	bic.w	r1, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d102      	bne.n	8004178 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	e001      	b.n	800417c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004188:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800418e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004194:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800419a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80041a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80041a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80041ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80041b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80041b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <FSMC_NORSRAM_Init+0xd0>)
 80041d8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80041e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	ea02 0103 	and.w	r1, r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4319      	orrs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	0008fb7f 	.word	0x0008fb7f

0800421c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8004232:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 800423a:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8004242:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	3b01      	subs	r3, #1
 800424a:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 800424c:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	3b02      	subs	r3, #2
 8004254:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8004256:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8004262:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
	...

08004278 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428c:	d11d      	bne.n	80042ca <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004298:	4013      	ands	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	6811      	ldr	r1, [r2, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	6852      	ldr	r2, [r2, #4]
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	4311      	orrs	r1, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	6892      	ldr	r2, [r2, #8]
 80042aa:	0212      	lsls	r2, r2, #8
 80042ac:	4311      	orrs	r1, r2
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	6992      	ldr	r2, [r2, #24]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	68d2      	ldr	r2, [r2, #12]
 80042b8:	0412      	lsls	r2, r2, #16
 80042ba:	430a      	orrs	r2, r1
 80042bc:	ea43 0102 	orr.w	r1, r3, r2
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80042c8:	e005      	b.n	80042d6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80042d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	cff00000 	.word	0xcff00000

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000000c 	.word	0x2000000c

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	2600      	movs	r6, #0
 80042f8:	4d0c      	ldr	r5, [pc, #48]	; (800432c <__libc_init_array+0x38>)
 80042fa:	4c0d      	ldr	r4, [pc, #52]	; (8004330 <__libc_init_array+0x3c>)
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	f002 fd30 	bl	8006d68 <_init>
 8004308:	2600      	movs	r6, #0
 800430a:	4d0a      	ldr	r5, [pc, #40]	; (8004334 <__libc_init_array+0x40>)
 800430c:	4c0a      	ldr	r4, [pc, #40]	; (8004338 <__libc_init_array+0x44>)
 800430e:	1b64      	subs	r4, r4, r5
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	080077a4 	.word	0x080077a4
 8004330:	080077a4 	.word	0x080077a4
 8004334:	080077a4 	.word	0x080077a4
 8004338:	080077ac 	.word	0x080077ac

0800433c <memset>:
 800433c:	4603      	mov	r3, r0
 800433e:	4402      	add	r2, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <memset+0xa>
 8004344:	4770      	bx	lr
 8004346:	f803 1b01 	strb.w	r1, [r3], #1
 800434a:	e7f9      	b.n	8004340 <memset+0x4>

0800434c <__cvt>:
 800434c:	2b00      	cmp	r3, #0
 800434e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004352:	461f      	mov	r7, r3
 8004354:	bfbb      	ittet	lt
 8004356:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800435a:	461f      	movlt	r7, r3
 800435c:	2300      	movge	r3, #0
 800435e:	232d      	movlt	r3, #45	; 0x2d
 8004360:	b088      	sub	sp, #32
 8004362:	4614      	mov	r4, r2
 8004364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004366:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004368:	7013      	strb	r3, [r2, #0]
 800436a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800436c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004370:	f023 0820 	bic.w	r8, r3, #32
 8004374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004378:	d005      	beq.n	8004386 <__cvt+0x3a>
 800437a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800437e:	d100      	bne.n	8004382 <__cvt+0x36>
 8004380:	3501      	adds	r5, #1
 8004382:	2302      	movs	r3, #2
 8004384:	e000      	b.n	8004388 <__cvt+0x3c>
 8004386:	2303      	movs	r3, #3
 8004388:	aa07      	add	r2, sp, #28
 800438a:	9204      	str	r2, [sp, #16]
 800438c:	aa06      	add	r2, sp, #24
 800438e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004392:	e9cd 3500 	strd	r3, r5, [sp]
 8004396:	4622      	mov	r2, r4
 8004398:	463b      	mov	r3, r7
 800439a:	f000 fcc5 	bl	8004d28 <_dtoa_r>
 800439e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043a2:	4606      	mov	r6, r0
 80043a4:	d102      	bne.n	80043ac <__cvt+0x60>
 80043a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043a8:	07db      	lsls	r3, r3, #31
 80043aa:	d522      	bpl.n	80043f2 <__cvt+0xa6>
 80043ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043b0:	eb06 0905 	add.w	r9, r6, r5
 80043b4:	d110      	bne.n	80043d8 <__cvt+0x8c>
 80043b6:	7833      	ldrb	r3, [r6, #0]
 80043b8:	2b30      	cmp	r3, #48	; 0x30
 80043ba:	d10a      	bne.n	80043d2 <__cvt+0x86>
 80043bc:	2200      	movs	r2, #0
 80043be:	2300      	movs	r3, #0
 80043c0:	4620      	mov	r0, r4
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fc fb5c 	bl	8000a80 <__aeabi_dcmpeq>
 80043c8:	b918      	cbnz	r0, 80043d2 <__cvt+0x86>
 80043ca:	f1c5 0501 	rsb	r5, r5, #1
 80043ce:	f8ca 5000 	str.w	r5, [sl]
 80043d2:	f8da 3000 	ldr.w	r3, [sl]
 80043d6:	4499      	add	r9, r3
 80043d8:	2200      	movs	r2, #0
 80043da:	2300      	movs	r3, #0
 80043dc:	4620      	mov	r0, r4
 80043de:	4639      	mov	r1, r7
 80043e0:	f7fc fb4e 	bl	8000a80 <__aeabi_dcmpeq>
 80043e4:	b108      	cbz	r0, 80043ea <__cvt+0x9e>
 80043e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80043ea:	2230      	movs	r2, #48	; 0x30
 80043ec:	9b07      	ldr	r3, [sp, #28]
 80043ee:	454b      	cmp	r3, r9
 80043f0:	d307      	bcc.n	8004402 <__cvt+0xb6>
 80043f2:	4630      	mov	r0, r6
 80043f4:	9b07      	ldr	r3, [sp, #28]
 80043f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043f8:	1b9b      	subs	r3, r3, r6
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	b008      	add	sp, #32
 80043fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004402:	1c59      	adds	r1, r3, #1
 8004404:	9107      	str	r1, [sp, #28]
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e7f0      	b.n	80043ec <__cvt+0xa0>

0800440a <__exponent>:
 800440a:	4603      	mov	r3, r0
 800440c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800440e:	2900      	cmp	r1, #0
 8004410:	f803 2b02 	strb.w	r2, [r3], #2
 8004414:	bfb6      	itet	lt
 8004416:	222d      	movlt	r2, #45	; 0x2d
 8004418:	222b      	movge	r2, #43	; 0x2b
 800441a:	4249      	neglt	r1, r1
 800441c:	2909      	cmp	r1, #9
 800441e:	7042      	strb	r2, [r0, #1]
 8004420:	dd2b      	ble.n	800447a <__exponent+0x70>
 8004422:	f10d 0407 	add.w	r4, sp, #7
 8004426:	46a4      	mov	ip, r4
 8004428:	270a      	movs	r7, #10
 800442a:	fb91 f6f7 	sdiv	r6, r1, r7
 800442e:	460a      	mov	r2, r1
 8004430:	46a6      	mov	lr, r4
 8004432:	fb07 1516 	mls	r5, r7, r6, r1
 8004436:	2a63      	cmp	r2, #99	; 0x63
 8004438:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800443c:	4631      	mov	r1, r6
 800443e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004442:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004446:	dcf0      	bgt.n	800442a <__exponent+0x20>
 8004448:	3130      	adds	r1, #48	; 0x30
 800444a:	f1ae 0502 	sub.w	r5, lr, #2
 800444e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004452:	4629      	mov	r1, r5
 8004454:	1c44      	adds	r4, r0, #1
 8004456:	4561      	cmp	r1, ip
 8004458:	d30a      	bcc.n	8004470 <__exponent+0x66>
 800445a:	f10d 0209 	add.w	r2, sp, #9
 800445e:	eba2 020e 	sub.w	r2, r2, lr
 8004462:	4565      	cmp	r5, ip
 8004464:	bf88      	it	hi
 8004466:	2200      	movhi	r2, #0
 8004468:	4413      	add	r3, r2
 800446a:	1a18      	subs	r0, r3, r0
 800446c:	b003      	add	sp, #12
 800446e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004470:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004474:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004478:	e7ed      	b.n	8004456 <__exponent+0x4c>
 800447a:	2330      	movs	r3, #48	; 0x30
 800447c:	3130      	adds	r1, #48	; 0x30
 800447e:	7083      	strb	r3, [r0, #2]
 8004480:	70c1      	strb	r1, [r0, #3]
 8004482:	1d03      	adds	r3, r0, #4
 8004484:	e7f1      	b.n	800446a <__exponent+0x60>
	...

08004488 <_printf_float>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	b091      	sub	sp, #68	; 0x44
 800448e:	460c      	mov	r4, r1
 8004490:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004494:	4616      	mov	r6, r2
 8004496:	461f      	mov	r7, r3
 8004498:	4605      	mov	r5, r0
 800449a:	f001 fa33 	bl	8005904 <_localeconv_r>
 800449e:	6803      	ldr	r3, [r0, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	9309      	str	r3, [sp, #36]	; 0x24
 80044a4:	f7fb fec0 	bl	8000228 <strlen>
 80044a8:	2300      	movs	r3, #0
 80044aa:	930e      	str	r3, [sp, #56]	; 0x38
 80044ac:	f8d8 3000 	ldr.w	r3, [r8]
 80044b0:	900a      	str	r0, [sp, #40]	; 0x28
 80044b2:	3307      	adds	r3, #7
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	f103 0208 	add.w	r2, r3, #8
 80044bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044c0:	f8d4 b000 	ldr.w	fp, [r4]
 80044c4:	f8c8 2000 	str.w	r2, [r8]
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80044da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044de:	4640      	mov	r0, r8
 80044e0:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <_printf_float+0x2cc>)
 80044e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044e4:	f7fc fafe 	bl	8000ae4 <__aeabi_dcmpun>
 80044e8:	bb70      	cbnz	r0, 8004548 <_printf_float+0xc0>
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ee:	4640      	mov	r0, r8
 80044f0:	4b98      	ldr	r3, [pc, #608]	; (8004754 <_printf_float+0x2cc>)
 80044f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044f4:	f7fc fad8 	bl	8000aa8 <__aeabi_dcmple>
 80044f8:	bb30      	cbnz	r0, 8004548 <_printf_float+0xc0>
 80044fa:	2200      	movs	r2, #0
 80044fc:	2300      	movs	r3, #0
 80044fe:	4640      	mov	r0, r8
 8004500:	4651      	mov	r1, sl
 8004502:	f7fc fac7 	bl	8000a94 <__aeabi_dcmplt>
 8004506:	b110      	cbz	r0, 800450e <_printf_float+0x86>
 8004508:	232d      	movs	r3, #45	; 0x2d
 800450a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450e:	4b92      	ldr	r3, [pc, #584]	; (8004758 <_printf_float+0x2d0>)
 8004510:	4892      	ldr	r0, [pc, #584]	; (800475c <_printf_float+0x2d4>)
 8004512:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004516:	bf94      	ite	ls
 8004518:	4698      	movls	r8, r3
 800451a:	4680      	movhi	r8, r0
 800451c:	2303      	movs	r3, #3
 800451e:	f04f 0a00 	mov.w	sl, #0
 8004522:	6123      	str	r3, [r4, #16]
 8004524:	f02b 0304 	bic.w	r3, fp, #4
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	4633      	mov	r3, r6
 800452c:	4621      	mov	r1, r4
 800452e:	4628      	mov	r0, r5
 8004530:	9700      	str	r7, [sp, #0]
 8004532:	aa0f      	add	r2, sp, #60	; 0x3c
 8004534:	f000 f9d4 	bl	80048e0 <_printf_common>
 8004538:	3001      	adds	r0, #1
 800453a:	f040 8090 	bne.w	800465e <_printf_float+0x1d6>
 800453e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004542:	b011      	add	sp, #68	; 0x44
 8004544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004548:	4642      	mov	r2, r8
 800454a:	4653      	mov	r3, sl
 800454c:	4640      	mov	r0, r8
 800454e:	4651      	mov	r1, sl
 8004550:	f7fc fac8 	bl	8000ae4 <__aeabi_dcmpun>
 8004554:	b148      	cbz	r0, 800456a <_printf_float+0xe2>
 8004556:	f1ba 0f00 	cmp.w	sl, #0
 800455a:	bfb8      	it	lt
 800455c:	232d      	movlt	r3, #45	; 0x2d
 800455e:	4880      	ldr	r0, [pc, #512]	; (8004760 <_printf_float+0x2d8>)
 8004560:	bfb8      	it	lt
 8004562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004566:	4b7f      	ldr	r3, [pc, #508]	; (8004764 <_printf_float+0x2dc>)
 8004568:	e7d3      	b.n	8004512 <_printf_float+0x8a>
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	d142      	bne.n	80045fa <_printf_float+0x172>
 8004574:	2306      	movs	r3, #6
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	9206      	str	r2, [sp, #24]
 800457c:	aa0e      	add	r2, sp, #56	; 0x38
 800457e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004582:	aa0d      	add	r2, sp, #52	; 0x34
 8004584:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004588:	9203      	str	r2, [sp, #12]
 800458a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800458e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	4642      	mov	r2, r8
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	4628      	mov	r0, r5
 800459c:	4653      	mov	r3, sl
 800459e:	910b      	str	r1, [sp, #44]	; 0x2c
 80045a0:	f7ff fed4 	bl	800434c <__cvt>
 80045a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a6:	4680      	mov	r8, r0
 80045a8:	2947      	cmp	r1, #71	; 0x47
 80045aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045ac:	d108      	bne.n	80045c0 <_printf_float+0x138>
 80045ae:	1cc8      	adds	r0, r1, #3
 80045b0:	db02      	blt.n	80045b8 <_printf_float+0x130>
 80045b2:	6863      	ldr	r3, [r4, #4]
 80045b4:	4299      	cmp	r1, r3
 80045b6:	dd40      	ble.n	800463a <_printf_float+0x1b2>
 80045b8:	f1a9 0902 	sub.w	r9, r9, #2
 80045bc:	fa5f f989 	uxtb.w	r9, r9
 80045c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045c4:	d81f      	bhi.n	8004606 <_printf_float+0x17e>
 80045c6:	464a      	mov	r2, r9
 80045c8:	3901      	subs	r1, #1
 80045ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045ce:	910d      	str	r1, [sp, #52]	; 0x34
 80045d0:	f7ff ff1b 	bl	800440a <__exponent>
 80045d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045d6:	4682      	mov	sl, r0
 80045d8:	1813      	adds	r3, r2, r0
 80045da:	2a01      	cmp	r2, #1
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	dc02      	bgt.n	80045e6 <_printf_float+0x15e>
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	07d2      	lsls	r2, r2, #31
 80045e4:	d501      	bpl.n	80045ea <_printf_float+0x162>
 80045e6:	3301      	adds	r3, #1
 80045e8:	6123      	str	r3, [r4, #16]
 80045ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d09b      	beq.n	800452a <_printf_float+0xa2>
 80045f2:	232d      	movs	r3, #45	; 0x2d
 80045f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f8:	e797      	b.n	800452a <_printf_float+0xa2>
 80045fa:	2947      	cmp	r1, #71	; 0x47
 80045fc:	d1bc      	bne.n	8004578 <_printf_float+0xf0>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ba      	bne.n	8004578 <_printf_float+0xf0>
 8004602:	2301      	movs	r3, #1
 8004604:	e7b7      	b.n	8004576 <_printf_float+0xee>
 8004606:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800460a:	d118      	bne.n	800463e <_printf_float+0x1b6>
 800460c:	2900      	cmp	r1, #0
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	dd0b      	ble.n	800462a <_printf_float+0x1a2>
 8004612:	6121      	str	r1, [r4, #16]
 8004614:	b913      	cbnz	r3, 800461c <_printf_float+0x194>
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	07d0      	lsls	r0, r2, #31
 800461a:	d502      	bpl.n	8004622 <_printf_float+0x19a>
 800461c:	3301      	adds	r3, #1
 800461e:	440b      	add	r3, r1
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	f04f 0a00 	mov.w	sl, #0
 8004626:	65a1      	str	r1, [r4, #88]	; 0x58
 8004628:	e7df      	b.n	80045ea <_printf_float+0x162>
 800462a:	b913      	cbnz	r3, 8004632 <_printf_float+0x1aa>
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	07d2      	lsls	r2, r2, #31
 8004630:	d501      	bpl.n	8004636 <_printf_float+0x1ae>
 8004632:	3302      	adds	r3, #2
 8004634:	e7f4      	b.n	8004620 <_printf_float+0x198>
 8004636:	2301      	movs	r3, #1
 8004638:	e7f2      	b.n	8004620 <_printf_float+0x198>
 800463a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800463e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004640:	4299      	cmp	r1, r3
 8004642:	db05      	blt.n	8004650 <_printf_float+0x1c8>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	6121      	str	r1, [r4, #16]
 8004648:	07d8      	lsls	r0, r3, #31
 800464a:	d5ea      	bpl.n	8004622 <_printf_float+0x19a>
 800464c:	1c4b      	adds	r3, r1, #1
 800464e:	e7e7      	b.n	8004620 <_printf_float+0x198>
 8004650:	2900      	cmp	r1, #0
 8004652:	bfcc      	ite	gt
 8004654:	2201      	movgt	r2, #1
 8004656:	f1c1 0202 	rsble	r2, r1, #2
 800465a:	4413      	add	r3, r2
 800465c:	e7e0      	b.n	8004620 <_printf_float+0x198>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	055a      	lsls	r2, r3, #21
 8004662:	d407      	bmi.n	8004674 <_printf_float+0x1ec>
 8004664:	6923      	ldr	r3, [r4, #16]
 8004666:	4642      	mov	r2, r8
 8004668:	4631      	mov	r1, r6
 800466a:	4628      	mov	r0, r5
 800466c:	47b8      	blx	r7
 800466e:	3001      	adds	r0, #1
 8004670:	d12b      	bne.n	80046ca <_printf_float+0x242>
 8004672:	e764      	b.n	800453e <_printf_float+0xb6>
 8004674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004678:	f240 80dd 	bls.w	8004836 <_printf_float+0x3ae>
 800467c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004680:	2200      	movs	r2, #0
 8004682:	2300      	movs	r3, #0
 8004684:	f7fc f9fc 	bl	8000a80 <__aeabi_dcmpeq>
 8004688:	2800      	cmp	r0, #0
 800468a:	d033      	beq.n	80046f4 <_printf_float+0x26c>
 800468c:	2301      	movs	r3, #1
 800468e:	4631      	mov	r1, r6
 8004690:	4628      	mov	r0, r5
 8004692:	4a35      	ldr	r2, [pc, #212]	; (8004768 <_printf_float+0x2e0>)
 8004694:	47b8      	blx	r7
 8004696:	3001      	adds	r0, #1
 8004698:	f43f af51 	beq.w	800453e <_printf_float+0xb6>
 800469c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046a0:	429a      	cmp	r2, r3
 80046a2:	db02      	blt.n	80046aa <_printf_float+0x222>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	07d8      	lsls	r0, r3, #31
 80046a8:	d50f      	bpl.n	80046ca <_printf_float+0x242>
 80046aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f af42 	beq.w	800453e <_printf_float+0xb6>
 80046ba:	f04f 0800 	mov.w	r8, #0
 80046be:	f104 091a 	add.w	r9, r4, #26
 80046c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c4:	3b01      	subs	r3, #1
 80046c6:	4543      	cmp	r3, r8
 80046c8:	dc09      	bgt.n	80046de <_printf_float+0x256>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	079b      	lsls	r3, r3, #30
 80046ce:	f100 8102 	bmi.w	80048d6 <_printf_float+0x44e>
 80046d2:	68e0      	ldr	r0, [r4, #12]
 80046d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d6:	4298      	cmp	r0, r3
 80046d8:	bfb8      	it	lt
 80046da:	4618      	movlt	r0, r3
 80046dc:	e731      	b.n	8004542 <_printf_float+0xba>
 80046de:	2301      	movs	r3, #1
 80046e0:	464a      	mov	r2, r9
 80046e2:	4631      	mov	r1, r6
 80046e4:	4628      	mov	r0, r5
 80046e6:	47b8      	blx	r7
 80046e8:	3001      	adds	r0, #1
 80046ea:	f43f af28 	beq.w	800453e <_printf_float+0xb6>
 80046ee:	f108 0801 	add.w	r8, r8, #1
 80046f2:	e7e6      	b.n	80046c2 <_printf_float+0x23a>
 80046f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dc38      	bgt.n	800476c <_printf_float+0x2e4>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <_printf_float+0x2e0>)
 8004702:	47b8      	blx	r7
 8004704:	3001      	adds	r0, #1
 8004706:	f43f af1a 	beq.w	800453e <_printf_float+0xb6>
 800470a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800470e:	4313      	orrs	r3, r2
 8004710:	d102      	bne.n	8004718 <_printf_float+0x290>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	07d9      	lsls	r1, r3, #31
 8004716:	d5d8      	bpl.n	80046ca <_printf_float+0x242>
 8004718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f af0b 	beq.w	800453e <_printf_float+0xb6>
 8004728:	f04f 0900 	mov.w	r9, #0
 800472c:	f104 0a1a 	add.w	sl, r4, #26
 8004730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004732:	425b      	negs	r3, r3
 8004734:	454b      	cmp	r3, r9
 8004736:	dc01      	bgt.n	800473c <_printf_float+0x2b4>
 8004738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800473a:	e794      	b.n	8004666 <_printf_float+0x1de>
 800473c:	2301      	movs	r3, #1
 800473e:	4652      	mov	r2, sl
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f aef9 	beq.w	800453e <_printf_float+0xb6>
 800474c:	f109 0901 	add.w	r9, r9, #1
 8004750:	e7ee      	b.n	8004730 <_printf_float+0x2a8>
 8004752:	bf00      	nop
 8004754:	7fefffff 	.word	0x7fefffff
 8004758:	080073cc 	.word	0x080073cc
 800475c:	080073d0 	.word	0x080073d0
 8004760:	080073d8 	.word	0x080073d8
 8004764:	080073d4 	.word	0x080073d4
 8004768:	080073dc 	.word	0x080073dc
 800476c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800476e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004770:	429a      	cmp	r2, r3
 8004772:	bfa8      	it	ge
 8004774:	461a      	movge	r2, r3
 8004776:	2a00      	cmp	r2, #0
 8004778:	4691      	mov	r9, r2
 800477a:	dc37      	bgt.n	80047ec <_printf_float+0x364>
 800477c:	f04f 0b00 	mov.w	fp, #0
 8004780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004784:	f104 021a 	add.w	r2, r4, #26
 8004788:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800478c:	ebaa 0309 	sub.w	r3, sl, r9
 8004790:	455b      	cmp	r3, fp
 8004792:	dc33      	bgt.n	80047fc <_printf_float+0x374>
 8004794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004798:	429a      	cmp	r2, r3
 800479a:	db3b      	blt.n	8004814 <_printf_float+0x38c>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	07da      	lsls	r2, r3, #31
 80047a0:	d438      	bmi.n	8004814 <_printf_float+0x38c>
 80047a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047a6:	eba3 020a 	sub.w	r2, r3, sl
 80047aa:	eba3 0901 	sub.w	r9, r3, r1
 80047ae:	4591      	cmp	r9, r2
 80047b0:	bfa8      	it	ge
 80047b2:	4691      	movge	r9, r2
 80047b4:	f1b9 0f00 	cmp.w	r9, #0
 80047b8:	dc34      	bgt.n	8004824 <_printf_float+0x39c>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047c2:	f104 0a1a 	add.w	sl, r4, #26
 80047c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	eba3 0309 	sub.w	r3, r3, r9
 80047d0:	4543      	cmp	r3, r8
 80047d2:	f77f af7a 	ble.w	80046ca <_printf_float+0x242>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4652      	mov	r2, sl
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f aeac 	beq.w	800453e <_printf_float+0xb6>
 80047e6:	f108 0801 	add.w	r8, r8, #1
 80047ea:	e7ec      	b.n	80047c6 <_printf_float+0x33e>
 80047ec:	4613      	mov	r3, r2
 80047ee:	4631      	mov	r1, r6
 80047f0:	4642      	mov	r2, r8
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	d1c0      	bne.n	800477c <_printf_float+0x2f4>
 80047fa:	e6a0      	b.n	800453e <_printf_float+0xb6>
 80047fc:	2301      	movs	r3, #1
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	920b      	str	r2, [sp, #44]	; 0x2c
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f ae99 	beq.w	800453e <_printf_float+0xb6>
 800480c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800480e:	f10b 0b01 	add.w	fp, fp, #1
 8004812:	e7b9      	b.n	8004788 <_printf_float+0x300>
 8004814:	4631      	mov	r1, r6
 8004816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	d1bf      	bne.n	80047a2 <_printf_float+0x31a>
 8004822:	e68c      	b.n	800453e <_printf_float+0xb6>
 8004824:	464b      	mov	r3, r9
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	eb08 020a 	add.w	r2, r8, sl
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	d1c2      	bne.n	80047ba <_printf_float+0x332>
 8004834:	e683      	b.n	800453e <_printf_float+0xb6>
 8004836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004838:	2a01      	cmp	r2, #1
 800483a:	dc01      	bgt.n	8004840 <_printf_float+0x3b8>
 800483c:	07db      	lsls	r3, r3, #31
 800483e:	d537      	bpl.n	80048b0 <_printf_float+0x428>
 8004840:	2301      	movs	r3, #1
 8004842:	4642      	mov	r2, r8
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f ae77 	beq.w	800453e <_printf_float+0xb6>
 8004850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004854:	4631      	mov	r1, r6
 8004856:	4628      	mov	r0, r5
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	f43f ae6f 	beq.w	800453e <_printf_float+0xb6>
 8004860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004864:	2200      	movs	r2, #0
 8004866:	2300      	movs	r3, #0
 8004868:	f7fc f90a 	bl	8000a80 <__aeabi_dcmpeq>
 800486c:	b9d8      	cbnz	r0, 80048a6 <_printf_float+0x41e>
 800486e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004870:	f108 0201 	add.w	r2, r8, #1
 8004874:	3b01      	subs	r3, #1
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	47b8      	blx	r7
 800487c:	3001      	adds	r0, #1
 800487e:	d10e      	bne.n	800489e <_printf_float+0x416>
 8004880:	e65d      	b.n	800453e <_printf_float+0xb6>
 8004882:	2301      	movs	r3, #1
 8004884:	464a      	mov	r2, r9
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f ae56 	beq.w	800453e <_printf_float+0xb6>
 8004892:	f108 0801 	add.w	r8, r8, #1
 8004896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004898:	3b01      	subs	r3, #1
 800489a:	4543      	cmp	r3, r8
 800489c:	dcf1      	bgt.n	8004882 <_printf_float+0x3fa>
 800489e:	4653      	mov	r3, sl
 80048a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048a4:	e6e0      	b.n	8004668 <_printf_float+0x1e0>
 80048a6:	f04f 0800 	mov.w	r8, #0
 80048aa:	f104 091a 	add.w	r9, r4, #26
 80048ae:	e7f2      	b.n	8004896 <_printf_float+0x40e>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4642      	mov	r2, r8
 80048b4:	e7df      	b.n	8004876 <_printf_float+0x3ee>
 80048b6:	2301      	movs	r3, #1
 80048b8:	464a      	mov	r2, r9
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f ae3c 	beq.w	800453e <_printf_float+0xb6>
 80048c6:	f108 0801 	add.w	r8, r8, #1
 80048ca:	68e3      	ldr	r3, [r4, #12]
 80048cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048ce:	1a5b      	subs	r3, r3, r1
 80048d0:	4543      	cmp	r3, r8
 80048d2:	dcf0      	bgt.n	80048b6 <_printf_float+0x42e>
 80048d4:	e6fd      	b.n	80046d2 <_printf_float+0x24a>
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	f104 0919 	add.w	r9, r4, #25
 80048de:	e7f4      	b.n	80048ca <_printf_float+0x442>

080048e0 <_printf_common>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	4616      	mov	r6, r2
 80048e6:	4699      	mov	r9, r3
 80048e8:	688a      	ldr	r2, [r1, #8]
 80048ea:	690b      	ldr	r3, [r1, #16]
 80048ec:	4607      	mov	r7, r0
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bfb8      	it	lt
 80048f2:	4613      	movlt	r3, r2
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048fa:	460c      	mov	r4, r1
 80048fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004900:	b10a      	cbz	r2, 8004906 <_printf_common+0x26>
 8004902:	3301      	adds	r3, #1
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	0699      	lsls	r1, r3, #26
 800490a:	bf42      	ittt	mi
 800490c:	6833      	ldrmi	r3, [r6, #0]
 800490e:	3302      	addmi	r3, #2
 8004910:	6033      	strmi	r3, [r6, #0]
 8004912:	6825      	ldr	r5, [r4, #0]
 8004914:	f015 0506 	ands.w	r5, r5, #6
 8004918:	d106      	bne.n	8004928 <_printf_common+0x48>
 800491a:	f104 0a19 	add.w	sl, r4, #25
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	6832      	ldr	r2, [r6, #0]
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	42ab      	cmp	r3, r5
 8004926:	dc28      	bgt.n	800497a <_printf_common+0x9a>
 8004928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800492c:	1e13      	subs	r3, r2, #0
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	bf18      	it	ne
 8004932:	2301      	movne	r3, #1
 8004934:	0692      	lsls	r2, r2, #26
 8004936:	d42d      	bmi.n	8004994 <_printf_common+0xb4>
 8004938:	4649      	mov	r1, r9
 800493a:	4638      	mov	r0, r7
 800493c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004940:	47c0      	blx	r8
 8004942:	3001      	adds	r0, #1
 8004944:	d020      	beq.n	8004988 <_printf_common+0xa8>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	68e5      	ldr	r5, [r4, #12]
 800494a:	f003 0306 	and.w	r3, r3, #6
 800494e:	2b04      	cmp	r3, #4
 8004950:	bf18      	it	ne
 8004952:	2500      	movne	r5, #0
 8004954:	6832      	ldr	r2, [r6, #0]
 8004956:	f04f 0600 	mov.w	r6, #0
 800495a:	68a3      	ldr	r3, [r4, #8]
 800495c:	bf08      	it	eq
 800495e:	1aad      	subeq	r5, r5, r2
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	bf08      	it	eq
 8004964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004968:	4293      	cmp	r3, r2
 800496a:	bfc4      	itt	gt
 800496c:	1a9b      	subgt	r3, r3, r2
 800496e:	18ed      	addgt	r5, r5, r3
 8004970:	341a      	adds	r4, #26
 8004972:	42b5      	cmp	r5, r6
 8004974:	d11a      	bne.n	80049ac <_printf_common+0xcc>
 8004976:	2000      	movs	r0, #0
 8004978:	e008      	b.n	800498c <_printf_common+0xac>
 800497a:	2301      	movs	r3, #1
 800497c:	4652      	mov	r2, sl
 800497e:	4649      	mov	r1, r9
 8004980:	4638      	mov	r0, r7
 8004982:	47c0      	blx	r8
 8004984:	3001      	adds	r0, #1
 8004986:	d103      	bne.n	8004990 <_printf_common+0xb0>
 8004988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004990:	3501      	adds	r5, #1
 8004992:	e7c4      	b.n	800491e <_printf_common+0x3e>
 8004994:	2030      	movs	r0, #48	; 0x30
 8004996:	18e1      	adds	r1, r4, r3
 8004998:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a2:	4422      	add	r2, r4
 80049a4:	3302      	adds	r3, #2
 80049a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049aa:	e7c5      	b.n	8004938 <_printf_common+0x58>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4622      	mov	r2, r4
 80049b0:	4649      	mov	r1, r9
 80049b2:	4638      	mov	r0, r7
 80049b4:	47c0      	blx	r8
 80049b6:	3001      	adds	r0, #1
 80049b8:	d0e6      	beq.n	8004988 <_printf_common+0xa8>
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7d9      	b.n	8004972 <_printf_common+0x92>
	...

080049c0 <_printf_i>:
 80049c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	7e0f      	ldrb	r7, [r1, #24]
 80049c6:	4691      	mov	r9, r2
 80049c8:	2f78      	cmp	r7, #120	; 0x78
 80049ca:	4680      	mov	r8, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	469a      	mov	sl, r3
 80049d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049d6:	d807      	bhi.n	80049e8 <_printf_i+0x28>
 80049d8:	2f62      	cmp	r7, #98	; 0x62
 80049da:	d80a      	bhi.n	80049f2 <_printf_i+0x32>
 80049dc:	2f00      	cmp	r7, #0
 80049de:	f000 80d9 	beq.w	8004b94 <_printf_i+0x1d4>
 80049e2:	2f58      	cmp	r7, #88	; 0x58
 80049e4:	f000 80a4 	beq.w	8004b30 <_printf_i+0x170>
 80049e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f0:	e03a      	b.n	8004a68 <_printf_i+0xa8>
 80049f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049f6:	2b15      	cmp	r3, #21
 80049f8:	d8f6      	bhi.n	80049e8 <_printf_i+0x28>
 80049fa:	a101      	add	r1, pc, #4	; (adr r1, 8004a00 <_printf_i+0x40>)
 80049fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	080049e9 	.word	0x080049e9
 8004a0c:	080049e9 	.word	0x080049e9
 8004a10:	080049e9 	.word	0x080049e9
 8004a14:	080049e9 	.word	0x080049e9
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	080049e9 	.word	0x080049e9
 8004a20:	080049e9 	.word	0x080049e9
 8004a24:	080049e9 	.word	0x080049e9
 8004a28:	080049e9 	.word	0x080049e9
 8004a2c:	08004b7b 	.word	0x08004b7b
 8004a30:	08004a9d 	.word	0x08004a9d
 8004a34:	08004b5d 	.word	0x08004b5d
 8004a38:	080049e9 	.word	0x080049e9
 8004a3c:	080049e9 	.word	0x080049e9
 8004a40:	08004b9d 	.word	0x08004b9d
 8004a44:	080049e9 	.word	0x080049e9
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	080049e9 	.word	0x080049e9
 8004a50:	080049e9 	.word	0x080049e9
 8004a54:	08004b65 	.word	0x08004b65
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	1d1a      	adds	r2, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	602a      	str	r2, [r5, #0]
 8004a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0a4      	b.n	8004bb6 <_printf_i+0x1f6>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	6829      	ldr	r1, [r5, #0]
 8004a70:	0606      	lsls	r6, r0, #24
 8004a72:	f101 0304 	add.w	r3, r1, #4
 8004a76:	d50a      	bpl.n	8004a8e <_printf_i+0xce>
 8004a78:	680e      	ldr	r6, [r1, #0]
 8004a7a:	602b      	str	r3, [r5, #0]
 8004a7c:	2e00      	cmp	r6, #0
 8004a7e:	da03      	bge.n	8004a88 <_printf_i+0xc8>
 8004a80:	232d      	movs	r3, #45	; 0x2d
 8004a82:	4276      	negs	r6, r6
 8004a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a88:	230a      	movs	r3, #10
 8004a8a:	485e      	ldr	r0, [pc, #376]	; (8004c04 <_printf_i+0x244>)
 8004a8c:	e019      	b.n	8004ac2 <_printf_i+0x102>
 8004a8e:	680e      	ldr	r6, [r1, #0]
 8004a90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a94:	602b      	str	r3, [r5, #0]
 8004a96:	bf18      	it	ne
 8004a98:	b236      	sxthne	r6, r6
 8004a9a:	e7ef      	b.n	8004a7c <_printf_i+0xbc>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	6820      	ldr	r0, [r4, #0]
 8004aa0:	1d19      	adds	r1, r3, #4
 8004aa2:	6029      	str	r1, [r5, #0]
 8004aa4:	0601      	lsls	r1, r0, #24
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0xec>
 8004aa8:	681e      	ldr	r6, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <_printf_i+0xf2>
 8004aac:	0646      	lsls	r6, r0, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0xe8>
 8004ab0:	881e      	ldrh	r6, [r3, #0]
 8004ab2:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2308      	moveq	r3, #8
 8004ab8:	230a      	movne	r3, #10
 8004aba:	4852      	ldr	r0, [pc, #328]	; (8004c04 <_printf_i+0x244>)
 8004abc:	2100      	movs	r1, #0
 8004abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ac2:	6865      	ldr	r5, [r4, #4]
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	bfa8      	it	ge
 8004ac8:	6821      	ldrge	r1, [r4, #0]
 8004aca:	60a5      	str	r5, [r4, #8]
 8004acc:	bfa4      	itt	ge
 8004ace:	f021 0104 	bicge.w	r1, r1, #4
 8004ad2:	6021      	strge	r1, [r4, #0]
 8004ad4:	b90e      	cbnz	r6, 8004ada <_printf_i+0x11a>
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	d04d      	beq.n	8004b76 <_printf_i+0x1b6>
 8004ada:	4615      	mov	r5, r2
 8004adc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ae0:	fb03 6711 	mls	r7, r3, r1, r6
 8004ae4:	5dc7      	ldrb	r7, [r0, r7]
 8004ae6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004aea:	4637      	mov	r7, r6
 8004aec:	42bb      	cmp	r3, r7
 8004aee:	460e      	mov	r6, r1
 8004af0:	d9f4      	bls.n	8004adc <_printf_i+0x11c>
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d10b      	bne.n	8004b0e <_printf_i+0x14e>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	07de      	lsls	r6, r3, #31
 8004afa:	d508      	bpl.n	8004b0e <_printf_i+0x14e>
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	6861      	ldr	r1, [r4, #4]
 8004b00:	4299      	cmp	r1, r3
 8004b02:	bfde      	ittt	le
 8004b04:	2330      	movle	r3, #48	; 0x30
 8004b06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b0e:	1b52      	subs	r2, r2, r5
 8004b10:	6122      	str	r2, [r4, #16]
 8004b12:	464b      	mov	r3, r9
 8004b14:	4621      	mov	r1, r4
 8004b16:	4640      	mov	r0, r8
 8004b18:	f8cd a000 	str.w	sl, [sp]
 8004b1c:	aa03      	add	r2, sp, #12
 8004b1e:	f7ff fedf 	bl	80048e0 <_printf_common>
 8004b22:	3001      	adds	r0, #1
 8004b24:	d14c      	bne.n	8004bc0 <_printf_i+0x200>
 8004b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b2a:	b004      	add	sp, #16
 8004b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b30:	4834      	ldr	r0, [pc, #208]	; (8004c04 <_printf_i+0x244>)
 8004b32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b36:	6829      	ldr	r1, [r5, #0]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b3e:	6029      	str	r1, [r5, #0]
 8004b40:	061d      	lsls	r5, r3, #24
 8004b42:	d514      	bpl.n	8004b6e <_printf_i+0x1ae>
 8004b44:	07df      	lsls	r7, r3, #31
 8004b46:	bf44      	itt	mi
 8004b48:	f043 0320 	orrmi.w	r3, r3, #32
 8004b4c:	6023      	strmi	r3, [r4, #0]
 8004b4e:	b91e      	cbnz	r6, 8004b58 <_printf_i+0x198>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	f023 0320 	bic.w	r3, r3, #32
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	2310      	movs	r3, #16
 8004b5a:	e7af      	b.n	8004abc <_printf_i+0xfc>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	f043 0320 	orr.w	r3, r3, #32
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	2378      	movs	r3, #120	; 0x78
 8004b66:	4828      	ldr	r0, [pc, #160]	; (8004c08 <_printf_i+0x248>)
 8004b68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b6c:	e7e3      	b.n	8004b36 <_printf_i+0x176>
 8004b6e:	0659      	lsls	r1, r3, #25
 8004b70:	bf48      	it	mi
 8004b72:	b2b6      	uxthmi	r6, r6
 8004b74:	e7e6      	b.n	8004b44 <_printf_i+0x184>
 8004b76:	4615      	mov	r5, r2
 8004b78:	e7bb      	b.n	8004af2 <_printf_i+0x132>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	6826      	ldr	r6, [r4, #0]
 8004b7e:	1d18      	adds	r0, r3, #4
 8004b80:	6961      	ldr	r1, [r4, #20]
 8004b82:	6028      	str	r0, [r5, #0]
 8004b84:	0635      	lsls	r5, r6, #24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	d501      	bpl.n	8004b8e <_printf_i+0x1ce>
 8004b8a:	6019      	str	r1, [r3, #0]
 8004b8c:	e002      	b.n	8004b94 <_printf_i+0x1d4>
 8004b8e:	0670      	lsls	r0, r6, #25
 8004b90:	d5fb      	bpl.n	8004b8a <_printf_i+0x1ca>
 8004b92:	8019      	strh	r1, [r3, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	4615      	mov	r5, r2
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	e7ba      	b.n	8004b12 <_printf_i+0x152>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	602a      	str	r2, [r5, #0]
 8004ba4:	681d      	ldr	r5, [r3, #0]
 8004ba6:	6862      	ldr	r2, [r4, #4]
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 feb7 	bl	800591c <memchr>
 8004bae:	b108      	cbz	r0, 8004bb4 <_printf_i+0x1f4>
 8004bb0:	1b40      	subs	r0, r0, r5
 8004bb2:	6060      	str	r0, [r4, #4]
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	6123      	str	r3, [r4, #16]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bbe:	e7a8      	b.n	8004b12 <_printf_i+0x152>
 8004bc0:	462a      	mov	r2, r5
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	47d0      	blx	sl
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d0ab      	beq.n	8004b26 <_printf_i+0x166>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	079b      	lsls	r3, r3, #30
 8004bd2:	d413      	bmi.n	8004bfc <_printf_i+0x23c>
 8004bd4:	68e0      	ldr	r0, [r4, #12]
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	4298      	cmp	r0, r3
 8004bda:	bfb8      	it	lt
 8004bdc:	4618      	movlt	r0, r3
 8004bde:	e7a4      	b.n	8004b2a <_printf_i+0x16a>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4632      	mov	r2, r6
 8004be4:	4649      	mov	r1, r9
 8004be6:	4640      	mov	r0, r8
 8004be8:	47d0      	blx	sl
 8004bea:	3001      	adds	r0, #1
 8004bec:	d09b      	beq.n	8004b26 <_printf_i+0x166>
 8004bee:	3501      	adds	r5, #1
 8004bf0:	68e3      	ldr	r3, [r4, #12]
 8004bf2:	9903      	ldr	r1, [sp, #12]
 8004bf4:	1a5b      	subs	r3, r3, r1
 8004bf6:	42ab      	cmp	r3, r5
 8004bf8:	dcf2      	bgt.n	8004be0 <_printf_i+0x220>
 8004bfa:	e7eb      	b.n	8004bd4 <_printf_i+0x214>
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	f104 0619 	add.w	r6, r4, #25
 8004c02:	e7f5      	b.n	8004bf0 <_printf_i+0x230>
 8004c04:	080073de 	.word	0x080073de
 8004c08:	080073ef 	.word	0x080073ef

08004c0c <quorem>:
 8004c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c10:	6903      	ldr	r3, [r0, #16]
 8004c12:	690c      	ldr	r4, [r1, #16]
 8004c14:	4607      	mov	r7, r0
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	f2c0 8082 	blt.w	8004d20 <quorem+0x114>
 8004c1c:	3c01      	subs	r4, #1
 8004c1e:	f100 0514 	add.w	r5, r0, #20
 8004c22:	f101 0814 	add.w	r8, r1, #20
 8004c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c34:	3301      	adds	r3, #1
 8004c36:	429a      	cmp	r2, r3
 8004c38:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c44:	d331      	bcc.n	8004caa <quorem+0x9e>
 8004c46:	f04f 0e00 	mov.w	lr, #0
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	46ac      	mov	ip, r5
 8004c4e:	46f2      	mov	sl, lr
 8004c50:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c54:	b293      	uxth	r3, r2
 8004c56:	fb06 e303 	mla	r3, r6, r3, lr
 8004c5a:	0c12      	lsrs	r2, r2, #16
 8004c5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	fb06 e202 	mla	r2, r6, r2, lr
 8004c66:	ebaa 0303 	sub.w	r3, sl, r3
 8004c6a:	f8dc a000 	ldr.w	sl, [ip]
 8004c6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c72:	fa1f fa8a 	uxth.w	sl, sl
 8004c76:	4453      	add	r3, sl
 8004c78:	f8dc a000 	ldr.w	sl, [ip]
 8004c7c:	b292      	uxth	r2, r2
 8004c7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c8c:	4581      	cmp	r9, r0
 8004c8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c92:	f84c 3b04 	str.w	r3, [ip], #4
 8004c96:	d2db      	bcs.n	8004c50 <quorem+0x44>
 8004c98:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c9c:	b92b      	cbnz	r3, 8004caa <quorem+0x9e>
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	429d      	cmp	r5, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	d32f      	bcc.n	8004d08 <quorem+0xfc>
 8004ca8:	613c      	str	r4, [r7, #16]
 8004caa:	4638      	mov	r0, r7
 8004cac:	f001 f8d0 	bl	8005e50 <__mcmp>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	db25      	blt.n	8004d00 <quorem+0xf4>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f04f 0c00 	mov.w	ip, #0
 8004cba:	3601      	adds	r6, #1
 8004cbc:	f858 1b04 	ldr.w	r1, [r8], #4
 8004cc0:	f8d0 e000 	ldr.w	lr, [r0]
 8004cc4:	b28b      	uxth	r3, r1
 8004cc6:	ebac 0303 	sub.w	r3, ip, r3
 8004cca:	fa1f f28e 	uxth.w	r2, lr
 8004cce:	4413      	add	r3, r2
 8004cd0:	0c0a      	lsrs	r2, r1, #16
 8004cd2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ce0:	45c1      	cmp	r9, r8
 8004ce2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ce6:	f840 3b04 	str.w	r3, [r0], #4
 8004cea:	d2e7      	bcs.n	8004cbc <quorem+0xb0>
 8004cec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cf4:	b922      	cbnz	r2, 8004d00 <quorem+0xf4>
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	429d      	cmp	r5, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	d30a      	bcc.n	8004d14 <quorem+0x108>
 8004cfe:	613c      	str	r4, [r7, #16]
 8004d00:	4630      	mov	r0, r6
 8004d02:	b003      	add	sp, #12
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	3b04      	subs	r3, #4
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	d1cb      	bne.n	8004ca8 <quorem+0x9c>
 8004d10:	3c01      	subs	r4, #1
 8004d12:	e7c6      	b.n	8004ca2 <quorem+0x96>
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	3b04      	subs	r3, #4
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	d1f0      	bne.n	8004cfe <quorem+0xf2>
 8004d1c:	3c01      	subs	r4, #1
 8004d1e:	e7eb      	b.n	8004cf8 <quorem+0xec>
 8004d20:	2000      	movs	r0, #0
 8004d22:	e7ee      	b.n	8004d02 <quorem+0xf6>
 8004d24:	0000      	movs	r0, r0
	...

08004d28 <_dtoa_r>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	461f      	mov	r7, r3
 8004d30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d32:	b099      	sub	sp, #100	; 0x64
 8004d34:	4605      	mov	r5, r0
 8004d36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d3e:	b974      	cbnz	r4, 8004d5e <_dtoa_r+0x36>
 8004d40:	2010      	movs	r0, #16
 8004d42:	f000 fde3 	bl	800590c <malloc>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6268      	str	r0, [r5, #36]	; 0x24
 8004d4a:	b920      	cbnz	r0, 8004d56 <_dtoa_r+0x2e>
 8004d4c:	21ea      	movs	r1, #234	; 0xea
 8004d4e:	4ba8      	ldr	r3, [pc, #672]	; (8004ff0 <_dtoa_r+0x2c8>)
 8004d50:	48a8      	ldr	r0, [pc, #672]	; (8004ff4 <_dtoa_r+0x2cc>)
 8004d52:	f001 fa81 	bl	8006258 <__assert_func>
 8004d56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d5a:	6004      	str	r4, [r0, #0]
 8004d5c:	60c4      	str	r4, [r0, #12]
 8004d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	b151      	cbz	r1, 8004d7a <_dtoa_r+0x52>
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	2301      	movs	r3, #1
 8004d68:	4093      	lsls	r3, r2
 8004d6a:	604a      	str	r2, [r1, #4]
 8004d6c:	608b      	str	r3, [r1, #8]
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 fe30 	bl	80059d4 <_Bfree>
 8004d74:	2200      	movs	r2, #0
 8004d76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	1e3b      	subs	r3, r7, #0
 8004d7c:	bfaf      	iteee	ge
 8004d7e:	2300      	movge	r3, #0
 8004d80:	2201      	movlt	r2, #1
 8004d82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d86:	9305      	strlt	r3, [sp, #20]
 8004d88:	bfa8      	it	ge
 8004d8a:	f8c8 3000 	strge.w	r3, [r8]
 8004d8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d92:	4b99      	ldr	r3, [pc, #612]	; (8004ff8 <_dtoa_r+0x2d0>)
 8004d94:	bfb8      	it	lt
 8004d96:	f8c8 2000 	strlt.w	r2, [r8]
 8004d9a:	ea33 0309 	bics.w	r3, r3, r9
 8004d9e:	d119      	bne.n	8004dd4 <_dtoa_r+0xac>
 8004da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004da4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004dac:	4333      	orrs	r3, r6
 8004dae:	f000 857f 	beq.w	80058b0 <_dtoa_r+0xb88>
 8004db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004db4:	b953      	cbnz	r3, 8004dcc <_dtoa_r+0xa4>
 8004db6:	4b91      	ldr	r3, [pc, #580]	; (8004ffc <_dtoa_r+0x2d4>)
 8004db8:	e022      	b.n	8004e00 <_dtoa_r+0xd8>
 8004dba:	4b91      	ldr	r3, [pc, #580]	; (8005000 <_dtoa_r+0x2d8>)
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	9803      	ldr	r0, [sp, #12]
 8004dc6:	b019      	add	sp, #100	; 0x64
 8004dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dcc:	4b8b      	ldr	r3, [pc, #556]	; (8004ffc <_dtoa_r+0x2d4>)
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	3303      	adds	r3, #3
 8004dd2:	e7f5      	b.n	8004dc0 <_dtoa_r+0x98>
 8004dd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004dd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004de0:	2200      	movs	r2, #0
 8004de2:	2300      	movs	r3, #0
 8004de4:	f7fb fe4c 	bl	8000a80 <__aeabi_dcmpeq>
 8004de8:	4680      	mov	r8, r0
 8004dea:	b158      	cbz	r0, 8004e04 <_dtoa_r+0xdc>
 8004dec:	2301      	movs	r3, #1
 8004dee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8558 	beq.w	80058aa <_dtoa_r+0xb82>
 8004dfa:	4882      	ldr	r0, [pc, #520]	; (8005004 <_dtoa_r+0x2dc>)
 8004dfc:	6018      	str	r0, [r3, #0]
 8004dfe:	1e43      	subs	r3, r0, #1
 8004e00:	9303      	str	r3, [sp, #12]
 8004e02:	e7df      	b.n	8004dc4 <_dtoa_r+0x9c>
 8004e04:	ab16      	add	r3, sp, #88	; 0x58
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	ab17      	add	r3, sp, #92	; 0x5c
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e12:	f001 f8c5 	bl	8005fa0 <__d2b>
 8004e16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e1a:	4683      	mov	fp, r0
 8004e1c:	2c00      	cmp	r4, #0
 8004e1e:	d07f      	beq.n	8004f20 <_dtoa_r+0x1f8>
 8004e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	4b72      	ldr	r3, [pc, #456]	; (8005008 <_dtoa_r+0x2e0>)
 8004e3e:	f7fb f9ff 	bl	8000240 <__aeabi_dsub>
 8004e42:	a365      	add	r3, pc, #404	; (adr r3, 8004fd8 <_dtoa_r+0x2b0>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f7fb fbb2 	bl	80005b0 <__aeabi_dmul>
 8004e4c:	a364      	add	r3, pc, #400	; (adr r3, 8004fe0 <_dtoa_r+0x2b8>)
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f7fb f9f7 	bl	8000244 <__adddf3>
 8004e56:	4606      	mov	r6, r0
 8004e58:	4620      	mov	r0, r4
 8004e5a:	460f      	mov	r7, r1
 8004e5c:	f7fb fb3e 	bl	80004dc <__aeabi_i2d>
 8004e60:	a361      	add	r3, pc, #388	; (adr r3, 8004fe8 <_dtoa_r+0x2c0>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb fba3 	bl	80005b0 <__aeabi_dmul>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4630      	mov	r0, r6
 8004e70:	4639      	mov	r1, r7
 8004e72:	f7fb f9e7 	bl	8000244 <__adddf3>
 8004e76:	4606      	mov	r6, r0
 8004e78:	460f      	mov	r7, r1
 8004e7a:	f7fb fe49 	bl	8000b10 <__aeabi_d2iz>
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4682      	mov	sl, r0
 8004e82:	2300      	movs	r3, #0
 8004e84:	4630      	mov	r0, r6
 8004e86:	4639      	mov	r1, r7
 8004e88:	f7fb fe04 	bl	8000a94 <__aeabi_dcmplt>
 8004e8c:	b148      	cbz	r0, 8004ea2 <_dtoa_r+0x17a>
 8004e8e:	4650      	mov	r0, sl
 8004e90:	f7fb fb24 	bl	80004dc <__aeabi_i2d>
 8004e94:	4632      	mov	r2, r6
 8004e96:	463b      	mov	r3, r7
 8004e98:	f7fb fdf2 	bl	8000a80 <__aeabi_dcmpeq>
 8004e9c:	b908      	cbnz	r0, 8004ea2 <_dtoa_r+0x17a>
 8004e9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ea2:	f1ba 0f16 	cmp.w	sl, #22
 8004ea6:	d858      	bhi.n	8004f5a <_dtoa_r+0x232>
 8004ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004eac:	4b57      	ldr	r3, [pc, #348]	; (800500c <_dtoa_r+0x2e4>)
 8004eae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb fded 	bl	8000a94 <__aeabi_dcmplt>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d04f      	beq.n	8004f5e <_dtoa_r+0x236>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ec8:	1b1c      	subs	r4, r3, r4
 8004eca:	1e63      	subs	r3, r4, #1
 8004ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ece:	bf49      	itett	mi
 8004ed0:	f1c4 0301 	rsbmi	r3, r4, #1
 8004ed4:	2300      	movpl	r3, #0
 8004ed6:	9306      	strmi	r3, [sp, #24]
 8004ed8:	2300      	movmi	r3, #0
 8004eda:	bf54      	ite	pl
 8004edc:	9306      	strpl	r3, [sp, #24]
 8004ede:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ee0:	f1ba 0f00 	cmp.w	sl, #0
 8004ee4:	db3d      	blt.n	8004f62 <_dtoa_r+0x23a>
 8004ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004eec:	4453      	add	r3, sl
 8004eee:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ef6:	2b09      	cmp	r3, #9
 8004ef8:	f200 808c 	bhi.w	8005014 <_dtoa_r+0x2ec>
 8004efc:	2b05      	cmp	r3, #5
 8004efe:	bfc4      	itt	gt
 8004f00:	3b04      	subgt	r3, #4
 8004f02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f06:	bfc8      	it	gt
 8004f08:	2400      	movgt	r4, #0
 8004f0a:	f1a3 0302 	sub.w	r3, r3, #2
 8004f0e:	bfd8      	it	le
 8004f10:	2401      	movle	r4, #1
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	f200 808a 	bhi.w	800502c <_dtoa_r+0x304>
 8004f18:	e8df f003 	tbb	[pc, r3]
 8004f1c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004f20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f24:	441c      	add	r4, r3
 8004f26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	bfc3      	ittte	gt
 8004f2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f36:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f3a:	f1c3 0320 	rsble	r3, r3, #32
 8004f3e:	bfc6      	itte	gt
 8004f40:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f44:	4318      	orrgt	r0, r3
 8004f46:	fa06 f003 	lslle.w	r0, r6, r3
 8004f4a:	f7fb fab7 	bl	80004bc <__aeabi_ui2d>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f54:	3c01      	subs	r4, #1
 8004f56:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f58:	e76f      	b.n	8004e3a <_dtoa_r+0x112>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7b2      	b.n	8004ec4 <_dtoa_r+0x19c>
 8004f5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f60:	e7b1      	b.n	8004ec6 <_dtoa_r+0x19e>
 8004f62:	9b06      	ldr	r3, [sp, #24]
 8004f64:	eba3 030a 	sub.w	r3, r3, sl
 8004f68:	9306      	str	r3, [sp, #24]
 8004f6a:	f1ca 0300 	rsb	r3, sl, #0
 8004f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f70:	2300      	movs	r3, #0
 8004f72:	930e      	str	r3, [sp, #56]	; 0x38
 8004f74:	e7be      	b.n	8004ef4 <_dtoa_r+0x1cc>
 8004f76:	2300      	movs	r3, #0
 8004f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	dc58      	bgt.n	8005032 <_dtoa_r+0x30a>
 8004f80:	f04f 0901 	mov.w	r9, #1
 8004f84:	464b      	mov	r3, r9
 8004f86:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004f8e:	2200      	movs	r2, #0
 8004f90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f92:	6042      	str	r2, [r0, #4]
 8004f94:	2204      	movs	r2, #4
 8004f96:	f102 0614 	add.w	r6, r2, #20
 8004f9a:	429e      	cmp	r6, r3
 8004f9c:	6841      	ldr	r1, [r0, #4]
 8004f9e:	d94e      	bls.n	800503e <_dtoa_r+0x316>
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fcd7 	bl	8005954 <_Balloc>
 8004fa6:	9003      	str	r0, [sp, #12]
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d14c      	bne.n	8005046 <_dtoa_r+0x31e>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <_dtoa_r+0x2e8>)
 8004fb4:	e6cc      	b.n	8004d50 <_dtoa_r+0x28>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7de      	b.n	8004f78 <_dtoa_r+0x250>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fc0:	eb0a 0903 	add.w	r9, sl, r3
 8004fc4:	f109 0301 	add.w	r3, r9, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	9308      	str	r3, [sp, #32]
 8004fcc:	bfb8      	it	lt
 8004fce:	2301      	movlt	r3, #1
 8004fd0:	e7dd      	b.n	8004f8e <_dtoa_r+0x266>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7f2      	b.n	8004fbc <_dtoa_r+0x294>
 8004fd6:	bf00      	nop
 8004fd8:	636f4361 	.word	0x636f4361
 8004fdc:	3fd287a7 	.word	0x3fd287a7
 8004fe0:	8b60c8b3 	.word	0x8b60c8b3
 8004fe4:	3fc68a28 	.word	0x3fc68a28
 8004fe8:	509f79fb 	.word	0x509f79fb
 8004fec:	3fd34413 	.word	0x3fd34413
 8004ff0:	0800740d 	.word	0x0800740d
 8004ff4:	08007424 	.word	0x08007424
 8004ff8:	7ff00000 	.word	0x7ff00000
 8004ffc:	08007409 	.word	0x08007409
 8005000:	08007400 	.word	0x08007400
 8005004:	080073dd 	.word	0x080073dd
 8005008:	3ff80000 	.word	0x3ff80000
 800500c:	08007518 	.word	0x08007518
 8005010:	0800747f 	.word	0x0800747f
 8005014:	2401      	movs	r4, #1
 8005016:	2300      	movs	r3, #0
 8005018:	940b      	str	r4, [sp, #44]	; 0x2c
 800501a:	9322      	str	r3, [sp, #136]	; 0x88
 800501c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005020:	2200      	movs	r2, #0
 8005022:	2312      	movs	r3, #18
 8005024:	f8cd 9020 	str.w	r9, [sp, #32]
 8005028:	9223      	str	r2, [sp, #140]	; 0x8c
 800502a:	e7b0      	b.n	8004f8e <_dtoa_r+0x266>
 800502c:	2301      	movs	r3, #1
 800502e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005030:	e7f4      	b.n	800501c <_dtoa_r+0x2f4>
 8005032:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005036:	464b      	mov	r3, r9
 8005038:	f8cd 9020 	str.w	r9, [sp, #32]
 800503c:	e7a7      	b.n	8004f8e <_dtoa_r+0x266>
 800503e:	3101      	adds	r1, #1
 8005040:	6041      	str	r1, [r0, #4]
 8005042:	0052      	lsls	r2, r2, #1
 8005044:	e7a7      	b.n	8004f96 <_dtoa_r+0x26e>
 8005046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005048:	9a03      	ldr	r2, [sp, #12]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	9b08      	ldr	r3, [sp, #32]
 800504e:	2b0e      	cmp	r3, #14
 8005050:	f200 80a8 	bhi.w	80051a4 <_dtoa_r+0x47c>
 8005054:	2c00      	cmp	r4, #0
 8005056:	f000 80a5 	beq.w	80051a4 <_dtoa_r+0x47c>
 800505a:	f1ba 0f00 	cmp.w	sl, #0
 800505e:	dd34      	ble.n	80050ca <_dtoa_r+0x3a2>
 8005060:	4a9a      	ldr	r2, [pc, #616]	; (80052cc <_dtoa_r+0x5a4>)
 8005062:	f00a 030f 	and.w	r3, sl, #15
 8005066:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800506a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800506e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005072:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005076:	ea4f 142a 	mov.w	r4, sl, asr #4
 800507a:	d016      	beq.n	80050aa <_dtoa_r+0x382>
 800507c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005080:	4b93      	ldr	r3, [pc, #588]	; (80052d0 <_dtoa_r+0x5a8>)
 8005082:	2703      	movs	r7, #3
 8005084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005088:	f7fb fbbc 	bl	8000804 <__aeabi_ddiv>
 800508c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005090:	f004 040f 	and.w	r4, r4, #15
 8005094:	4e8e      	ldr	r6, [pc, #568]	; (80052d0 <_dtoa_r+0x5a8>)
 8005096:	b954      	cbnz	r4, 80050ae <_dtoa_r+0x386>
 8005098:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800509c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a0:	f7fb fbb0 	bl	8000804 <__aeabi_ddiv>
 80050a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050a8:	e029      	b.n	80050fe <_dtoa_r+0x3d6>
 80050aa:	2702      	movs	r7, #2
 80050ac:	e7f2      	b.n	8005094 <_dtoa_r+0x36c>
 80050ae:	07e1      	lsls	r1, r4, #31
 80050b0:	d508      	bpl.n	80050c4 <_dtoa_r+0x39c>
 80050b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050ba:	f7fb fa79 	bl	80005b0 <__aeabi_dmul>
 80050be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050c2:	3701      	adds	r7, #1
 80050c4:	1064      	asrs	r4, r4, #1
 80050c6:	3608      	adds	r6, #8
 80050c8:	e7e5      	b.n	8005096 <_dtoa_r+0x36e>
 80050ca:	f000 80a5 	beq.w	8005218 <_dtoa_r+0x4f0>
 80050ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050d2:	f1ca 0400 	rsb	r4, sl, #0
 80050d6:	4b7d      	ldr	r3, [pc, #500]	; (80052cc <_dtoa_r+0x5a4>)
 80050d8:	f004 020f 	and.w	r2, r4, #15
 80050dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f7fb fa64 	bl	80005b0 <__aeabi_dmul>
 80050e8:	2702      	movs	r7, #2
 80050ea:	2300      	movs	r3, #0
 80050ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f0:	4e77      	ldr	r6, [pc, #476]	; (80052d0 <_dtoa_r+0x5a8>)
 80050f2:	1124      	asrs	r4, r4, #4
 80050f4:	2c00      	cmp	r4, #0
 80050f6:	f040 8084 	bne.w	8005202 <_dtoa_r+0x4da>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1d2      	bne.n	80050a4 <_dtoa_r+0x37c>
 80050fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 808b 	beq.w	800521c <_dtoa_r+0x4f4>
 8005106:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800510a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800510e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005112:	2200      	movs	r2, #0
 8005114:	4b6f      	ldr	r3, [pc, #444]	; (80052d4 <_dtoa_r+0x5ac>)
 8005116:	f7fb fcbd 	bl	8000a94 <__aeabi_dcmplt>
 800511a:	2800      	cmp	r0, #0
 800511c:	d07e      	beq.n	800521c <_dtoa_r+0x4f4>
 800511e:	9b08      	ldr	r3, [sp, #32]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d07b      	beq.n	800521c <_dtoa_r+0x4f4>
 8005124:	f1b9 0f00 	cmp.w	r9, #0
 8005128:	dd38      	ble.n	800519c <_dtoa_r+0x474>
 800512a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800512e:	2200      	movs	r2, #0
 8005130:	4b69      	ldr	r3, [pc, #420]	; (80052d8 <_dtoa_r+0x5b0>)
 8005132:	f7fb fa3d 	bl	80005b0 <__aeabi_dmul>
 8005136:	464c      	mov	r4, r9
 8005138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800513c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005140:	3701      	adds	r7, #1
 8005142:	4638      	mov	r0, r7
 8005144:	f7fb f9ca 	bl	80004dc <__aeabi_i2d>
 8005148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800514c:	f7fb fa30 	bl	80005b0 <__aeabi_dmul>
 8005150:	2200      	movs	r2, #0
 8005152:	4b62      	ldr	r3, [pc, #392]	; (80052dc <_dtoa_r+0x5b4>)
 8005154:	f7fb f876 	bl	8000244 <__adddf3>
 8005158:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800515c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005160:	9611      	str	r6, [sp, #68]	; 0x44
 8005162:	2c00      	cmp	r4, #0
 8005164:	d15d      	bne.n	8005222 <_dtoa_r+0x4fa>
 8005166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800516a:	2200      	movs	r2, #0
 800516c:	4b5c      	ldr	r3, [pc, #368]	; (80052e0 <_dtoa_r+0x5b8>)
 800516e:	f7fb f867 	bl	8000240 <__aeabi_dsub>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800517a:	4633      	mov	r3, r6
 800517c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800517e:	f7fb fca7 	bl	8000ad0 <__aeabi_dcmpgt>
 8005182:	2800      	cmp	r0, #0
 8005184:	f040 829c 	bne.w	80056c0 <_dtoa_r+0x998>
 8005188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800518c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800518e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005192:	f7fb fc7f 	bl	8000a94 <__aeabi_dcmplt>
 8005196:	2800      	cmp	r0, #0
 8005198:	f040 8290 	bne.w	80056bc <_dtoa_r+0x994>
 800519c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80051a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80051a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f2c0 8152 	blt.w	8005450 <_dtoa_r+0x728>
 80051ac:	f1ba 0f0e 	cmp.w	sl, #14
 80051b0:	f300 814e 	bgt.w	8005450 <_dtoa_r+0x728>
 80051b4:	4b45      	ldr	r3, [pc, #276]	; (80052cc <_dtoa_r+0x5a4>)
 80051b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f280 80db 	bge.w	8005380 <_dtoa_r+0x658>
 80051ca:	9b08      	ldr	r3, [sp, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f300 80d7 	bgt.w	8005380 <_dtoa_r+0x658>
 80051d2:	f040 8272 	bne.w	80056ba <_dtoa_r+0x992>
 80051d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051da:	2200      	movs	r2, #0
 80051dc:	4b40      	ldr	r3, [pc, #256]	; (80052e0 <_dtoa_r+0x5b8>)
 80051de:	f7fb f9e7 	bl	80005b0 <__aeabi_dmul>
 80051e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051e6:	f7fb fc69 	bl	8000abc <__aeabi_dcmpge>
 80051ea:	9c08      	ldr	r4, [sp, #32]
 80051ec:	4626      	mov	r6, r4
 80051ee:	2800      	cmp	r0, #0
 80051f0:	f040 8248 	bne.w	8005684 <_dtoa_r+0x95c>
 80051f4:	2331      	movs	r3, #49	; 0x31
 80051f6:	9f03      	ldr	r7, [sp, #12]
 80051f8:	f10a 0a01 	add.w	sl, sl, #1
 80051fc:	f807 3b01 	strb.w	r3, [r7], #1
 8005200:	e244      	b.n	800568c <_dtoa_r+0x964>
 8005202:	07e2      	lsls	r2, r4, #31
 8005204:	d505      	bpl.n	8005212 <_dtoa_r+0x4ea>
 8005206:	e9d6 2300 	ldrd	r2, r3, [r6]
 800520a:	f7fb f9d1 	bl	80005b0 <__aeabi_dmul>
 800520e:	2301      	movs	r3, #1
 8005210:	3701      	adds	r7, #1
 8005212:	1064      	asrs	r4, r4, #1
 8005214:	3608      	adds	r6, #8
 8005216:	e76d      	b.n	80050f4 <_dtoa_r+0x3cc>
 8005218:	2702      	movs	r7, #2
 800521a:	e770      	b.n	80050fe <_dtoa_r+0x3d6>
 800521c:	46d0      	mov	r8, sl
 800521e:	9c08      	ldr	r4, [sp, #32]
 8005220:	e78f      	b.n	8005142 <_dtoa_r+0x41a>
 8005222:	9903      	ldr	r1, [sp, #12]
 8005224:	4b29      	ldr	r3, [pc, #164]	; (80052cc <_dtoa_r+0x5a4>)
 8005226:	4421      	add	r1, r4
 8005228:	9112      	str	r1, [sp, #72]	; 0x48
 800522a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800522c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005230:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005234:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005238:	2900      	cmp	r1, #0
 800523a:	d055      	beq.n	80052e8 <_dtoa_r+0x5c0>
 800523c:	2000      	movs	r0, #0
 800523e:	4929      	ldr	r1, [pc, #164]	; (80052e4 <_dtoa_r+0x5bc>)
 8005240:	f7fb fae0 	bl	8000804 <__aeabi_ddiv>
 8005244:	463b      	mov	r3, r7
 8005246:	4632      	mov	r2, r6
 8005248:	f7fa fffa 	bl	8000240 <__aeabi_dsub>
 800524c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005250:	9f03      	ldr	r7, [sp, #12]
 8005252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005256:	f7fb fc5b 	bl	8000b10 <__aeabi_d2iz>
 800525a:	4604      	mov	r4, r0
 800525c:	f7fb f93e 	bl	80004dc <__aeabi_i2d>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005268:	f7fa ffea 	bl	8000240 <__aeabi_dsub>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	3430      	adds	r4, #48	; 0x30
 8005272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800527a:	f807 4b01 	strb.w	r4, [r7], #1
 800527e:	f7fb fc09 	bl	8000a94 <__aeabi_dcmplt>
 8005282:	2800      	cmp	r0, #0
 8005284:	d174      	bne.n	8005370 <_dtoa_r+0x648>
 8005286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800528a:	2000      	movs	r0, #0
 800528c:	4911      	ldr	r1, [pc, #68]	; (80052d4 <_dtoa_r+0x5ac>)
 800528e:	f7fa ffd7 	bl	8000240 <__aeabi_dsub>
 8005292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005296:	f7fb fbfd 	bl	8000a94 <__aeabi_dcmplt>
 800529a:	2800      	cmp	r0, #0
 800529c:	f040 80b7 	bne.w	800540e <_dtoa_r+0x6e6>
 80052a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052a2:	429f      	cmp	r7, r3
 80052a4:	f43f af7a 	beq.w	800519c <_dtoa_r+0x474>
 80052a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052ac:	2200      	movs	r2, #0
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <_dtoa_r+0x5b0>)
 80052b0:	f7fb f97e 	bl	80005b0 <__aeabi_dmul>
 80052b4:	2200      	movs	r2, #0
 80052b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <_dtoa_r+0x5b0>)
 80052c0:	f7fb f976 	bl	80005b0 <__aeabi_dmul>
 80052c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052c8:	e7c3      	b.n	8005252 <_dtoa_r+0x52a>
 80052ca:	bf00      	nop
 80052cc:	08007518 	.word	0x08007518
 80052d0:	080074f0 	.word	0x080074f0
 80052d4:	3ff00000 	.word	0x3ff00000
 80052d8:	40240000 	.word	0x40240000
 80052dc:	401c0000 	.word	0x401c0000
 80052e0:	40140000 	.word	0x40140000
 80052e4:	3fe00000 	.word	0x3fe00000
 80052e8:	4630      	mov	r0, r6
 80052ea:	4639      	mov	r1, r7
 80052ec:	f7fb f960 	bl	80005b0 <__aeabi_dmul>
 80052f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052f6:	9c03      	ldr	r4, [sp, #12]
 80052f8:	9314      	str	r3, [sp, #80]	; 0x50
 80052fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052fe:	f7fb fc07 	bl	8000b10 <__aeabi_d2iz>
 8005302:	9015      	str	r0, [sp, #84]	; 0x54
 8005304:	f7fb f8ea 	bl	80004dc <__aeabi_i2d>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005310:	f7fa ff96 	bl	8000240 <__aeabi_dsub>
 8005314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005316:	4606      	mov	r6, r0
 8005318:	3330      	adds	r3, #48	; 0x30
 800531a:	f804 3b01 	strb.w	r3, [r4], #1
 800531e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005320:	460f      	mov	r7, r1
 8005322:	429c      	cmp	r4, r3
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	d124      	bne.n	8005374 <_dtoa_r+0x64c>
 800532a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800532e:	4bb0      	ldr	r3, [pc, #704]	; (80055f0 <_dtoa_r+0x8c8>)
 8005330:	f7fa ff88 	bl	8000244 <__adddf3>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4630      	mov	r0, r6
 800533a:	4639      	mov	r1, r7
 800533c:	f7fb fbc8 	bl	8000ad0 <__aeabi_dcmpgt>
 8005340:	2800      	cmp	r0, #0
 8005342:	d163      	bne.n	800540c <_dtoa_r+0x6e4>
 8005344:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005348:	2000      	movs	r0, #0
 800534a:	49a9      	ldr	r1, [pc, #676]	; (80055f0 <_dtoa_r+0x8c8>)
 800534c:	f7fa ff78 	bl	8000240 <__aeabi_dsub>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4630      	mov	r0, r6
 8005356:	4639      	mov	r1, r7
 8005358:	f7fb fb9c 	bl	8000a94 <__aeabi_dcmplt>
 800535c:	2800      	cmp	r0, #0
 800535e:	f43f af1d 	beq.w	800519c <_dtoa_r+0x474>
 8005362:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005364:	1e7b      	subs	r3, r7, #1
 8005366:	9314      	str	r3, [sp, #80]	; 0x50
 8005368:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d0f8      	beq.n	8005362 <_dtoa_r+0x63a>
 8005370:	46c2      	mov	sl, r8
 8005372:	e03b      	b.n	80053ec <_dtoa_r+0x6c4>
 8005374:	4b9f      	ldr	r3, [pc, #636]	; (80055f4 <_dtoa_r+0x8cc>)
 8005376:	f7fb f91b 	bl	80005b0 <__aeabi_dmul>
 800537a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800537e:	e7bc      	b.n	80052fa <_dtoa_r+0x5d2>
 8005380:	9f03      	ldr	r7, [sp, #12]
 8005382:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005386:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800538a:	4640      	mov	r0, r8
 800538c:	4649      	mov	r1, r9
 800538e:	f7fb fa39 	bl	8000804 <__aeabi_ddiv>
 8005392:	f7fb fbbd 	bl	8000b10 <__aeabi_d2iz>
 8005396:	4604      	mov	r4, r0
 8005398:	f7fb f8a0 	bl	80004dc <__aeabi_i2d>
 800539c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053a0:	f7fb f906 	bl	80005b0 <__aeabi_dmul>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4640      	mov	r0, r8
 80053aa:	4649      	mov	r1, r9
 80053ac:	f7fa ff48 	bl	8000240 <__aeabi_dsub>
 80053b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80053b4:	f807 6b01 	strb.w	r6, [r7], #1
 80053b8:	9e03      	ldr	r6, [sp, #12]
 80053ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80053be:	1bbe      	subs	r6, r7, r6
 80053c0:	45b4      	cmp	ip, r6
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	d136      	bne.n	8005436 <_dtoa_r+0x70e>
 80053c8:	f7fa ff3c 	bl	8000244 <__adddf3>
 80053cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053d0:	4680      	mov	r8, r0
 80053d2:	4689      	mov	r9, r1
 80053d4:	f7fb fb7c 	bl	8000ad0 <__aeabi_dcmpgt>
 80053d8:	bb58      	cbnz	r0, 8005432 <_dtoa_r+0x70a>
 80053da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053de:	4640      	mov	r0, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fb fb4d 	bl	8000a80 <__aeabi_dcmpeq>
 80053e6:	b108      	cbz	r0, 80053ec <_dtoa_r+0x6c4>
 80053e8:	07e1      	lsls	r1, r4, #31
 80053ea:	d422      	bmi.n	8005432 <_dtoa_r+0x70a>
 80053ec:	4628      	mov	r0, r5
 80053ee:	4659      	mov	r1, fp
 80053f0:	f000 faf0 	bl	80059d4 <_Bfree>
 80053f4:	2300      	movs	r3, #0
 80053f6:	703b      	strb	r3, [r7, #0]
 80053f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053fa:	f10a 0001 	add.w	r0, sl, #1
 80053fe:	6018      	str	r0, [r3, #0]
 8005400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005402:	2b00      	cmp	r3, #0
 8005404:	f43f acde 	beq.w	8004dc4 <_dtoa_r+0x9c>
 8005408:	601f      	str	r7, [r3, #0]
 800540a:	e4db      	b.n	8004dc4 <_dtoa_r+0x9c>
 800540c:	4627      	mov	r7, r4
 800540e:	463b      	mov	r3, r7
 8005410:	461f      	mov	r7, r3
 8005412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005416:	2a39      	cmp	r2, #57	; 0x39
 8005418:	d107      	bne.n	800542a <_dtoa_r+0x702>
 800541a:	9a03      	ldr	r2, [sp, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d1f7      	bne.n	8005410 <_dtoa_r+0x6e8>
 8005420:	2230      	movs	r2, #48	; 0x30
 8005422:	9903      	ldr	r1, [sp, #12]
 8005424:	f108 0801 	add.w	r8, r8, #1
 8005428:	700a      	strb	r2, [r1, #0]
 800542a:	781a      	ldrb	r2, [r3, #0]
 800542c:	3201      	adds	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	e79e      	b.n	8005370 <_dtoa_r+0x648>
 8005432:	46d0      	mov	r8, sl
 8005434:	e7eb      	b.n	800540e <_dtoa_r+0x6e6>
 8005436:	2200      	movs	r2, #0
 8005438:	4b6e      	ldr	r3, [pc, #440]	; (80055f4 <_dtoa_r+0x8cc>)
 800543a:	f7fb f8b9 	bl	80005b0 <__aeabi_dmul>
 800543e:	2200      	movs	r2, #0
 8005440:	2300      	movs	r3, #0
 8005442:	4680      	mov	r8, r0
 8005444:	4689      	mov	r9, r1
 8005446:	f7fb fb1b 	bl	8000a80 <__aeabi_dcmpeq>
 800544a:	2800      	cmp	r0, #0
 800544c:	d09b      	beq.n	8005386 <_dtoa_r+0x65e>
 800544e:	e7cd      	b.n	80053ec <_dtoa_r+0x6c4>
 8005450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005452:	2a00      	cmp	r2, #0
 8005454:	f000 80d0 	beq.w	80055f8 <_dtoa_r+0x8d0>
 8005458:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800545a:	2a01      	cmp	r2, #1
 800545c:	f300 80ae 	bgt.w	80055bc <_dtoa_r+0x894>
 8005460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005462:	2a00      	cmp	r2, #0
 8005464:	f000 80a6 	beq.w	80055b4 <_dtoa_r+0x88c>
 8005468:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800546c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800546e:	9f06      	ldr	r7, [sp, #24]
 8005470:	9a06      	ldr	r2, [sp, #24]
 8005472:	2101      	movs	r1, #1
 8005474:	441a      	add	r2, r3
 8005476:	9206      	str	r2, [sp, #24]
 8005478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800547a:	4628      	mov	r0, r5
 800547c:	441a      	add	r2, r3
 800547e:	9209      	str	r2, [sp, #36]	; 0x24
 8005480:	f000 fb5e 	bl	8005b40 <__i2b>
 8005484:	4606      	mov	r6, r0
 8005486:	2f00      	cmp	r7, #0
 8005488:	dd0c      	ble.n	80054a4 <_dtoa_r+0x77c>
 800548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	dd09      	ble.n	80054a4 <_dtoa_r+0x77c>
 8005490:	42bb      	cmp	r3, r7
 8005492:	bfa8      	it	ge
 8005494:	463b      	movge	r3, r7
 8005496:	9a06      	ldr	r2, [sp, #24]
 8005498:	1aff      	subs	r7, r7, r3
 800549a:	1ad2      	subs	r2, r2, r3
 800549c:	9206      	str	r2, [sp, #24]
 800549e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	9309      	str	r3, [sp, #36]	; 0x24
 80054a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a6:	b1f3      	cbz	r3, 80054e6 <_dtoa_r+0x7be>
 80054a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80a8 	beq.w	8005600 <_dtoa_r+0x8d8>
 80054b0:	2c00      	cmp	r4, #0
 80054b2:	dd10      	ble.n	80054d6 <_dtoa_r+0x7ae>
 80054b4:	4631      	mov	r1, r6
 80054b6:	4622      	mov	r2, r4
 80054b8:	4628      	mov	r0, r5
 80054ba:	f000 fbff 	bl	8005cbc <__pow5mult>
 80054be:	465a      	mov	r2, fp
 80054c0:	4601      	mov	r1, r0
 80054c2:	4606      	mov	r6, r0
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 fb51 	bl	8005b6c <__multiply>
 80054ca:	4680      	mov	r8, r0
 80054cc:	4659      	mov	r1, fp
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 fa80 	bl	80059d4 <_Bfree>
 80054d4:	46c3      	mov	fp, r8
 80054d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d8:	1b1a      	subs	r2, r3, r4
 80054da:	d004      	beq.n	80054e6 <_dtoa_r+0x7be>
 80054dc:	4659      	mov	r1, fp
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 fbec 	bl	8005cbc <__pow5mult>
 80054e4:	4683      	mov	fp, r0
 80054e6:	2101      	movs	r1, #1
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 fb29 	bl	8005b40 <__i2b>
 80054ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054f0:	4604      	mov	r4, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f340 8086 	ble.w	8005604 <_dtoa_r+0x8dc>
 80054f8:	461a      	mov	r2, r3
 80054fa:	4601      	mov	r1, r0
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fbdd 	bl	8005cbc <__pow5mult>
 8005502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005504:	4604      	mov	r4, r0
 8005506:	2b01      	cmp	r3, #1
 8005508:	dd7f      	ble.n	800560a <_dtoa_r+0x8e2>
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005514:	6918      	ldr	r0, [r3, #16]
 8005516:	f000 fac5 	bl	8005aa4 <__hi0bits>
 800551a:	f1c0 0020 	rsb	r0, r0, #32
 800551e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005520:	4418      	add	r0, r3
 8005522:	f010 001f 	ands.w	r0, r0, #31
 8005526:	f000 8092 	beq.w	800564e <_dtoa_r+0x926>
 800552a:	f1c0 0320 	rsb	r3, r0, #32
 800552e:	2b04      	cmp	r3, #4
 8005530:	f340 808a 	ble.w	8005648 <_dtoa_r+0x920>
 8005534:	f1c0 001c 	rsb	r0, r0, #28
 8005538:	9b06      	ldr	r3, [sp, #24]
 800553a:	4407      	add	r7, r0
 800553c:	4403      	add	r3, r0
 800553e:	9306      	str	r3, [sp, #24]
 8005540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005542:	4403      	add	r3, r0
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	9b06      	ldr	r3, [sp, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	dd05      	ble.n	8005558 <_dtoa_r+0x830>
 800554c:	4659      	mov	r1, fp
 800554e:	461a      	mov	r2, r3
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fc0d 	bl	8005d70 <__lshift>
 8005556:	4683      	mov	fp, r0
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	dd05      	ble.n	800556a <_dtoa_r+0x842>
 800555e:	4621      	mov	r1, r4
 8005560:	461a      	mov	r2, r3
 8005562:	4628      	mov	r0, r5
 8005564:	f000 fc04 	bl	8005d70 <__lshift>
 8005568:	4604      	mov	r4, r0
 800556a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d070      	beq.n	8005652 <_dtoa_r+0x92a>
 8005570:	4621      	mov	r1, r4
 8005572:	4658      	mov	r0, fp
 8005574:	f000 fc6c 	bl	8005e50 <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	da6a      	bge.n	8005652 <_dtoa_r+0x92a>
 800557c:	2300      	movs	r3, #0
 800557e:	4659      	mov	r1, fp
 8005580:	220a      	movs	r2, #10
 8005582:	4628      	mov	r0, r5
 8005584:	f000 fa48 	bl	8005a18 <__multadd>
 8005588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800558a:	4683      	mov	fp, r0
 800558c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8194 	beq.w	80058be <_dtoa_r+0xb96>
 8005596:	4631      	mov	r1, r6
 8005598:	2300      	movs	r3, #0
 800559a:	220a      	movs	r2, #10
 800559c:	4628      	mov	r0, r5
 800559e:	f000 fa3b 	bl	8005a18 <__multadd>
 80055a2:	f1b9 0f00 	cmp.w	r9, #0
 80055a6:	4606      	mov	r6, r0
 80055a8:	f300 8093 	bgt.w	80056d2 <_dtoa_r+0x9aa>
 80055ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	dc57      	bgt.n	8005662 <_dtoa_r+0x93a>
 80055b2:	e08e      	b.n	80056d2 <_dtoa_r+0x9aa>
 80055b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055ba:	e757      	b.n	800546c <_dtoa_r+0x744>
 80055bc:	9b08      	ldr	r3, [sp, #32]
 80055be:	1e5c      	subs	r4, r3, #1
 80055c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	bfb7      	itett	lt
 80055c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055c8:	1b1c      	subge	r4, r3, r4
 80055ca:	1ae2      	sublt	r2, r4, r3
 80055cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055ce:	bfbe      	ittt	lt
 80055d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80055d2:	189b      	addlt	r3, r3, r2
 80055d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055d6:	9b08      	ldr	r3, [sp, #32]
 80055d8:	bfb8      	it	lt
 80055da:	2400      	movlt	r4, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bfbb      	ittet	lt
 80055e0:	9b06      	ldrlt	r3, [sp, #24]
 80055e2:	9a08      	ldrlt	r2, [sp, #32]
 80055e4:	9f06      	ldrge	r7, [sp, #24]
 80055e6:	1a9f      	sublt	r7, r3, r2
 80055e8:	bfac      	ite	ge
 80055ea:	9b08      	ldrge	r3, [sp, #32]
 80055ec:	2300      	movlt	r3, #0
 80055ee:	e73f      	b.n	8005470 <_dtoa_r+0x748>
 80055f0:	3fe00000 	.word	0x3fe00000
 80055f4:	40240000 	.word	0x40240000
 80055f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055fa:	9f06      	ldr	r7, [sp, #24]
 80055fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80055fe:	e742      	b.n	8005486 <_dtoa_r+0x75e>
 8005600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005602:	e76b      	b.n	80054dc <_dtoa_r+0x7b4>
 8005604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005606:	2b01      	cmp	r3, #1
 8005608:	dc19      	bgt.n	800563e <_dtoa_r+0x916>
 800560a:	9b04      	ldr	r3, [sp, #16]
 800560c:	b9bb      	cbnz	r3, 800563e <_dtoa_r+0x916>
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005614:	b99b      	cbnz	r3, 800563e <_dtoa_r+0x916>
 8005616:	9b05      	ldr	r3, [sp, #20]
 8005618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800561c:	0d1b      	lsrs	r3, r3, #20
 800561e:	051b      	lsls	r3, r3, #20
 8005620:	b183      	cbz	r3, 8005644 <_dtoa_r+0x91c>
 8005622:	f04f 0801 	mov.w	r8, #1
 8005626:	9b06      	ldr	r3, [sp, #24]
 8005628:	3301      	adds	r3, #1
 800562a:	9306      	str	r3, [sp, #24]
 800562c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562e:	3301      	adds	r3, #1
 8005630:	9309      	str	r3, [sp, #36]	; 0x24
 8005632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	f47f af6a 	bne.w	800550e <_dtoa_r+0x7e6>
 800563a:	2001      	movs	r0, #1
 800563c:	e76f      	b.n	800551e <_dtoa_r+0x7f6>
 800563e:	f04f 0800 	mov.w	r8, #0
 8005642:	e7f6      	b.n	8005632 <_dtoa_r+0x90a>
 8005644:	4698      	mov	r8, r3
 8005646:	e7f4      	b.n	8005632 <_dtoa_r+0x90a>
 8005648:	f43f af7d 	beq.w	8005546 <_dtoa_r+0x81e>
 800564c:	4618      	mov	r0, r3
 800564e:	301c      	adds	r0, #28
 8005650:	e772      	b.n	8005538 <_dtoa_r+0x810>
 8005652:	9b08      	ldr	r3, [sp, #32]
 8005654:	2b00      	cmp	r3, #0
 8005656:	dc36      	bgt.n	80056c6 <_dtoa_r+0x99e>
 8005658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800565a:	2b02      	cmp	r3, #2
 800565c:	dd33      	ble.n	80056c6 <_dtoa_r+0x99e>
 800565e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005662:	f1b9 0f00 	cmp.w	r9, #0
 8005666:	d10d      	bne.n	8005684 <_dtoa_r+0x95c>
 8005668:	4621      	mov	r1, r4
 800566a:	464b      	mov	r3, r9
 800566c:	2205      	movs	r2, #5
 800566e:	4628      	mov	r0, r5
 8005670:	f000 f9d2 	bl	8005a18 <__multadd>
 8005674:	4601      	mov	r1, r0
 8005676:	4604      	mov	r4, r0
 8005678:	4658      	mov	r0, fp
 800567a:	f000 fbe9 	bl	8005e50 <__mcmp>
 800567e:	2800      	cmp	r0, #0
 8005680:	f73f adb8 	bgt.w	80051f4 <_dtoa_r+0x4cc>
 8005684:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005686:	9f03      	ldr	r7, [sp, #12]
 8005688:	ea6f 0a03 	mvn.w	sl, r3
 800568c:	f04f 0800 	mov.w	r8, #0
 8005690:	4621      	mov	r1, r4
 8005692:	4628      	mov	r0, r5
 8005694:	f000 f99e 	bl	80059d4 <_Bfree>
 8005698:	2e00      	cmp	r6, #0
 800569a:	f43f aea7 	beq.w	80053ec <_dtoa_r+0x6c4>
 800569e:	f1b8 0f00 	cmp.w	r8, #0
 80056a2:	d005      	beq.n	80056b0 <_dtoa_r+0x988>
 80056a4:	45b0      	cmp	r8, r6
 80056a6:	d003      	beq.n	80056b0 <_dtoa_r+0x988>
 80056a8:	4641      	mov	r1, r8
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 f992 	bl	80059d4 <_Bfree>
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f98e 	bl	80059d4 <_Bfree>
 80056b8:	e698      	b.n	80053ec <_dtoa_r+0x6c4>
 80056ba:	2400      	movs	r4, #0
 80056bc:	4626      	mov	r6, r4
 80056be:	e7e1      	b.n	8005684 <_dtoa_r+0x95c>
 80056c0:	46c2      	mov	sl, r8
 80056c2:	4626      	mov	r6, r4
 80056c4:	e596      	b.n	80051f4 <_dtoa_r+0x4cc>
 80056c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80fd 	beq.w	80058cc <_dtoa_r+0xba4>
 80056d2:	2f00      	cmp	r7, #0
 80056d4:	dd05      	ble.n	80056e2 <_dtoa_r+0x9ba>
 80056d6:	4631      	mov	r1, r6
 80056d8:	463a      	mov	r2, r7
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 fb48 	bl	8005d70 <__lshift>
 80056e0:	4606      	mov	r6, r0
 80056e2:	f1b8 0f00 	cmp.w	r8, #0
 80056e6:	d05c      	beq.n	80057a2 <_dtoa_r+0xa7a>
 80056e8:	4628      	mov	r0, r5
 80056ea:	6871      	ldr	r1, [r6, #4]
 80056ec:	f000 f932 	bl	8005954 <_Balloc>
 80056f0:	4607      	mov	r7, r0
 80056f2:	b928      	cbnz	r0, 8005700 <_dtoa_r+0x9d8>
 80056f4:	4602      	mov	r2, r0
 80056f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056fa:	4b7f      	ldr	r3, [pc, #508]	; (80058f8 <_dtoa_r+0xbd0>)
 80056fc:	f7ff bb28 	b.w	8004d50 <_dtoa_r+0x28>
 8005700:	6932      	ldr	r2, [r6, #16]
 8005702:	f106 010c 	add.w	r1, r6, #12
 8005706:	3202      	adds	r2, #2
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	300c      	adds	r0, #12
 800570c:	f000 f914 	bl	8005938 <memcpy>
 8005710:	2201      	movs	r2, #1
 8005712:	4639      	mov	r1, r7
 8005714:	4628      	mov	r0, r5
 8005716:	f000 fb2b 	bl	8005d70 <__lshift>
 800571a:	46b0      	mov	r8, r6
 800571c:	4606      	mov	r6, r0
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	3301      	adds	r3, #1
 8005722:	9308      	str	r3, [sp, #32]
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	444b      	add	r3, r9
 8005728:	930a      	str	r3, [sp, #40]	; 0x28
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	9309      	str	r3, [sp, #36]	; 0x24
 8005732:	9b08      	ldr	r3, [sp, #32]
 8005734:	4621      	mov	r1, r4
 8005736:	3b01      	subs	r3, #1
 8005738:	4658      	mov	r0, fp
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	f7ff fa66 	bl	8004c0c <quorem>
 8005740:	4603      	mov	r3, r0
 8005742:	4641      	mov	r1, r8
 8005744:	3330      	adds	r3, #48	; 0x30
 8005746:	9006      	str	r0, [sp, #24]
 8005748:	4658      	mov	r0, fp
 800574a:	930b      	str	r3, [sp, #44]	; 0x2c
 800574c:	f000 fb80 	bl	8005e50 <__mcmp>
 8005750:	4632      	mov	r2, r6
 8005752:	4681      	mov	r9, r0
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fb96 	bl	8005e88 <__mdiff>
 800575c:	68c2      	ldr	r2, [r0, #12]
 800575e:	4607      	mov	r7, r0
 8005760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005762:	bb02      	cbnz	r2, 80057a6 <_dtoa_r+0xa7e>
 8005764:	4601      	mov	r1, r0
 8005766:	4658      	mov	r0, fp
 8005768:	f000 fb72 	bl	8005e50 <__mcmp>
 800576c:	4602      	mov	r2, r0
 800576e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005770:	4639      	mov	r1, r7
 8005772:	4628      	mov	r0, r5
 8005774:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005778:	f000 f92c 	bl	80059d4 <_Bfree>
 800577c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800577e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005780:	9f08      	ldr	r7, [sp, #32]
 8005782:	ea43 0102 	orr.w	r1, r3, r2
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	430b      	orrs	r3, r1
 800578a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800578c:	d10d      	bne.n	80057aa <_dtoa_r+0xa82>
 800578e:	2b39      	cmp	r3, #57	; 0x39
 8005790:	d029      	beq.n	80057e6 <_dtoa_r+0xabe>
 8005792:	f1b9 0f00 	cmp.w	r9, #0
 8005796:	dd01      	ble.n	800579c <_dtoa_r+0xa74>
 8005798:	9b06      	ldr	r3, [sp, #24]
 800579a:	3331      	adds	r3, #49	; 0x31
 800579c:	9a04      	ldr	r2, [sp, #16]
 800579e:	7013      	strb	r3, [r2, #0]
 80057a0:	e776      	b.n	8005690 <_dtoa_r+0x968>
 80057a2:	4630      	mov	r0, r6
 80057a4:	e7b9      	b.n	800571a <_dtoa_r+0x9f2>
 80057a6:	2201      	movs	r2, #1
 80057a8:	e7e2      	b.n	8005770 <_dtoa_r+0xa48>
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	db06      	blt.n	80057be <_dtoa_r+0xa96>
 80057b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80057b2:	ea41 0909 	orr.w	r9, r1, r9
 80057b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057b8:	ea59 0101 	orrs.w	r1, r9, r1
 80057bc:	d120      	bne.n	8005800 <_dtoa_r+0xad8>
 80057be:	2a00      	cmp	r2, #0
 80057c0:	ddec      	ble.n	800579c <_dtoa_r+0xa74>
 80057c2:	4659      	mov	r1, fp
 80057c4:	2201      	movs	r2, #1
 80057c6:	4628      	mov	r0, r5
 80057c8:	9308      	str	r3, [sp, #32]
 80057ca:	f000 fad1 	bl	8005d70 <__lshift>
 80057ce:	4621      	mov	r1, r4
 80057d0:	4683      	mov	fp, r0
 80057d2:	f000 fb3d 	bl	8005e50 <__mcmp>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	9b08      	ldr	r3, [sp, #32]
 80057da:	dc02      	bgt.n	80057e2 <_dtoa_r+0xaba>
 80057dc:	d1de      	bne.n	800579c <_dtoa_r+0xa74>
 80057de:	07da      	lsls	r2, r3, #31
 80057e0:	d5dc      	bpl.n	800579c <_dtoa_r+0xa74>
 80057e2:	2b39      	cmp	r3, #57	; 0x39
 80057e4:	d1d8      	bne.n	8005798 <_dtoa_r+0xa70>
 80057e6:	2339      	movs	r3, #57	; 0x39
 80057e8:	9a04      	ldr	r2, [sp, #16]
 80057ea:	7013      	strb	r3, [r2, #0]
 80057ec:	463b      	mov	r3, r7
 80057ee:	461f      	mov	r7, r3
 80057f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	2a39      	cmp	r2, #57	; 0x39
 80057f8:	d050      	beq.n	800589c <_dtoa_r+0xb74>
 80057fa:	3201      	adds	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e747      	b.n	8005690 <_dtoa_r+0x968>
 8005800:	2a00      	cmp	r2, #0
 8005802:	dd03      	ble.n	800580c <_dtoa_r+0xae4>
 8005804:	2b39      	cmp	r3, #57	; 0x39
 8005806:	d0ee      	beq.n	80057e6 <_dtoa_r+0xabe>
 8005808:	3301      	adds	r3, #1
 800580a:	e7c7      	b.n	800579c <_dtoa_r+0xa74>
 800580c:	9a08      	ldr	r2, [sp, #32]
 800580e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005810:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005814:	428a      	cmp	r2, r1
 8005816:	d02a      	beq.n	800586e <_dtoa_r+0xb46>
 8005818:	4659      	mov	r1, fp
 800581a:	2300      	movs	r3, #0
 800581c:	220a      	movs	r2, #10
 800581e:	4628      	mov	r0, r5
 8005820:	f000 f8fa 	bl	8005a18 <__multadd>
 8005824:	45b0      	cmp	r8, r6
 8005826:	4683      	mov	fp, r0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	f04f 020a 	mov.w	r2, #10
 8005830:	4641      	mov	r1, r8
 8005832:	4628      	mov	r0, r5
 8005834:	d107      	bne.n	8005846 <_dtoa_r+0xb1e>
 8005836:	f000 f8ef 	bl	8005a18 <__multadd>
 800583a:	4680      	mov	r8, r0
 800583c:	4606      	mov	r6, r0
 800583e:	9b08      	ldr	r3, [sp, #32]
 8005840:	3301      	adds	r3, #1
 8005842:	9308      	str	r3, [sp, #32]
 8005844:	e775      	b.n	8005732 <_dtoa_r+0xa0a>
 8005846:	f000 f8e7 	bl	8005a18 <__multadd>
 800584a:	4631      	mov	r1, r6
 800584c:	4680      	mov	r8, r0
 800584e:	2300      	movs	r3, #0
 8005850:	220a      	movs	r2, #10
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f8e0 	bl	8005a18 <__multadd>
 8005858:	4606      	mov	r6, r0
 800585a:	e7f0      	b.n	800583e <_dtoa_r+0xb16>
 800585c:	f1b9 0f00 	cmp.w	r9, #0
 8005860:	bfcc      	ite	gt
 8005862:	464f      	movgt	r7, r9
 8005864:	2701      	movle	r7, #1
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	9a03      	ldr	r2, [sp, #12]
 800586c:	4417      	add	r7, r2
 800586e:	4659      	mov	r1, fp
 8005870:	2201      	movs	r2, #1
 8005872:	4628      	mov	r0, r5
 8005874:	9308      	str	r3, [sp, #32]
 8005876:	f000 fa7b 	bl	8005d70 <__lshift>
 800587a:	4621      	mov	r1, r4
 800587c:	4683      	mov	fp, r0
 800587e:	f000 fae7 	bl	8005e50 <__mcmp>
 8005882:	2800      	cmp	r0, #0
 8005884:	dcb2      	bgt.n	80057ec <_dtoa_r+0xac4>
 8005886:	d102      	bne.n	800588e <_dtoa_r+0xb66>
 8005888:	9b08      	ldr	r3, [sp, #32]
 800588a:	07db      	lsls	r3, r3, #31
 800588c:	d4ae      	bmi.n	80057ec <_dtoa_r+0xac4>
 800588e:	463b      	mov	r3, r7
 8005890:	461f      	mov	r7, r3
 8005892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005896:	2a30      	cmp	r2, #48	; 0x30
 8005898:	d0fa      	beq.n	8005890 <_dtoa_r+0xb68>
 800589a:	e6f9      	b.n	8005690 <_dtoa_r+0x968>
 800589c:	9a03      	ldr	r2, [sp, #12]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d1a5      	bne.n	80057ee <_dtoa_r+0xac6>
 80058a2:	2331      	movs	r3, #49	; 0x31
 80058a4:	f10a 0a01 	add.w	sl, sl, #1
 80058a8:	e779      	b.n	800579e <_dtoa_r+0xa76>
 80058aa:	4b14      	ldr	r3, [pc, #80]	; (80058fc <_dtoa_r+0xbd4>)
 80058ac:	f7ff baa8 	b.w	8004e00 <_dtoa_r+0xd8>
 80058b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f47f aa81 	bne.w	8004dba <_dtoa_r+0x92>
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <_dtoa_r+0xbd8>)
 80058ba:	f7ff baa1 	b.w	8004e00 <_dtoa_r+0xd8>
 80058be:	f1b9 0f00 	cmp.w	r9, #0
 80058c2:	dc03      	bgt.n	80058cc <_dtoa_r+0xba4>
 80058c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	f73f aecb 	bgt.w	8005662 <_dtoa_r+0x93a>
 80058cc:	9f03      	ldr	r7, [sp, #12]
 80058ce:	4621      	mov	r1, r4
 80058d0:	4658      	mov	r0, fp
 80058d2:	f7ff f99b 	bl	8004c0c <quorem>
 80058d6:	9a03      	ldr	r2, [sp, #12]
 80058d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80058dc:	f807 3b01 	strb.w	r3, [r7], #1
 80058e0:	1aba      	subs	r2, r7, r2
 80058e2:	4591      	cmp	r9, r2
 80058e4:	ddba      	ble.n	800585c <_dtoa_r+0xb34>
 80058e6:	4659      	mov	r1, fp
 80058e8:	2300      	movs	r3, #0
 80058ea:	220a      	movs	r2, #10
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 f893 	bl	8005a18 <__multadd>
 80058f2:	4683      	mov	fp, r0
 80058f4:	e7eb      	b.n	80058ce <_dtoa_r+0xba6>
 80058f6:	bf00      	nop
 80058f8:	0800747f 	.word	0x0800747f
 80058fc:	080073dc 	.word	0x080073dc
 8005900:	08007400 	.word	0x08007400

08005904 <_localeconv_r>:
 8005904:	4800      	ldr	r0, [pc, #0]	; (8005908 <_localeconv_r+0x4>)
 8005906:	4770      	bx	lr
 8005908:	20000160 	.word	0x20000160

0800590c <malloc>:
 800590c:	4b02      	ldr	r3, [pc, #8]	; (8005918 <malloc+0xc>)
 800590e:	4601      	mov	r1, r0
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	f000 bc1d 	b.w	8006150 <_malloc_r>
 8005916:	bf00      	nop
 8005918:	2000000c 	.word	0x2000000c

0800591c <memchr>:
 800591c:	4603      	mov	r3, r0
 800591e:	b510      	push	{r4, lr}
 8005920:	b2c9      	uxtb	r1, r1
 8005922:	4402      	add	r2, r0
 8005924:	4293      	cmp	r3, r2
 8005926:	4618      	mov	r0, r3
 8005928:	d101      	bne.n	800592e <memchr+0x12>
 800592a:	2000      	movs	r0, #0
 800592c:	e003      	b.n	8005936 <memchr+0x1a>
 800592e:	7804      	ldrb	r4, [r0, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	428c      	cmp	r4, r1
 8005934:	d1f6      	bne.n	8005924 <memchr+0x8>
 8005936:	bd10      	pop	{r4, pc}

08005938 <memcpy>:
 8005938:	440a      	add	r2, r1
 800593a:	4291      	cmp	r1, r2
 800593c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005940:	d100      	bne.n	8005944 <memcpy+0xc>
 8005942:	4770      	bx	lr
 8005944:	b510      	push	{r4, lr}
 8005946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800594a:	4291      	cmp	r1, r2
 800594c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005950:	d1f9      	bne.n	8005946 <memcpy+0xe>
 8005952:	bd10      	pop	{r4, pc}

08005954 <_Balloc>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005958:	4604      	mov	r4, r0
 800595a:	460d      	mov	r5, r1
 800595c:	b976      	cbnz	r6, 800597c <_Balloc+0x28>
 800595e:	2010      	movs	r0, #16
 8005960:	f7ff ffd4 	bl	800590c <malloc>
 8005964:	4602      	mov	r2, r0
 8005966:	6260      	str	r0, [r4, #36]	; 0x24
 8005968:	b920      	cbnz	r0, 8005974 <_Balloc+0x20>
 800596a:	2166      	movs	r1, #102	; 0x66
 800596c:	4b17      	ldr	r3, [pc, #92]	; (80059cc <_Balloc+0x78>)
 800596e:	4818      	ldr	r0, [pc, #96]	; (80059d0 <_Balloc+0x7c>)
 8005970:	f000 fc72 	bl	8006258 <__assert_func>
 8005974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005978:	6006      	str	r6, [r0, #0]
 800597a:	60c6      	str	r6, [r0, #12]
 800597c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800597e:	68f3      	ldr	r3, [r6, #12]
 8005980:	b183      	cbz	r3, 80059a4 <_Balloc+0x50>
 8005982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800598a:	b9b8      	cbnz	r0, 80059bc <_Balloc+0x68>
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f605 	lsl.w	r6, r1, r5
 8005992:	1d72      	adds	r2, r6, #5
 8005994:	4620      	mov	r0, r4
 8005996:	0092      	lsls	r2, r2, #2
 8005998:	f000 fb5e 	bl	8006058 <_calloc_r>
 800599c:	b160      	cbz	r0, 80059b8 <_Balloc+0x64>
 800599e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059a2:	e00e      	b.n	80059c2 <_Balloc+0x6e>
 80059a4:	2221      	movs	r2, #33	; 0x21
 80059a6:	2104      	movs	r1, #4
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fb55 	bl	8006058 <_calloc_r>
 80059ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059b0:	60f0      	str	r0, [r6, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e4      	bne.n	8005982 <_Balloc+0x2e>
 80059b8:	2000      	movs	r0, #0
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	6802      	ldr	r2, [r0, #0]
 80059be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059c2:	2300      	movs	r3, #0
 80059c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059c8:	e7f7      	b.n	80059ba <_Balloc+0x66>
 80059ca:	bf00      	nop
 80059cc:	0800740d 	.word	0x0800740d
 80059d0:	08007490 	.word	0x08007490

080059d4 <_Bfree>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059d8:	4605      	mov	r5, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	b976      	cbnz	r6, 80059fc <_Bfree+0x28>
 80059de:	2010      	movs	r0, #16
 80059e0:	f7ff ff94 	bl	800590c <malloc>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6268      	str	r0, [r5, #36]	; 0x24
 80059e8:	b920      	cbnz	r0, 80059f4 <_Bfree+0x20>
 80059ea:	218a      	movs	r1, #138	; 0x8a
 80059ec:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <_Bfree+0x3c>)
 80059ee:	4809      	ldr	r0, [pc, #36]	; (8005a14 <_Bfree+0x40>)
 80059f0:	f000 fc32 	bl	8006258 <__assert_func>
 80059f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059f8:	6006      	str	r6, [r0, #0]
 80059fa:	60c6      	str	r6, [r0, #12]
 80059fc:	b13c      	cbz	r4, 8005a0e <_Bfree+0x3a>
 80059fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a00:	6862      	ldr	r2, [r4, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a08:	6021      	str	r1, [r4, #0]
 8005a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	0800740d 	.word	0x0800740d
 8005a14:	08007490 	.word	0x08007490

08005a18 <__multadd>:
 8005a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	461e      	mov	r6, r3
 8005a22:	2000      	movs	r0, #0
 8005a24:	690d      	ldr	r5, [r1, #16]
 8005a26:	f101 0c14 	add.w	ip, r1, #20
 8005a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a2e:	3001      	adds	r0, #1
 8005a30:	b299      	uxth	r1, r3
 8005a32:	fb02 6101 	mla	r1, r2, r1, r6
 8005a36:	0c1e      	lsrs	r6, r3, #16
 8005a38:	0c0b      	lsrs	r3, r1, #16
 8005a3a:	fb02 3306 	mla	r3, r2, r6, r3
 8005a3e:	b289      	uxth	r1, r1
 8005a40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a44:	4285      	cmp	r5, r0
 8005a46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005a4e:	dcec      	bgt.n	8005a2a <__multadd+0x12>
 8005a50:	b30e      	cbz	r6, 8005a96 <__multadd+0x7e>
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	42ab      	cmp	r3, r5
 8005a56:	dc19      	bgt.n	8005a8c <__multadd+0x74>
 8005a58:	6861      	ldr	r1, [r4, #4]
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	3101      	adds	r1, #1
 8005a5e:	f7ff ff79 	bl	8005954 <_Balloc>
 8005a62:	4680      	mov	r8, r0
 8005a64:	b928      	cbnz	r0, 8005a72 <__multadd+0x5a>
 8005a66:	4602      	mov	r2, r0
 8005a68:	21b5      	movs	r1, #181	; 0xb5
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <__multadd+0x84>)
 8005a6c:	480c      	ldr	r0, [pc, #48]	; (8005aa0 <__multadd+0x88>)
 8005a6e:	f000 fbf3 	bl	8006258 <__assert_func>
 8005a72:	6922      	ldr	r2, [r4, #16]
 8005a74:	f104 010c 	add.w	r1, r4, #12
 8005a78:	3202      	adds	r2, #2
 8005a7a:	0092      	lsls	r2, r2, #2
 8005a7c:	300c      	adds	r0, #12
 8005a7e:	f7ff ff5b 	bl	8005938 <memcpy>
 8005a82:	4621      	mov	r1, r4
 8005a84:	4638      	mov	r0, r7
 8005a86:	f7ff ffa5 	bl	80059d4 <_Bfree>
 8005a8a:	4644      	mov	r4, r8
 8005a8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a90:	3501      	adds	r5, #1
 8005a92:	615e      	str	r6, [r3, #20]
 8005a94:	6125      	str	r5, [r4, #16]
 8005a96:	4620      	mov	r0, r4
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	0800747f 	.word	0x0800747f
 8005aa0:	08007490 	.word	0x08007490

08005aa4 <__hi0bits>:
 8005aa4:	0c02      	lsrs	r2, r0, #16
 8005aa6:	0412      	lsls	r2, r2, #16
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	b9ca      	cbnz	r2, 8005ae0 <__hi0bits+0x3c>
 8005aac:	0403      	lsls	r3, r0, #16
 8005aae:	2010      	movs	r0, #16
 8005ab0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ab4:	bf04      	itt	eq
 8005ab6:	021b      	lsleq	r3, r3, #8
 8005ab8:	3008      	addeq	r0, #8
 8005aba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005abe:	bf04      	itt	eq
 8005ac0:	011b      	lsleq	r3, r3, #4
 8005ac2:	3004      	addeq	r0, #4
 8005ac4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ac8:	bf04      	itt	eq
 8005aca:	009b      	lsleq	r3, r3, #2
 8005acc:	3002      	addeq	r0, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	db05      	blt.n	8005ade <__hi0bits+0x3a>
 8005ad2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ad6:	f100 0001 	add.w	r0, r0, #1
 8005ada:	bf08      	it	eq
 8005adc:	2020      	moveq	r0, #32
 8005ade:	4770      	bx	lr
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e7e5      	b.n	8005ab0 <__hi0bits+0xc>

08005ae4 <__lo0bits>:
 8005ae4:	6803      	ldr	r3, [r0, #0]
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	f013 0007 	ands.w	r0, r3, #7
 8005aec:	d00b      	beq.n	8005b06 <__lo0bits+0x22>
 8005aee:	07d9      	lsls	r1, r3, #31
 8005af0:	d421      	bmi.n	8005b36 <__lo0bits+0x52>
 8005af2:	0798      	lsls	r0, r3, #30
 8005af4:	bf49      	itett	mi
 8005af6:	085b      	lsrmi	r3, r3, #1
 8005af8:	089b      	lsrpl	r3, r3, #2
 8005afa:	2001      	movmi	r0, #1
 8005afc:	6013      	strmi	r3, [r2, #0]
 8005afe:	bf5c      	itt	pl
 8005b00:	2002      	movpl	r0, #2
 8005b02:	6013      	strpl	r3, [r2, #0]
 8005b04:	4770      	bx	lr
 8005b06:	b299      	uxth	r1, r3
 8005b08:	b909      	cbnz	r1, 8005b0e <__lo0bits+0x2a>
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	b2d9      	uxtb	r1, r3
 8005b10:	b909      	cbnz	r1, 8005b16 <__lo0bits+0x32>
 8005b12:	3008      	adds	r0, #8
 8005b14:	0a1b      	lsrs	r3, r3, #8
 8005b16:	0719      	lsls	r1, r3, #28
 8005b18:	bf04      	itt	eq
 8005b1a:	091b      	lsreq	r3, r3, #4
 8005b1c:	3004      	addeq	r0, #4
 8005b1e:	0799      	lsls	r1, r3, #30
 8005b20:	bf04      	itt	eq
 8005b22:	089b      	lsreq	r3, r3, #2
 8005b24:	3002      	addeq	r0, #2
 8005b26:	07d9      	lsls	r1, r3, #31
 8005b28:	d403      	bmi.n	8005b32 <__lo0bits+0x4e>
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	f100 0001 	add.w	r0, r0, #1
 8005b30:	d003      	beq.n	8005b3a <__lo0bits+0x56>
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	4770      	bx	lr
 8005b36:	2000      	movs	r0, #0
 8005b38:	4770      	bx	lr
 8005b3a:	2020      	movs	r0, #32
 8005b3c:	4770      	bx	lr
	...

08005b40 <__i2b>:
 8005b40:	b510      	push	{r4, lr}
 8005b42:	460c      	mov	r4, r1
 8005b44:	2101      	movs	r1, #1
 8005b46:	f7ff ff05 	bl	8005954 <_Balloc>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	b928      	cbnz	r0, 8005b5a <__i2b+0x1a>
 8005b4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <__i2b+0x24>)
 8005b54:	4804      	ldr	r0, [pc, #16]	; (8005b68 <__i2b+0x28>)
 8005b56:	f000 fb7f 	bl	8006258 <__assert_func>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	6144      	str	r4, [r0, #20]
 8005b5e:	6103      	str	r3, [r0, #16]
 8005b60:	bd10      	pop	{r4, pc}
 8005b62:	bf00      	nop
 8005b64:	0800747f 	.word	0x0800747f
 8005b68:	08007490 	.word	0x08007490

08005b6c <__multiply>:
 8005b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b70:	4691      	mov	r9, r2
 8005b72:	690a      	ldr	r2, [r1, #16]
 8005b74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b78:	460c      	mov	r4, r1
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bfbe      	ittt	lt
 8005b7e:	460b      	movlt	r3, r1
 8005b80:	464c      	movlt	r4, r9
 8005b82:	4699      	movlt	r9, r3
 8005b84:	6927      	ldr	r7, [r4, #16]
 8005b86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	6861      	ldr	r1, [r4, #4]
 8005b8e:	eb07 060a 	add.w	r6, r7, sl
 8005b92:	42b3      	cmp	r3, r6
 8005b94:	b085      	sub	sp, #20
 8005b96:	bfb8      	it	lt
 8005b98:	3101      	addlt	r1, #1
 8005b9a:	f7ff fedb 	bl	8005954 <_Balloc>
 8005b9e:	b930      	cbnz	r0, 8005bae <__multiply+0x42>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	f240 115d 	movw	r1, #349	; 0x15d
 8005ba6:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <__multiply+0x148>)
 8005ba8:	4843      	ldr	r0, [pc, #268]	; (8005cb8 <__multiply+0x14c>)
 8005baa:	f000 fb55 	bl	8006258 <__assert_func>
 8005bae:	f100 0514 	add.w	r5, r0, #20
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bba:	4543      	cmp	r3, r8
 8005bbc:	d321      	bcc.n	8005c02 <__multiply+0x96>
 8005bbe:	f104 0314 	add.w	r3, r4, #20
 8005bc2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005bc6:	f109 0314 	add.w	r3, r9, #20
 8005bca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005bce:	9202      	str	r2, [sp, #8]
 8005bd0:	1b3a      	subs	r2, r7, r4
 8005bd2:	3a15      	subs	r2, #21
 8005bd4:	f022 0203 	bic.w	r2, r2, #3
 8005bd8:	3204      	adds	r2, #4
 8005bda:	f104 0115 	add.w	r1, r4, #21
 8005bde:	428f      	cmp	r7, r1
 8005be0:	bf38      	it	cc
 8005be2:	2204      	movcc	r2, #4
 8005be4:	9201      	str	r2, [sp, #4]
 8005be6:	9a02      	ldr	r2, [sp, #8]
 8005be8:	9303      	str	r3, [sp, #12]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d80c      	bhi.n	8005c08 <__multiply+0x9c>
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	dd03      	ble.n	8005bfa <__multiply+0x8e>
 8005bf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d059      	beq.n	8005cae <__multiply+0x142>
 8005bfa:	6106      	str	r6, [r0, #16]
 8005bfc:	b005      	add	sp, #20
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c02:	f843 2b04 	str.w	r2, [r3], #4
 8005c06:	e7d8      	b.n	8005bba <__multiply+0x4e>
 8005c08:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c0c:	f1ba 0f00 	cmp.w	sl, #0
 8005c10:	d023      	beq.n	8005c5a <__multiply+0xee>
 8005c12:	46a9      	mov	r9, r5
 8005c14:	f04f 0c00 	mov.w	ip, #0
 8005c18:	f104 0e14 	add.w	lr, r4, #20
 8005c1c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c20:	f8d9 1000 	ldr.w	r1, [r9]
 8005c24:	fa1f fb82 	uxth.w	fp, r2
 8005c28:	b289      	uxth	r1, r1
 8005c2a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c2e:	4461      	add	r1, ip
 8005c30:	f8d9 c000 	ldr.w	ip, [r9]
 8005c34:	0c12      	lsrs	r2, r2, #16
 8005c36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c3a:	fb0a c202 	mla	r2, sl, r2, ip
 8005c3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c42:	b289      	uxth	r1, r1
 8005c44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c48:	4577      	cmp	r7, lr
 8005c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c4e:	f849 1b04 	str.w	r1, [r9], #4
 8005c52:	d8e3      	bhi.n	8005c1c <__multiply+0xb0>
 8005c54:	9a01      	ldr	r2, [sp, #4]
 8005c56:	f845 c002 	str.w	ip, [r5, r2]
 8005c5a:	9a03      	ldr	r2, [sp, #12]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c62:	f1b9 0f00 	cmp.w	r9, #0
 8005c66:	d020      	beq.n	8005caa <__multiply+0x13e>
 8005c68:	46ae      	mov	lr, r5
 8005c6a:	f04f 0a00 	mov.w	sl, #0
 8005c6e:	6829      	ldr	r1, [r5, #0]
 8005c70:	f104 0c14 	add.w	ip, r4, #20
 8005c74:	f8bc b000 	ldrh.w	fp, [ip]
 8005c78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c7c:	b289      	uxth	r1, r1
 8005c7e:	fb09 220b 	mla	r2, r9, fp, r2
 8005c82:	4492      	add	sl, r2
 8005c84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005c88:	f84e 1b04 	str.w	r1, [lr], #4
 8005c8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005c90:	f8be 1000 	ldrh.w	r1, [lr]
 8005c94:	0c12      	lsrs	r2, r2, #16
 8005c96:	fb09 1102 	mla	r1, r9, r2, r1
 8005c9a:	4567      	cmp	r7, ip
 8005c9c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ca0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ca4:	d8e6      	bhi.n	8005c74 <__multiply+0x108>
 8005ca6:	9a01      	ldr	r2, [sp, #4]
 8005ca8:	50a9      	str	r1, [r5, r2]
 8005caa:	3504      	adds	r5, #4
 8005cac:	e79b      	b.n	8005be6 <__multiply+0x7a>
 8005cae:	3e01      	subs	r6, #1
 8005cb0:	e79d      	b.n	8005bee <__multiply+0x82>
 8005cb2:	bf00      	nop
 8005cb4:	0800747f 	.word	0x0800747f
 8005cb8:	08007490 	.word	0x08007490

08005cbc <__pow5mult>:
 8005cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc0:	4615      	mov	r5, r2
 8005cc2:	f012 0203 	ands.w	r2, r2, #3
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460f      	mov	r7, r1
 8005cca:	d007      	beq.n	8005cdc <__pow5mult+0x20>
 8005ccc:	4c25      	ldr	r4, [pc, #148]	; (8005d64 <__pow5mult+0xa8>)
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cd6:	f7ff fe9f 	bl	8005a18 <__multadd>
 8005cda:	4607      	mov	r7, r0
 8005cdc:	10ad      	asrs	r5, r5, #2
 8005cde:	d03d      	beq.n	8005d5c <__pow5mult+0xa0>
 8005ce0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ce2:	b97c      	cbnz	r4, 8005d04 <__pow5mult+0x48>
 8005ce4:	2010      	movs	r0, #16
 8005ce6:	f7ff fe11 	bl	800590c <malloc>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6270      	str	r0, [r6, #36]	; 0x24
 8005cee:	b928      	cbnz	r0, 8005cfc <__pow5mult+0x40>
 8005cf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <__pow5mult+0xac>)
 8005cf6:	481d      	ldr	r0, [pc, #116]	; (8005d6c <__pow5mult+0xb0>)
 8005cf8:	f000 faae 	bl	8006258 <__assert_func>
 8005cfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d00:	6004      	str	r4, [r0, #0]
 8005d02:	60c4      	str	r4, [r0, #12]
 8005d04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d0c:	b94c      	cbnz	r4, 8005d22 <__pow5mult+0x66>
 8005d0e:	f240 2171 	movw	r1, #625	; 0x271
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7ff ff14 	bl	8005b40 <__i2b>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d20:	6003      	str	r3, [r0, #0]
 8005d22:	f04f 0900 	mov.w	r9, #0
 8005d26:	07eb      	lsls	r3, r5, #31
 8005d28:	d50a      	bpl.n	8005d40 <__pow5mult+0x84>
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7ff ff1c 	bl	8005b6c <__multiply>
 8005d34:	4680      	mov	r8, r0
 8005d36:	4639      	mov	r1, r7
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff fe4b 	bl	80059d4 <_Bfree>
 8005d3e:	4647      	mov	r7, r8
 8005d40:	106d      	asrs	r5, r5, #1
 8005d42:	d00b      	beq.n	8005d5c <__pow5mult+0xa0>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	b938      	cbnz	r0, 8005d58 <__pow5mult+0x9c>
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7ff ff0d 	bl	8005b6c <__multiply>
 8005d52:	6020      	str	r0, [r4, #0]
 8005d54:	f8c0 9000 	str.w	r9, [r0]
 8005d58:	4604      	mov	r4, r0
 8005d5a:	e7e4      	b.n	8005d26 <__pow5mult+0x6a>
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d62:	bf00      	nop
 8005d64:	080075e0 	.word	0x080075e0
 8005d68:	0800740d 	.word	0x0800740d
 8005d6c:	08007490 	.word	0x08007490

08005d70 <__lshift>:
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	460c      	mov	r4, r1
 8005d76:	4607      	mov	r7, r0
 8005d78:	4691      	mov	r9, r2
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	6849      	ldr	r1, [r1, #4]
 8005d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d88:	f108 0601 	add.w	r6, r8, #1
 8005d8c:	42b3      	cmp	r3, r6
 8005d8e:	db0b      	blt.n	8005da8 <__lshift+0x38>
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff fddf 	bl	8005954 <_Balloc>
 8005d96:	4605      	mov	r5, r0
 8005d98:	b948      	cbnz	r0, 8005dae <__lshift+0x3e>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005da0:	4b29      	ldr	r3, [pc, #164]	; (8005e48 <__lshift+0xd8>)
 8005da2:	482a      	ldr	r0, [pc, #168]	; (8005e4c <__lshift+0xdc>)
 8005da4:	f000 fa58 	bl	8006258 <__assert_func>
 8005da8:	3101      	adds	r1, #1
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	e7ee      	b.n	8005d8c <__lshift+0x1c>
 8005dae:	2300      	movs	r3, #0
 8005db0:	f100 0114 	add.w	r1, r0, #20
 8005db4:	f100 0210 	add.w	r2, r0, #16
 8005db8:	4618      	mov	r0, r3
 8005dba:	4553      	cmp	r3, sl
 8005dbc:	db37      	blt.n	8005e2e <__lshift+0xbe>
 8005dbe:	6920      	ldr	r0, [r4, #16]
 8005dc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dc4:	f104 0314 	add.w	r3, r4, #20
 8005dc8:	f019 091f 	ands.w	r9, r9, #31
 8005dcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005dd4:	d02f      	beq.n	8005e36 <__lshift+0xc6>
 8005dd6:	468a      	mov	sl, r1
 8005dd8:	f04f 0c00 	mov.w	ip, #0
 8005ddc:	f1c9 0e20 	rsb	lr, r9, #32
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	fa02 f209 	lsl.w	r2, r2, r9
 8005de6:	ea42 020c 	orr.w	r2, r2, ip
 8005dea:	f84a 2b04 	str.w	r2, [sl], #4
 8005dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df2:	4298      	cmp	r0, r3
 8005df4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005df8:	d8f2      	bhi.n	8005de0 <__lshift+0x70>
 8005dfa:	1b03      	subs	r3, r0, r4
 8005dfc:	3b15      	subs	r3, #21
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	3304      	adds	r3, #4
 8005e04:	f104 0215 	add.w	r2, r4, #21
 8005e08:	4290      	cmp	r0, r2
 8005e0a:	bf38      	it	cc
 8005e0c:	2304      	movcc	r3, #4
 8005e0e:	f841 c003 	str.w	ip, [r1, r3]
 8005e12:	f1bc 0f00 	cmp.w	ip, #0
 8005e16:	d001      	beq.n	8005e1c <__lshift+0xac>
 8005e18:	f108 0602 	add.w	r6, r8, #2
 8005e1c:	3e01      	subs	r6, #1
 8005e1e:	4638      	mov	r0, r7
 8005e20:	4621      	mov	r1, r4
 8005e22:	612e      	str	r6, [r5, #16]
 8005e24:	f7ff fdd6 	bl	80059d4 <_Bfree>
 8005e28:	4628      	mov	r0, r5
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e32:	3301      	adds	r3, #1
 8005e34:	e7c1      	b.n	8005dba <__lshift+0x4a>
 8005e36:	3904      	subs	r1, #4
 8005e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3c:	4298      	cmp	r0, r3
 8005e3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e42:	d8f9      	bhi.n	8005e38 <__lshift+0xc8>
 8005e44:	e7ea      	b.n	8005e1c <__lshift+0xac>
 8005e46:	bf00      	nop
 8005e48:	0800747f 	.word	0x0800747f
 8005e4c:	08007490 	.word	0x08007490

08005e50 <__mcmp>:
 8005e50:	4603      	mov	r3, r0
 8005e52:	690a      	ldr	r2, [r1, #16]
 8005e54:	6900      	ldr	r0, [r0, #16]
 8005e56:	b530      	push	{r4, r5, lr}
 8005e58:	1a80      	subs	r0, r0, r2
 8005e5a:	d10d      	bne.n	8005e78 <__mcmp+0x28>
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	3114      	adds	r1, #20
 8005e60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e70:	4295      	cmp	r5, r2
 8005e72:	d002      	beq.n	8005e7a <__mcmp+0x2a>
 8005e74:	d304      	bcc.n	8005e80 <__mcmp+0x30>
 8005e76:	2001      	movs	r0, #1
 8005e78:	bd30      	pop	{r4, r5, pc}
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	d3f4      	bcc.n	8005e68 <__mcmp+0x18>
 8005e7e:	e7fb      	b.n	8005e78 <__mcmp+0x28>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e84:	e7f8      	b.n	8005e78 <__mcmp+0x28>
	...

08005e88 <__mdiff>:
 8005e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	460d      	mov	r5, r1
 8005e8e:	4607      	mov	r7, r0
 8005e90:	4611      	mov	r1, r2
 8005e92:	4628      	mov	r0, r5
 8005e94:	4614      	mov	r4, r2
 8005e96:	f7ff ffdb 	bl	8005e50 <__mcmp>
 8005e9a:	1e06      	subs	r6, r0, #0
 8005e9c:	d111      	bne.n	8005ec2 <__mdiff+0x3a>
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f7ff fd57 	bl	8005954 <_Balloc>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	b928      	cbnz	r0, 8005eb6 <__mdiff+0x2e>
 8005eaa:	f240 2132 	movw	r1, #562	; 0x232
 8005eae:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <__mdiff+0x110>)
 8005eb0:	483a      	ldr	r0, [pc, #232]	; (8005f9c <__mdiff+0x114>)
 8005eb2:	f000 f9d1 	bl	8006258 <__assert_func>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec2:	bfa4      	itt	ge
 8005ec4:	4623      	movge	r3, r4
 8005ec6:	462c      	movge	r4, r5
 8005ec8:	4638      	mov	r0, r7
 8005eca:	6861      	ldr	r1, [r4, #4]
 8005ecc:	bfa6      	itte	ge
 8005ece:	461d      	movge	r5, r3
 8005ed0:	2600      	movge	r6, #0
 8005ed2:	2601      	movlt	r6, #1
 8005ed4:	f7ff fd3e 	bl	8005954 <_Balloc>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	b918      	cbnz	r0, 8005ee4 <__mdiff+0x5c>
 8005edc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ee0:	4b2d      	ldr	r3, [pc, #180]	; (8005f98 <__mdiff+0x110>)
 8005ee2:	e7e5      	b.n	8005eb0 <__mdiff+0x28>
 8005ee4:	f102 0814 	add.w	r8, r2, #20
 8005ee8:	46c2      	mov	sl, r8
 8005eea:	f04f 0c00 	mov.w	ip, #0
 8005eee:	6927      	ldr	r7, [r4, #16]
 8005ef0:	60c6      	str	r6, [r0, #12]
 8005ef2:	692e      	ldr	r6, [r5, #16]
 8005ef4:	f104 0014 	add.w	r0, r4, #20
 8005ef8:	f105 0914 	add.w	r9, r5, #20
 8005efc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f04:	3410      	adds	r4, #16
 8005f06:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005f0a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f0e:	fa1f f18b 	uxth.w	r1, fp
 8005f12:	448c      	add	ip, r1
 8005f14:	b299      	uxth	r1, r3
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	ebac 0101 	sub.w	r1, ip, r1
 8005f1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f20:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f24:	b289      	uxth	r1, r1
 8005f26:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f2a:	454e      	cmp	r6, r9
 8005f2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f30:	f84a 3b04 	str.w	r3, [sl], #4
 8005f34:	d8e7      	bhi.n	8005f06 <__mdiff+0x7e>
 8005f36:	1b73      	subs	r3, r6, r5
 8005f38:	3b15      	subs	r3, #21
 8005f3a:	f023 0303 	bic.w	r3, r3, #3
 8005f3e:	3515      	adds	r5, #21
 8005f40:	3304      	adds	r3, #4
 8005f42:	42ae      	cmp	r6, r5
 8005f44:	bf38      	it	cc
 8005f46:	2304      	movcc	r3, #4
 8005f48:	4418      	add	r0, r3
 8005f4a:	4443      	add	r3, r8
 8005f4c:	461e      	mov	r6, r3
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4575      	cmp	r5, lr
 8005f52:	d30e      	bcc.n	8005f72 <__mdiff+0xea>
 8005f54:	f10e 0103 	add.w	r1, lr, #3
 8005f58:	1a09      	subs	r1, r1, r0
 8005f5a:	f021 0103 	bic.w	r1, r1, #3
 8005f5e:	3803      	subs	r0, #3
 8005f60:	4586      	cmp	lr, r0
 8005f62:	bf38      	it	cc
 8005f64:	2100      	movcc	r1, #0
 8005f66:	4419      	add	r1, r3
 8005f68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f6c:	b18b      	cbz	r3, 8005f92 <__mdiff+0x10a>
 8005f6e:	6117      	str	r7, [r2, #16]
 8005f70:	e7a4      	b.n	8005ebc <__mdiff+0x34>
 8005f72:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f76:	fa1f f188 	uxth.w	r1, r8
 8005f7a:	4461      	add	r1, ip
 8005f7c:	140c      	asrs	r4, r1, #16
 8005f7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f82:	b289      	uxth	r1, r1
 8005f84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f88:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005f8c:	f846 1b04 	str.w	r1, [r6], #4
 8005f90:	e7de      	b.n	8005f50 <__mdiff+0xc8>
 8005f92:	3f01      	subs	r7, #1
 8005f94:	e7e8      	b.n	8005f68 <__mdiff+0xe0>
 8005f96:	bf00      	nop
 8005f98:	0800747f 	.word	0x0800747f
 8005f9c:	08007490 	.word	0x08007490

08005fa0 <__d2b>:
 8005fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005faa:	4690      	mov	r8, r2
 8005fac:	461d      	mov	r5, r3
 8005fae:	f7ff fcd1 	bl	8005954 <_Balloc>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	b930      	cbnz	r0, 8005fc4 <__d2b+0x24>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	f240 310a 	movw	r1, #778	; 0x30a
 8005fbc:	4b24      	ldr	r3, [pc, #144]	; (8006050 <__d2b+0xb0>)
 8005fbe:	4825      	ldr	r0, [pc, #148]	; (8006054 <__d2b+0xb4>)
 8005fc0:	f000 f94a 	bl	8006258 <__assert_func>
 8005fc4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fc8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fcc:	bb2d      	cbnz	r5, 800601a <__d2b+0x7a>
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	f1b8 0300 	subs.w	r3, r8, #0
 8005fd4:	d026      	beq.n	8006024 <__d2b+0x84>
 8005fd6:	4668      	mov	r0, sp
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	f7ff fd83 	bl	8005ae4 <__lo0bits>
 8005fde:	9900      	ldr	r1, [sp, #0]
 8005fe0:	b1f0      	cbz	r0, 8006020 <__d2b+0x80>
 8005fe2:	9a01      	ldr	r2, [sp, #4]
 8005fe4:	f1c0 0320 	rsb	r3, r0, #32
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	430b      	orrs	r3, r1
 8005fee:	40c2      	lsrs	r2, r0
 8005ff0:	6163      	str	r3, [r4, #20]
 8005ff2:	9201      	str	r2, [sp, #4]
 8005ff4:	9b01      	ldr	r3, [sp, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf14      	ite	ne
 8005ffa:	2102      	movne	r1, #2
 8005ffc:	2101      	moveq	r1, #1
 8005ffe:	61a3      	str	r3, [r4, #24]
 8006000:	6121      	str	r1, [r4, #16]
 8006002:	b1c5      	cbz	r5, 8006036 <__d2b+0x96>
 8006004:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006008:	4405      	add	r5, r0
 800600a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800600e:	603d      	str	r5, [r7, #0]
 8006010:	6030      	str	r0, [r6, #0]
 8006012:	4620      	mov	r0, r4
 8006014:	b002      	add	sp, #8
 8006016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800601a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800601e:	e7d6      	b.n	8005fce <__d2b+0x2e>
 8006020:	6161      	str	r1, [r4, #20]
 8006022:	e7e7      	b.n	8005ff4 <__d2b+0x54>
 8006024:	a801      	add	r0, sp, #4
 8006026:	f7ff fd5d 	bl	8005ae4 <__lo0bits>
 800602a:	2101      	movs	r1, #1
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	6121      	str	r1, [r4, #16]
 8006030:	6163      	str	r3, [r4, #20]
 8006032:	3020      	adds	r0, #32
 8006034:	e7e5      	b.n	8006002 <__d2b+0x62>
 8006036:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800603a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800603e:	6038      	str	r0, [r7, #0]
 8006040:	6918      	ldr	r0, [r3, #16]
 8006042:	f7ff fd2f 	bl	8005aa4 <__hi0bits>
 8006046:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800604a:	6031      	str	r1, [r6, #0]
 800604c:	e7e1      	b.n	8006012 <__d2b+0x72>
 800604e:	bf00      	nop
 8006050:	0800747f 	.word	0x0800747f
 8006054:	08007490 	.word	0x08007490

08006058 <_calloc_r>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	fba1 5402 	umull	r5, r4, r1, r2
 800605e:	b934      	cbnz	r4, 800606e <_calloc_r+0x16>
 8006060:	4629      	mov	r1, r5
 8006062:	f000 f875 	bl	8006150 <_malloc_r>
 8006066:	4606      	mov	r6, r0
 8006068:	b928      	cbnz	r0, 8006076 <_calloc_r+0x1e>
 800606a:	4630      	mov	r0, r6
 800606c:	bd70      	pop	{r4, r5, r6, pc}
 800606e:	220c      	movs	r2, #12
 8006070:	2600      	movs	r6, #0
 8006072:	6002      	str	r2, [r0, #0]
 8006074:	e7f9      	b.n	800606a <_calloc_r+0x12>
 8006076:	462a      	mov	r2, r5
 8006078:	4621      	mov	r1, r4
 800607a:	f7fe f95f 	bl	800433c <memset>
 800607e:	e7f4      	b.n	800606a <_calloc_r+0x12>

08006080 <_free_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4605      	mov	r5, r0
 8006084:	2900      	cmp	r1, #0
 8006086:	d040      	beq.n	800610a <_free_r+0x8a>
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f0c      	subs	r4, r1, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfb8      	it	lt
 8006092:	18e4      	addlt	r4, r4, r3
 8006094:	f000 f922 	bl	80062dc <__malloc_lock>
 8006098:	4a1c      	ldr	r2, [pc, #112]	; (800610c <_free_r+0x8c>)
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	b933      	cbnz	r3, 80060ac <_free_r+0x2c>
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6014      	str	r4, [r2, #0]
 80060a2:	4628      	mov	r0, r5
 80060a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a8:	f000 b91e 	b.w	80062e8 <__malloc_unlock>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d908      	bls.n	80060c2 <_free_r+0x42>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	1821      	adds	r1, r4, r0
 80060b4:	428b      	cmp	r3, r1
 80060b6:	bf01      	itttt	eq
 80060b8:	6819      	ldreq	r1, [r3, #0]
 80060ba:	685b      	ldreq	r3, [r3, #4]
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	e7ed      	b.n	800609e <_free_r+0x1e>
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b10b      	cbz	r3, 80060cc <_free_r+0x4c>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d9fa      	bls.n	80060c2 <_free_r+0x42>
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	1850      	adds	r0, r2, r1
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d10b      	bne.n	80060ec <_free_r+0x6c>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4401      	add	r1, r0
 80060d8:	1850      	adds	r0, r2, r1
 80060da:	4283      	cmp	r3, r0
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	d1e0      	bne.n	80060a2 <_free_r+0x22>
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4401      	add	r1, r0
 80060e6:	6011      	str	r1, [r2, #0]
 80060e8:	6053      	str	r3, [r2, #4]
 80060ea:	e7da      	b.n	80060a2 <_free_r+0x22>
 80060ec:	d902      	bls.n	80060f4 <_free_r+0x74>
 80060ee:	230c      	movs	r3, #12
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	e7d6      	b.n	80060a2 <_free_r+0x22>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	1821      	adds	r1, r4, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf01      	itttt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	1809      	addeq	r1, r1, r0
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	6054      	str	r4, [r2, #4]
 8006108:	e7cb      	b.n	80060a2 <_free_r+0x22>
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20000388 	.word	0x20000388

08006110 <sbrk_aligned>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4e0e      	ldr	r6, [pc, #56]	; (800614c <sbrk_aligned+0x3c>)
 8006114:	460c      	mov	r4, r1
 8006116:	6831      	ldr	r1, [r6, #0]
 8006118:	4605      	mov	r5, r0
 800611a:	b911      	cbnz	r1, 8006122 <sbrk_aligned+0x12>
 800611c:	f000 f88c 	bl	8006238 <_sbrk_r>
 8006120:	6030      	str	r0, [r6, #0]
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f000 f887 	bl	8006238 <_sbrk_r>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d00a      	beq.n	8006144 <sbrk_aligned+0x34>
 800612e:	1cc4      	adds	r4, r0, #3
 8006130:	f024 0403 	bic.w	r4, r4, #3
 8006134:	42a0      	cmp	r0, r4
 8006136:	d007      	beq.n	8006148 <sbrk_aligned+0x38>
 8006138:	1a21      	subs	r1, r4, r0
 800613a:	4628      	mov	r0, r5
 800613c:	f000 f87c 	bl	8006238 <_sbrk_r>
 8006140:	3001      	adds	r0, #1
 8006142:	d101      	bne.n	8006148 <sbrk_aligned+0x38>
 8006144:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006148:	4620      	mov	r0, r4
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	2000038c 	.word	0x2000038c

08006150 <_malloc_r>:
 8006150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	1ccd      	adds	r5, r1, #3
 8006156:	f025 0503 	bic.w	r5, r5, #3
 800615a:	3508      	adds	r5, #8
 800615c:	2d0c      	cmp	r5, #12
 800615e:	bf38      	it	cc
 8006160:	250c      	movcc	r5, #12
 8006162:	2d00      	cmp	r5, #0
 8006164:	4607      	mov	r7, r0
 8006166:	db01      	blt.n	800616c <_malloc_r+0x1c>
 8006168:	42a9      	cmp	r1, r5
 800616a:	d905      	bls.n	8006178 <_malloc_r+0x28>
 800616c:	230c      	movs	r3, #12
 800616e:	2600      	movs	r6, #0
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4630      	mov	r0, r6
 8006174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006178:	4e2e      	ldr	r6, [pc, #184]	; (8006234 <_malloc_r+0xe4>)
 800617a:	f000 f8af 	bl	80062dc <__malloc_lock>
 800617e:	6833      	ldr	r3, [r6, #0]
 8006180:	461c      	mov	r4, r3
 8006182:	bb34      	cbnz	r4, 80061d2 <_malloc_r+0x82>
 8006184:	4629      	mov	r1, r5
 8006186:	4638      	mov	r0, r7
 8006188:	f7ff ffc2 	bl	8006110 <sbrk_aligned>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	4604      	mov	r4, r0
 8006190:	d14d      	bne.n	800622e <_malloc_r+0xde>
 8006192:	6834      	ldr	r4, [r6, #0]
 8006194:	4626      	mov	r6, r4
 8006196:	2e00      	cmp	r6, #0
 8006198:	d140      	bne.n	800621c <_malloc_r+0xcc>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	4631      	mov	r1, r6
 800619e:	4638      	mov	r0, r7
 80061a0:	eb04 0803 	add.w	r8, r4, r3
 80061a4:	f000 f848 	bl	8006238 <_sbrk_r>
 80061a8:	4580      	cmp	r8, r0
 80061aa:	d13a      	bne.n	8006222 <_malloc_r+0xd2>
 80061ac:	6821      	ldr	r1, [r4, #0]
 80061ae:	3503      	adds	r5, #3
 80061b0:	1a6d      	subs	r5, r5, r1
 80061b2:	f025 0503 	bic.w	r5, r5, #3
 80061b6:	3508      	adds	r5, #8
 80061b8:	2d0c      	cmp	r5, #12
 80061ba:	bf38      	it	cc
 80061bc:	250c      	movcc	r5, #12
 80061be:	4638      	mov	r0, r7
 80061c0:	4629      	mov	r1, r5
 80061c2:	f7ff ffa5 	bl	8006110 <sbrk_aligned>
 80061c6:	3001      	adds	r0, #1
 80061c8:	d02b      	beq.n	8006222 <_malloc_r+0xd2>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	442b      	add	r3, r5
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	e00e      	b.n	80061f0 <_malloc_r+0xa0>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	1b52      	subs	r2, r2, r5
 80061d6:	d41e      	bmi.n	8006216 <_malloc_r+0xc6>
 80061d8:	2a0b      	cmp	r2, #11
 80061da:	d916      	bls.n	800620a <_malloc_r+0xba>
 80061dc:	1961      	adds	r1, r4, r5
 80061de:	42a3      	cmp	r3, r4
 80061e0:	6025      	str	r5, [r4, #0]
 80061e2:	bf18      	it	ne
 80061e4:	6059      	strne	r1, [r3, #4]
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	bf08      	it	eq
 80061ea:	6031      	streq	r1, [r6, #0]
 80061ec:	5162      	str	r2, [r4, r5]
 80061ee:	604b      	str	r3, [r1, #4]
 80061f0:	4638      	mov	r0, r7
 80061f2:	f104 060b 	add.w	r6, r4, #11
 80061f6:	f000 f877 	bl	80062e8 <__malloc_unlock>
 80061fa:	f026 0607 	bic.w	r6, r6, #7
 80061fe:	1d23      	adds	r3, r4, #4
 8006200:	1af2      	subs	r2, r6, r3
 8006202:	d0b6      	beq.n	8006172 <_malloc_r+0x22>
 8006204:	1b9b      	subs	r3, r3, r6
 8006206:	50a3      	str	r3, [r4, r2]
 8006208:	e7b3      	b.n	8006172 <_malloc_r+0x22>
 800620a:	6862      	ldr	r2, [r4, #4]
 800620c:	42a3      	cmp	r3, r4
 800620e:	bf0c      	ite	eq
 8006210:	6032      	streq	r2, [r6, #0]
 8006212:	605a      	strne	r2, [r3, #4]
 8006214:	e7ec      	b.n	80061f0 <_malloc_r+0xa0>
 8006216:	4623      	mov	r3, r4
 8006218:	6864      	ldr	r4, [r4, #4]
 800621a:	e7b2      	b.n	8006182 <_malloc_r+0x32>
 800621c:	4634      	mov	r4, r6
 800621e:	6876      	ldr	r6, [r6, #4]
 8006220:	e7b9      	b.n	8006196 <_malloc_r+0x46>
 8006222:	230c      	movs	r3, #12
 8006224:	4638      	mov	r0, r7
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	f000 f85e 	bl	80062e8 <__malloc_unlock>
 800622c:	e7a1      	b.n	8006172 <_malloc_r+0x22>
 800622e:	6025      	str	r5, [r4, #0]
 8006230:	e7de      	b.n	80061f0 <_malloc_r+0xa0>
 8006232:	bf00      	nop
 8006234:	20000388 	.word	0x20000388

08006238 <_sbrk_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	2300      	movs	r3, #0
 800623c:	4d05      	ldr	r5, [pc, #20]	; (8006254 <_sbrk_r+0x1c>)
 800623e:	4604      	mov	r4, r0
 8006240:	4608      	mov	r0, r1
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	f7fb fe6a 	bl	8001f1c <_sbrk>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_sbrk_r+0x1a>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_sbrk_r+0x1a>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	20000390 	.word	0x20000390

08006258 <__assert_func>:
 8006258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800625a:	4614      	mov	r4, r2
 800625c:	461a      	mov	r2, r3
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <__assert_func+0x2c>)
 8006260:	4605      	mov	r5, r0
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68d8      	ldr	r0, [r3, #12]
 8006266:	b14c      	cbz	r4, 800627c <__assert_func+0x24>
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <__assert_func+0x30>)
 800626a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800626e:	9100      	str	r1, [sp, #0]
 8006270:	462b      	mov	r3, r5
 8006272:	4906      	ldr	r1, [pc, #24]	; (800628c <__assert_func+0x34>)
 8006274:	f000 f80e 	bl	8006294 <fiprintf>
 8006278:	f000 fa62 	bl	8006740 <abort>
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <__assert_func+0x38>)
 800627e:	461c      	mov	r4, r3
 8006280:	e7f3      	b.n	800626a <__assert_func+0x12>
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c
 8006288:	080075ec 	.word	0x080075ec
 800628c:	080075f9 	.word	0x080075f9
 8006290:	08007627 	.word	0x08007627

08006294 <fiprintf>:
 8006294:	b40e      	push	{r1, r2, r3}
 8006296:	b503      	push	{r0, r1, lr}
 8006298:	4601      	mov	r1, r0
 800629a:	ab03      	add	r3, sp, #12
 800629c:	4805      	ldr	r0, [pc, #20]	; (80062b4 <fiprintf+0x20>)
 800629e:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a2:	6800      	ldr	r0, [r0, #0]
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	f000 f84d 	bl	8006344 <_vfiprintf_r>
 80062aa:	b002      	add	sp, #8
 80062ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b0:	b003      	add	sp, #12
 80062b2:	4770      	bx	lr
 80062b4:	2000000c 	.word	0x2000000c

080062b8 <__ascii_mbtowc>:
 80062b8:	b082      	sub	sp, #8
 80062ba:	b901      	cbnz	r1, 80062be <__ascii_mbtowc+0x6>
 80062bc:	a901      	add	r1, sp, #4
 80062be:	b142      	cbz	r2, 80062d2 <__ascii_mbtowc+0x1a>
 80062c0:	b14b      	cbz	r3, 80062d6 <__ascii_mbtowc+0x1e>
 80062c2:	7813      	ldrb	r3, [r2, #0]
 80062c4:	600b      	str	r3, [r1, #0]
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	1e10      	subs	r0, r2, #0
 80062ca:	bf18      	it	ne
 80062cc:	2001      	movne	r0, #1
 80062ce:	b002      	add	sp, #8
 80062d0:	4770      	bx	lr
 80062d2:	4610      	mov	r0, r2
 80062d4:	e7fb      	b.n	80062ce <__ascii_mbtowc+0x16>
 80062d6:	f06f 0001 	mvn.w	r0, #1
 80062da:	e7f8      	b.n	80062ce <__ascii_mbtowc+0x16>

080062dc <__malloc_lock>:
 80062dc:	4801      	ldr	r0, [pc, #4]	; (80062e4 <__malloc_lock+0x8>)
 80062de:	f000 bbeb 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 80062e2:	bf00      	nop
 80062e4:	20000394 	.word	0x20000394

080062e8 <__malloc_unlock>:
 80062e8:	4801      	ldr	r0, [pc, #4]	; (80062f0 <__malloc_unlock+0x8>)
 80062ea:	f000 bbe6 	b.w	8006aba <__retarget_lock_release_recursive>
 80062ee:	bf00      	nop
 80062f0:	20000394 	.word	0x20000394

080062f4 <__sfputc_r>:
 80062f4:	6893      	ldr	r3, [r2, #8]
 80062f6:	b410      	push	{r4}
 80062f8:	3b01      	subs	r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	6093      	str	r3, [r2, #8]
 80062fe:	da07      	bge.n	8006310 <__sfputc_r+0x1c>
 8006300:	6994      	ldr	r4, [r2, #24]
 8006302:	42a3      	cmp	r3, r4
 8006304:	db01      	blt.n	800630a <__sfputc_r+0x16>
 8006306:	290a      	cmp	r1, #10
 8006308:	d102      	bne.n	8006310 <__sfputc_r+0x1c>
 800630a:	bc10      	pop	{r4}
 800630c:	f000 b94a 	b.w	80065a4 <__swbuf_r>
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	1c58      	adds	r0, r3, #1
 8006314:	6010      	str	r0, [r2, #0]
 8006316:	7019      	strb	r1, [r3, #0]
 8006318:	4608      	mov	r0, r1
 800631a:	bc10      	pop	{r4}
 800631c:	4770      	bx	lr

0800631e <__sfputs_r>:
 800631e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006320:	4606      	mov	r6, r0
 8006322:	460f      	mov	r7, r1
 8006324:	4614      	mov	r4, r2
 8006326:	18d5      	adds	r5, r2, r3
 8006328:	42ac      	cmp	r4, r5
 800632a:	d101      	bne.n	8006330 <__sfputs_r+0x12>
 800632c:	2000      	movs	r0, #0
 800632e:	e007      	b.n	8006340 <__sfputs_r+0x22>
 8006330:	463a      	mov	r2, r7
 8006332:	4630      	mov	r0, r6
 8006334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006338:	f7ff ffdc 	bl	80062f4 <__sfputc_r>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d1f3      	bne.n	8006328 <__sfputs_r+0xa>
 8006340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006344 <_vfiprintf_r>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	460d      	mov	r5, r1
 800634a:	4614      	mov	r4, r2
 800634c:	4698      	mov	r8, r3
 800634e:	4606      	mov	r6, r0
 8006350:	b09d      	sub	sp, #116	; 0x74
 8006352:	b118      	cbz	r0, 800635c <_vfiprintf_r+0x18>
 8006354:	6983      	ldr	r3, [r0, #24]
 8006356:	b90b      	cbnz	r3, 800635c <_vfiprintf_r+0x18>
 8006358:	f000 fb10 	bl	800697c <__sinit>
 800635c:	4b89      	ldr	r3, [pc, #548]	; (8006584 <_vfiprintf_r+0x240>)
 800635e:	429d      	cmp	r5, r3
 8006360:	d11b      	bne.n	800639a <_vfiprintf_r+0x56>
 8006362:	6875      	ldr	r5, [r6, #4]
 8006364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	d405      	bmi.n	8006376 <_vfiprintf_r+0x32>
 800636a:	89ab      	ldrh	r3, [r5, #12]
 800636c:	059a      	lsls	r2, r3, #22
 800636e:	d402      	bmi.n	8006376 <_vfiprintf_r+0x32>
 8006370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006372:	f000 fba1 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	071b      	lsls	r3, r3, #28
 800637a:	d501      	bpl.n	8006380 <_vfiprintf_r+0x3c>
 800637c:	692b      	ldr	r3, [r5, #16]
 800637e:	b9eb      	cbnz	r3, 80063bc <_vfiprintf_r+0x78>
 8006380:	4629      	mov	r1, r5
 8006382:	4630      	mov	r0, r6
 8006384:	f000 f96e 	bl	8006664 <__swsetup_r>
 8006388:	b1c0      	cbz	r0, 80063bc <_vfiprintf_r+0x78>
 800638a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800638c:	07dc      	lsls	r4, r3, #31
 800638e:	d50e      	bpl.n	80063ae <_vfiprintf_r+0x6a>
 8006390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006394:	b01d      	add	sp, #116	; 0x74
 8006396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639a:	4b7b      	ldr	r3, [pc, #492]	; (8006588 <_vfiprintf_r+0x244>)
 800639c:	429d      	cmp	r5, r3
 800639e:	d101      	bne.n	80063a4 <_vfiprintf_r+0x60>
 80063a0:	68b5      	ldr	r5, [r6, #8]
 80063a2:	e7df      	b.n	8006364 <_vfiprintf_r+0x20>
 80063a4:	4b79      	ldr	r3, [pc, #484]	; (800658c <_vfiprintf_r+0x248>)
 80063a6:	429d      	cmp	r5, r3
 80063a8:	bf08      	it	eq
 80063aa:	68f5      	ldreq	r5, [r6, #12]
 80063ac:	e7da      	b.n	8006364 <_vfiprintf_r+0x20>
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	0598      	lsls	r0, r3, #22
 80063b2:	d4ed      	bmi.n	8006390 <_vfiprintf_r+0x4c>
 80063b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063b6:	f000 fb80 	bl	8006aba <__retarget_lock_release_recursive>
 80063ba:	e7e9      	b.n	8006390 <_vfiprintf_r+0x4c>
 80063bc:	2300      	movs	r3, #0
 80063be:	9309      	str	r3, [sp, #36]	; 0x24
 80063c0:	2320      	movs	r3, #32
 80063c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063c6:	2330      	movs	r3, #48	; 0x30
 80063c8:	f04f 0901 	mov.w	r9, #1
 80063cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80063d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006590 <_vfiprintf_r+0x24c>
 80063d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063d8:	4623      	mov	r3, r4
 80063da:	469a      	mov	sl, r3
 80063dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063e0:	b10a      	cbz	r2, 80063e6 <_vfiprintf_r+0xa2>
 80063e2:	2a25      	cmp	r2, #37	; 0x25
 80063e4:	d1f9      	bne.n	80063da <_vfiprintf_r+0x96>
 80063e6:	ebba 0b04 	subs.w	fp, sl, r4
 80063ea:	d00b      	beq.n	8006404 <_vfiprintf_r+0xc0>
 80063ec:	465b      	mov	r3, fp
 80063ee:	4622      	mov	r2, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff ff93 	bl	800631e <__sfputs_r>
 80063f8:	3001      	adds	r0, #1
 80063fa:	f000 80aa 	beq.w	8006552 <_vfiprintf_r+0x20e>
 80063fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006400:	445a      	add	r2, fp
 8006402:	9209      	str	r2, [sp, #36]	; 0x24
 8006404:	f89a 3000 	ldrb.w	r3, [sl]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80a2 	beq.w	8006552 <_vfiprintf_r+0x20e>
 800640e:	2300      	movs	r3, #0
 8006410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006418:	f10a 0a01 	add.w	sl, sl, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006424:	931a      	str	r3, [sp, #104]	; 0x68
 8006426:	4654      	mov	r4, sl
 8006428:	2205      	movs	r2, #5
 800642a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642e:	4858      	ldr	r0, [pc, #352]	; (8006590 <_vfiprintf_r+0x24c>)
 8006430:	f7ff fa74 	bl	800591c <memchr>
 8006434:	9a04      	ldr	r2, [sp, #16]
 8006436:	b9d8      	cbnz	r0, 8006470 <_vfiprintf_r+0x12c>
 8006438:	06d1      	lsls	r1, r2, #27
 800643a:	bf44      	itt	mi
 800643c:	2320      	movmi	r3, #32
 800643e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006442:	0713      	lsls	r3, r2, #28
 8006444:	bf44      	itt	mi
 8006446:	232b      	movmi	r3, #43	; 0x2b
 8006448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800644c:	f89a 3000 	ldrb.w	r3, [sl]
 8006450:	2b2a      	cmp	r3, #42	; 0x2a
 8006452:	d015      	beq.n	8006480 <_vfiprintf_r+0x13c>
 8006454:	4654      	mov	r4, sl
 8006456:	2000      	movs	r0, #0
 8006458:	f04f 0c0a 	mov.w	ip, #10
 800645c:	9a07      	ldr	r2, [sp, #28]
 800645e:	4621      	mov	r1, r4
 8006460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006464:	3b30      	subs	r3, #48	; 0x30
 8006466:	2b09      	cmp	r3, #9
 8006468:	d94e      	bls.n	8006508 <_vfiprintf_r+0x1c4>
 800646a:	b1b0      	cbz	r0, 800649a <_vfiprintf_r+0x156>
 800646c:	9207      	str	r2, [sp, #28]
 800646e:	e014      	b.n	800649a <_vfiprintf_r+0x156>
 8006470:	eba0 0308 	sub.w	r3, r0, r8
 8006474:	fa09 f303 	lsl.w	r3, r9, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	46a2      	mov	sl, r4
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	e7d2      	b.n	8006426 <_vfiprintf_r+0xe2>
 8006480:	9b03      	ldr	r3, [sp, #12]
 8006482:	1d19      	adds	r1, r3, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	9103      	str	r1, [sp, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	bfbb      	ittet	lt
 800648c:	425b      	neglt	r3, r3
 800648e:	f042 0202 	orrlt.w	r2, r2, #2
 8006492:	9307      	strge	r3, [sp, #28]
 8006494:	9307      	strlt	r3, [sp, #28]
 8006496:	bfb8      	it	lt
 8006498:	9204      	strlt	r2, [sp, #16]
 800649a:	7823      	ldrb	r3, [r4, #0]
 800649c:	2b2e      	cmp	r3, #46	; 0x2e
 800649e:	d10c      	bne.n	80064ba <_vfiprintf_r+0x176>
 80064a0:	7863      	ldrb	r3, [r4, #1]
 80064a2:	2b2a      	cmp	r3, #42	; 0x2a
 80064a4:	d135      	bne.n	8006512 <_vfiprintf_r+0x1ce>
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	3402      	adds	r4, #2
 80064aa:	1d1a      	adds	r2, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	9203      	str	r2, [sp, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfb8      	it	lt
 80064b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006594 <_vfiprintf_r+0x250>
 80064be:	2203      	movs	r2, #3
 80064c0:	4650      	mov	r0, sl
 80064c2:	7821      	ldrb	r1, [r4, #0]
 80064c4:	f7ff fa2a 	bl	800591c <memchr>
 80064c8:	b140      	cbz	r0, 80064dc <_vfiprintf_r+0x198>
 80064ca:	2340      	movs	r3, #64	; 0x40
 80064cc:	eba0 000a 	sub.w	r0, r0, sl
 80064d0:	fa03 f000 	lsl.w	r0, r3, r0
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	3401      	adds	r4, #1
 80064d8:	4303      	orrs	r3, r0
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e0:	2206      	movs	r2, #6
 80064e2:	482d      	ldr	r0, [pc, #180]	; (8006598 <_vfiprintf_r+0x254>)
 80064e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064e8:	f7ff fa18 	bl	800591c <memchr>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d03f      	beq.n	8006570 <_vfiprintf_r+0x22c>
 80064f0:	4b2a      	ldr	r3, [pc, #168]	; (800659c <_vfiprintf_r+0x258>)
 80064f2:	bb1b      	cbnz	r3, 800653c <_vfiprintf_r+0x1f8>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	3307      	adds	r3, #7
 80064f8:	f023 0307 	bic.w	r3, r3, #7
 80064fc:	3308      	adds	r3, #8
 80064fe:	9303      	str	r3, [sp, #12]
 8006500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006502:	443b      	add	r3, r7
 8006504:	9309      	str	r3, [sp, #36]	; 0x24
 8006506:	e767      	b.n	80063d8 <_vfiprintf_r+0x94>
 8006508:	460c      	mov	r4, r1
 800650a:	2001      	movs	r0, #1
 800650c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006510:	e7a5      	b.n	800645e <_vfiprintf_r+0x11a>
 8006512:	2300      	movs	r3, #0
 8006514:	f04f 0c0a 	mov.w	ip, #10
 8006518:	4619      	mov	r1, r3
 800651a:	3401      	adds	r4, #1
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	4620      	mov	r0, r4
 8006520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006524:	3a30      	subs	r2, #48	; 0x30
 8006526:	2a09      	cmp	r2, #9
 8006528:	d903      	bls.n	8006532 <_vfiprintf_r+0x1ee>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0c5      	beq.n	80064ba <_vfiprintf_r+0x176>
 800652e:	9105      	str	r1, [sp, #20]
 8006530:	e7c3      	b.n	80064ba <_vfiprintf_r+0x176>
 8006532:	4604      	mov	r4, r0
 8006534:	2301      	movs	r3, #1
 8006536:	fb0c 2101 	mla	r1, ip, r1, r2
 800653a:	e7f0      	b.n	800651e <_vfiprintf_r+0x1da>
 800653c:	ab03      	add	r3, sp, #12
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	462a      	mov	r2, r5
 8006542:	4630      	mov	r0, r6
 8006544:	4b16      	ldr	r3, [pc, #88]	; (80065a0 <_vfiprintf_r+0x25c>)
 8006546:	a904      	add	r1, sp, #16
 8006548:	f7fd ff9e 	bl	8004488 <_printf_float>
 800654c:	4607      	mov	r7, r0
 800654e:	1c78      	adds	r0, r7, #1
 8006550:	d1d6      	bne.n	8006500 <_vfiprintf_r+0x1bc>
 8006552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006554:	07d9      	lsls	r1, r3, #31
 8006556:	d405      	bmi.n	8006564 <_vfiprintf_r+0x220>
 8006558:	89ab      	ldrh	r3, [r5, #12]
 800655a:	059a      	lsls	r2, r3, #22
 800655c:	d402      	bmi.n	8006564 <_vfiprintf_r+0x220>
 800655e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006560:	f000 faab 	bl	8006aba <__retarget_lock_release_recursive>
 8006564:	89ab      	ldrh	r3, [r5, #12]
 8006566:	065b      	lsls	r3, r3, #25
 8006568:	f53f af12 	bmi.w	8006390 <_vfiprintf_r+0x4c>
 800656c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800656e:	e711      	b.n	8006394 <_vfiprintf_r+0x50>
 8006570:	ab03      	add	r3, sp, #12
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	462a      	mov	r2, r5
 8006576:	4630      	mov	r0, r6
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <_vfiprintf_r+0x25c>)
 800657a:	a904      	add	r1, sp, #16
 800657c:	f7fe fa20 	bl	80049c0 <_printf_i>
 8006580:	e7e4      	b.n	800654c <_vfiprintf_r+0x208>
 8006582:	bf00      	nop
 8006584:	08007764 	.word	0x08007764
 8006588:	08007784 	.word	0x08007784
 800658c:	08007744 	.word	0x08007744
 8006590:	08007632 	.word	0x08007632
 8006594:	08007638 	.word	0x08007638
 8006598:	0800763c 	.word	0x0800763c
 800659c:	08004489 	.word	0x08004489
 80065a0:	0800631f 	.word	0x0800631f

080065a4 <__swbuf_r>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	460e      	mov	r6, r1
 80065a8:	4614      	mov	r4, r2
 80065aa:	4605      	mov	r5, r0
 80065ac:	b118      	cbz	r0, 80065b6 <__swbuf_r+0x12>
 80065ae:	6983      	ldr	r3, [r0, #24]
 80065b0:	b90b      	cbnz	r3, 80065b6 <__swbuf_r+0x12>
 80065b2:	f000 f9e3 	bl	800697c <__sinit>
 80065b6:	4b21      	ldr	r3, [pc, #132]	; (800663c <__swbuf_r+0x98>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	d12b      	bne.n	8006614 <__swbuf_r+0x70>
 80065bc:	686c      	ldr	r4, [r5, #4]
 80065be:	69a3      	ldr	r3, [r4, #24]
 80065c0:	60a3      	str	r3, [r4, #8]
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	071a      	lsls	r2, r3, #28
 80065c6:	d52f      	bpl.n	8006628 <__swbuf_r+0x84>
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	b36b      	cbz	r3, 8006628 <__swbuf_r+0x84>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	6820      	ldr	r0, [r4, #0]
 80065d0:	b2f6      	uxtb	r6, r6
 80065d2:	1ac0      	subs	r0, r0, r3
 80065d4:	6963      	ldr	r3, [r4, #20]
 80065d6:	4637      	mov	r7, r6
 80065d8:	4283      	cmp	r3, r0
 80065da:	dc04      	bgt.n	80065e6 <__swbuf_r+0x42>
 80065dc:	4621      	mov	r1, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 f938 	bl	8006854 <_fflush_r>
 80065e4:	bb30      	cbnz	r0, 8006634 <__swbuf_r+0x90>
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	3001      	adds	r0, #1
 80065ea:	3b01      	subs	r3, #1
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	701e      	strb	r6, [r3, #0]
 80065f6:	6963      	ldr	r3, [r4, #20]
 80065f8:	4283      	cmp	r3, r0
 80065fa:	d004      	beq.n	8006606 <__swbuf_r+0x62>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	07db      	lsls	r3, r3, #31
 8006600:	d506      	bpl.n	8006610 <__swbuf_r+0x6c>
 8006602:	2e0a      	cmp	r6, #10
 8006604:	d104      	bne.n	8006610 <__swbuf_r+0x6c>
 8006606:	4621      	mov	r1, r4
 8006608:	4628      	mov	r0, r5
 800660a:	f000 f923 	bl	8006854 <_fflush_r>
 800660e:	b988      	cbnz	r0, 8006634 <__swbuf_r+0x90>
 8006610:	4638      	mov	r0, r7
 8006612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <__swbuf_r+0x9c>)
 8006616:	429c      	cmp	r4, r3
 8006618:	d101      	bne.n	800661e <__swbuf_r+0x7a>
 800661a:	68ac      	ldr	r4, [r5, #8]
 800661c:	e7cf      	b.n	80065be <__swbuf_r+0x1a>
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <__swbuf_r+0xa0>)
 8006620:	429c      	cmp	r4, r3
 8006622:	bf08      	it	eq
 8006624:	68ec      	ldreq	r4, [r5, #12]
 8006626:	e7ca      	b.n	80065be <__swbuf_r+0x1a>
 8006628:	4621      	mov	r1, r4
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f81a 	bl	8006664 <__swsetup_r>
 8006630:	2800      	cmp	r0, #0
 8006632:	d0cb      	beq.n	80065cc <__swbuf_r+0x28>
 8006634:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006638:	e7ea      	b.n	8006610 <__swbuf_r+0x6c>
 800663a:	bf00      	nop
 800663c:	08007764 	.word	0x08007764
 8006640:	08007784 	.word	0x08007784
 8006644:	08007744 	.word	0x08007744

08006648 <__ascii_wctomb>:
 8006648:	4603      	mov	r3, r0
 800664a:	4608      	mov	r0, r1
 800664c:	b141      	cbz	r1, 8006660 <__ascii_wctomb+0x18>
 800664e:	2aff      	cmp	r2, #255	; 0xff
 8006650:	d904      	bls.n	800665c <__ascii_wctomb+0x14>
 8006652:	228a      	movs	r2, #138	; 0x8a
 8006654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	4770      	bx	lr
 800665c:	2001      	movs	r0, #1
 800665e:	700a      	strb	r2, [r1, #0]
 8006660:	4770      	bx	lr
	...

08006664 <__swsetup_r>:
 8006664:	4b32      	ldr	r3, [pc, #200]	; (8006730 <__swsetup_r+0xcc>)
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	4606      	mov	r6, r0
 800666c:	460c      	mov	r4, r1
 800666e:	b125      	cbz	r5, 800667a <__swsetup_r+0x16>
 8006670:	69ab      	ldr	r3, [r5, #24]
 8006672:	b913      	cbnz	r3, 800667a <__swsetup_r+0x16>
 8006674:	4628      	mov	r0, r5
 8006676:	f000 f981 	bl	800697c <__sinit>
 800667a:	4b2e      	ldr	r3, [pc, #184]	; (8006734 <__swsetup_r+0xd0>)
 800667c:	429c      	cmp	r4, r3
 800667e:	d10f      	bne.n	80066a0 <__swsetup_r+0x3c>
 8006680:	686c      	ldr	r4, [r5, #4]
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006688:	0719      	lsls	r1, r3, #28
 800668a:	d42c      	bmi.n	80066e6 <__swsetup_r+0x82>
 800668c:	06dd      	lsls	r5, r3, #27
 800668e:	d411      	bmi.n	80066b4 <__swsetup_r+0x50>
 8006690:	2309      	movs	r3, #9
 8006692:	6033      	str	r3, [r6, #0]
 8006694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	e03e      	b.n	800671e <__swsetup_r+0xba>
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <__swsetup_r+0xd4>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	d101      	bne.n	80066aa <__swsetup_r+0x46>
 80066a6:	68ac      	ldr	r4, [r5, #8]
 80066a8:	e7eb      	b.n	8006682 <__swsetup_r+0x1e>
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <__swsetup_r+0xd8>)
 80066ac:	429c      	cmp	r4, r3
 80066ae:	bf08      	it	eq
 80066b0:	68ec      	ldreq	r4, [r5, #12]
 80066b2:	e7e6      	b.n	8006682 <__swsetup_r+0x1e>
 80066b4:	0758      	lsls	r0, r3, #29
 80066b6:	d512      	bpl.n	80066de <__swsetup_r+0x7a>
 80066b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ba:	b141      	cbz	r1, 80066ce <__swsetup_r+0x6a>
 80066bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d002      	beq.n	80066ca <__swsetup_r+0x66>
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7ff fcdb 	bl	8006080 <_free_r>
 80066ca:	2300      	movs	r3, #0
 80066cc:	6363      	str	r3, [r4, #52]	; 0x34
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	2300      	movs	r3, #0
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f043 0308 	orr.w	r3, r3, #8
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	b94b      	cbnz	r3, 80066fe <__swsetup_r+0x9a>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f4:	d003      	beq.n	80066fe <__swsetup_r+0x9a>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 fa05 	bl	8006b08 <__smakebuf_r>
 80066fe:	89a0      	ldrh	r0, [r4, #12]
 8006700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006704:	f010 0301 	ands.w	r3, r0, #1
 8006708:	d00a      	beq.n	8006720 <__swsetup_r+0xbc>
 800670a:	2300      	movs	r3, #0
 800670c:	60a3      	str	r3, [r4, #8]
 800670e:	6963      	ldr	r3, [r4, #20]
 8006710:	425b      	negs	r3, r3
 8006712:	61a3      	str	r3, [r4, #24]
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	b943      	cbnz	r3, 800672a <__swsetup_r+0xc6>
 8006718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800671c:	d1ba      	bne.n	8006694 <__swsetup_r+0x30>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	0781      	lsls	r1, r0, #30
 8006722:	bf58      	it	pl
 8006724:	6963      	ldrpl	r3, [r4, #20]
 8006726:	60a3      	str	r3, [r4, #8]
 8006728:	e7f4      	b.n	8006714 <__swsetup_r+0xb0>
 800672a:	2000      	movs	r0, #0
 800672c:	e7f7      	b.n	800671e <__swsetup_r+0xba>
 800672e:	bf00      	nop
 8006730:	2000000c 	.word	0x2000000c
 8006734:	08007764 	.word	0x08007764
 8006738:	08007784 	.word	0x08007784
 800673c:	08007744 	.word	0x08007744

08006740 <abort>:
 8006740:	2006      	movs	r0, #6
 8006742:	b508      	push	{r3, lr}
 8006744:	f000 fa48 	bl	8006bd8 <raise>
 8006748:	2001      	movs	r0, #1
 800674a:	f7fb fb74 	bl	8001e36 <_exit>
	...

08006750 <__sflush_r>:
 8006750:	898a      	ldrh	r2, [r1, #12]
 8006752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006754:	4605      	mov	r5, r0
 8006756:	0710      	lsls	r0, r2, #28
 8006758:	460c      	mov	r4, r1
 800675a:	d457      	bmi.n	800680c <__sflush_r+0xbc>
 800675c:	684b      	ldr	r3, [r1, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	dc04      	bgt.n	800676c <__sflush_r+0x1c>
 8006762:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	dc01      	bgt.n	800676c <__sflush_r+0x1c>
 8006768:	2000      	movs	r0, #0
 800676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800676c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800676e:	2e00      	cmp	r6, #0
 8006770:	d0fa      	beq.n	8006768 <__sflush_r+0x18>
 8006772:	2300      	movs	r3, #0
 8006774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006778:	682f      	ldr	r7, [r5, #0]
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	d032      	beq.n	80067e4 <__sflush_r+0x94>
 800677e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	075a      	lsls	r2, r3, #29
 8006784:	d505      	bpl.n	8006792 <__sflush_r+0x42>
 8006786:	6863      	ldr	r3, [r4, #4]
 8006788:	1ac0      	subs	r0, r0, r3
 800678a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800678c:	b10b      	cbz	r3, 8006792 <__sflush_r+0x42>
 800678e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006790:	1ac0      	subs	r0, r0, r3
 8006792:	2300      	movs	r3, #0
 8006794:	4602      	mov	r2, r0
 8006796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006798:	4628      	mov	r0, r5
 800679a:	6a21      	ldr	r1, [r4, #32]
 800679c:	47b0      	blx	r6
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	d106      	bne.n	80067b2 <__sflush_r+0x62>
 80067a4:	6829      	ldr	r1, [r5, #0]
 80067a6:	291d      	cmp	r1, #29
 80067a8:	d82c      	bhi.n	8006804 <__sflush_r+0xb4>
 80067aa:	4a29      	ldr	r2, [pc, #164]	; (8006850 <__sflush_r+0x100>)
 80067ac:	40ca      	lsrs	r2, r1
 80067ae:	07d6      	lsls	r6, r2, #31
 80067b0:	d528      	bpl.n	8006804 <__sflush_r+0xb4>
 80067b2:	2200      	movs	r2, #0
 80067b4:	6062      	str	r2, [r4, #4]
 80067b6:	6922      	ldr	r2, [r4, #16]
 80067b8:	04d9      	lsls	r1, r3, #19
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	d504      	bpl.n	80067c8 <__sflush_r+0x78>
 80067be:	1c42      	adds	r2, r0, #1
 80067c0:	d101      	bne.n	80067c6 <__sflush_r+0x76>
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	b903      	cbnz	r3, 80067c8 <__sflush_r+0x78>
 80067c6:	6560      	str	r0, [r4, #84]	; 0x54
 80067c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ca:	602f      	str	r7, [r5, #0]
 80067cc:	2900      	cmp	r1, #0
 80067ce:	d0cb      	beq.n	8006768 <__sflush_r+0x18>
 80067d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d4:	4299      	cmp	r1, r3
 80067d6:	d002      	beq.n	80067de <__sflush_r+0x8e>
 80067d8:	4628      	mov	r0, r5
 80067da:	f7ff fc51 	bl	8006080 <_free_r>
 80067de:	2000      	movs	r0, #0
 80067e0:	6360      	str	r0, [r4, #52]	; 0x34
 80067e2:	e7c2      	b.n	800676a <__sflush_r+0x1a>
 80067e4:	6a21      	ldr	r1, [r4, #32]
 80067e6:	2301      	movs	r3, #1
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b0      	blx	r6
 80067ec:	1c41      	adds	r1, r0, #1
 80067ee:	d1c7      	bne.n	8006780 <__sflush_r+0x30>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0c4      	beq.n	8006780 <__sflush_r+0x30>
 80067f6:	2b1d      	cmp	r3, #29
 80067f8:	d001      	beq.n	80067fe <__sflush_r+0xae>
 80067fa:	2b16      	cmp	r3, #22
 80067fc:	d101      	bne.n	8006802 <__sflush_r+0xb2>
 80067fe:	602f      	str	r7, [r5, #0]
 8006800:	e7b2      	b.n	8006768 <__sflush_r+0x18>
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	e7ae      	b.n	800676a <__sflush_r+0x1a>
 800680c:	690f      	ldr	r7, [r1, #16]
 800680e:	2f00      	cmp	r7, #0
 8006810:	d0aa      	beq.n	8006768 <__sflush_r+0x18>
 8006812:	0793      	lsls	r3, r2, #30
 8006814:	bf18      	it	ne
 8006816:	2300      	movne	r3, #0
 8006818:	680e      	ldr	r6, [r1, #0]
 800681a:	bf08      	it	eq
 800681c:	694b      	ldreq	r3, [r1, #20]
 800681e:	1bf6      	subs	r6, r6, r7
 8006820:	600f      	str	r7, [r1, #0]
 8006822:	608b      	str	r3, [r1, #8]
 8006824:	2e00      	cmp	r6, #0
 8006826:	dd9f      	ble.n	8006768 <__sflush_r+0x18>
 8006828:	4633      	mov	r3, r6
 800682a:	463a      	mov	r2, r7
 800682c:	4628      	mov	r0, r5
 800682e:	6a21      	ldr	r1, [r4, #32]
 8006830:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006834:	47e0      	blx	ip
 8006836:	2800      	cmp	r0, #0
 8006838:	dc06      	bgt.n	8006848 <__sflush_r+0xf8>
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	e790      	b.n	800676a <__sflush_r+0x1a>
 8006848:	4407      	add	r7, r0
 800684a:	1a36      	subs	r6, r6, r0
 800684c:	e7ea      	b.n	8006824 <__sflush_r+0xd4>
 800684e:	bf00      	nop
 8006850:	20400001 	.word	0x20400001

08006854 <_fflush_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b913      	cbnz	r3, 8006864 <_fflush_r+0x10>
 800685e:	2500      	movs	r5, #0
 8006860:	4628      	mov	r0, r5
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	b118      	cbz	r0, 800686e <_fflush_r+0x1a>
 8006866:	6983      	ldr	r3, [r0, #24]
 8006868:	b90b      	cbnz	r3, 800686e <_fflush_r+0x1a>
 800686a:	f000 f887 	bl	800697c <__sinit>
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <_fflush_r+0x6c>)
 8006870:	429c      	cmp	r4, r3
 8006872:	d11b      	bne.n	80068ac <_fflush_r+0x58>
 8006874:	686c      	ldr	r4, [r5, #4]
 8006876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ef      	beq.n	800685e <_fflush_r+0xa>
 800687e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006880:	07d0      	lsls	r0, r2, #31
 8006882:	d404      	bmi.n	800688e <_fflush_r+0x3a>
 8006884:	0599      	lsls	r1, r3, #22
 8006886:	d402      	bmi.n	800688e <_fflush_r+0x3a>
 8006888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688a:	f000 f915 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 800688e:	4628      	mov	r0, r5
 8006890:	4621      	mov	r1, r4
 8006892:	f7ff ff5d 	bl	8006750 <__sflush_r>
 8006896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006898:	4605      	mov	r5, r0
 800689a:	07da      	lsls	r2, r3, #31
 800689c:	d4e0      	bmi.n	8006860 <_fflush_r+0xc>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	059b      	lsls	r3, r3, #22
 80068a2:	d4dd      	bmi.n	8006860 <_fflush_r+0xc>
 80068a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068a6:	f000 f908 	bl	8006aba <__retarget_lock_release_recursive>
 80068aa:	e7d9      	b.n	8006860 <_fflush_r+0xc>
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <_fflush_r+0x70>)
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d101      	bne.n	80068b6 <_fflush_r+0x62>
 80068b2:	68ac      	ldr	r4, [r5, #8]
 80068b4:	e7df      	b.n	8006876 <_fflush_r+0x22>
 80068b6:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <_fflush_r+0x74>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	bf08      	it	eq
 80068bc:	68ec      	ldreq	r4, [r5, #12]
 80068be:	e7da      	b.n	8006876 <_fflush_r+0x22>
 80068c0:	08007764 	.word	0x08007764
 80068c4:	08007784 	.word	0x08007784
 80068c8:	08007744 	.word	0x08007744

080068cc <std>:
 80068cc:	2300      	movs	r3, #0
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
 80068d2:	e9c0 3300 	strd	r3, r3, [r0]
 80068d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068da:	6083      	str	r3, [r0, #8]
 80068dc:	8181      	strh	r1, [r0, #12]
 80068de:	6643      	str	r3, [r0, #100]	; 0x64
 80068e0:	81c2      	strh	r2, [r0, #14]
 80068e2:	6183      	str	r3, [r0, #24]
 80068e4:	4619      	mov	r1, r3
 80068e6:	2208      	movs	r2, #8
 80068e8:	305c      	adds	r0, #92	; 0x5c
 80068ea:	f7fd fd27 	bl	800433c <memset>
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x38>)
 80068f0:	6224      	str	r4, [r4, #32]
 80068f2:	6263      	str	r3, [r4, #36]	; 0x24
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <std+0x3c>)
 80068f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <std+0x40>)
 80068fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068fc:	4b04      	ldr	r3, [pc, #16]	; (8006910 <std+0x44>)
 80068fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	08006c11 	.word	0x08006c11
 8006908:	08006c33 	.word	0x08006c33
 800690c:	08006c6b 	.word	0x08006c6b
 8006910:	08006c8f 	.word	0x08006c8f

08006914 <_cleanup_r>:
 8006914:	4901      	ldr	r1, [pc, #4]	; (800691c <_cleanup_r+0x8>)
 8006916:	f000 b8af 	b.w	8006a78 <_fwalk_reent>
 800691a:	bf00      	nop
 800691c:	08006855 	.word	0x08006855

08006920 <__sfmoreglue>:
 8006920:	2268      	movs	r2, #104	; 0x68
 8006922:	b570      	push	{r4, r5, r6, lr}
 8006924:	1e4d      	subs	r5, r1, #1
 8006926:	4355      	muls	r5, r2
 8006928:	460e      	mov	r6, r1
 800692a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800692e:	f7ff fc0f 	bl	8006150 <_malloc_r>
 8006932:	4604      	mov	r4, r0
 8006934:	b140      	cbz	r0, 8006948 <__sfmoreglue+0x28>
 8006936:	2100      	movs	r1, #0
 8006938:	e9c0 1600 	strd	r1, r6, [r0]
 800693c:	300c      	adds	r0, #12
 800693e:	60a0      	str	r0, [r4, #8]
 8006940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006944:	f7fd fcfa 	bl	800433c <memset>
 8006948:	4620      	mov	r0, r4
 800694a:	bd70      	pop	{r4, r5, r6, pc}

0800694c <__sfp_lock_acquire>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__sfp_lock_acquire+0x8>)
 800694e:	f000 b8b3 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	20000395 	.word	0x20000395

08006958 <__sfp_lock_release>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__sfp_lock_release+0x8>)
 800695a:	f000 b8ae 	b.w	8006aba <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	20000395 	.word	0x20000395

08006964 <__sinit_lock_acquire>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__sinit_lock_acquire+0x8>)
 8006966:	f000 b8a7 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 800696a:	bf00      	nop
 800696c:	20000396 	.word	0x20000396

08006970 <__sinit_lock_release>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__sinit_lock_release+0x8>)
 8006972:	f000 b8a2 	b.w	8006aba <__retarget_lock_release_recursive>
 8006976:	bf00      	nop
 8006978:	20000396 	.word	0x20000396

0800697c <__sinit>:
 800697c:	b510      	push	{r4, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	f7ff fff0 	bl	8006964 <__sinit_lock_acquire>
 8006984:	69a3      	ldr	r3, [r4, #24]
 8006986:	b11b      	cbz	r3, 8006990 <__sinit+0x14>
 8006988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698c:	f7ff bff0 	b.w	8006970 <__sinit_lock_release>
 8006990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006994:	6523      	str	r3, [r4, #80]	; 0x50
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <__sinit+0x68>)
 8006998:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <__sinit+0x6c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	62a2      	str	r2, [r4, #40]	; 0x28
 800699e:	42a3      	cmp	r3, r4
 80069a0:	bf08      	it	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	4620      	mov	r0, r4
 80069a6:	bf08      	it	eq
 80069a8:	61a3      	streq	r3, [r4, #24]
 80069aa:	f000 f81f 	bl	80069ec <__sfp>
 80069ae:	6060      	str	r0, [r4, #4]
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 f81b 	bl	80069ec <__sfp>
 80069b6:	60a0      	str	r0, [r4, #8]
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f817 	bl	80069ec <__sfp>
 80069be:	2200      	movs	r2, #0
 80069c0:	2104      	movs	r1, #4
 80069c2:	60e0      	str	r0, [r4, #12]
 80069c4:	6860      	ldr	r0, [r4, #4]
 80069c6:	f7ff ff81 	bl	80068cc <std>
 80069ca:	2201      	movs	r2, #1
 80069cc:	2109      	movs	r1, #9
 80069ce:	68a0      	ldr	r0, [r4, #8]
 80069d0:	f7ff ff7c 	bl	80068cc <std>
 80069d4:	2202      	movs	r2, #2
 80069d6:	2112      	movs	r1, #18
 80069d8:	68e0      	ldr	r0, [r4, #12]
 80069da:	f7ff ff77 	bl	80068cc <std>
 80069de:	2301      	movs	r3, #1
 80069e0:	61a3      	str	r3, [r4, #24]
 80069e2:	e7d1      	b.n	8006988 <__sinit+0xc>
 80069e4:	080073c8 	.word	0x080073c8
 80069e8:	08006915 	.word	0x08006915

080069ec <__sfp>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	4607      	mov	r7, r0
 80069f0:	f7ff ffac 	bl	800694c <__sfp_lock_acquire>
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <__sfp+0x84>)
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	69b3      	ldr	r3, [r6, #24]
 80069fa:	b913      	cbnz	r3, 8006a02 <__sfp+0x16>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff ffbd 	bl	800697c <__sinit>
 8006a02:	3648      	adds	r6, #72	; 0x48
 8006a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	d503      	bpl.n	8006a14 <__sfp+0x28>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	b30b      	cbz	r3, 8006a54 <__sfp+0x68>
 8006a10:	6836      	ldr	r6, [r6, #0]
 8006a12:	e7f7      	b.n	8006a04 <__sfp+0x18>
 8006a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a18:	b9d5      	cbnz	r5, 8006a50 <__sfp+0x64>
 8006a1a:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <__sfp+0x88>)
 8006a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a20:	60e3      	str	r3, [r4, #12]
 8006a22:	6665      	str	r5, [r4, #100]	; 0x64
 8006a24:	f000 f847 	bl	8006ab6 <__retarget_lock_init_recursive>
 8006a28:	f7ff ff96 	bl	8006958 <__sfp_lock_release>
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	4629      	mov	r1, r5
 8006a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a38:	6025      	str	r5, [r4, #0]
 8006a3a:	61a5      	str	r5, [r4, #24]
 8006a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a40:	f7fd fc7c 	bl	800433c <memset>
 8006a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	3468      	adds	r4, #104	; 0x68
 8006a52:	e7d9      	b.n	8006a08 <__sfp+0x1c>
 8006a54:	2104      	movs	r1, #4
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff ff62 	bl	8006920 <__sfmoreglue>
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	6030      	str	r0, [r6, #0]
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1d5      	bne.n	8006a10 <__sfp+0x24>
 8006a64:	f7ff ff78 	bl	8006958 <__sfp_lock_release>
 8006a68:	230c      	movs	r3, #12
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	e7ee      	b.n	8006a4c <__sfp+0x60>
 8006a6e:	bf00      	nop
 8006a70:	080073c8 	.word	0x080073c8
 8006a74:	ffff0001 	.word	0xffff0001

08006a78 <_fwalk_reent>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	4688      	mov	r8, r1
 8006a80:	2700      	movs	r7, #0
 8006a82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a8e:	d505      	bpl.n	8006a9c <_fwalk_reent+0x24>
 8006a90:	6824      	ldr	r4, [r4, #0]
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d1f7      	bne.n	8006a86 <_fwalk_reent+0xe>
 8006a96:	4638      	mov	r0, r7
 8006a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9c:	89ab      	ldrh	r3, [r5, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d907      	bls.n	8006ab2 <_fwalk_reent+0x3a>
 8006aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	d003      	beq.n	8006ab2 <_fwalk_reent+0x3a>
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4630      	mov	r0, r6
 8006aae:	47c0      	blx	r8
 8006ab0:	4307      	orrs	r7, r0
 8006ab2:	3568      	adds	r5, #104	; 0x68
 8006ab4:	e7e9      	b.n	8006a8a <_fwalk_reent+0x12>

08006ab6 <__retarget_lock_init_recursive>:
 8006ab6:	4770      	bx	lr

08006ab8 <__retarget_lock_acquire_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_release_recursive>:
 8006aba:	4770      	bx	lr

08006abc <__swhatbuf_r>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	460e      	mov	r6, r1
 8006ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	461d      	mov	r5, r3
 8006aca:	b096      	sub	sp, #88	; 0x58
 8006acc:	da08      	bge.n	8006ae0 <__swhatbuf_r+0x24>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	061a      	lsls	r2, r3, #24
 8006ad8:	d410      	bmi.n	8006afc <__swhatbuf_r+0x40>
 8006ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ade:	e00e      	b.n	8006afe <__swhatbuf_r+0x42>
 8006ae0:	466a      	mov	r2, sp
 8006ae2:	f000 f8fb 	bl	8006cdc <_fstat_r>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dbf1      	blt.n	8006ace <__swhatbuf_r+0x12>
 8006aea:	9a01      	ldr	r2, [sp, #4]
 8006aec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006af0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006af4:	425a      	negs	r2, r3
 8006af6:	415a      	adcs	r2, r3
 8006af8:	602a      	str	r2, [r5, #0]
 8006afa:	e7ee      	b.n	8006ada <__swhatbuf_r+0x1e>
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	2000      	movs	r0, #0
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	b016      	add	sp, #88	; 0x58
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b08 <__smakebuf_r>:
 8006b08:	898b      	ldrh	r3, [r1, #12]
 8006b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b0c:	079d      	lsls	r5, r3, #30
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	d507      	bpl.n	8006b24 <__smakebuf_r+0x1c>
 8006b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	6163      	str	r3, [r4, #20]
 8006b20:	b002      	add	sp, #8
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	466a      	mov	r2, sp
 8006b26:	ab01      	add	r3, sp, #4
 8006b28:	f7ff ffc8 	bl	8006abc <__swhatbuf_r>
 8006b2c:	9900      	ldr	r1, [sp, #0]
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff fb0d 	bl	8006150 <_malloc_r>
 8006b36:	b948      	cbnz	r0, 8006b4c <__smakebuf_r+0x44>
 8006b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3c:	059a      	lsls	r2, r3, #22
 8006b3e:	d4ef      	bmi.n	8006b20 <__smakebuf_r+0x18>
 8006b40:	f023 0303 	bic.w	r3, r3, #3
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	e7e3      	b.n	8006b14 <__smakebuf_r+0xc>
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <__smakebuf_r+0x7c>)
 8006b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	6020      	str	r0, [r4, #0]
 8006b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	6120      	str	r0, [r4, #16]
 8006b5e:	6163      	str	r3, [r4, #20]
 8006b60:	9b01      	ldr	r3, [sp, #4]
 8006b62:	b15b      	cbz	r3, 8006b7c <__smakebuf_r+0x74>
 8006b64:	4630      	mov	r0, r6
 8006b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b6a:	f000 f8c9 	bl	8006d00 <_isatty_r>
 8006b6e:	b128      	cbz	r0, 8006b7c <__smakebuf_r+0x74>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	89a0      	ldrh	r0, [r4, #12]
 8006b7e:	4305      	orrs	r5, r0
 8006b80:	81a5      	strh	r5, [r4, #12]
 8006b82:	e7cd      	b.n	8006b20 <__smakebuf_r+0x18>
 8006b84:	08006915 	.word	0x08006915

08006b88 <_raise_r>:
 8006b88:	291f      	cmp	r1, #31
 8006b8a:	b538      	push	{r3, r4, r5, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	d904      	bls.n	8006b9c <_raise_r+0x14>
 8006b92:	2316      	movs	r3, #22
 8006b94:	6003      	str	r3, [r0, #0]
 8006b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b9e:	b112      	cbz	r2, 8006ba6 <_raise_r+0x1e>
 8006ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ba4:	b94b      	cbnz	r3, 8006bba <_raise_r+0x32>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f830 	bl	8006c0c <_getpid_r>
 8006bac:	462a      	mov	r2, r5
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb6:	f000 b817 	b.w	8006be8 <_kill_r>
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d00a      	beq.n	8006bd4 <_raise_r+0x4c>
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	d103      	bne.n	8006bca <_raise_r+0x42>
 8006bc2:	2316      	movs	r3, #22
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	e7e7      	b.n	8006b9a <_raise_r+0x12>
 8006bca:	2400      	movs	r4, #0
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bd2:	4798      	blx	r3
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e7e0      	b.n	8006b9a <_raise_r+0x12>

08006bd8 <raise>:
 8006bd8:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <raise+0xc>)
 8006bda:	4601      	mov	r1, r0
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	f7ff bfd3 	b.w	8006b88 <_raise_r>
 8006be2:	bf00      	nop
 8006be4:	2000000c 	.word	0x2000000c

08006be8 <_kill_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	2300      	movs	r3, #0
 8006bec:	4d06      	ldr	r5, [pc, #24]	; (8006c08 <_kill_r+0x20>)
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	602b      	str	r3, [r5, #0]
 8006bf6:	f7fb f90e 	bl	8001e16 <_kill>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	d102      	bne.n	8006c04 <_kill_r+0x1c>
 8006bfe:	682b      	ldr	r3, [r5, #0]
 8006c00:	b103      	cbz	r3, 8006c04 <_kill_r+0x1c>
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	bd38      	pop	{r3, r4, r5, pc}
 8006c06:	bf00      	nop
 8006c08:	20000390 	.word	0x20000390

08006c0c <_getpid_r>:
 8006c0c:	f7fb b8fc 	b.w	8001e08 <_getpid>

08006c10 <__sread>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	460c      	mov	r4, r1
 8006c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c18:	f000 f894 	bl	8006d44 <_read_r>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	bfab      	itete	ge
 8006c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c22:	89a3      	ldrhlt	r3, [r4, #12]
 8006c24:	181b      	addge	r3, r3, r0
 8006c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c2a:	bfac      	ite	ge
 8006c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c2e:	81a3      	strhlt	r3, [r4, #12]
 8006c30:	bd10      	pop	{r4, pc}

08006c32 <__swrite>:
 8006c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c36:	461f      	mov	r7, r3
 8006c38:	898b      	ldrh	r3, [r1, #12]
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	05db      	lsls	r3, r3, #23
 8006c3e:	460c      	mov	r4, r1
 8006c40:	4616      	mov	r6, r2
 8006c42:	d505      	bpl.n	8006c50 <__swrite+0x1e>
 8006c44:	2302      	movs	r3, #2
 8006c46:	2200      	movs	r2, #0
 8006c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4c:	f000 f868 	bl	8006d20 <_lseek_r>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	4632      	mov	r2, r6
 8006c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c58:	81a3      	strh	r3, [r4, #12]
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c66:	f000 b817 	b.w	8006c98 <_write_r>

08006c6a <__sseek>:
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c72:	f000 f855 	bl	8006d20 <_lseek_r>
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	bf15      	itete	ne
 8006c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c86:	81a3      	strheq	r3, [r4, #12]
 8006c88:	bf18      	it	ne
 8006c8a:	81a3      	strhne	r3, [r4, #12]
 8006c8c:	bd10      	pop	{r4, pc}

08006c8e <__sclose>:
 8006c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c92:	f000 b813 	b.w	8006cbc <_close_r>
	...

08006c98 <_write_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4d05      	ldr	r5, [pc, #20]	; (8006cb8 <_write_r+0x20>)
 8006ca4:	602a      	str	r2, [r5, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f7fb f8ec 	bl	8001e84 <_write>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_write_r+0x1e>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_write_r+0x1e>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	20000390 	.word	0x20000390

08006cbc <_close_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4d05      	ldr	r5, [pc, #20]	; (8006cd8 <_close_r+0x1c>)
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	602b      	str	r3, [r5, #0]
 8006cc8:	f7fb f8f8 	bl	8001ebc <_close>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_close_r+0x1a>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_close_r+0x1a>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20000390 	.word	0x20000390

08006cdc <_fstat_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	2300      	movs	r3, #0
 8006ce0:	4d06      	ldr	r5, [pc, #24]	; (8006cfc <_fstat_r+0x20>)
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	f7fb f8f2 	bl	8001ed2 <_fstat>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d102      	bne.n	8006cf8 <_fstat_r+0x1c>
 8006cf2:	682b      	ldr	r3, [r5, #0]
 8006cf4:	b103      	cbz	r3, 8006cf8 <_fstat_r+0x1c>
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	bd38      	pop	{r3, r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000390 	.word	0x20000390

08006d00 <_isatty_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	2300      	movs	r3, #0
 8006d04:	4d05      	ldr	r5, [pc, #20]	; (8006d1c <_isatty_r+0x1c>)
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	f7fb f8f0 	bl	8001ef0 <_isatty>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_isatty_r+0x1a>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_isatty_r+0x1a>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	20000390 	.word	0x20000390

08006d20 <_lseek_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4d05      	ldr	r5, [pc, #20]	; (8006d40 <_lseek_r+0x20>)
 8006d2c:	602a      	str	r2, [r5, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f7fb f8e8 	bl	8001f04 <_lseek>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_lseek_r+0x1e>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_lseek_r+0x1e>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	20000390 	.word	0x20000390

08006d44 <_read_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4d05      	ldr	r5, [pc, #20]	; (8006d64 <_read_r+0x20>)
 8006d50:	602a      	str	r2, [r5, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	f7fb f879 	bl	8001e4a <_read>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_read_r+0x1e>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_read_r+0x1e>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	20000390 	.word	0x20000390

08006d68 <_init>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

08006d74 <_fini>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr
